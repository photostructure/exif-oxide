{
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(cargo:*)",
      "Bash(./exiftool/exiftool -Make -Model exiftool/t/images/ExifTool.jpg)",
      "Bash(./exiftool/exiftool -s -Make -Model -Software exiftool/t/images/ExifTool.jpg)",
      "Bash(./exiftool/exiftool -struct -json exiftool/t/images/ExifTool.jpg)",
      "Bash(find:*)",
      "Bash(CARGO_BUILD_SCRIPT_EMIT=rerun-if-changed cargo build --verbose 2 >& 1)",
      "Bash(rustc:*)",
      "Bash(./test_parser)",
      "Bash(mkdir:*)",
      "Bash(./exiftool/exiftool -Canon -s t/images/Canon1DmkIII.jpg)",
      "Bash(./exiftool/exiftool -Canon -s exiftool/t/images/Canon1DmkIII.jpg)",
      "Bash(./exiftool/exiftool -v2 exiftool/t/images/Canon1DmkIII.jpg)",
      "Bash(./exiftool/exiftool -v:*)",
      "Bash(exiftool:*)",
      "Bash(touch:*)",
      "Bash(sed:*)",
      "Bash(RUST_BACKTRACE=1 cargo test test_extract_thumbnail_from_canon_jpg --test spike3 -- --nocapture)",
      "Bash(./exiftool/exiftool -s -ThumbnailOffset -ThumbnailLength test-images/canon/Canon_T3i.JPG)",
      "Bash(./exiftool/exiftool -s -n -ThumbnailOffset -ThumbnailLength test-images/canon/Canon_T3i.JPG)",
      "Bash(dd:*)",
      "Bash(../exiftool/exiftool -h)",
      "Bash(../exiftool/exiftool --help)",
      "Bash(../exiftool/exiftool -ver)",
      "Bash(../exiftool/exiftool -b -ThumbnailImage test-images/canon/Canon_T3i.JPG)",
      "Bash(../exiftool/exiftool -ThumbnailImage test-images/canon/Canon_T3i.JPG)",
      "Bash(RUST_LOG=debug cargo run --bin exif-oxide -- exiftool/t/images/Canon1DmkIII.jpg 2 >& 1)",
      "Bash(xxd:*)",
      "Bash(mv:*)",
      "WebFetch(domain:docs.rs)",
      "Bash(time:*)",
      "Bash(target/release/exif-oxide test:*)",
      "Bash(target/debug/exif-oxide:*)",
      "WebFetch(domain:exiftool.org)",
      "Bash(make:*)",
      "Bash(npm install:*)",
      "Bash(npm run build:*)",
      "Bash(node:*)",
      "Bash(rg:*)",
      "Bash(awk:*)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:www.ftyps.com)",
      "Bash(RUST_BACKTRACE=1 cargo test datetime::parser::tests::test_loose_format_parsing -- --nocapture)",
      "Bash(./exiftool/exiftool -Make exiftool/t/images/ExifTool.tif)",
      "Bash(./exiftool/exiftool -json -Orientation exiftool/t/images/Canon.jpg)",
      "Bash(./exiftool/exiftool -json -n -Orientation exiftool/t/images/Canon.jpg)",
      "Bash(./exiftool/exiftool -json -g exiftool/t/images/Canon.jpg)",
      "Bash(./exiftool/exiftool -json -g -n exiftool/t/images/Canon.jpg)",
      "Bash(./third-party/exiftool/exiftool -j test-images/nikon/nikon_z8_73.jpg)",
      "Bash(third-party/exiftool/exiftool:*)",
      "Bash(true)",
      "Bash(python3:*)",
      "Bash(echo:*)",
      "Bash(./third-party/exiftool/exiftool -Apple:all test-images/apple/IMG_3755.JPG)",
      "Bash(./third-party/exiftool/exiftool -v3 -Apple:all test-images/apple/IMG_3755.JPG)",
      "Bash(RUST_BACKTRACE=1 cargo test core::ifd::tests::test_parse_u16_array --lib -- --nocapture)",
      "Bash(./third-party/exiftool/exiftool -v -G1 test-images/gopro/GoPro.jpg)",
      "Bash(./target/debug/exiftool_sync:*)",
      "Bash(for file in src/tables/*.rs)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(done)",
      "Bash(./exiftool -Make -Model t/images/Ricoh.jpg t/images/Ricoh2.jpg)",
      "Bash(./exiftool -Make -Model t/images/Pentax.jpg)",
      "Bash(/home/mrm/src/exif-oxide/third-party/exiftool/exiftool -Make -Model /home/mrm/src/exif-oxide/third-party/exiftool/t/images/Ricoh.jpg)",
      "Bash(/home/mrm/src/exif-oxide/third-party/exiftool/exiftool -Make -Model /home/mrm/src/exif-oxide/third-party/exiftool/t/images/Ricoh2.jpg)",
      "Bash(/home/mrm/src/exif-oxide/third-party/exiftool/exiftool -Make -Model /home/mrm/src/exif-oxide/third-party/exiftool/t/images/Pentax.jpg)",
      "Bash(for:*)",
      "Bash(do echo \"=== $file Auto patterns ===\")",
      "Bash(do echo \"=== $file Quality/Standard patterns ===\")",
      "Bash(./test_gpmf_debug)",
      "Bash(./third-party/exiftool/exiftool:*)",
      "Bash(cp:*)",
      "Bash(fgrep:*)",
      "Bash(./extract_exiftool_table.pl:*)",
      "Bash(chmod:*)",
      "Bash(grep -B2 -A2 \"canonLensTypes\" third-party/exiftool/lib/Image/ExifTool/Canon.pm)",
      "Bash(./extract_printconv.pl:*)",
      "Bash(perl:*)",
      "Bash(/dev/null)",
      "Bash(./test_tag_metadata)",
      "Bash(cat:*)",
      "Bash(./exiftool/exiftool -LensType -LensModel -RFLensType -json \"/home/mrm/src/exif-oxide/test-images/canon/Canon_T3i.JPG\")",
      "Bash(./exiftool/exiftool -LensType -LensModel -RFLensType -json \"/home/mrm/src/exif-oxide/test-images/canon/canon_eos_r50v_01.jpg\")",
      "Bash(./exiftool/exiftool -LensType -LensModel -RFLensType -json \"/home/mrm/src/exif-oxide/test-images/canon/canon_eos_r5_mark_ii_10.jpg\")",
      "Bash(./target/debug/exif-oxide:*)",
      "Bash(./test_or_pattern_extractor)",
      "Bash(./target/release/exif-oxide:*)",
      "Bash(RUST_BACKTRACE=1 cargo test formats::tests::test_extract_metadata)",
      "Bash(RUST_BACKTRACE=1 cargo test test_cli_with_test_image)",
      "WebFetch(domain:insta.rs)",
      "WebFetch(domain:rust-cli.github.io)",
      "WebFetch(domain:doc.rust-lang.org)",
      "Bash(printf:*)",
      "Bash(RUST_LOG=debug cargo run -- third-party/exiftool/t/images/GPS.jpg)",
      "Bash(RUST_LOG=debug ./target/debug/exif-oxide third-party/exiftool/t/images/GPS.jpg)",
      "Bash(RUST_LOG=trace ./target/debug/exif-oxide third-party/exiftool/t/images/GPS.jpg)",
      "Bash(RUST_LOG=trace cargo run -- third-party/exiftool/t/images/GPS.jpg)",
      "Bash(jq:*)",
      "Bash(RUST_LOG=trace cargo run -- test-images/canon/Canon_T3i.JPG)",
      "Bash(RUST_LOG=trace cargo run -- test-images/Canon_T3i.jpg)",
      "Bash(RUST_LOG=debug cargo run --release -- test-images/Canon_T3i.jpg)",
      "Bash(RUST_LOG=debug cargo run --release -- test-images/canon/Canon_T3i.JPG)",
      "WebFetch(domain:www.conventionalcommits.org)",
      "Bash(./exif-oxide:*)",
      "Bash(RUST_LOG=debug cargo run -- test-images/gopro/GoPro.jpg)",
      "Bash(RUST_LOG=debug ./target/release/exif-oxide test-images/canon/Canon_T3i.JPG)",
      "Bash(bash:*)",
      "Bash(grep -n \"get_all_tags\" /home/mrm/src/exif-oxide/src/exif.rs)",
      "Bash(RUST_BACKTRACE=1 cargo test test_find_canon_camera_settings_tag -- --nocapture)",
      "Bash(RUST_LOG=debug cargo run -- test-images/canon/Canon_T3i.JPG)",
      "Bash(RUST_BACKTRACE=1 cargo test test_exiftool_compatibility)",
      "Bash(RUST_BACKTRACE=1 cargo test test_process_canon_makernotes_integration)",
      "Bash(RUST_BACKTRACE=1 cargo run -p exif-oxide -- test-images/canon/Canon_T3i.JPG)",
      "Bash(RUST_LOG=debug cargo run -p exif-oxide -- test-images/canon/Canon_T3i.JPG)",
      "Bash(RUST_LOG=trace cargo test composite_tag_tests --lib -- --nocapture)",
      "Bash(RUST_LOG=trace cargo test composite_tag -- --nocapture)",
      "Bash(RUST_LOG=trace cargo run --bin exif-oxide test-images/canon/Canon_T3i.JPG)",
      "Bash(./test_focal_length)",
      "Bash(./exiftool -json t/images/Canon.jpg)",
      "Bash(./exiftool t/images/Canon.jpg)",
      "Bash(RUST_LOG=debug cargo run -- test-images/apple/IMG_3755.JPG)",
      "Bash(RUST_LOG=trace cargo run -- test-images/apple/IMG_3755.JPG)",
      "Bash(/tmp/test_tagvalue:*)",
      "Bash(RUST_BACKTRACE=1 cargo test test_canon_t3i_compatibility -- --nocapture)",
      "Bash(./debug_extract)",
      "Bash(./debug_conversions)",
      "Bash(RUST_BACKTRACE=1 cargo test test_extract_binary_tags_with_print_conv)",
      "Bash(diff:*)",
      "Bash(RUST_BACKTRACE=1 cargo test --test process_binary_data_tests test_extract_binary_tags_with_print_conv -- --nocapture)",
      "Bash(RUST_LOG=debug cargo run -- test-images/canon/canon_eos_r50v_01.jpg)",
      "Bash(./exiftool ../../test-images/apple/IMG_3755.JPG)",
      "Bash(RUST_LOG=trace cargo run -- test-images/canon/Canon-5D.jpg)",
      "Bash(./exiftool -j -struct -G -GPSAltitude# /home/mrm/src/exif-oxide/test-images/apple/IMG_3755.JPG)",
      "Bash(RUST_LOG=debug cargo run -- test-images/canon/Canon-5D.jpg)",
      "Bash(RUST_LOG=debug cargo run --bin exif-oxide test-images/canon/Canon_T3i.JPG)",
      "Bash(RUST_LOG=debug cargo test test_canon_af_info_processing -p exif-oxide -- --nocapture)",
      "Bash(RUST_BACKTRACE=1 cargo test implementations::nikon::tests::offset_scheme_tests::test_format3_tiff_header_space_requirement)",
      "Bash(RUST_BACKTRACE=1 cargo test implementations::nikon::offset_schemes::tests::test_format1_insufficient_ifd_space -- --exact)",
      "Bash(do echo \"=== $file.pm ===\")",
      "Bash(RUST_LOG=debug cargo run -- test-images/nikon/nikon_z8_73.jpg)",
      "Bash(RUST_LOG=trace cargo run -- test-images/nikon/nikon_z8_73.jpg)",
      "Bash(RUST_LOG=debug cargo run --bin exif-oxide -- \"third-party/exiftool/t/images/MWG.jpg\")",
      "Bash(RUST_LOG=trace cargo run --bin exif-oxide -- \"third-party/exiftool/t/images/MWG.jpg\")",
      "Bash(./test_regex)",
      "Bash(RUST_BACKTRACE=1 cargo test file_detection::mimetypes_validation::test_all_mimetypes_formats_detectable -- --nocapture)",
      "Bash(./test_heic_detection:*)",
      "Bash(./test_file_detection)",
      "Bash(git add:*)",
      "Bash(./test_debug)",
      "Bash(./target/release/generate_rust:*)",
      "Bash(RUST_LOG=debug cargo run --release -- --tag-data generated/tag_tables.json -o ../src/generated)",
      "Bash(RUST_LOG=trace cargo test test_exposuretime_printconv_json_formatting --test exposuretime_printconv_test -- --nocapture)",
      "Bash(codegen/target/release/generate_rust:*)",
      "Bash(RUST_BACKTRACE=1 cargo test test_scan_jpeg_segments_with_app1_xmp --lib -- --nocapture)",
      "Bash(RUST_LOG=debug cargo run --release -- third-party/exiftool/t/images/XMP.jpg)",
      "Bash(RUST_LOG=debug cargo run --release -- third-party/exiftool/t/images/ExtendedXMP.jpg)",
      "Bash(od:*)",
      "Bash(./debug_heic)",
      "Bash(./test_extended_xmp)",
      "Bash(RUST_BACKTRACE=1 cargo test --test raw_integration_tests test_invalid_raw_file -- --nocapture)",
      "Bash(RUST_LOG=debug cargo test --test raw_integration_tests test_kyocera_raw_detection_and_processing -- --nocapture)",
      "Bash(RUST_BACKTRACE=1 make generate-rust)",
      "Bash(RUST_BACKTRACE=1 target/release/generate_rust:*)",
      "Bash(strace:*)",
      "Bash(RUST_BACKTRACE=1 cargo run --release)"
    ],
    "deny": []
  }
}