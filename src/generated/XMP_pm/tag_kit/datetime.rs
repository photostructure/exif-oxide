//! Tag kits for datetime category from XMP.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

/// Get tag definitions for datetime category
pub fn get_datetime_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (
            0,
            TagKitDef {
                id: 0,
                name: "TagDateTimeDigitized",
                format: "date",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            0,
            TagKitDef {
                id: 0,
                name: "TagDateTimeOriginal",
                format: "date",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            0,
            TagKitDef {
                id: 0,
                name: "TagExposureTime",
                format: "rational",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Expression(
                    "Image::ExifTool::Exif::PrintExposureTime($val)",
                ),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            0,
            TagKitDef {
                id: 0,
                name: "TagCompositeImageExposureTimes",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            0,
            TagKitDef {
                id: 0,
                name: "TagCreationDate",
                format: "date",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            0,
            TagKitDef {
                id: 0,
                name: "TagModDate",
                format: "date",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            0,
            TagKitDef {
                id: 0,
                name: "TagDateCreated",
                format: "date",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            0,
            TagKitDef {
                id: 0,
                name: "TaglastModifyDate",
                format: "date",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            0,
            TagKitDef {
                id: 0,
                name: "TagmodifyDate",
                format: "date",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            0,
            TagKitDef {
                id: 0,
                name: "TagDateTime",
                format: "date",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            0,
            TagKitDef {
                id: 0,
                name: "TagCreateDate",
                format: "date",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            0,
            TagKitDef {
                id: 0,
                name: "TagMetadataDate",
                format: "date",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            0,
            TagKitDef {
                id: 0,
                name: "TagModifyDate",
                format: "date",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
                value_conv: None,
                subdirectory: None,
            },
        ),
    ]
}
