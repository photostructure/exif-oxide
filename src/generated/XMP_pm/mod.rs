//! Generated lookup tables from ExifTool XMP.pm
//!
//! This file is automatically generated.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

use std::collections::{HashMap};
use std::sync::LazyLock;

// Simple lookup tables
// XMP namespace prefix to URI mappings
// Source: ExifTool XMP.pm %nsURI (96 entries)
pub static NAMESPACE_URIS: LazyLock<HashMap<&'static str, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("DICOM", "http://ns.adobe.com/DICOM/");
    map.insert("GAudio", "http://ns.google.com/photos/1.0/audio/");
    map.insert("GCamera", "http://ns.google.com/photos/1.0/camera/");
    map.insert("GContainer", "http://ns.google.com/photos/1.0/container/");
    map.insert("GCreations", "http://ns.google.com/photos/1.0/creations/");
    map.insert("GDepth", "http://ns.google.com/photos/1.0/depthmap/");
    map.insert("GFocus", "http://ns.google.com/photos/1.0/focus/");
    map.insert("GImage", "http://ns.google.com/photos/1.0/image/");
    map.insert("GPano", "http://ns.google.com/photos/1.0/panorama/");
    map.insert("GSpherical", "http://ns.google.com/videos/1.0/spherical/");
    map.insert("GettyImagesGIFT", "http://xmp.gettyimages.com/gift/1.0/");
    map.insert("HDRGainMap", "http://ns.apple.com/HDRGainMap/1.0/");
    map.insert("Iptc4xmpCore", "http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/");
    map.insert("Iptc4xmpExt", "http://iptc.org/std/Iptc4xmpExt/2008-02-29/");
    map.insert("LImage", "http://ns.leiainc.com/photos/1.0/image/");
    map.insert("MP", "http://ns.microsoft.com/photo/1.2/");
    map.insert("MP1", "http://ns.microsoft.com/photo/1.1");
    map.insert("MPRI", "http://ns.microsoft.com/photo/1.2/t/RegionInfo#");
    map.insert("MPReg", "http://ns.microsoft.com/photo/1.2/t/Region#");
    map.insert("MicrosoftPhoto", "http://ns.microsoft.com/photo/1.0");
    map.insert("Profile", "http://ns.google.com/photos/dd/1.0/profile/");
    map.insert("aas", "http://ns.apple.com/adjustment-settings/1.0/");
    map.insert("acdsee", "http://ns.acdsee.com/iptc/1.0/");
    map.insert("acdsee-rs", "http://ns.acdsee.com/regions/");
    map.insert("album", "http://ns.adobe.com/album/1.0/");
    map.insert("apdi", "http://ns.apple.com/pixeldatainfo/1.0/");
    map.insert("apple-fi", "http://ns.apple.com/faceinfo/1.0/");
    map.insert("ast", "http://ns.nikon.com/asteroid/1.0/");
    map.insert("aux", "http://ns.adobe.com/exif/1.0/aux/");
    map.insert("cc", "http://creativecommons.org/ns#");
    map.insert("cell", "http://developer.sonyericsson.com/cell/1.0/");
    map.insert("crd", "http://ns.adobe.com/camera-raw-defaults/1.0/");
    map.insert("creatorAtom", "http://ns.adobe.com/creatorAtom/1.0/");
    map.insert("crlcp", "http://ns.adobe.com/camera-raw-embedded-lens-profile/1.0/");
    map.insert("crs", "http://ns.adobe.com/camera-raw-settings/1.0/");
    map.insert("crss", "http://ns.adobe.com/camera-raw-saved-settings/1.0/");
    map.insert("dc", "http://purl.org/dc/elements/1.1/");
    map.insert("dex", "http://ns.optimasc.com/dex/1.0/");
    map.insert("digiKam", "http://www.digikam.org/ns/1.0/");
    map.insert("drone-dji", "http://www.dji.com/drone-dji/1.0/");
    map.insert("dwc", "http://rs.tdwg.org/dwc/index.htm");
    map.insert("et", "http://ns.exiftool.org/1.0/");
    map.insert("exif", "http://ns.adobe.com/exif/1.0/");
    map.insert("exifEX", "http://cipa.jp/exif/1.0/");
    map.insert("expressionmedia", "http://ns.microsoft.com/expressionmedia/1.0/");
    map.insert("extensis", "http://ns.extensis.com/extensis/1.0/");
    map.insert("fpv", "http://ns.fastpictureviewer.com/fpv/1.0/");
    map.insert("hdr_metadata", "http://ns.adobe.com/hdr-metadata/1.0/");
    map.insert("hdrgm", "http://ns.adobe.com/hdr-gain-map/1.0/");
    map.insert("iX", "http://ns.adobe.com/iX/1.0/");
    map.insert("ics", "http://ns.idimager.com/ics/1.0/");
    map.insert("lr", "http://ns.adobe.com/lightroom/1.0/");
    map.insert("mediapro", "http://ns.iview-multimedia.com/mediapro/1.0/");
    map.insert("mwg-coll", "http://www.metadataworkinggroup.com/schemas/collections/");
    map.insert("mwg-kw", "http://www.metadataworkinggroup.com/schemas/keywords/");
    map.insert("mwg-rs", "http://www.metadataworkinggroup.com/schemas/regions/");
    map.insert("nine", "http://ns.nikon.com/nine/1.0/");
    map.insert("panorama", "http://ns.adobe.com/photoshop/1.0/panorama-profile");
    map.insert("pdf", "http://ns.adobe.com/pdf/1.3/");
    map.insert("pdfx", "http://ns.adobe.com/pdfx/1.3/");
    map.insert("photoshop", "http://ns.adobe.com/photoshop/1.0/");
    map.insert("plus", "http://ns.useplus.org/ldf/xmp/1.0/");
    map.insert("pmi", "http://prismstandard.org/namespaces/pmi/2.2/");
    map.insert("prism", "http://prismstandard.org/namespaces/basic/2.0/");
    map.insert("prl", "http://prismstandard.org/namespaces/prl/2.1/");
    map.insert("prm", "http://prismstandard.org/namespaces/prm/3.0/");
    map.insert("pur", "http://prismstandard.org/namespaces/prismusagerights/2.1/");
    map.insert("rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#");
    map.insert("rdfs", "http://www.w3.org/2000/01/rdf-schema#");
    map.insert("sdc", "http://ns.nikon.com/sdc/1.0/");
    map.insert("seal", "http://ns.seal/2024/1.0/");
    map.insert("stArea", "http://ns.adobe.com/xmp/sType/Area#");
    map.insert("stCamera", "http://ns.adobe.com/photoshop/1.0/camera-profile");
    map.insert("stDim", "http://ns.adobe.com/xap/1.0/sType/Dimensions#");
    map.insert("stEvt", "http://ns.adobe.com/xap/1.0/sType/ResourceEvent#");
    map.insert("stFnt", "http://ns.adobe.com/xap/1.0/sType/Font#");
    map.insert("stJob", "http://ns.adobe.com/xap/1.0/sType/Job#");
    map.insert("stMfs", "http://ns.adobe.com/xap/1.0/sType/ManifestItem#");
    map.insert("stRef", "http://ns.adobe.com/xap/1.0/sType/ResourceRef#");
    map.insert("stVer", "http://ns.adobe.com/xap/1.0/sType/Version#");
    map.insert("svg", "http://www.w3.org/2000/svg");
    map.insert("swf", "http://ns.adobe.com/swf/1.0/");
    map.insert("tiff", "http://ns.adobe.com/tiff/1.0/");
    map.insert("x", "adobe:ns:meta/");
    map.insert("xmp", "http://ns.adobe.com/xap/1.0/");
    map.insert("xmpBJ", "http://ns.adobe.com/xap/1.0/bj/");
    map.insert("xmpDM", "http://ns.adobe.com/xmp/1.0/DynamicMedia/");
    map.insert("xmpDSA", "http://leica-camera.com/digital-shift-assistant/1.0/");
    map.insert("xmpG", "http://ns.adobe.com/xap/1.0/g/");
    map.insert("xmpGImg", "http://ns.adobe.com/xap/1.0/g/img/");
    map.insert("xmpMM", "http://ns.adobe.com/xap/1.0/mm/");
    map.insert("xmpNote", "http://ns.adobe.com/xmp/note/");
    map.insert("xmpPLUS", "http://ns.adobe.com/xap/1.0/PLUS/");
    map.insert("xmpRights", "http://ns.adobe.com/xap/1.0/rights/");
    map.insert("xmpTPg", "http://ns.adobe.com/xap/1.0/t/pg/");
    map.insert("xmpidq", "http://ns.adobe.com/xmp/Identifier/qual/1.0/");
    map
});

/// Look up NAMESPACE_URIS value by key
pub fn lookup_namespace_uris(key: &str) -> Option<&'static str> {
    NAMESPACE_URIS.get(&key).copied()
}

// ExifTool XMP family 1 group name translations
// Source: ExifTool XMP.pm %xmpNS (5 entries)
pub static XMP_GROUP_NAMES: LazyLock<HashMap<&'static str, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("getty", "GettyImagesGIFT");
    map.insert("iptcCore", "Iptc4xmpCore");
    map.insert("iptcExt", "Iptc4xmpExt");
    map.insert("microsoft", "MicrosoftPhoto");
    map.insert("photomech", "photomechanic");
    map
});

/// Look up XMP_GROUP_NAMES value by key
pub fn lookup_xmp_group_names(key: &str) -> Option<&'static str> {
    XMP_GROUP_NAMES.get(&key).copied()
}

// XML character to entity name mappings
// Source: ExifTool XMP.pm %charName (5 entries)
pub static XML_CHAR_NAMES: LazyLock<HashMap<&'static str, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("\"", "quot");
    map.insert("&", "amp");
    map.insert("'", "#39");
    map.insert("<", "lt");
    map.insert(">", "gt");
    map
});

/// Look up XML_CHAR_NAMES value by key
pub fn lookup_xml_char_names(key: &str) -> Option<&'static str> {
    XML_CHAR_NAMES.get(&key).copied()
}

// XML entity name to character code mappings
// Source: ExifTool XMP.pm %charNum (5 entries)
pub static XML_CHAR_NUMS: LazyLock<HashMap<&'static str, u32>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("amp", 38);
    map.insert("apos", 39);
    map.insert("gt", 62);
    map.insert("lt", 60);
    map.insert("quot", 34);
    map
});

/// Look up XML_CHAR_NUMS value by key
pub fn lookup_xml_char_nums(key: &str) -> Option<u32> {
    XML_CHAR_NUMS.get(&key).copied()
}

// Standard XMP namespace prefix translations
// Source: ExifTool XMP.pm %stdXlatNS (7 entries)
pub static STD_XLAT_NS: LazyLock<HashMap<&'static str, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("GettyImagesGIFT", "getty");
    map.insert("Iptc4xmpCore", "iptcCore");
    map.insert("Iptc4xmpExt", "iptcExt");
    map.insert("MicrosoftPhoto", "microsoft");
    map.insert("hdr_metadata", "hdr");
    map.insert("photomechanic", "photomech");
    map.insert("prismusagerights", "pur");
    map
});

/// Look up STD_XLAT_NS value by key
pub fn lookup_std_xlat_ns(key: &str) -> Option<&'static str> {
    STD_XLAT_NS.get(&key).copied()
}

