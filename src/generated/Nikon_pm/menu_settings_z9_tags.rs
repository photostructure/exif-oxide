//! Generated tag table definitions from Nikon::MenuSettingsZ9
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{
    exposuretime_print_conv, fnumber_print_conv, gpsaltitude_print_conv, lensinfo_print_conv,
    print_fraction,
};
use crate::implementations::value_conv::{
    exif_date_value_conv, gps_coordinate_value_conv, gpstimestamp_value_conv,
    reciprocal_10_value_conv, reference_long_string_value_conv,
    reference_very_long_string_value_conv,
};

/// Tag definitions for Nikon::MenuSettingsZ9 table
pub static NIKON_MENUSETTINGSZ9_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            140,
            TagInfo {
                name: "MultipleExposureMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            142,
            TagInfo {
                name: "MultiExposureShots",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            188,
            TagInfo {
                name: "Intervals",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            192,
            TagInfo {
                name: "ShotsPerInterval",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            232,
            TagInfo {
                name: "FocusShiftNumberShots",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            236,
            TagInfo {
                name: "FocusShiftStepWidth",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            240,
            TagInfo {
                name: "FocusShiftInterval",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val == 1? \"1 Second\" : sprintf(\"%.0f Seconds\",$val)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            244,
            TagInfo {
                name: "FocusShiftExposureLock",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            274,
            TagInfo {
                name: "PhotoShootingMenuBank",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            276,
            TagInfo {
                name: "ExtendedMenuBanks",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            308,
            TagInfo {
                name: "PhotoShootingMenuBankImageArea",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            322,
            TagInfo {
                name: "AutoISO",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            324,
            TagInfo {
                name: "ISOAutoHiLimit",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: Some(ValueConv::Expression("($val-104)/8".to_string())),
            },
        ),
        (
            326,
            TagInfo {
                name: "ISOAutoFlashLimit",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: Some(ValueConv::Expression("($val-104)/8".to_string())),
            },
        ),
        (
            334,
            TagInfo {
                name: "ISOAutoShutterTime",
                format: "int16s",
                print_conv: Some(PrintConv::Complex),
                value_conv: Some(ValueConv::Expression("$val / 8".to_string())),
            },
        ),
        (
            416,
            TagInfo {
                name: "MovieVignetteControl",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            418,
            TagInfo {
                name: "DiffractionCompensation",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            420,
            TagInfo {
                name: "FlickerReductionShooting",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            424,
            TagInfo {
                name: "FlashControlMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            426,
            TagInfo {
                name: "FlashMasterCompensation",
                format: "int8s",
                print_conv: Some(PrintConv::Expression(
                    "$val ? sprintf(\"%+.1f\",$val) : 0".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("$val/6".to_string())),
            },
        ),
        (
            430,
            TagInfo {
                name: "FlashGNDistance",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: Some(ValueConv::Expression("$val + 3".to_string())),
            },
        ),
        (
            434,
            TagInfo {
                name: "FlashOutput",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val>0.99 ? \"Full\" : sprintf(\"%.1f%%\",$val*100)".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("2 ** (-$val/3)".to_string())),
            },
        ),
        (
            444,
            TagInfo {
                name: "FlashRemoteControl",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            456,
            TagInfo {
                name: "FlashWirelessOption",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            528,
            TagInfo {
                name: "AFAreaMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            530,
            TagInfo {
                name: "VRMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            534,
            TagInfo {
                name: "BracketSet",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            536,
            TagInfo {
                name: "BracketProgram",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            538,
            TagInfo {
                name: "BracketIncrement",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            556,
            TagInfo {
                name: "SecondarySlotFunction",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            572,
            TagInfo {
                name: "DXCropAlert",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            574,
            TagInfo {
                name: "SubjectDetection",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            576,
            TagInfo {
                name: "DynamicAFAreaSize",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            604,
            TagInfo {
                name: "MovieImageArea",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            614,
            TagInfo {
                name: "MovieType",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            616,
            TagInfo {
                name: "MovieISOAutoHiLimit",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: Some(ValueConv::Expression("($val-104)/8".to_string())),
            },
        ),
        (
            618,
            TagInfo {
                name: "MovieISOAutoControlManualMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            620,
            TagInfo {
                name: "MovieISOAutoManualMode",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: Some(ValueConv::Expression("($val-104)/8".to_string())),
            },
        ),
        (
            696,
            TagInfo {
                name: "MovieActiveD-Lighting",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            698,
            TagInfo {
                name: "MovieHighISONoiseReduction",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            704,
            TagInfo {
                name: "MovieFlickerReduction",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            706,
            TagInfo {
                name: "MovieMeteringMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            708,
            TagInfo {
                name: "MovieFocusMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            710,
            TagInfo {
                name: "MovieAFAreaMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            712,
            TagInfo {
                name: "MovieVRMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            716,
            TagInfo {
                name: "MovieElectronicVR",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            718,
            TagInfo {
                name: "MovieSoundRecording",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            720,
            TagInfo {
                name: "MicrophoneSensitivity",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            722,
            TagInfo {
                name: "MicrophoneAttenuator",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            724,
            TagInfo {
                name: "MicrophoneFrequencyResponse",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            726,
            TagInfo {
                name: "WindNoiseReduction",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            748,
            TagInfo {
                name: "MovieToneMap",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            754,
            TagInfo {
                name: "MovieFrameSize",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            756,
            TagInfo {
                name: "MovieFrameRate",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            762,
            TagInfo {
                name: "MicrophoneJackPower",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            763,
            TagInfo {
                name: "MovieDXCropAlert",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            764,
            TagInfo {
                name: "MovieSubjectDetection",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            799,
            TagInfo {
                name: "CustomSettingsZ9",
                format: "undef[608]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            1426,
            TagInfo {
                name: "Language",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1428,
            TagInfo {
                name: "TimeZone",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1434,
            TagInfo {
                name: "MonitorBrightness",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Expression("$val - 5".to_string())),
            },
        ),
        (
            1456,
            TagInfo {
                name: "AFFineTune",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1552,
            TagInfo {
                name: "HDMIOutputResolution",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1565,
            TagInfo {
                name: "SetClockFromLocationData",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1572,
            TagInfo {
                name: "AirplaneMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1573,
            TagInfo {
                name: "EmptySlotRelease",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1608,
            TagInfo {
                name: "EnergySavingMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1632,
            TagInfo {
                name: "RecordLocationData",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1636,
            TagInfo {
                name: "USBPowerDelivery",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1645,
            TagInfo {
                name: "SensorShield",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = NIKON_MENUSETTINGSZ9_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = NIKON_MENUSETTINGSZ9_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
