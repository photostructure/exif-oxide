//! Generated tag table definitions from Nikon::MenuSettingsZ8v1
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

/// Tag definitions for Nikon::MenuSettingsZ8v1 table
pub static NIKON_MENUSETTINGSZ8V1_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "MenuSettingsZ8",
                format: "undef[943]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            943,
            TagInfo {
                name: "CustomSettingsZ8",
                format: "undef[730]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            1684,
            TagInfo {
                name: "TimeZone",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1690,
            TagInfo {
                name: "MonitorBrightness",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1698,
            TagInfo {
                name: "Language",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1712,
            TagInfo {
                name: "AFFineTune",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1716,
            TagInfo {
                name: "NonCPULens1FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1718,
            TagInfo {
                name: "NonCPULens2FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1720,
            TagInfo {
                name: "NonCPULens3FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1722,
            TagInfo {
                name: "NonCPULens4FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1724,
            TagInfo {
                name: "NonCPULens5FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1726,
            TagInfo {
                name: "NonCPULens6FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1728,
            TagInfo {
                name: "NonCPULens7FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1730,
            TagInfo {
                name: "NonCPULens8FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1732,
            TagInfo {
                name: "NonCPULens9FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1734,
            TagInfo {
                name: "NonCPULens10FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1736,
            TagInfo {
                name: "NonCPULens11FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1738,
            TagInfo {
                name: "NonCPULens12FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1740,
            TagInfo {
                name: "NonCPULens13FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1742,
            TagInfo {
                name: "NonCPULens14FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1744,
            TagInfo {
                name: "NonCPULens15FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1746,
            TagInfo {
                name: "NonCPULens16FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1748,
            TagInfo {
                name: "NonCPULens17FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1750,
            TagInfo {
                name: "NonCPULens18FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1752,
            TagInfo {
                name: "NonCPULens19FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1754,
            TagInfo {
                name: "NonCPULens20FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1fmm\",$val/10)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1756,
            TagInfo {
                name: "NonCPULens1MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1758,
            TagInfo {
                name: "NonCPULens2MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1760,
            TagInfo {
                name: "NonCPULens3MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1762,
            TagInfo {
                name: "NonCPULens4MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1764,
            TagInfo {
                name: "NonCPULens5MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1766,
            TagInfo {
                name: "NonCPULens6MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1768,
            TagInfo {
                name: "NonCPULens7MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1770,
            TagInfo {
                name: "NonCPULens8MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1772,
            TagInfo {
                name: "NonCPULens9MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1774,
            TagInfo {
                name: "NonCPULens10MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1776,
            TagInfo {
                name: "NonCPULens11MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1778,
            TagInfo {
                name: "NonCPULens12MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1780,
            TagInfo {
                name: "NonCPULens13MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1782,
            TagInfo {
                name: "NonCPULens14MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1784,
            TagInfo {
                name: "NonCPULens15MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1786,
            TagInfo {
                name: "NonCPULens16MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1788,
            TagInfo {
                name: "NonCPULens17MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1790,
            TagInfo {
                name: "NonCPULens18MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1792,
            TagInfo {
                name: "NonCPULens19MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1794,
            TagInfo {
                name: "NonCPULens20MaxAperture",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1808,
            TagInfo {
                name: "HDMIOutputResolution",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1826,
            TagInfo {
                name: "AirplaneMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1827,
            TagInfo {
                name: "EmptySlotRelease",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1862,
            TagInfo {
                name: "EnergySavingMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1890,
            TagInfo {
                name: "USBPowerDelivery",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            1899,
            TagInfo {
                name: "SensorShield",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = NIKON_MENUSETTINGSZ8V1_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = NIKON_MENUSETTINGSZ8V1_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
