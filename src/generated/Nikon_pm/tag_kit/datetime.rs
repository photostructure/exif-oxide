//! Tag kits for datetime category from Nikon.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_26: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "1 Sec");
    map.insert("1".to_string(), "3 Sec");
    map.insert("10".to_string(), "3 Min");
    map.insert("11".to_string(), "5 Min");
    map.insert("12".to_string(), "10 Min");
    map.insert("13".to_string(), "30 Min");
    map.insert("2".to_string(), "5 Sec");
    map.insert("4".to_string(), "30 Sec");
    map.insert("5".to_string(), "No Limit");
    map.insert("6".to_string(), "2 Sec");
    map.insert("7".to_string(), "10 Sec");
    map.insert("8".to_string(), "20 Sec");
    map.insert("9".to_string(), "1 Min");
    map
});

static PRINT_CONV_27: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No Wait");
    map.insert("1".to_string(), "10 Sec");
    map.insert("10".to_string(), "5 Sec");
    map.insert("11".to_string(), "20 Sec");
    map.insert("12".to_string(), "3 Min");
    map.insert("2".to_string(), "30 Sec");
    map.insert("3".to_string(), "1 Min");
    map.insert("4".to_string(), "5 Min");
    map.insert("5".to_string(), "10 Min");
    map.insert("6".to_string(), "30 Min");
    map.insert("7".to_string(), "1 Sec");
    map.insert("8".to_string(), "2 Sec");
    map.insert("9".to_string(), "3 Sec");
    map
});

static PRINT_CONV_28: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "1/4000 s");
    map.insert("1".to_string(), "1/3200 s");
    map.insert("10".to_string(), "1/400 s");
    map.insert("11".to_string(), "1/320 s");
    map.insert("12".to_string(), "1/250 s");
    map.insert("13".to_string(), "1/200 s");
    map.insert("14".to_string(), "1/160 s");
    map.insert("15".to_string(), "1/125 s");
    map.insert("16".to_string(), "1/100 s");
    map.insert("17".to_string(), "1/80 s");
    map.insert("18".to_string(), "1/60 s");
    map.insert("19".to_string(), "1/50 s");
    map.insert("2".to_string(), "1/2500 s");
    map.insert("20".to_string(), "1/40 s");
    map.insert("21".to_string(), "1/30 s");
    map.insert("22".to_string(), "1/15 s");
    map.insert("23".to_string(), "1/8 s");
    map.insert("24".to_string(), "1/4 s");
    map.insert("25".to_string(), "1/2 s");
    map.insert("26".to_string(), "1 s");
    map.insert("27".to_string(), "2 s");
    map.insert("28".to_string(), "4 s");
    map.insert("29".to_string(), "8 s");
    map.insert("3".to_string(), "1/2000 s");
    map.insert("30".to_string(), "15 s");
    map.insert("31".to_string(), "30 s");
    map.insert("32".to_string(), "Auto (Slowest)");
    map.insert("33".to_string(), "Auto (Slower)");
    map.insert("34".to_string(), "Auto");
    map.insert("35".to_string(), "Auto (Faster)");
    map.insert("36".to_string(), "Auto (Fastest)");
    map.insert("4".to_string(), "1/1600 s");
    map.insert("5".to_string(), "1/1250 s");
    map.insert("6".to_string(), "1/1000 s");
    map.insert("7".to_string(), "1/800 s");
    map.insert("8".to_string(), "1/640 s");
    map.insert("9".to_string(), "1/500 s");
    map
});

static PRINT_CONV_29: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Date & Time");
    map.insert("2".to_string(), "Date");
    map.insert("3".to_string(), "Date Counter");
    map
});

static PRINT_CONV_30: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("10".to_string(), "+05:45 (Kathmandu)");
    map.insert("11".to_string(), "+05:30 (New Dehli)");
    map.insert("12".to_string(), "+05:00 (Islamabad)");
    map.insert("13".to_string(), "+04:30 (Kabul)");
    map.insert("14".to_string(), "+04:00 (Abu Dhabi)");
    map.insert("15".to_string(), "+03:30 (Tehran)");
    map.insert("16".to_string(), "+03:00 (Moscow, Nairobi)");
    map.insert("17".to_string(), "+02:00 (Athens, Helsinki)");
    map.insert("18".to_string(), "+01:00 (Madrid, Paris, Berlin)");
    map.insert("19".to_string(), "+00:00 (London)");
    map.insert("20".to_string(), "-01:00 (Azores)");
    map.insert("21".to_string(), "-02:00 (Fernando de Noronha)");
    map.insert("22".to_string(), "-03:00 (Buenos Aires, Sao Paulo)");
    map.insert("23".to_string(), "-03:30 (Newfoundland)");
    map.insert("24".to_string(), "-04:00 (Manaus, Caracas)");
    map.insert("25".to_string(), "-05:00 (New York, Toronto, Lima)");
    map.insert("26".to_string(), "-06:00 (Chicago, Mexico City)");
    map.insert("27".to_string(), "-07:00 (Denver)");
    map.insert("28".to_string(), "-08:00 (Los Angeles, Vancouver)");
    map.insert("29".to_string(), "-09:00 (Anchorage)");
    map.insert("3".to_string(), "+10:00 (Sydney)");
    map.insert("30".to_string(), "-10:00 (Hawaii)");
    map.insert("5".to_string(), "+09:00 (Tokyo)");
    map.insert("6".to_string(), "+08:00 (Beijing, Honk Kong, Sinapore)");
    map
});

static PRINT_CONV_31: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-12".to_string(), "15 s");
    map.insert("-15".to_string(), "Auto");
    map.insert("-3".to_string(), "2 s");
    map.insert("-6".to_string(), "4 s");
    map.insert("-9".to_string(), "8 s");
    map.insert("0".to_string(), "1 s");
    map.insert("1".to_string(), "1/1.3 s");
    map.insert("10".to_string(), "1/10 s");
    map.insert("11".to_string(), "1/13 s");
    map.insert("12".to_string(), "1/15 s");
    map.insert("13".to_string(), "1/20 s");
    map.insert("14".to_string(), "1/25 s");
    map.insert("15".to_string(), "1/30 s");
    map.insert("16".to_string(), "1/40 s");
    map.insert("17".to_string(), "1/50 s");
    map.insert("18".to_string(), "1/60 s");
    map.insert("19".to_string(), "1/80 s");
    map.insert("2".to_string(), "1/1.6 s");
    map.insert("20".to_string(), "1/100 s");
    map.insert("21".to_string(), "1/120 s");
    map.insert("22".to_string(), "1/160 s");
    map.insert("23".to_string(), "1/200 s");
    map.insert("24".to_string(), "1/250 s");
    map.insert("25".to_string(), "1/320 s");
    map.insert("26".to_string(), "1/400 s");
    map.insert("27".to_string(), "1/500 s");
    map.insert("28".to_string(), "1/640 s");
    map.insert("29".to_string(), "1/800 s");
    map.insert("3".to_string(), "1/2 s");
    map.insert("30".to_string(), "1/1000 s");
    map.insert("31".to_string(), "1/1250 s");
    map.insert("32".to_string(), "1/1600 s");
    map.insert("33".to_string(), "1/2000 s");
    map.insert("34".to_string(), "1/2500 s");
    map.insert("35".to_string(), "1/3200 s");
    map.insert("36".to_string(), "1/4000 s");
    map.insert("37".to_string(), "1/5000 s");
    map.insert("37.5".to_string(), "1/6000 s");
    map.insert("38".to_string(), "1/6400 s");
    map.insert("39".to_string(), "1/8000 s");
    map.insert("4".to_string(), "1/2.5 s");
    map.insert("40".to_string(), "1/10000 s");
    map.insert("40.5".to_string(), "1/12000 s");
    map.insert("41".to_string(), "1/13000 s");
    map.insert("42".to_string(), "1/16000 s");
    map.insert("5".to_string(), "1/3 s");
    map.insert("6".to_string(), "1/4 s");
    map.insert("7".to_string(), "1/5 s");
    map.insert("8".to_string(), "1/6 s");
    map.insert("9".to_string(), "1/8 s");
    map
});

static PRINT_CONV_32: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("10".to_string(), "+05:45 (Kathmandu)");
    map.insert("11".to_string(), "+05:30 (New Dehli)");
    map.insert("12".to_string(), "+05:00 (Islamabad)");
    map.insert("13".to_string(), "+04:30 (Kabul)");
    map.insert("14".to_string(), "+04:00 (Abu Dhabi)");
    map.insert("15".to_string(), "+03:30 (Tehran)");
    map.insert("16".to_string(), "+03:00 (Moscow, Nairobi)");
    map.insert("17".to_string(), "+02:00 (Athens, Helsinki)");
    map.insert("18".to_string(), "+01:00 (Madrid, Paris, Berlin)");
    map.insert("19".to_string(), "+00:00 (London)");
    map.insert("20".to_string(), "-01:00 (Azores)");
    map.insert("21".to_string(), "-02:00 (Fernando de Noronha)");
    map.insert("22".to_string(), "-03:00 (Buenos Aires, Sao Paulo)");
    map.insert("23".to_string(), "-03:30 (Newfoundland)");
    map.insert("24".to_string(), "-04:00 (Manaus, Caracas)");
    map.insert("25".to_string(), "-05:00 (New York, Toronto, Lima)");
    map.insert("26".to_string(), "-06:00 (Chicago, Mexico City)");
    map.insert("27".to_string(), "-07:00 (Denver)");
    map.insert("28".to_string(), "-08:00 (Los Angeles, Vancouver)");
    map.insert("29".to_string(), "-09:00 (Anchorage)");
    map.insert("3".to_string(), "+10:00 (Sydney)");
    map.insert("30".to_string(), "-10:00 (Hawaii)");
    map.insert("5".to_string(), "+09:00 (Tokyo)");
    map.insert("6".to_string(), "+08:00 (Beijing, Honk Kong, Sinapore)");
    map
});

static PRINT_CONV_33: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("10".to_string(), "+05:45 (Kathmandu)");
    map.insert("11".to_string(), "+05:30 (New Dehli)");
    map.insert("12".to_string(), "+05:00 (Islamabad)");
    map.insert("13".to_string(), "+04:30 (Kabul)");
    map.insert("14".to_string(), "+04:00 (Abu Dhabi)");
    map.insert("15".to_string(), "+03:30 (Tehran)");
    map.insert("16".to_string(), "+03:00 (Moscow, Nairobi)");
    map.insert("17".to_string(), "+02:00 (Athens, Helsinki)");
    map.insert("18".to_string(), "+01:00 (Madrid, Paris, Berlin)");
    map.insert("19".to_string(), "+00:00 (London)");
    map.insert("20".to_string(), "-01:00 (Azores)");
    map.insert("21".to_string(), "-02:00 (Fernando de Noronha)");
    map.insert("22".to_string(), "-03:00 (Buenos Aires, Sao Paulo)");
    map.insert("23".to_string(), "-03:30 (Newfoundland)");
    map.insert("24".to_string(), "-04:00 (Manaus, Caracas)");
    map.insert("25".to_string(), "-05:00 (New York, Toronto, Lima)");
    map.insert("26".to_string(), "-06:00 (Chicago, Mexico City)");
    map.insert("27".to_string(), "-07:00 (Denver)");
    map.insert("28".to_string(), "-08:00 (Los Angeles, Vancouver)");
    map.insert("29".to_string(), "-09:00 (Anchorage)");
    map.insert("3".to_string(), "+10:00 (Sydney)");
    map.insert("30".to_string(), "-10:00 (Hawaii)");
    map.insert("5".to_string(), "+09:00 (Tokyo)");
    map.insert("6".to_string(), "+08:00 (Beijing, Honk Kong, Sinapore)");
    map
});

static PRINT_CONV_34: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("10".to_string(), "+05:45 (Kathmandu)");
    map.insert("11".to_string(), "+05:30 (New Dehli)");
    map.insert("12".to_string(), "+05:00 (Islamabad)");
    map.insert("13".to_string(), "+04:30 (Kabul)");
    map.insert("14".to_string(), "+04:00 (Abu Dhabi)");
    map.insert("15".to_string(), "+03:30 (Tehran)");
    map.insert("16".to_string(), "+03:00 (Moscow, Nairobi)");
    map.insert("17".to_string(), "+02:00 (Athens, Helsinki)");
    map.insert("18".to_string(), "+01:00 (Madrid, Paris, Berlin)");
    map.insert("19".to_string(), "+00:00 (London)");
    map.insert("20".to_string(), "-01:00 (Azores)");
    map.insert("21".to_string(), "-02:00 (Fernando de Noronha)");
    map.insert("22".to_string(), "-03:00 (Buenos Aires, Sao Paulo)");
    map.insert("23".to_string(), "-03:30 (Newfoundland)");
    map.insert("24".to_string(), "-04:00 (Manaus, Caracas)");
    map.insert("25".to_string(), "-05:00 (New York, Toronto, Lima)");
    map.insert("26".to_string(), "-06:00 (Chicago, Mexico City)");
    map.insert("27".to_string(), "-07:00 (Denver)");
    map.insert("28".to_string(), "-08:00 (Los Angeles, Vancouver)");
    map.insert("29".to_string(), "-09:00 (Anchorage)");
    map.insert("3".to_string(), "+10:00 (Sydney)");
    map.insert("30".to_string(), "-10:00 (Hawaii)");
    map.insert("5".to_string(), "+09:00 (Tokyo)");
    map.insert("6".to_string(), "+08:00 (Beijing, Honk Kong, Sinapore)");
    map
});

static PRINT_CONV_35: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-12".to_string(), "15 s");
    map.insert("-15".to_string(), "Auto");
    map.insert("-3".to_string(), "2 s");
    map.insert("-6".to_string(), "4 s");
    map.insert("-9".to_string(), "8 s");
    map.insert("0".to_string(), "1 s");
    map.insert("1".to_string(), "1/1.3 s");
    map.insert("10".to_string(), "1/10 s");
    map.insert("11".to_string(), "1/13 s");
    map.insert("12".to_string(), "1/15 s");
    map.insert("13".to_string(), "1/20 s");
    map.insert("14".to_string(), "1/25 s");
    map.insert("15".to_string(), "1/30 s");
    map.insert("16".to_string(), "1/40 s");
    map.insert("17".to_string(), "1/50 s");
    map.insert("18".to_string(), "1/60 s");
    map.insert("19".to_string(), "1/80 s");
    map.insert("2".to_string(), "1/1.6 s");
    map.insert("20".to_string(), "1/100 s");
    map.insert("21".to_string(), "1/120 s");
    map.insert("22".to_string(), "1/160 s");
    map.insert("23".to_string(), "1/200 s");
    map.insert("24".to_string(), "1/250 s");
    map.insert("25".to_string(), "1/320 s");
    map.insert("26".to_string(), "1/400 s");
    map.insert("27".to_string(), "1/500 s");
    map.insert("28".to_string(), "1/640 s");
    map.insert("29".to_string(), "1/800 s");
    map.insert("3".to_string(), "1/2 s");
    map.insert("30".to_string(), "1/1000 s");
    map.insert("31".to_string(), "1/1250 s");
    map.insert("32".to_string(), "1/1600 s");
    map.insert("33".to_string(), "1/2000 s");
    map.insert("34".to_string(), "1/2500 s");
    map.insert("35".to_string(), "1/3200 s");
    map.insert("36".to_string(), "1/4000 s");
    map.insert("37".to_string(), "1/5000 s");
    map.insert("37.5".to_string(), "1/6000 s");
    map.insert("38".to_string(), "1/6400 s");
    map.insert("39".to_string(), "1/8000 s");
    map.insert("4".to_string(), "1/2.5 s");
    map.insert("40".to_string(), "1/10000 s");
    map.insert("40.5".to_string(), "1/12000 s");
    map.insert("41".to_string(), "1/13000 s");
    map.insert("42".to_string(), "1/16000 s");
    map.insert("5".to_string(), "1/3 s");
    map.insert("6".to_string(), "1/4 s");
    map.insert("7".to_string(), "1/5 s");
    map.insert("8".to_string(), "1/6 s");
    map.insert("9".to_string(), "1/8 s");
    map
});

static PRINT_CONV_36: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("10".to_string(), "+05:45 (Kathmandu)");
    map.insert("11".to_string(), "+05:30 (New Dehli)");
    map.insert("12".to_string(), "+05:00 (Islamabad)");
    map.insert("13".to_string(), "+04:30 (Kabul)");
    map.insert("14".to_string(), "+04:00 (Abu Dhabi)");
    map.insert("15".to_string(), "+03:30 (Tehran)");
    map.insert("16".to_string(), "+03:00 (Moscow, Nairobi)");
    map.insert("17".to_string(), "+02:00 (Athens, Helsinki)");
    map.insert("18".to_string(), "+01:00 (Madrid, Paris, Berlin)");
    map.insert("19".to_string(), "+00:00 (London)");
    map.insert("20".to_string(), "-01:00 (Azores)");
    map.insert("21".to_string(), "-02:00 (Fernando de Noronha)");
    map.insert("22".to_string(), "-03:00 (Buenos Aires, Sao Paulo)");
    map.insert("23".to_string(), "-03:30 (Newfoundland)");
    map.insert("24".to_string(), "-04:00 (Manaus, Caracas)");
    map.insert("25".to_string(), "-05:00 (New York, Toronto, Lima)");
    map.insert("26".to_string(), "-06:00 (Chicago, Mexico City)");
    map.insert("27".to_string(), "-07:00 (Denver)");
    map.insert("28".to_string(), "-08:00 (Los Angeles, Vancouver)");
    map.insert("29".to_string(), "-09:00 (Anchorage)");
    map.insert("3".to_string(), "+10:00 (Sydney)");
    map.insert("30".to_string(), "-10:00 (Hawaii)");
    map.insert("5".to_string(), "+09:00 (Tokyo)");
    map.insert("6".to_string(), "+08:00 (Beijing, Honk Kong, Sinapore)");
    map
});

static PRINT_CONV_37: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-12".to_string(), "15 s");
    map.insert("-15".to_string(), "Auto");
    map.insert("-3".to_string(), "2 s");
    map.insert("-6".to_string(), "4 s");
    map.insert("-9".to_string(), "8 s");
    map.insert("0".to_string(), "1 s");
    map.insert("1".to_string(), "1/1.3 s");
    map.insert("10".to_string(), "1/10 s");
    map.insert("11".to_string(), "1/13 s");
    map.insert("12".to_string(), "1/15 s");
    map.insert("13".to_string(), "1/20 s");
    map.insert("14".to_string(), "1/25 s");
    map.insert("15".to_string(), "1/30 s");
    map.insert("16".to_string(), "1/40 s");
    map.insert("17".to_string(), "1/50 s");
    map.insert("18".to_string(), "1/60 s");
    map.insert("19".to_string(), "1/80 s");
    map.insert("2".to_string(), "1/1.6 s");
    map.insert("20".to_string(), "1/100 s");
    map.insert("21".to_string(), "1/120 s");
    map.insert("22".to_string(), "1/160 s");
    map.insert("23".to_string(), "1/200 s");
    map.insert("24".to_string(), "1/250 s");
    map.insert("25".to_string(), "1/320 s");
    map.insert("26".to_string(), "1/400 s");
    map.insert("27".to_string(), "1/500 s");
    map.insert("28".to_string(), "1/640 s");
    map.insert("29".to_string(), "1/800 s");
    map.insert("3".to_string(), "1/2 s");
    map.insert("30".to_string(), "1/1000 s");
    map.insert("31".to_string(), "1/1250 s");
    map.insert("32".to_string(), "1/1600 s");
    map.insert("33".to_string(), "1/2000 s");
    map.insert("34".to_string(), "1/2500 s");
    map.insert("35".to_string(), "1/3200 s");
    map.insert("36".to_string(), "1/4000 s");
    map.insert("37".to_string(), "1/5000 s");
    map.insert("37.5".to_string(), "1/6000 s");
    map.insert("38".to_string(), "1/6400 s");
    map.insert("39".to_string(), "1/8000 s");
    map.insert("4".to_string(), "1/2.5 s");
    map.insert("40".to_string(), "1/10000 s");
    map.insert("40.5".to_string(), "1/12000 s");
    map.insert("41".to_string(), "1/13000 s");
    map.insert("42".to_string(), "1/16000 s");
    map.insert("5".to_string(), "1/3 s");
    map.insert("6".to_string(), "1/4 s");
    map.insert("7".to_string(), "1/5 s");
    map.insert("8".to_string(), "1/6 s");
    map.insert("9".to_string(), "1/8 s");
    map
});

static PRINT_CONV_38: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("10".to_string(), "+05:45 (Kathmandu)");
    map.insert("11".to_string(), "+05:30 (New Dehli)");
    map.insert("12".to_string(), "+05:00 (Islamabad)");
    map.insert("13".to_string(), "+04:30 (Kabul)");
    map.insert("14".to_string(), "+04:00 (Abu Dhabi)");
    map.insert("15".to_string(), "+03:30 (Tehran)");
    map.insert("16".to_string(), "+03:00 (Moscow, Nairobi)");
    map.insert("17".to_string(), "+02:00 (Athens, Helsinki)");
    map.insert("18".to_string(), "+01:00 (Madrid, Paris, Berlin)");
    map.insert("19".to_string(), "+00:00 (London)");
    map.insert("20".to_string(), "-01:00 (Azores)");
    map.insert("21".to_string(), "-02:00 (Fernando de Noronha)");
    map.insert("22".to_string(), "-03:00 (Buenos Aires, Sao Paulo)");
    map.insert("23".to_string(), "-03:30 (Newfoundland)");
    map.insert("24".to_string(), "-04:00 (Manaus, Caracas)");
    map.insert("25".to_string(), "-05:00 (New York, Toronto, Lima)");
    map.insert("26".to_string(), "-06:00 (Chicago, Mexico City)");
    map.insert("27".to_string(), "-07:00 (Denver)");
    map.insert("28".to_string(), "-08:00 (Los Angeles, Vancouver)");
    map.insert("29".to_string(), "-09:00 (Anchorage)");
    map.insert("3".to_string(), "+10:00 (Sydney)");
    map.insert("30".to_string(), "-10:00 (Hawaii)");
    map.insert("5".to_string(), "+09:00 (Tokyo)");
    map.insert("6".to_string(), "+08:00 (Beijing, Honk Kong, Sinapore)");
    map
});

static PRINT_CONV_39: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-12".to_string(), "15 s");
    map.insert("-15".to_string(), "Auto");
    map.insert("-3".to_string(), "2 s");
    map.insert("-6".to_string(), "4 s");
    map.insert("-9".to_string(), "8 s");
    map.insert("0".to_string(), "1 s");
    map.insert("1".to_string(), "1/1.3 s");
    map.insert("10".to_string(), "1/10 s");
    map.insert("11".to_string(), "1/13 s");
    map.insert("12".to_string(), "1/15 s");
    map.insert("13".to_string(), "1/20 s");
    map.insert("14".to_string(), "1/25 s");
    map.insert("15".to_string(), "1/30 s");
    map.insert("16".to_string(), "1/40 s");
    map.insert("17".to_string(), "1/50 s");
    map.insert("18".to_string(), "1/60 s");
    map.insert("19".to_string(), "1/80 s");
    map.insert("2".to_string(), "1/1.6 s");
    map.insert("20".to_string(), "1/100 s");
    map.insert("21".to_string(), "1/120 s");
    map.insert("22".to_string(), "1/160 s");
    map.insert("23".to_string(), "1/200 s");
    map.insert("24".to_string(), "1/250 s");
    map.insert("25".to_string(), "1/320 s");
    map.insert("26".to_string(), "1/400 s");
    map.insert("27".to_string(), "1/500 s");
    map.insert("28".to_string(), "1/640 s");
    map.insert("29".to_string(), "1/800 s");
    map.insert("3".to_string(), "1/2 s");
    map.insert("30".to_string(), "1/1000 s");
    map.insert("31".to_string(), "1/1250 s");
    map.insert("32".to_string(), "1/1600 s");
    map.insert("33".to_string(), "1/2000 s");
    map.insert("34".to_string(), "1/2500 s");
    map.insert("35".to_string(), "1/3200 s");
    map.insert("36".to_string(), "1/4000 s");
    map.insert("37".to_string(), "1/5000 s");
    map.insert("37.5".to_string(), "1/6000 s");
    map.insert("38".to_string(), "1/6400 s");
    map.insert("39".to_string(), "1/8000 s");
    map.insert("4".to_string(), "1/2.5 s");
    map.insert("40".to_string(), "1/10000 s");
    map.insert("40.5".to_string(), "1/12000 s");
    map.insert("41".to_string(), "1/13000 s");
    map.insert("42".to_string(), "1/16000 s");
    map.insert("5".to_string(), "1/3 s");
    map.insert("6".to_string(), "1/4 s");
    map.insert("7".to_string(), "1/5 s");
    map.insert("8".to_string(), "1/6 s");
    map.insert("9".to_string(), "1/8 s");
    map
});

static PRINT_CONV_40: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "1/4000 s");
    map.insert("1".to_string(), "1/3200 s");
    map.insert("10".to_string(), "1/400 s");
    map.insert("11".to_string(), "1/320 s");
    map.insert("12".to_string(), "1/250 s");
    map.insert("13".to_string(), "1/200 s");
    map.insert("14".to_string(), "1/160 s");
    map.insert("15".to_string(), "1/125 s");
    map.insert("16".to_string(), "1/100 s");
    map.insert("17".to_string(), "1/80 s");
    map.insert("18".to_string(), "1/60 s");
    map.insert("19".to_string(), "1/50 s");
    map.insert("2".to_string(), "1/2500 s");
    map.insert("20".to_string(), "1/40 s");
    map.insert("21".to_string(), "1/30 s");
    map.insert("22".to_string(), "1/15 s");
    map.insert("23".to_string(), "1/8 s");
    map.insert("24".to_string(), "1/4 s");
    map.insert("25".to_string(), "1/2 s");
    map.insert("26".to_string(), "1 s");
    map.insert("27".to_string(), "2 s");
    map.insert("28".to_string(), "4 s");
    map.insert("29".to_string(), "8 s");
    map.insert("3".to_string(), "1/2000 s");
    map.insert("30".to_string(), "15 s");
    map.insert("31".to_string(), "30 s");
    map.insert("32".to_string(), "Auto (Slowest)");
    map.insert("33".to_string(), "Auto (Slower)");
    map.insert("34".to_string(), "Auto");
    map.insert("35".to_string(), "Auto (Faster)");
    map.insert("36".to_string(), "Auto (Fastest)");
    map.insert("4".to_string(), "1/1600 s");
    map.insert("5".to_string(), "1/1250 s");
    map.insert("6".to_string(), "1/1000 s");
    map.insert("7".to_string(), "1/800 s");
    map.insert("8".to_string(), "1/640 s");
    map.insert("9".to_string(), "1/500 s");
    map
});

static PRINT_CONV_41: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "1/4000 s");
    map.insert("1".to_string(), "1/3200 s");
    map.insert("10".to_string(), "1/400 s");
    map.insert("11".to_string(), "1/320 s");
    map.insert("12".to_string(), "1/250 s");
    map.insert("13".to_string(), "1/200 s");
    map.insert("14".to_string(), "1/160 s");
    map.insert("15".to_string(), "1/125 s");
    map.insert("16".to_string(), "1/100 s");
    map.insert("17".to_string(), "1/80 s");
    map.insert("18".to_string(), "1/60 s");
    map.insert("19".to_string(), "1/50 s");
    map.insert("2".to_string(), "1/2500 s");
    map.insert("20".to_string(), "1/40 s");
    map.insert("21".to_string(), "1/30 s");
    map.insert("22".to_string(), "1/15 s");
    map.insert("23".to_string(), "1/8 s");
    map.insert("24".to_string(), "1/4 s");
    map.insert("25".to_string(), "1/2 s");
    map.insert("26".to_string(), "1 s");
    map.insert("27".to_string(), "2 s");
    map.insert("28".to_string(), "4 s");
    map.insert("29".to_string(), "8 s");
    map.insert("3".to_string(), "1/2000 s");
    map.insert("30".to_string(), "15 s");
    map.insert("31".to_string(), "30 s");
    map.insert("32".to_string(), "Auto (Slowest)");
    map.insert("33".to_string(), "Auto (Slower)");
    map.insert("34".to_string(), "Auto");
    map.insert("35".to_string(), "Auto (Faster)");
    map.insert("36".to_string(), "Auto (Fastest)");
    map.insert("4".to_string(), "1/1600 s");
    map.insert("5".to_string(), "1/1250 s");
    map.insert("6".to_string(), "1/1000 s");
    map.insert("7".to_string(), "1/800 s");
    map.insert("8".to_string(), "1/640 s");
    map.insert("9".to_string(), "1/500 s");
    map
});

static PRINT_CONV_42: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Y/M/D");
    map.insert("1".to_string(), "M/D/Y");
    map.insert("2".to_string(), "D/M/Y");
    map
});

/// Get tag definitions for datetime category
pub fn get_datetime_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (19, TagKitDef {
            id: 19,
            name: "DateTimeOriginal",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "CreateDate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "ExposureTime",
            format: "rational64u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::Exif::PrintExposureTime($val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (55, TagKitDef {
            id: 55,
            name: "AutoCaptureRecordingTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_26),
            value_conv: None,
            subdirectory: None,
        }),
        (56, TagKitDef {
            id: 56,
            name: "AutoCaptureWaitTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_27),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "ISOAutoShutterTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_28),
            value_conv: None,
            subdirectory: None,
        }),
        (38, TagKitDef {
            id: 38,
            name: "ExposureTime",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::Exif::PrintExposureTime($val)"),
            value_conv: Some("reciprocal_10_value_conv"),
            subdirectory: None,
        }),
        (157, TagKitDef {
            id: 157,
            name: "DateStampMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("feature to imprint date/time on image"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_29),
            value_conv: None,
            subdirectory: None,
        }),
        (182, TagKitDef {
            id: 182,
            name: "PowerUpTime",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("date/time when camera was last powered up"),
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (36, TagKitDef {
            id: 36,
            name: "WorldTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x24_subdirectory }),
        }),
        (2302, TagKitDef {
            id: 2302,
            name: "TimeZone",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_30),
            value_conv: None,
            subdirectory: None,
        }),
        (350, TagKitDef {
            id: 350,
            name: "ISOAutoShutterTime",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_31),
            value_conv: Some("$val / 8"),
            subdirectory: None,
        }),
        (1684, TagKitDef {
            id: 1684,
            name: "TimeZone",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_32),
            value_conv: None,
            subdirectory: None,
        }),
        (1700, TagKitDef {
            id: 1700,
            name: "TimeZone",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_33),
            value_conv: None,
            subdirectory: None,
        }),
        (1428, TagKitDef {
            id: 1428,
            name: "TimeZone",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_34),
            value_conv: None,
            subdirectory: None,
        }),
        (334, TagKitDef {
            id: 334,
            name: "ISOAutoShutterTime",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_35),
            value_conv: Some("$val / 8"),
            subdirectory: None,
        }),
        (1476, TagKitDef {
            id: 1476,
            name: "TimeZone",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_36),
            value_conv: None,
            subdirectory: None,
        }),
        (354, TagKitDef {
            id: 354,
            name: "ISOAutoShutterTime",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_37),
            value_conv: Some("$val / 8"),
            subdirectory: None,
        }),
        (1500, TagKitDef {
            id: 1500,
            name: "TimeZone",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_38),
            value_conv: None,
            subdirectory: None,
        }),
        (354, TagKitDef {
            id: 354,
            name: "ISOAutoShutterTime",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_39),
            value_conv: Some("$val / 8"),
            subdirectory: None,
        }),
        (17, TagKitDef {
            id: 17,
            name: "CreateDate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (17859226, TagKitDef {
            id: 17859226,
            name: "ExposureTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::Exif::PrintExposureTime($val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (18, TagKitDef {
            id: 18,
            name: "DateTimeOriginal",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (25, TagKitDef {
            id: 25,
            name: "TimeZone",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (33554468, TagKitDef {
            id: 33554468,
            name: "WorldTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x2000024_subdirectory }),
        }),
        (4098, TagKitDef {
            id: 4098,
            name: "NikonDateTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "ISOAutoShutterTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_40),
            value_conv: None,
            subdirectory: None,
        }),
        (6378, TagKitDef {
            id: 6378,
            name: "ISOAutoShutterTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_41),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "TimeZone",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\n            my $sign = $val < 0 ? '-' : '+';\n            my $h = int(abs($val) / 60);\n            sprintf(\"%s%.2d:%.2d\", $sign, $h, abs($val)-60*$h);\n        "),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "DateDisplayFormat",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_42),
            value_conv: None,
            subdirectory: None,
        }),
    ]
}
