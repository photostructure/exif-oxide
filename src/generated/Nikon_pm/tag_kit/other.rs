//! Tag kits for other category from Nikon.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_36: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Did Not Fire");
    map.insert("1".to_string(), "Fired, Manual");
    map.insert("18".to_string(), "LED Light");
    map.insert("3".to_string(), "Not Ready");
    map.insert("7".to_string(), "Fired, External");
    map.insert("8".to_string(), "Fired, Commander Mode");
    map.insert("9".to_string(), "Fired, TTL Mode");
    map
});

static PRINT_CONV_37: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Lossy (type 1)");
    map.insert("10".to_string(), "Packed 14 bits");
    map.insert("13".to_string(), "High Efficiency");
    map.insert("14".to_string(), "High Efficiency*");
    map.insert("2".to_string(), "Uncompressed");
    map.insert("3".to_string(), "Lossless");
    map.insert("4".to_string(), "Lossy (type 2)");
    map.insert("5".to_string(), "Striped packed 12 bits");
    map.insert("6".to_string(), "Uncompressed (reduced to 12 bit)");
    map.insert("7".to_string(), "Unpacked 12 bits");
    map.insert("8".to_string(), "Small");
    map.insert("9".to_string(), "Packed 12 bits");
    map
});

static PRINT_CONV_38: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Minimal");
    map.insert("2".to_string(), "Low");
    map.insert("3".to_string(), "Medium Low");
    map.insert("4".to_string(), "Normal");
    map.insert("5".to_string(), "Medium High");
    map.insert("6".to_string(), "High");
    map
});

static PRINT_CONV_39: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_40: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "sRGB");
    map.insert("2".to_string(), "Adobe RGB");
    map.insert("4".to_string(), "BT.2100");
    map
});

static PRINT_CONV_41: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_42: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("10".to_string(), "Extra High 3");
    map.insert("11".to_string(), "Extra High 4");
    map.insert("3".to_string(), "Normal");
    map.insert("5".to_string(), "High");
    map.insert("65535".to_string(), "Auto");
    map.insert("7".to_string(), "Extra High");
    map.insert("8".to_string(), "Extra High 1");
    map.insert("9".to_string(), "Extra High 2");
    map
});

static PRINT_CONV_43: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0 0 0 0".to_string(), "n/a (JPEG)");
    map.insert("12 0 0 0".to_string(), "12");
    map.insert("14 0 0 0".to_string(), "14");
    map.insert("16 16 16 0".to_string(), "16 x 3");
    map.insert("8 8 8 0".to_string(), "8 x 3");
    map
});

static PRINT_CONV_44: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("3".to_string(), "Normal");
    map.insert("5".to_string(), "High");
    map
});

static PRINT_CONV_45: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Mechanical");
    map.insert("16".to_string(), "Electronic");
    map.insert("48".to_string(), "Electronic Front Curtain");
    map.insert("64".to_string(), "Electronic (Movie)");
    map.insert("80".to_string(), "Auto (Mechanical)");
    map.insert("81".to_string(), "Auto (Electronic Front Curtain)");
    map.insert("96".to_string(), "Electronic (High Speed)");
    map
});

static PRINT_CONV_46: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Large");
    map.insert("2".to_string(), "Medium");
    map.insert("3".to_string(), "Small");
    map
});

static PRINT_CONV_47: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Size Priority");
    map.insert("3".to_string(), "Optimal Quality");
    map
});

static PRINT_CONV_48: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("2".to_string(), "On (Series)");
    map
});

static PRINT_CONV_49: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_50: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_51: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_52: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_53: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_54: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("2".to_string(), "Normal");
    map.insert("3".to_string(), "High");
    map
});

static PRINT_CONV_55: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_56: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_57: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "TTL");
    map.insert("1".to_string(), "Auto External Flash");
    map.insert("2".to_string(), "GN (distance priority)");
    map.insert("3".to_string(), "Manual");
    map.insert("4".to_string(), "Repeating Flash");
    map
});

static PRINT_CONV_58: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Pinpoint");
    map.insert("1".to_string(), "Single");
    map.insert("11".to_string(), "Subject Tracking");
    map.insert("12".to_string(), "Wide (C1)");
    map.insert("13".to_string(), "Wide (C2)");
    map.insert("2".to_string(), "Dynamic");
    map.insert("3".to_string(), "Wide (S)");
    map.insert("4".to_string(), "Wide (L)");
    map.insert("5".to_string(), "3D");
    map.insert("6".to_string(), "Auto");
    map
});

static PRINT_CONV_59: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Normal");
    map.insert("2".to_string(), "Sport");
    map
});

static PRINT_CONV_60: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "AE/Flash");
    map.insert("1".to_string(), "AE");
    map.insert("2".to_string(), "Flash");
    map.insert("3".to_string(), "White Balance");
    map.insert("4".to_string(), "Active-D Lighting");
    map
});

static PRINT_CONV_61: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Disabled");
    map.insert("2".to_string(), "2F");
    map.insert("3".to_string(), "3F");
    map.insert("4".to_string(), "4F");
    map.insert("5".to_string(), "5F");
    map.insert("7".to_string(), "7F");
    map.insert("9".to_string(), "9F");
    map
});

static PRINT_CONV_62: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0.3");
    map.insert("1".to_string(), "0.5");
    map.insert("10".to_string(), "2.5");
    map.insert("11".to_string(), "2.7");
    map.insert("2".to_string(), "0.7");
    map.insert("3".to_string(), "1.0");
    map.insert("4".to_string(), "2.0");
    map.insert("5".to_string(), "3.0");
    map.insert("6".to_string(), "1.3");
    map.insert("7".to_string(), "1.5");
    map.insert("8".to_string(), "1.7");
    map.insert("9".to_string(), "2.3");
    map
});

static PRINT_CONV_63: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("2".to_string(), "On (Series)");
    map
});

static PRINT_CONV_64: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Overflow");
    map.insert("1".to_string(), "Backup");
    map.insert("2".to_string(), "NEF Primary + JPG Secondary");
    map.insert("3".to_string(), "JPG Primary + JPG Secondary");
    map
});

static PRINT_CONV_65: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Extra High");
    map.insert("2".to_string(), "High");
    map.insert("3".to_string(), "Normal");
    map.insert("4".to_string(), "Low");
    map
});

static PRINT_CONV_66: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Large (8256x5504)");
    map.insert("1".to_string(), "Medium (6192x4128)");
    map.insert("2".to_string(), "Small (4128x2752)");
    map
});

static PRINT_CONV_67: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_68: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("2".to_string(), "People");
    map.insert("3".to_string(), "Animals");
    map.insert("4".to_string(), "Vehicles");
    map.insert("5".to_string(), "Birds");
    map.insert("6".to_string(), "Airplanes");
    map
});

static PRINT_CONV_69: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Small");
    map.insert("1".to_string(), "Medium");
    map.insert("2".to_string(), "Large");
    map
});

static PRINT_CONV_70: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "SDR");
    map.insert("1".to_string(), "HLG");
    map
});

static PRINT_CONV_71: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Mode 1");
    map.insert("2".to_string(), "Mode 2");
    map.insert("3".to_string(), "Mode 3");
    map
});

static PRINT_CONV_72: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_73: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "CH");
    map.insert("2".to_string(), "CH*");
    map.insert("3".to_string(), "C30");
    map.insert("4".to_string(), "C120");
    map.insert("5".to_string(), "C60");
    map.insert("6".to_string(), "C15");
    map
});

static PRINT_CONV_74: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "FX");
    map.insert("1".to_string(), "DX");
    map
});

static PRINT_CONV_75: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "H.264 8-bit (MP4)");
    map.insert("2".to_string(), "H.265 8-bit (MOV)");
    map.insert("3".to_string(), "H.265 10-bit (MOV)");
    map.insert("4".to_string(), "ProRes 422 HQ 10-bit (MOV)");
    map.insert("5".to_string(), "ProRes RAW HQ 12-bit (MOV)");
    map.insert("6".to_string(), "NRAW 12-bit (NEV)");
    map
});

static PRINT_CONV_76: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_77: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_78: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_79: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("2".to_string(), "Low");
    map.insert("3".to_string(), "Normal");
    map.insert("4".to_string(), "High");
    map.insert("5".to_string(), "Extra High");
    map
});

static PRINT_CONV_80: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("2".to_string(), "Normal");
    map.insert("3".to_string(), "High");
    map
});

static PRINT_CONV_81: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "50Hz");
    map.insert("2".to_string(), "60Hz");
    map
});

static PRINT_CONV_82: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Matrix");
    map.insert("1".to_string(), "Center");
    map.insert("2".to_string(), "Spot");
    map.insert("3".to_string(), "Highlight");
    map
});

static PRINT_CONV_83: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Manual");
    map.insert("1".to_string(), "AF-S");
    map.insert("2".to_string(), "AF-C");
    map.insert("4".to_string(), "AF-F");
    map
});

static PRINT_CONV_84: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Pinpoint");
    map.insert("1".to_string(), "Single");
    map.insert("11".to_string(), "Subject Tracking");
    map.insert("12".to_string(), "Wide (C1)");
    map.insert("13".to_string(), "Wide (C2)");
    map.insert("2".to_string(), "Dynamic");
    map.insert("3".to_string(), "Wide (S)");
    map.insert("4".to_string(), "Wide (L)");
    map.insert("5".to_string(), "3D");
    map.insert("6".to_string(), "Auto");
    map
});

static PRINT_CONV_85: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Normal");
    map.insert("2".to_string(), "Sport");
    map
});

static PRINT_CONV_86: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_87: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("2".to_string(), "Manual");
    map
});

static PRINT_CONV_88: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_89: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Wide Range");
    map.insert("1".to_string(), "Vocal Range");
    map
});

static PRINT_CONV_90: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_91: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "1920x1080");
    map.insert("2".to_string(), "3840x2160");
    map.insert("3".to_string(), "7680x4320");
    map.insert("7".to_string(), "5376x3024");
    map
});

static PRINT_CONV_92: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "120p");
    map.insert("1".to_string(), "100p");
    map.insert("2".to_string(), "60p");
    map.insert("3".to_string(), "50p");
    map.insert("4".to_string(), "30p");
    map.insert("5".to_string(), "25p");
    map.insert("6".to_string(), "24p");
    map
});

static PRINT_CONV_93: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_94: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_95: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("2".to_string(), "People");
    map.insert("3".to_string(), "Animals");
    map.insert("4".to_string(), "Vehicles");
    map.insert("5".to_string(), "Birds");
    map.insert("6".to_string(), "Airplanes");
    map
});

static PRINT_CONV_96: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_97: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "-5");
    map.insert("1".to_string(), "-4");
    map.insert("10".to_string(), "5");
    map.insert("14".to_string(), "Hi1");
    map.insert("15".to_string(), "Hi2");
    map.insert("16".to_string(), "Lo2");
    map.insert("17".to_string(), "Lo1");
    map.insert("2".to_string(), "-3");
    map.insert("3".to_string(), "-2");
    map.insert("4".to_string(), "-1");
    map.insert("5".to_string(), "0");
    map.insert("6".to_string(), "1");
    map.insert("7".to_string(), "2");
    map.insert("8".to_string(), "3");
    map.insert("9".to_string(), "4");
    map
});

static PRINT_CONV_98: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("15".to_string(), "Portuguese");
    map.insert("4".to_string(), "English");
    map.insert("5".to_string(), "Spanish");
    map.insert("7".to_string(), "French");
    map
});

static PRINT_CONV_99: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_100: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_101: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_102: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_103: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_104: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_105: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_106: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_107: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_108: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_109: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_110: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_111: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_112: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_113: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_114: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_115: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_116: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_117: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_118: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_119: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("104".to_string(), "f/4.5");
    map.insert("112".to_string(), "f/5.0");
    map.insert("12".to_string(), "f/1.2");
    map.insert("120".to_string(), "f/5.6");
    map.insert("128".to_string(), "f/6.3");
    map.insert("136".to_string(), "f/7.1");
    map.insert("144".to_string(), "f/8");
    map.insert("156".to_string(), "f/9.5");
    map.insert("168".to_string(), "f/11");
    map.insert("180".to_string(), "f/13");
    map.insert("188".to_string(), "f/15");
    map.insert("192".to_string(), "f/16");
    map.insert("204".to_string(), "f/19");
    map.insert("216".to_string(), "f/22");
    map.insert("24".to_string(), "f/1.4");
    map.insert("313".to_string(), "N/A");
    map.insert("40".to_string(), "f/1.8");
    map.insert("48".to_string(), "f/2.0");
    map.insert("64".to_string(), "f/2.5");
    map.insert("72".to_string(), "f/2.8");
    map.insert("84".to_string(), "f/3.3");
    map.insert("88".to_string(), "f/3.5");
    map.insert("96".to_string(), "f/4.0");
    map
});

static PRINT_CONV_120: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "4320p");
    map.insert("2".to_string(), "2160p");
    map.insert("3".to_string(), "1080p");
    map.insert("4".to_string(), "1080i");
    map.insert("5".to_string(), "720p");
    map
});

static PRINT_CONV_121: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_122: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Disable Release");
    map.insert("1".to_string(), "Enable Release");
    map
});

static PRINT_CONV_123: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_124: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_125: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Stays Open");
    map.insert("1".to_string(), "Closes");
    map
});

static PRINT_CONV_126: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("15".to_string(), "Portuguese");
    map.insert("4".to_string(), "English");
    map.insert("5".to_string(), "Spanish");
    map.insert("7".to_string(), "French");
    map
});

static PRINT_CONV_127: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "-5");
    map.insert("1".to_string(), "-4");
    map.insert("10".to_string(), "5");
    map.insert("14".to_string(), "Hi1");
    map.insert("15".to_string(), "Hi2");
    map.insert("16".to_string(), "Lo2");
    map.insert("17".to_string(), "Lo1");
    map.insert("2".to_string(), "-3");
    map.insert("3".to_string(), "-2");
    map.insert("4".to_string(), "-1");
    map.insert("5".to_string(), "0");
    map.insert("6".to_string(), "1");
    map.insert("7".to_string(), "2");
    map.insert("8".to_string(), "3");
    map.insert("9".to_string(), "4");
    map
});

static PRINT_CONV_128: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_129: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "4320p");
    map.insert("2".to_string(), "2160p");
    map.insert("3".to_string(), "1080p");
    map.insert("4".to_string(), "1080i");
    map.insert("5".to_string(), "720p");
    map
});

static PRINT_CONV_130: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_131: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Disable Release");
    map.insert("1".to_string(), "Enable Release");
    map
});

static PRINT_CONV_132: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_133: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_134: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Stays Open");
    map.insert("1".to_string(), "Closes");
    map
});

static PRINT_CONV_135: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("2".to_string(), "On (Series)");
    map
});

static PRINT_CONV_136: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "4");
    map.insert("1".to_string(), "8");
    map.insert("2".to_string(), "16");
    map.insert("3".to_string(), "32");
    map
});

static PRINT_CONV_137: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "1 s");
    map.insert("2".to_string(), "2 s");
    map.insert("3".to_string(), "3 s");
    map.insert("4".to_string(), "5 s");
    map.insert("5".to_string(), "10 s");
    map
});

static PRINT_CONV_138: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Pixel Shift Shooting");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("119".to_string(), "Focus Limiter");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Jump to Source Image");
    map.insert("121".to_string(), "Raw Processing (Current)");
    map.insert("122".to_string(), "Raw Processing (Multiple)");
    map.insert("123".to_string(), "Trim");
    map.insert("124".to_string(), "Resize (Current)");
    map.insert("125".to_string(), "Resize (Multiple)");
    map.insert("126".to_string(), "D-Lighting");
    map.insert("127".to_string(), "Straighten");
    map.insert("128".to_string(), "Distortion Control");
    map.insert("129".to_string(), "Perspective Control");
    map.insert("130".to_string(), "Monochrome");
    map.insert("131".to_string(), "Overlay (Add)");
    map.insert("132".to_string(), "Lighten");
    map.insert("133".to_string(), "Darken");
    map.insert("134".to_string(), "Motion Blend");
    map.insert("135".to_string(), "Cycle Monitor Mode");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_139: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Pixel Shift Shooting");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("119".to_string(), "Focus Limiter");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Jump to Source Image");
    map.insert("121".to_string(), "Raw Processing (Current)");
    map.insert("122".to_string(), "Raw Processing (Multiple)");
    map.insert("123".to_string(), "Trim");
    map.insert("124".to_string(), "Resize (Current)");
    map.insert("125".to_string(), "Resize (Multiple)");
    map.insert("126".to_string(), "D-Lighting");
    map.insert("127".to_string(), "Straighten");
    map.insert("128".to_string(), "Distortion Control");
    map.insert("129".to_string(), "Perspective Control");
    map.insert("130".to_string(), "Monochrome");
    map.insert("131".to_string(), "Overlay (Add)");
    map.insert("132".to_string(), "Lighten");
    map.insert("133".to_string(), "Darken");
    map.insert("134".to_string(), "Motion Blend");
    map.insert("135".to_string(), "Cycle Monitor Mode");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_140: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Pixel Shift Shooting");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("119".to_string(), "Focus Limiter");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Jump to Source Image");
    map.insert("121".to_string(), "Raw Processing (Current)");
    map.insert("122".to_string(), "Raw Processing (Multiple)");
    map.insert("123".to_string(), "Trim");
    map.insert("124".to_string(), "Resize (Current)");
    map.insert("125".to_string(), "Resize (Multiple)");
    map.insert("126".to_string(), "D-Lighting");
    map.insert("127".to_string(), "Straighten");
    map.insert("128".to_string(), "Distortion Control");
    map.insert("129".to_string(), "Perspective Control");
    map.insert("130".to_string(), "Monochrome");
    map.insert("131".to_string(), "Overlay (Add)");
    map.insert("132".to_string(), "Lighten");
    map.insert("133".to_string(), "Darken");
    map.insert("134".to_string(), "Motion Blend");
    map.insert("135".to_string(), "Cycle Monitor Mode");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_141: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Pixel Shift Shooting");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("119".to_string(), "Focus Limiter");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Jump to Source Image");
    map.insert("121".to_string(), "Raw Processing (Current)");
    map.insert("122".to_string(), "Raw Processing (Multiple)");
    map.insert("123".to_string(), "Trim");
    map.insert("124".to_string(), "Resize (Current)");
    map.insert("125".to_string(), "Resize (Multiple)");
    map.insert("126".to_string(), "D-Lighting");
    map.insert("127".to_string(), "Straighten");
    map.insert("128".to_string(), "Distortion Control");
    map.insert("129".to_string(), "Perspective Control");
    map.insert("130".to_string(), "Monochrome");
    map.insert("131".to_string(), "Overlay (Add)");
    map.insert("132".to_string(), "Lighten");
    map.insert("133".to_string(), "Darken");
    map.insert("134".to_string(), "Motion Blend");
    map.insert("135".to_string(), "Cycle Monitor Mode");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_142: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Pixel Shift Shooting");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("119".to_string(), "Focus Limiter");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Jump to Source Image");
    map.insert("121".to_string(), "Raw Processing (Current)");
    map.insert("122".to_string(), "Raw Processing (Multiple)");
    map.insert("123".to_string(), "Trim");
    map.insert("124".to_string(), "Resize (Current)");
    map.insert("125".to_string(), "Resize (Multiple)");
    map.insert("126".to_string(), "D-Lighting");
    map.insert("127".to_string(), "Straighten");
    map.insert("128".to_string(), "Distortion Control");
    map.insert("129".to_string(), "Perspective Control");
    map.insert("130".to_string(), "Monochrome");
    map.insert("131".to_string(), "Overlay (Add)");
    map.insert("132".to_string(), "Lighten");
    map.insert("133".to_string(), "Darken");
    map.insert("134".to_string(), "Motion Blend");
    map.insert("135".to_string(), "Cycle Monitor Mode");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_143: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Pixel Shift Shooting");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("119".to_string(), "Focus Limiter");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Jump to Source Image");
    map.insert("121".to_string(), "Raw Processing (Current)");
    map.insert("122".to_string(), "Raw Processing (Multiple)");
    map.insert("123".to_string(), "Trim");
    map.insert("124".to_string(), "Resize (Current)");
    map.insert("125".to_string(), "Resize (Multiple)");
    map.insert("126".to_string(), "D-Lighting");
    map.insert("127".to_string(), "Straighten");
    map.insert("128".to_string(), "Distortion Control");
    map.insert("129".to_string(), "Perspective Control");
    map.insert("130".to_string(), "Monochrome");
    map.insert("131".to_string(), "Overlay (Add)");
    map.insert("132".to_string(), "Lighten");
    map.insert("133".to_string(), "Darken");
    map.insert("134".to_string(), "Motion Blend");
    map.insert("135".to_string(), "Cycle Monitor Mode");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_144: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Pixel Shift Shooting");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("119".to_string(), "Focus Limiter");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Jump to Source Image");
    map.insert("121".to_string(), "Raw Processing (Current)");
    map.insert("122".to_string(), "Raw Processing (Multiple)");
    map.insert("123".to_string(), "Trim");
    map.insert("124".to_string(), "Resize (Current)");
    map.insert("125".to_string(), "Resize (Multiple)");
    map.insert("126".to_string(), "D-Lighting");
    map.insert("127".to_string(), "Straighten");
    map.insert("128".to_string(), "Distortion Control");
    map.insert("129".to_string(), "Perspective Control");
    map.insert("130".to_string(), "Monochrome");
    map.insert("131".to_string(), "Overlay (Add)");
    map.insert("132".to_string(), "Lighten");
    map.insert("133".to_string(), "Darken");
    map.insert("134".to_string(), "Motion Blend");
    map.insert("135".to_string(), "Cycle Monitor Mode");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_145: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_146: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Pixel Shift Shooting");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("119".to_string(), "Focus Limiter");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Jump to Source Image");
    map.insert("121".to_string(), "Raw Processing (Current)");
    map.insert("122".to_string(), "Raw Processing (Multiple)");
    map.insert("123".to_string(), "Trim");
    map.insert("124".to_string(), "Resize (Current)");
    map.insert("125".to_string(), "Resize (Multiple)");
    map.insert("126".to_string(), "D-Lighting");
    map.insert("127".to_string(), "Straighten");
    map.insert("128".to_string(), "Distortion Control");
    map.insert("129".to_string(), "Perspective Control");
    map.insert("130".to_string(), "Monochrome");
    map.insert("131".to_string(), "Overlay (Add)");
    map.insert("132".to_string(), "Lighten");
    map.insert("133".to_string(), "Darken");
    map.insert("134".to_string(), "Motion Blend");
    map.insert("135".to_string(), "Cycle Monitor Mode");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_147: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Pixel Shift Shooting");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("119".to_string(), "Focus Limiter");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Jump to Source Image");
    map.insert("121".to_string(), "Raw Processing (Current)");
    map.insert("122".to_string(), "Raw Processing (Multiple)");
    map.insert("123".to_string(), "Trim");
    map.insert("124".to_string(), "Resize (Current)");
    map.insert("125".to_string(), "Resize (Multiple)");
    map.insert("126".to_string(), "D-Lighting");
    map.insert("127".to_string(), "Straighten");
    map.insert("128".to_string(), "Distortion Control");
    map.insert("129".to_string(), "Perspective Control");
    map.insert("130".to_string(), "Monochrome");
    map.insert("131".to_string(), "Overlay (Add)");
    map.insert("132".to_string(), "Lighten");
    map.insert("133".to_string(), "Darken");
    map.insert("134".to_string(), "Motion Blend");
    map.insert("135".to_string(), "Cycle Monitor Mode");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_148: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("2".to_string(), "On (Series)");
    map
});

static PRINT_CONV_149: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("15".to_string(), "Portuguese");
    map.insert("4".to_string(), "English");
    map.insert("5".to_string(), "Spanish");
    map.insert("7".to_string(), "French");
    map
});

static PRINT_CONV_150: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_151: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "4320p");
    map.insert("2".to_string(), "2160p");
    map.insert("3".to_string(), "1080p");
    map.insert("4".to_string(), "1080i");
    map.insert("5".to_string(), "720p");
    map
});

static PRINT_CONV_152: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_153: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_154: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Disable Release");
    map.insert("1".to_string(), "Enable Release");
    map
});

static PRINT_CONV_155: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_156: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_157: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_158: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Stays Open");
    map.insert("1".to_string(), "Closes");
    map
});

static PRINT_CONV_159: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_160: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "FX");
    map.insert("1".to_string(), "DX");
    map.insert("4".to_string(), "16:9");
    map.insert("8".to_string(), "1:1");
    map
});

static PRINT_CONV_161: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("2".to_string(), "Normal");
    map.insert("3".to_string(), "High");
    map
});

static PRINT_CONV_162: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_163: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_164: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "TTL");
    map.insert("1".to_string(), "Auto External Flash");
    map.insert("2".to_string(), "GN (distance priority)");
    map.insert("3".to_string(), "Manual");
    map.insert("4".to_string(), "Repeating Flash");
    map
});

static PRINT_CONV_165: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0");
    map.insert("1".to_string(), "0.1 m");
    map.insert("10".to_string(), "1.0 m");
    map.insert("11".to_string(), "1.1 m");
    map.insert("12".to_string(), "1.3 m");
    map.insert("13".to_string(), "1.4 m");
    map.insert("14".to_string(), "1.6 m");
    map.insert("15".to_string(), "1.8 m");
    map.insert("16".to_string(), "2.0 m");
    map.insert("17".to_string(), "2.2 m");
    map.insert("18".to_string(), "2.5 m");
    map.insert("19".to_string(), "2.8 m");
    map.insert("2".to_string(), "0.2 m");
    map.insert("20".to_string(), "3.2 m");
    map.insert("21".to_string(), "3.6 m");
    map.insert("22".to_string(), "4.0 m");
    map.insert("23".to_string(), "4.5 m");
    map.insert("24".to_string(), "5.0 m");
    map.insert("25".to_string(), "5.6 m");
    map.insert("255".to_string(), "n/a");
    map.insert("26".to_string(), "6.3 m");
    map.insert("27".to_string(), "7.1 m");
    map.insert("28".to_string(), "8.0 m");
    map.insert("29".to_string(), "9.0 m");
    map.insert("3".to_string(), "0.3 m");
    map.insert("30".to_string(), "10.0 m");
    map.insert("31".to_string(), "11.0 m");
    map.insert("32".to_string(), "13.0 m");
    map.insert("33".to_string(), "14.0 m");
    map.insert("34".to_string(), "16.0 m");
    map.insert("35".to_string(), "18.0 m");
    map.insert("36".to_string(), "20.0 m");
    map.insert("4".to_string(), "0.4 m");
    map.insert("5".to_string(), "0.5 m");
    map.insert("6".to_string(), "0.6 m");
    map.insert("7".to_string(), "0.7 m");
    map.insert("8".to_string(), "0.8 m");
    map.insert("9".to_string(), "0.9 m");
    map
});

static PRINT_CONV_166: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Group");
    map.insert("1".to_string(), "Quick Wireless");
    map.insert("2".to_string(), "Remote Repeating");
    map
});

static PRINT_CONV_167: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Optical AWL");
    map.insert("2".to_string(), "Optical/Radio AWL");
    map.insert("3".to_string(), "Radio AWL");
    map
});

static PRINT_CONV_168: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Disabled");
    map.insert("2".to_string(), "2F");
    map.insert("3".to_string(), "3F");
    map.insert("4".to_string(), "4F");
    map.insert("5".to_string(), "5F");
    map.insert("7".to_string(), "7F");
    map.insert("9".to_string(), "9F");
    map
});

static PRINT_CONV_169: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0.3");
    map.insert("1".to_string(), "0.5");
    map.insert("10".to_string(), "2.5");
    map.insert("11".to_string(), "2.7");
    map.insert("2".to_string(), "0.7");
    map.insert("3".to_string(), "1.0");
    map.insert("4".to_string(), "2.0");
    map.insert("5".to_string(), "3.0");
    map.insert("6".to_string(), "1.3");
    map.insert("7".to_string(), "1.5");
    map.insert("8".to_string(), "1.7");
    map.insert("9".to_string(), "2.3");
    map
});

static PRINT_CONV_170: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Overflow");
    map.insert("1".to_string(), "Backup");
    map.insert("2".to_string(), "NEF Primary + JPG Secondary");
    map.insert("3".to_string(), "JPG Primary + JPG Secondary");
    map
});

static PRINT_CONV_171: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_172: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("2".to_string(), "People");
    map.insert("3".to_string(), "Animals");
    map.insert("4".to_string(), "Vehicles");
    map.insert("5".to_string(), "Birds");
    map.insert("6".to_string(), "Airplanes");
    map
});

static PRINT_CONV_173: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Small");
    map.insert("1".to_string(), "Medium");
    map.insert("2".to_string(), "Large");
    map
});

static PRINT_CONV_174: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "FX");
    map.insert("1".to_string(), "DX");
    map
});

static PRINT_CONV_175: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "H.264 8-bit (MP4)");
    map.insert("2".to_string(), "H.265 8-bit (MOV)");
    map.insert("3".to_string(), "H.265 10-bit (MOV)");
    map.insert("4".to_string(), "ProRes 422 HQ 10-bit (MOV)");
    map.insert("5".to_string(), "ProRes RAW HQ 12-bit (MOV)");
    map.insert("6".to_string(), "NRAW 12-bit (NEV)");
    map
});

static PRINT_CONV_176: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_177: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_178: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_179: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("2".to_string(), "Low");
    map.insert("3".to_string(), "Normal");
    map.insert("4".to_string(), "High");
    map.insert("5".to_string(), "Extra High");
    map
});

static PRINT_CONV_180: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("2".to_string(), "Normal");
    map.insert("3".to_string(), "High");
    map
});

static PRINT_CONV_181: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "50Hz");
    map.insert("2".to_string(), "60Hz");
    map
});

static PRINT_CONV_182: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Matrix");
    map.insert("1".to_string(), "Center");
    map.insert("2".to_string(), "Spot");
    map.insert("3".to_string(), "Highlight");
    map
});

static PRINT_CONV_183: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Manual");
    map.insert("1".to_string(), "AF-S");
    map.insert("2".to_string(), "AF-C");
    map.insert("4".to_string(), "AF-F");
    map
});

static PRINT_CONV_184: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Pinpoint");
    map.insert("1".to_string(), "Single");
    map.insert("11".to_string(), "Subject Tracking");
    map.insert("12".to_string(), "Wide (C1)");
    map.insert("13".to_string(), "Wide (C2)");
    map.insert("2".to_string(), "Dynamic");
    map.insert("3".to_string(), "Wide (S)");
    map.insert("4".to_string(), "Wide (L)");
    map.insert("5".to_string(), "3D");
    map.insert("6".to_string(), "Auto");
    map
});

static PRINT_CONV_185: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Normal");
    map.insert("2".to_string(), "Sport");
    map
});

static PRINT_CONV_186: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_187: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("2".to_string(), "Manual");
    map
});

static PRINT_CONV_188: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_189: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Wide Range");
    map.insert("1".to_string(), "Vocal Range");
    map
});

static PRINT_CONV_190: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_191: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "SDR");
    map.insert("1".to_string(), "HLG");
    map.insert("2".to_string(), "N-Log");
    map
});

static PRINT_CONV_192: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "1920x1080");
    map.insert("2".to_string(), "3840x2160");
    map.insert("3".to_string(), "7680x4320");
    map.insert("7".to_string(), "5376x3024");
    map
});

static PRINT_CONV_193: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "120p");
    map.insert("1".to_string(), "100p");
    map.insert("2".to_string(), "60p");
    map.insert("3".to_string(), "50p");
    map.insert("4".to_string(), "30p");
    map.insert("5".to_string(), "25p");
    map.insert("6".to_string(), "24p");
    map
});

static PRINT_CONV_194: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_195: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_196: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("2".to_string(), "People");
    map.insert("3".to_string(), "Animals");
    map.insert("4".to_string(), "Vehicles");
    map.insert("5".to_string(), "Birds");
    map.insert("6".to_string(), "Airplanes");
    map
});

static PRINT_CONV_197: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("15".to_string(), "Portuguese");
    map.insert("4".to_string(), "English");
    map.insert("5".to_string(), "Spanish");
    map.insert("7".to_string(), "French");
    map
});

static PRINT_CONV_198: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "-5");
    map.insert("1".to_string(), "-4");
    map.insert("10".to_string(), "5");
    map.insert("14".to_string(), "Hi1");
    map.insert("15".to_string(), "Hi2");
    map.insert("16".to_string(), "Lo2");
    map.insert("17".to_string(), "Lo1");
    map.insert("2".to_string(), "-3");
    map.insert("3".to_string(), "-2");
    map.insert("4".to_string(), "-1");
    map.insert("5".to_string(), "0");
    map.insert("6".to_string(), "1");
    map.insert("7".to_string(), "2");
    map.insert("8".to_string(), "3");
    map.insert("9".to_string(), "4");
    map
});

static PRINT_CONV_199: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_200: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("2".to_string(), "On (Series)");
    map
});

static PRINT_CONV_201: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "4320p");
    map.insert("2".to_string(), "2160p");
    map.insert("3".to_string(), "1080p");
    map.insert("4".to_string(), "1080i");
    map.insert("5".to_string(), "720p");
    map
});

static PRINT_CONV_202: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_203: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_204: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Disable Release");
    map.insert("1".to_string(), "Enable Release");
    map
});

static PRINT_CONV_205: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_206: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_207: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_208: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Stays Open");
    map.insert("1".to_string(), "Closes");
    map
});

static PRINT_CONV_209: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_210: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "0.3 Sec");
    map.insert("2".to_string(), "0.5 Sec");
    map.insert("3".to_string(), "1 Sec");
    map
});

static PRINT_CONV_211: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "1 Sec");
    map.insert("1".to_string(), "2 Sec");
    map.insert("2".to_string(), "3 Sec");
    map.insert("3".to_string(), "Max");
    map
});

static PRINT_CONV_212: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_213: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_214: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_215: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("2".to_string(), "Normal");
    map.insert("3".to_string(), "High");
    map
});

static PRINT_CONV_216: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_217: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_218: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "TTL");
    map.insert("1".to_string(), "Auto External Flash");
    map.insert("2".to_string(), "GN (distance priority)");
    map.insert("3".to_string(), "Manual");
    map.insert("4".to_string(), "Repeating Flash");
    map
});

static PRINT_CONV_219: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0");
    map.insert("1".to_string(), "0.1 m");
    map.insert("10".to_string(), "1.0 m");
    map.insert("11".to_string(), "1.1 m");
    map.insert("12".to_string(), "1.3 m");
    map.insert("13".to_string(), "1.4 m");
    map.insert("14".to_string(), "1.6 m");
    map.insert("15".to_string(), "1.8 m");
    map.insert("16".to_string(), "2.0 m");
    map.insert("17".to_string(), "2.2 m");
    map.insert("18".to_string(), "2.5 m");
    map.insert("19".to_string(), "2.8 m");
    map.insert("2".to_string(), "0.2 m");
    map.insert("20".to_string(), "3.2 m");
    map.insert("21".to_string(), "3.6 m");
    map.insert("22".to_string(), "4.0 m");
    map.insert("23".to_string(), "4.5 m");
    map.insert("24".to_string(), "5.0 m");
    map.insert("25".to_string(), "5.6 m");
    map.insert("255".to_string(), "n/a");
    map.insert("26".to_string(), "6.3 m");
    map.insert("27".to_string(), "7.1 m");
    map.insert("28".to_string(), "8.0 m");
    map.insert("29".to_string(), "9.0 m");
    map.insert("3".to_string(), "0.3 m");
    map.insert("30".to_string(), "10.0 m");
    map.insert("31".to_string(), "11.0 m");
    map.insert("32".to_string(), "13.0 m");
    map.insert("33".to_string(), "14.0 m");
    map.insert("34".to_string(), "16.0 m");
    map.insert("35".to_string(), "18.0 m");
    map.insert("36".to_string(), "20.0 m");
    map.insert("4".to_string(), "0.4 m");
    map.insert("5".to_string(), "0.5 m");
    map.insert("6".to_string(), "0.6 m");
    map.insert("7".to_string(), "0.7 m");
    map.insert("8".to_string(), "0.8 m");
    map.insert("9".to_string(), "0.9 m");
    map
});

static PRINT_CONV_220: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Pinpoint");
    map.insert("1".to_string(), "Single");
    map.insert("11".to_string(), "Subject Tracking");
    map.insert("12".to_string(), "Wide (C1)");
    map.insert("13".to_string(), "Wide (C2)");
    map.insert("2".to_string(), "Dynamic");
    map.insert("3".to_string(), "Wide (S)");
    map.insert("4".to_string(), "Wide (L)");
    map.insert("5".to_string(), "3D");
    map.insert("6".to_string(), "Auto");
    map
});

static PRINT_CONV_221: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Normal");
    map.insert("2".to_string(), "Sport");
    map
});

static PRINT_CONV_222: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "AE/Flash");
    map.insert("1".to_string(), "AE");
    map.insert("2".to_string(), "Flash");
    map.insert("3".to_string(), "White Balance");
    map.insert("4".to_string(), "Active-D Lighting");
    map
});

static PRINT_CONV_223: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Disabled");
    map.insert("2".to_string(), "2F");
    map.insert("3".to_string(), "3F");
    map.insert("4".to_string(), "4F");
    map.insert("5".to_string(), "5F");
    map.insert("7".to_string(), "7F");
    map.insert("9".to_string(), "9F");
    map
});

static PRINT_CONV_224: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0.3");
    map.insert("1".to_string(), "0.5");
    map.insert("10".to_string(), "2.5");
    map.insert("11".to_string(), "2.7");
    map.insert("2".to_string(), "0.7");
    map.insert("3".to_string(), "1.0");
    map.insert("4".to_string(), "2.0");
    map.insert("5".to_string(), "3.0");
    map.insert("6".to_string(), "1.3");
    map.insert("7".to_string(), "1.5");
    map.insert("8".to_string(), "1.7");
    map.insert("9".to_string(), "2.3");
    map
});

static PRINT_CONV_225: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Overflow");
    map.insert("1".to_string(), "Backup");
    map.insert("2".to_string(), "NEF Primary + JPG Secondary");
    map.insert("3".to_string(), "JPG Primary + JPG Secondary");
    map
});

static PRINT_CONV_226: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_227: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("2".to_string(), "People");
    map.insert("3".to_string(), "Animals");
    map.insert("4".to_string(), "Vehicles");
    map.insert("5".to_string(), "Birds");
    map.insert("6".to_string(), "Airplanes");
    map
});

static PRINT_CONV_228: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Small");
    map.insert("1".to_string(), "Medium");
    map.insert("2".to_string(), "Large");
    map
});

static PRINT_CONV_229: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_230: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "FX");
    map.insert("1".to_string(), "DX");
    map
});

static PRINT_CONV_231: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "H.264 8-bit (MP4)");
    map.insert("2".to_string(), "H.265 8-bit (MOV)");
    map.insert("3".to_string(), "H.265 10-bit (MOV)");
    map.insert("4".to_string(), "ProRes 422 HQ 10-bit (MOV)");
    map.insert("5".to_string(), "ProRes RAW HQ 12-bit (MOV)");
    map.insert("6".to_string(), "NRAW 12-bit (NEV)");
    map
});

static PRINT_CONV_232: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_233: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_234: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_235: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "CH");
    map.insert("2".to_string(), "CH*");
    map.insert("3".to_string(), "C30");
    map.insert("4".to_string(), "C120");
    map.insert("5".to_string(), "C60");
    map.insert("6".to_string(), "C15");
    map
});

static PRINT_CONV_236: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("2".to_string(), "Low");
    map.insert("3".to_string(), "Normal");
    map.insert("4".to_string(), "High");
    map.insert("5".to_string(), "Extra High");
    map
});

static PRINT_CONV_237: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("2".to_string(), "Normal");
    map.insert("3".to_string(), "High");
    map
});

static PRINT_CONV_238: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "50Hz");
    map.insert("2".to_string(), "60Hz");
    map
});

static PRINT_CONV_239: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Matrix");
    map.insert("1".to_string(), "Center");
    map.insert("2".to_string(), "Spot");
    map.insert("3".to_string(), "Highlight");
    map
});

static PRINT_CONV_240: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Manual");
    map.insert("1".to_string(), "AF-S");
    map.insert("2".to_string(), "AF-C");
    map.insert("4".to_string(), "AF-F");
    map
});

static PRINT_CONV_241: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Pinpoint");
    map.insert("1".to_string(), "Single");
    map.insert("11".to_string(), "Subject Tracking");
    map.insert("12".to_string(), "Wide (C1)");
    map.insert("13".to_string(), "Wide (C2)");
    map.insert("2".to_string(), "Dynamic");
    map.insert("3".to_string(), "Wide (S)");
    map.insert("4".to_string(), "Wide (L)");
    map.insert("5".to_string(), "3D");
    map.insert("6".to_string(), "Auto");
    map
});

static PRINT_CONV_242: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Normal");
    map.insert("2".to_string(), "Sport");
    map
});

static PRINT_CONV_243: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_244: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("2".to_string(), "Manual");
    map
});

static PRINT_CONV_245: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_246: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Wide Range");
    map.insert("1".to_string(), "Vocal Range");
    map
});

static PRINT_CONV_247: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_248: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "SDR");
    map.insert("1".to_string(), "HLG");
    map.insert("2".to_string(), "N-Log");
    map
});

static PRINT_CONV_249: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "1920x1080");
    map.insert("2".to_string(), "3840x2160");
    map.insert("3".to_string(), "7680x4320");
    map.insert("7".to_string(), "5376x3024");
    map
});

static PRINT_CONV_250: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "120p");
    map.insert("1".to_string(), "100p");
    map.insert("2".to_string(), "60p");
    map.insert("3".to_string(), "50p");
    map.insert("4".to_string(), "30p");
    map.insert("5".to_string(), "25p");
    map.insert("6".to_string(), "24p");
    map
});

static PRINT_CONV_251: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_252: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_253: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("2".to_string(), "People");
    map.insert("3".to_string(), "Animals");
    map.insert("4".to_string(), "Vehicles");
    map.insert("5".to_string(), "Birds");
    map.insert("6".to_string(), "Airplanes");
    map
});

static PRINT_CONV_254: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_255: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("15".to_string(), "Portuguese");
    map.insert("4".to_string(), "English");
    map.insert("5".to_string(), "Spanish");
    map.insert("7".to_string(), "French");
    map
});

static PRINT_CONV_256: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "-5");
    map.insert("1".to_string(), "-4");
    map.insert("10".to_string(), "5");
    map.insert("14".to_string(), "Hi1");
    map.insert("15".to_string(), "Hi2");
    map.insert("16".to_string(), "Lo2");
    map.insert("17".to_string(), "Lo1");
    map.insert("2".to_string(), "-3");
    map.insert("3".to_string(), "-2");
    map.insert("4".to_string(), "-1");
    map.insert("5".to_string(), "0");
    map.insert("6".to_string(), "1");
    map.insert("7".to_string(), "2");
    map.insert("8".to_string(), "3");
    map.insert("9".to_string(), "4");
    map
});

static PRINT_CONV_257: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_258: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("2".to_string(), "On (Series)");
    map
});

static PRINT_CONV_259: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "4320p");
    map.insert("2".to_string(), "2160p");
    map.insert("3".to_string(), "1080p");
    map.insert("4".to_string(), "1080i");
    map.insert("5".to_string(), "720p");
    map
});

static PRINT_CONV_260: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_261: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_262: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Disable Release");
    map.insert("1".to_string(), "Enable Release");
    map
});

static PRINT_CONV_263: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_264: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_265: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_266: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Stays Open");
    map.insert("1".to_string(), "Closes");
    map
});

static PRINT_CONV_267: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "1");
    map.insert("1".to_string(), "2");
    map.insert("2".to_string(), "3");
    map.insert("3".to_string(), "4");
    map.insert("4".to_string(), "5");
    map
});

static PRINT_CONV_268: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_269: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "0.3 Sec");
    map.insert("2".to_string(), "0.5 Sec");
    map.insert("3".to_string(), "1 Sec");
    map
});

static PRINT_CONV_270: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "1 Sec");
    map.insert("1".to_string(), "2 Sec");
    map.insert("2".to_string(), "3 Sec");
    map.insert("3".to_string(), "Max");
    map
});

static PRINT_CONV_271: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Save and Load Power Zoom Position");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("118".to_string(), "Raw Processing (Current)");
    map.insert("119".to_string(), "Raw Processing (Multiple)");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Trim");
    map.insert("121".to_string(), "Resize (Current)");
    map.insert("122".to_string(), "Resize (Multiple)");
    map.insert("123".to_string(), "D-Lighting");
    map.insert("124".to_string(), "Straighten");
    map.insert("125".to_string(), "Distortion Control");
    map.insert("126".to_string(), "Perspective Control");
    map.insert("127".to_string(), "Monochrome");
    map.insert("128".to_string(), "Overlay (Add)");
    map.insert("129".to_string(), "Lighten");
    map.insert("130".to_string(), "Darken");
    map.insert("131".to_string(), "Motion Blend");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_272: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Save and Load Power Zoom Position");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("118".to_string(), "Raw Processing (Current)");
    map.insert("119".to_string(), "Raw Processing (Multiple)");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Trim");
    map.insert("121".to_string(), "Resize (Current)");
    map.insert("122".to_string(), "Resize (Multiple)");
    map.insert("123".to_string(), "D-Lighting");
    map.insert("124".to_string(), "Straighten");
    map.insert("125".to_string(), "Distortion Control");
    map.insert("126".to_string(), "Perspective Control");
    map.insert("127".to_string(), "Monochrome");
    map.insert("128".to_string(), "Overlay (Add)");
    map.insert("129".to_string(), "Lighten");
    map.insert("130".to_string(), "Darken");
    map.insert("131".to_string(), "Motion Blend");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_273: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Save and Load Power Zoom Position");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("118".to_string(), "Raw Processing (Current)");
    map.insert("119".to_string(), "Raw Processing (Multiple)");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Trim");
    map.insert("121".to_string(), "Resize (Current)");
    map.insert("122".to_string(), "Resize (Multiple)");
    map.insert("123".to_string(), "D-Lighting");
    map.insert("124".to_string(), "Straighten");
    map.insert("125".to_string(), "Distortion Control");
    map.insert("126".to_string(), "Perspective Control");
    map.insert("127".to_string(), "Monochrome");
    map.insert("128".to_string(), "Overlay (Add)");
    map.insert("129".to_string(), "Lighten");
    map.insert("130".to_string(), "Darken");
    map.insert("131".to_string(), "Motion Blend");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_274: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Always");
    map.insert("1".to_string(), "Only When Flash Not Used");
    map
});

static PRINT_CONV_275: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Save and Load Power Zoom Position");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("118".to_string(), "Raw Processing (Current)");
    map.insert("119".to_string(), "Raw Processing (Multiple)");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Trim");
    map.insert("121".to_string(), "Resize (Current)");
    map.insert("122".to_string(), "Resize (Multiple)");
    map.insert("123".to_string(), "D-Lighting");
    map.insert("124".to_string(), "Straighten");
    map.insert("125".to_string(), "Distortion Control");
    map.insert("126".to_string(), "Perspective Control");
    map.insert("127".to_string(), "Monochrome");
    map.insert("128".to_string(), "Overlay (Add)");
    map.insert("129".to_string(), "Lighten");
    map.insert("130".to_string(), "Darken");
    map.insert("131".to_string(), "Motion Blend");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_276: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Hold");
    map.insert("1".to_string(), "Focus Point");
    map.insert("2".to_string(), "Face Priority");
    map
});

static PRINT_CONV_277: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Hold");
    map.insert("1".to_string(), "Focus Point");
    map.insert("2".to_string(), "Face Priority");
    map
});

static PRINT_CONV_278: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Save and Load Power Zoom Position");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("118".to_string(), "Raw Processing (Current)");
    map.insert("119".to_string(), "Raw Processing (Multiple)");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Trim");
    map.insert("121".to_string(), "Resize (Current)");
    map.insert("122".to_string(), "Resize (Multiple)");
    map.insert("123".to_string(), "D-Lighting");
    map.insert("124".to_string(), "Straighten");
    map.insert("125".to_string(), "Distortion Control");
    map.insert("126".to_string(), "Perspective Control");
    map.insert("127".to_string(), "Monochrome");
    map.insert("128".to_string(), "Overlay (Add)");
    map.insert("129".to_string(), "Lighten");
    map.insert("130".to_string(), "Darken");
    map.insert("131".to_string(), "Motion Blend");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_279: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Save and Load Power Zoom Position");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("118".to_string(), "Raw Processing (Current)");
    map.insert("119".to_string(), "Raw Processing (Multiple)");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Trim");
    map.insert("121".to_string(), "Resize (Current)");
    map.insert("122".to_string(), "Resize (Multiple)");
    map.insert("123".to_string(), "D-Lighting");
    map.insert("124".to_string(), "Straighten");
    map.insert("125".to_string(), "Distortion Control");
    map.insert("126".to_string(), "Perspective Control");
    map.insert("127".to_string(), "Monochrome");
    map.insert("128".to_string(), "Overlay (Add)");
    map.insert("129".to_string(), "Lighten");
    map.insert("130".to_string(), "Darken");
    map.insert("131".to_string(), "Motion Blend");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_280: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Save and Load Power Zoom Position");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("118".to_string(), "Raw Processing (Current)");
    map.insert("119".to_string(), "Raw Processing (Multiple)");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Trim");
    map.insert("121".to_string(), "Resize (Current)");
    map.insert("122".to_string(), "Resize (Multiple)");
    map.insert("123".to_string(), "D-Lighting");
    map.insert("124".to_string(), "Straighten");
    map.insert("125".to_string(), "Distortion Control");
    map.insert("126".to_string(), "Perspective Control");
    map.insert("127".to_string(), "Monochrome");
    map.insert("128".to_string(), "Overlay (Add)");
    map.insert("129".to_string(), "Lighten");
    map.insert("130".to_string(), "Darken");
    map.insert("131".to_string(), "Motion Blend");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_281: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Save and Load Power Zoom Position");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("118".to_string(), "Raw Processing (Current)");
    map.insert("119".to_string(), "Raw Processing (Multiple)");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Trim");
    map.insert("121".to_string(), "Resize (Current)");
    map.insert("122".to_string(), "Resize (Multiple)");
    map.insert("123".to_string(), "D-Lighting");
    map.insert("124".to_string(), "Straighten");
    map.insert("125".to_string(), "Distortion Control");
    map.insert("126".to_string(), "Perspective Control");
    map.insert("127".to_string(), "Monochrome");
    map.insert("128".to_string(), "Overlay (Add)");
    map.insert("129".to_string(), "Lighten");
    map.insert("130".to_string(), "Darken");
    map.insert("131".to_string(), "Motion Blend");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_282: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Save and Load Power Zoom Position");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("118".to_string(), "Raw Processing (Current)");
    map.insert("119".to_string(), "Raw Processing (Multiple)");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Trim");
    map.insert("121".to_string(), "Resize (Current)");
    map.insert("122".to_string(), "Resize (Multiple)");
    map.insert("123".to_string(), "D-Lighting");
    map.insert("124".to_string(), "Straighten");
    map.insert("125".to_string(), "Distortion Control");
    map.insert("126".to_string(), "Perspective Control");
    map.insert("127".to_string(), "Monochrome");
    map.insert("128".to_string(), "Overlay (Add)");
    map.insert("129".to_string(), "Lighten");
    map.insert("130".to_string(), "Darken");
    map.insert("131".to_string(), "Motion Blend");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_283: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Save and Load Power Zoom Position");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("118".to_string(), "Raw Processing (Current)");
    map.insert("119".to_string(), "Raw Processing (Multiple)");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Trim");
    map.insert("121".to_string(), "Resize (Current)");
    map.insert("122".to_string(), "Resize (Multiple)");
    map.insert("123".to_string(), "D-Lighting");
    map.insert("124".to_string(), "Straighten");
    map.insert("125".to_string(), "Distortion Control");
    map.insert("126".to_string(), "Perspective Control");
    map.insert("127".to_string(), "Monochrome");
    map.insert("128".to_string(), "Overlay (Add)");
    map.insert("129".to_string(), "Lighten");
    map.insert("130".to_string(), "Darken");
    map.insert("131".to_string(), "Motion Blend");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_284: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Save and Load Power Zoom Position");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("118".to_string(), "Raw Processing (Current)");
    map.insert("119".to_string(), "Raw Processing (Multiple)");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Trim");
    map.insert("121".to_string(), "Resize (Current)");
    map.insert("122".to_string(), "Resize (Multiple)");
    map.insert("123".to_string(), "D-Lighting");
    map.insert("124".to_string(), "Straighten");
    map.insert("125".to_string(), "Distortion Control");
    map.insert("126".to_string(), "Perspective Control");
    map.insert("127".to_string(), "Monochrome");
    map.insert("128".to_string(), "Overlay (Add)");
    map.insert("129".to_string(), "Lighten");
    map.insert("130".to_string(), "Darken");
    map.insert("131".to_string(), "Motion Blend");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_285: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Save and Load Power Zoom Position");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("118".to_string(), "Raw Processing (Current)");
    map.insert("119".to_string(), "Raw Processing (Multiple)");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Trim");
    map.insert("121".to_string(), "Resize (Current)");
    map.insert("122".to_string(), "Resize (Multiple)");
    map.insert("123".to_string(), "D-Lighting");
    map.insert("124".to_string(), "Straighten");
    map.insert("125".to_string(), "Distortion Control");
    map.insert("126".to_string(), "Perspective Control");
    map.insert("127".to_string(), "Monochrome");
    map.insert("128".to_string(), "Overlay (Add)");
    map.insert("129".to_string(), "Lighten");
    map.insert("130".to_string(), "Darken");
    map.insert("131".to_string(), "Motion Blend");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_286: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Preview");
    map.insert("10".to_string(), "Flash Disable/Enable");
    map.insert("100".to_string(), "Photo Flicker Reduction");
    map.insert("101".to_string(), "Filtered Playback (Select Criteria)");
    map.insert("103".to_string(), "Start Series Playback");
    map.insert("104".to_string(), "View Assist");
    map.insert("105".to_string(), "Hi-Res Zoom+");
    map.insert("106".to_string(), "Hi-Res Zoom-");
    map.insert("108".to_string(), "Override Other Cameras");
    map.insert(
        "109".to_string(),
        "DISP - Cycle Information Display (shooting)",
    );
    map.insert("11".to_string(), "Bracketing Burst");
    map.insert(
        "110".to_string(),
        "DISP - Cycle Information Display (playback)",
    );
    map.insert("111".to_string(), "Resume Shooting");
    map.insert("112".to_string(), "Switch Eyes");
    map.insert("113".to_string(), "Power Zoom +");
    map.insert("114".to_string(), "Power Zoom -");
    map.insert("115".to_string(), "Delete");
    map.insert("116".to_string(), "Save and Load Power Zoom Position");
    map.insert("117".to_string(), "Cycle AF-area Mode");
    map.insert("118".to_string(), "Raw Processing (Current)");
    map.insert("119".to_string(), "Raw Processing (Multiple)");
    map.insert("12".to_string(), "+NEF(RAW)");
    map.insert("120".to_string(), "Trim");
    map.insert("121".to_string(), "Resize (Current)");
    map.insert("122".to_string(), "Resize (Multiple)");
    map.insert("123".to_string(), "D-Lighting");
    map.insert("124".to_string(), "Straighten");
    map.insert("125".to_string(), "Distortion Control");
    map.insert("126".to_string(), "Perspective Control");
    map.insert("127".to_string(), "Monochrome");
    map.insert("128".to_string(), "Overlay (Add)");
    map.insert("129".to_string(), "Lighten");
    map.insert("130".to_string(), "Darken");
    map.insert("131".to_string(), "Motion Blend");
    map.insert("18".to_string(), "Virtual Horizon");
    map.insert("19".to_string(), "Synchronized Release");
    map.insert("20".to_string(), "My Menu");
    map.insert("21".to_string(), "My Menu Top Item");
    map.insert("22".to_string(), "Playback");
    map.insert("23".to_string(), "Rating");
    map.insert("24".to_string(), "Protect");
    map.insert("25".to_string(), "Zoom");
    map.insert("26".to_string(), "Focus Peaking");
    map.insert("27".to_string(), "Flash Mode/Compensation");
    map.insert("28".to_string(), "Image Area");
    map.insert("3".to_string(), "FV Lock");
    map.insert("30".to_string(), "Non-CPU Lens");
    map.insert("31".to_string(), "Active-D Lighting");
    map.insert("32".to_string(), "Exposure Delay Mode");
    map.insert("33".to_string(), "1 Stop Speed/Aperture");
    map.insert("34".to_string(), "White Balance");
    map.insert("35".to_string(), "Metering");
    map.insert("36".to_string(), "Auto Bracketing");
    map.insert("37".to_string(), "Multiple Exposure");
    map.insert("38".to_string(), "HDR Overlay");
    map.insert("39".to_string(), "Picture Control");
    map.insert("4".to_string(), "AE/AF Lock");
    map.insert("40".to_string(), "Quality");
    map.insert("41".to_string(), "Focus Mode/AF AreaMode");
    map.insert("42".to_string(), "Select Center Focus Point");
    map.insert("44".to_string(), "Record Movie");
    map.insert("45".to_string(), "Thumbnail On/Off");
    map.insert("46".to_string(), "View Histograms");
    map.insert("47".to_string(), "Choose Folder");
    map.insert("48".to_string(), "Power Aperture (Open)");
    map.insert("49".to_string(), "Power Aperture (Close)");
    map.insert("5".to_string(), "AE Lock Only");
    map.insert("52".to_string(), "Microphone Sensitivity");
    map.insert("53".to_string(), "Release Mode");
    map.insert("57".to_string(), "Preset Focus Point");
    map.insert("58".to_string(), "AE/AWB Lock (hold)");
    map.insert("59".to_string(), "AF-AreaMode");
    map.insert("6".to_string(), "AE Lock (reset on release)");
    map.insert("60".to_string(), "AF-AreaMode + AF-On");
    map.insert("61".to_string(), "Recall Shooting Functions");
    map.insert("64".to_string(), "Filtered Playback");
    map.insert("65".to_string(), "Same as AF-On");
    map.insert("66".to_string(), "Voice Memo");
    map.insert("7".to_string(), "AE Lock (hold)");
    map.insert("70".to_string(), "Photo Shooting Bank");
    map.insert("71".to_string(), "ISO");
    map.insert("72".to_string(), "Shooting Mode");
    map.insert("73".to_string(), "Exposure Compensation");
    map.insert("76".to_string(), "Silent Mode");
    map.insert("78".to_string(), "LiveView Information");
    map.insert("79".to_string(), "AWB Lock (hold)");
    map.insert("8".to_string(), "AF Lock Only");
    map.insert("80".to_string(), "Grid Display");
    map.insert("81".to_string(), "Starlight View");
    map.insert("82".to_string(), "Select To Send (PC)");
    map.insert("83".to_string(), "Select To Send (FTP)");
    map.insert("84".to_string(), "Pattern Tone Range");
    map.insert("85".to_string(), "Control Lock");
    map.insert("86".to_string(), "Save Focus Position");
    map.insert("87".to_string(), "Recall Focus Position");
    map.insert("88".to_string(), "Recall Shooting Functions (Hold)");
    map.insert("89".to_string(), "Set Picture Control (HLG)");
    map.insert("9".to_string(), "AF-On");
    map.insert("90".to_string(), "Skin Softening");
    map.insert("91".to_string(), "Portrait Impression Balance");
    map.insert("92".to_string(), "Fast AF-On");
    map.insert("97".to_string(), "High Frequency Flicker Reduction");
    map.insert("98".to_string(), "Switch FX/DX");
    map.insert("99".to_string(), "View Mode (Photo LV)");
    map
});

static PRINT_CONV_287: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_288: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_289: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_290: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("2".to_string(), "Normal");
    map.insert("3".to_string(), "High");
    map
});

static PRINT_CONV_291: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_292: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_293: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "TTL");
    map.insert("1".to_string(), "Auto External Flash");
    map.insert("2".to_string(), "GN (distance priority)");
    map.insert("3".to_string(), "Manual");
    map.insert("4".to_string(), "Repeating Flash");
    map
});

static PRINT_CONV_294: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0");
    map.insert("1".to_string(), "0.1 m");
    map.insert("10".to_string(), "1.0 m");
    map.insert("11".to_string(), "1.1 m");
    map.insert("12".to_string(), "1.3 m");
    map.insert("13".to_string(), "1.4 m");
    map.insert("14".to_string(), "1.6 m");
    map.insert("15".to_string(), "1.8 m");
    map.insert("16".to_string(), "2.0 m");
    map.insert("17".to_string(), "2.2 m");
    map.insert("18".to_string(), "2.5 m");
    map.insert("19".to_string(), "2.8 m");
    map.insert("2".to_string(), "0.2 m");
    map.insert("20".to_string(), "3.2 m");
    map.insert("21".to_string(), "3.6 m");
    map.insert("22".to_string(), "4.0 m");
    map.insert("23".to_string(), "4.5 m");
    map.insert("24".to_string(), "5.0 m");
    map.insert("25".to_string(), "5.6 m");
    map.insert("255".to_string(), "n/a");
    map.insert("26".to_string(), "6.3 m");
    map.insert("27".to_string(), "7.1 m");
    map.insert("28".to_string(), "8.0 m");
    map.insert("29".to_string(), "9.0 m");
    map.insert("3".to_string(), "0.3 m");
    map.insert("30".to_string(), "10.0 m");
    map.insert("31".to_string(), "11.0 m");
    map.insert("32".to_string(), "13.0 m");
    map.insert("33".to_string(), "14.0 m");
    map.insert("34".to_string(), "16.0 m");
    map.insert("35".to_string(), "18.0 m");
    map.insert("36".to_string(), "20.0 m");
    map.insert("4".to_string(), "0.4 m");
    map.insert("5".to_string(), "0.5 m");
    map.insert("6".to_string(), "0.6 m");
    map.insert("7".to_string(), "0.7 m");
    map.insert("8".to_string(), "0.8 m");
    map.insert("9".to_string(), "0.9 m");
    map
});

static PRINT_CONV_295: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Pinpoint");
    map.insert("1".to_string(), "Single");
    map.insert("11".to_string(), "Subject Tracking");
    map.insert("12".to_string(), "Wide (C1)");
    map.insert("13".to_string(), "Wide (C2)");
    map.insert("2".to_string(), "Dynamic");
    map.insert("3".to_string(), "Wide (S)");
    map.insert("4".to_string(), "Wide (L)");
    map.insert("5".to_string(), "3D");
    map.insert("6".to_string(), "Auto");
    map
});

static PRINT_CONV_296: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Normal");
    map.insert("2".to_string(), "Sport");
    map
});

static PRINT_CONV_297: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "AE/Flash");
    map.insert("1".to_string(), "AE");
    map.insert("2".to_string(), "Flash");
    map.insert("3".to_string(), "White Balance");
    map.insert("4".to_string(), "Active-D Lighting");
    map
});

static PRINT_CONV_298: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Disabled");
    map.insert("2".to_string(), "2F");
    map.insert("3".to_string(), "3F");
    map.insert("4".to_string(), "4F");
    map.insert("5".to_string(), "5F");
    map.insert("7".to_string(), "7F");
    map.insert("9".to_string(), "9F");
    map
});

static PRINT_CONV_299: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0.3");
    map.insert("1".to_string(), "0.5");
    map.insert("10".to_string(), "2.5");
    map.insert("11".to_string(), "2.7");
    map.insert("2".to_string(), "0.7");
    map.insert("3".to_string(), "1.0");
    map.insert("4".to_string(), "2.0");
    map.insert("5".to_string(), "3.0");
    map.insert("6".to_string(), "1.3");
    map.insert("7".to_string(), "1.5");
    map.insert("8".to_string(), "1.7");
    map.insert("9".to_string(), "2.3");
    map
});

static PRINT_CONV_300: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("2".to_string(), "On (Series)");
    map
});

static PRINT_CONV_301: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Overflow");
    map.insert("1".to_string(), "Backup");
    map.insert("2".to_string(), "NEF Primary + JPG Secondary");
    map.insert("3".to_string(), "JPG Primary + JPG Secondary");
    map
});

static PRINT_CONV_302: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Extra High");
    map.insert("2".to_string(), "High");
    map.insert("3".to_string(), "Normal");
    map.insert("4".to_string(), "Low");
    map
});

static PRINT_CONV_303: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Large (8256x5504)");
    map.insert("1".to_string(), "Medium (6192x4128)");
    map.insert("2".to_string(), "Small (4128x2752)");
    map
});

static PRINT_CONV_304: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_305: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("2".to_string(), "People");
    map.insert("3".to_string(), "Animals");
    map.insert("4".to_string(), "Vehicles");
    map.insert("5".to_string(), "Birds");
    map.insert("6".to_string(), "Airplanes");
    map
});

static PRINT_CONV_306: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Small");
    map.insert("1".to_string(), "Medium");
    map.insert("2".to_string(), "Large");
    map
});

static PRINT_CONV_307: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_308: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "FX");
    map.insert("1".to_string(), "DX");
    map
});

static PRINT_CONV_309: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "H.264 8-bit (MP4)");
    map.insert("2".to_string(), "H.265 8-bit (MOV)");
    map.insert("3".to_string(), "H.265 10-bit (MOV)");
    map.insert("4".to_string(), "ProRes 422 HQ 10-bit (MOV)");
    map.insert("5".to_string(), "ProRes RAW HQ 12-bit (MOV)");
    map.insert("6".to_string(), "NRAW 12-bit (NEV)");
    map
});

static PRINT_CONV_310: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_311: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_312: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_313: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "CH");
    map.insert("2".to_string(), "CH*");
    map.insert("3".to_string(), "C30");
    map.insert("4".to_string(), "C120");
    map.insert("5".to_string(), "C60");
    map.insert("6".to_string(), "C15");
    map
});

static PRINT_CONV_314: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("2".to_string(), "Low");
    map.insert("3".to_string(), "Normal");
    map.insert("4".to_string(), "High");
    map.insert("5".to_string(), "Extra High");
    map
});

static PRINT_CONV_315: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("2".to_string(), "Normal");
    map.insert("3".to_string(), "High");
    map
});

static PRINT_CONV_316: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "50Hz");
    map.insert("2".to_string(), "60Hz");
    map
});

static PRINT_CONV_317: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Matrix");
    map.insert("1".to_string(), "Center");
    map.insert("2".to_string(), "Spot");
    map.insert("3".to_string(), "Highlight");
    map
});

static PRINT_CONV_318: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Manual");
    map.insert("1".to_string(), "AF-S");
    map.insert("2".to_string(), "AF-C");
    map.insert("4".to_string(), "AF-F");
    map
});

static PRINT_CONV_319: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Pinpoint");
    map.insert("1".to_string(), "Single");
    map.insert("11".to_string(), "Subject Tracking");
    map.insert("12".to_string(), "Wide (C1)");
    map.insert("13".to_string(), "Wide (C2)");
    map.insert("2".to_string(), "Dynamic");
    map.insert("3".to_string(), "Wide (S)");
    map.insert("4".to_string(), "Wide (L)");
    map.insert("5".to_string(), "3D");
    map.insert("6".to_string(), "Auto");
    map
});

static PRINT_CONV_320: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Normal");
    map.insert("2".to_string(), "Sport");
    map
});

static PRINT_CONV_321: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_322: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("2".to_string(), "Manual");
    map
});

static PRINT_CONV_323: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_324: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Wide Range");
    map.insert("1".to_string(), "Vocal Range");
    map
});

static PRINT_CONV_325: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_326: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "SDR");
    map.insert("1".to_string(), "HLG");
    map.insert("2".to_string(), "N-Log");
    map
});

static PRINT_CONV_327: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "1920x1080");
    map.insert("2".to_string(), "3840x2160");
    map.insert("3".to_string(), "7680x4320");
    map.insert("7".to_string(), "5376x3024");
    map
});

static PRINT_CONV_328: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "120p");
    map.insert("1".to_string(), "100p");
    map.insert("2".to_string(), "60p");
    map.insert("3".to_string(), "50p");
    map.insert("4".to_string(), "30p");
    map.insert("5".to_string(), "25p");
    map.insert("6".to_string(), "24p");
    map
});

static PRINT_CONV_329: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_330: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_331: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("2".to_string(), "People");
    map.insert("3".to_string(), "Animals");
    map.insert("4".to_string(), "Vehicles");
    map.insert("5".to_string(), "Birds");
    map.insert("6".to_string(), "Airplanes");
    map
});

static PRINT_CONV_332: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_333: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "All");
    map.insert("2".to_string(), "Wide (L)");
    map.insert("3".to_string(), "Wide (S)");
    map
});

static PRINT_CONV_334: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_335: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On (4x)");
    map.insert("2".to_string(), "On (5x)");
    map
});

static PRINT_CONV_336: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "H.264 8-bit (MP4)");
    map.insert("2".to_string(), "H.265 8-bit (MOV)");
    map.insert("3".to_string(), "H.265 10-bit (MOV)");
    map.insert("4".to_string(), "ProRes 422 HQ 10-bit (MOV)");
    map.insert("5".to_string(), "ProRes RAW HQ 12-bit (MOV)");
    map.insert("6".to_string(), "NRAW 12-bit (NEV)");
    map
});

static PRINT_CONV_337: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "1920x1080");
    map.insert("2".to_string(), "3840x2160");
    map.insert("3".to_string(), "7680x4320");
    map.insert("7".to_string(), "5376x3024");
    map
});

static PRINT_CONV_338: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "240p");
    map.insert("1".to_string(), "200p");
    map.insert("2".to_string(), "120p");
    map.insert("3".to_string(), "100p");
    map.insert("4".to_string(), "60p");
    map.insert("5".to_string(), "50p");
    map.insert("6".to_string(), "30p");
    map.insert("7".to_string(), "25p");
    map.insert("8".to_string(), "24p");
    map
});

static PRINT_CONV_339: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("15".to_string(), "Portuguese");
    map.insert("4".to_string(), "English");
    map.insert("5".to_string(), "Spanish");
    map.insert("7".to_string(), "French");
    map
});

static PRINT_CONV_340: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "-5");
    map.insert("1".to_string(), "-4");
    map.insert("10".to_string(), "5");
    map.insert("14".to_string(), "Hi1");
    map.insert("15".to_string(), "Hi2");
    map.insert("16".to_string(), "Lo2");
    map.insert("17".to_string(), "Lo1");
    map.insert("2".to_string(), "-3");
    map.insert("3".to_string(), "-2");
    map.insert("4".to_string(), "-1");
    map.insert("5".to_string(), "0");
    map.insert("6".to_string(), "1");
    map.insert("7".to_string(), "2");
    map.insert("8".to_string(), "3");
    map.insert("9".to_string(), "4");
    map
});

static PRINT_CONV_341: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Disable Release");
    map.insert("1".to_string(), "Enable Release");
    map
});

static PRINT_CONV_342: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_343: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_344: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_345: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_346: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_347: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "CH");
    map.insert("2".to_string(), "CH*");
    map.insert("3".to_string(), "C30");
    map.insert("4".to_string(), "C120");
    map.insert("5".to_string(), "C60");
    map.insert("6".to_string(), "C15");
    map
});

static PRINT_CONV_348: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("2".to_string(), "On (Series)");
    map
});

static PRINT_CONV_349: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_350: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_351: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_352: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_353: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO 32000");
    map.insert("28".to_string(), "ISO 40000");
    map.insert("29".to_string(), "ISO 51200");
    map.insert("30".to_string(), "ISO 64000");
    map.insert("31".to_string(), "ISO Hi 0.3");
    map.insert("32".to_string(), "ISO Hi 0.7");
    map.insert("33".to_string(), "ISO Hi 1.0");
    map.insert("35".to_string(), "ISO Hi 1.7");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_354: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_355: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_356: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_357: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Matrix");
    map.insert("1".to_string(), "Center");
    map.insert("2".to_string(), "Spot");
    map.insert("3".to_string(), "Highlight");
    map
});

static PRINT_CONV_358: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "TTL");
    map.insert("1".to_string(), "Auto External Flash");
    map.insert("2".to_string(), "GN (distance priority)");
    map.insert("3".to_string(), "Manual");
    map.insert("4".to_string(), "Repeating Flash");
    map
});

static PRINT_CONV_359: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0");
    map.insert("1".to_string(), "0.1 m");
    map.insert("10".to_string(), "1.0 m");
    map.insert("11".to_string(), "1.1 m");
    map.insert("12".to_string(), "1.3 m");
    map.insert("13".to_string(), "1.4 m");
    map.insert("14".to_string(), "1.6 m");
    map.insert("15".to_string(), "1.8 m");
    map.insert("16".to_string(), "2.0 m");
    map.insert("17".to_string(), "2.2 m");
    map.insert("18".to_string(), "2.5 m");
    map.insert("19".to_string(), "2.8 m");
    map.insert("2".to_string(), "0.2 m");
    map.insert("20".to_string(), "3.2 m");
    map.insert("21".to_string(), "3.6 m");
    map.insert("22".to_string(), "4.0 m");
    map.insert("23".to_string(), "4.5 m");
    map.insert("24".to_string(), "5.0 m");
    map.insert("25".to_string(), "5.6 m");
    map.insert("255".to_string(), "n/a");
    map.insert("26".to_string(), "6.3 m");
    map.insert("27".to_string(), "7.1 m");
    map.insert("28".to_string(), "8.0 m");
    map.insert("29".to_string(), "9.0 m");
    map.insert("3".to_string(), "0.3 m");
    map.insert("30".to_string(), "10.0 m");
    map.insert("31".to_string(), "11.0 m");
    map.insert("32".to_string(), "13.0 m");
    map.insert("33".to_string(), "14.0 m");
    map.insert("34".to_string(), "16.0 m");
    map.insert("35".to_string(), "18.0 m");
    map.insert("36".to_string(), "20.0 m");
    map.insert("4".to_string(), "0.4 m");
    map.insert("5".to_string(), "0.5 m");
    map.insert("6".to_string(), "0.6 m");
    map.insert("7".to_string(), "0.7 m");
    map.insert("8".to_string(), "0.8 m");
    map.insert("9".to_string(), "0.9 m");
    map
});

static PRINT_CONV_360: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Optical AWL");
    map.insert("2".to_string(), "Optical/Radio AWL");
    map.insert("3".to_string(), "Radio AWL");
    map
});

static PRINT_CONV_361: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Group");
    map.insert("1".to_string(), "Quick Wireless");
    map.insert("2".to_string(), "Remote Repeating");
    map
});

static PRINT_CONV_362: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "TTL");
    map.insert("1".to_string(), "Manual");
    map.insert("2".to_string(), "Auto");
    map.insert("3".to_string(), "Off");
    map
});

static PRINT_CONV_363: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Pinpoint");
    map.insert("1".to_string(), "Single");
    map.insert("11".to_string(), "Subject Tracking");
    map.insert("12".to_string(), "Wide (C1)");
    map.insert("13".to_string(), "Wide (C2)");
    map.insert("2".to_string(), "Dynamic");
    map.insert("3".to_string(), "Wide (S)");
    map.insert("4".to_string(), "Wide (L)");
    map.insert("5".to_string(), "3D");
    map.insert("6".to_string(), "Auto");
    map
});

static PRINT_CONV_364: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Normal");
    map.insert("2".to_string(), "Sport");
    map
});

static PRINT_CONV_365: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "AE/Flash");
    map.insert("1".to_string(), "AE");
    map.insert("2".to_string(), "Flash");
    map.insert("3".to_string(), "White Balance");
    map.insert("4".to_string(), "Active-D Lighting");
    map
});

static PRINT_CONV_366: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Disabled");
    map.insert("2".to_string(), "2F");
    map.insert("3".to_string(), "3F");
    map.insert("4".to_string(), "4F");
    map.insert("5".to_string(), "5F");
    map.insert("7".to_string(), "7F");
    map.insert("9".to_string(), "9F");
    map
});

static PRINT_CONV_367: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0.3");
    map.insert("1".to_string(), "0.5");
    map.insert("10".to_string(), "2.5");
    map.insert("11".to_string(), "2.7");
    map.insert("2".to_string(), "0.7");
    map.insert("3".to_string(), "1.0");
    map.insert("4".to_string(), "2.0");
    map.insert("5".to_string(), "3.0");
    map.insert("6".to_string(), "1.3");
    map.insert("7".to_string(), "1.5");
    map.insert("8".to_string(), "1.7");
    map.insert("9".to_string(), "2.3");
    map
});

static PRINT_CONV_368: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("2".to_string(), "On (Series)");
    map
});

static PRINT_CONV_369: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Overflow");
    map.insert("1".to_string(), "Backup");
    map.insert("2".to_string(), "NEF Primary + JPG Secondary");
    map.insert("3".to_string(), "JPG Primary + JPG Secondary");
    map
});

static PRINT_CONV_370: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Extra High");
    map.insert("2".to_string(), "High");
    map.insert("3".to_string(), "Normal");
    map.insert("4".to_string(), "Low");
    map
});

static PRINT_CONV_371: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Large (6048x4032)");
    map.insert("1".to_string(), "Medium (4528x3024)");
    map.insert("2".to_string(), "Small (3024x2016)");
    map
});

static PRINT_CONV_372: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("2".to_string(), "People");
    map.insert("3".to_string(), "Animals");
    map.insert("4".to_string(), "Vehicles");
    map.insert("5".to_string(), "Birds");
    map.insert("6".to_string(), "Airplanes");
    map
});

static PRINT_CONV_373: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Small");
    map.insert("1".to_string(), "Medium");
    map.insert("2".to_string(), "Large");
    map
});

static PRINT_CONV_374: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "SDR");
    map.insert("1".to_string(), "HLG");
    map
});

static PRINT_CONV_375: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Mode 1");
    map.insert("2".to_string(), "Mode 2");
    map.insert("3".to_string(), "Mode 3");
    map
});

static PRINT_CONV_376: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_377: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("2".to_string(), "On (Series)");
    map
});

static PRINT_CONV_378: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "4");
    map.insert("1".to_string(), "8");
    map.insert("2".to_string(), "16");
    map.insert("3".to_string(), "32");
    map
});

static PRINT_CONV_379: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_380: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_381: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_382: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Optical AWL");
    map.insert("2".to_string(), "Optical/Radio AWL");
    map.insert("3".to_string(), "Radio AWL");
    map
});

static PRINT_CONV_383: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Group");
    map.insert("1".to_string(), "Quick Wireless");
    map.insert("2".to_string(), "Remote Repeating");
    map
});

static PRINT_CONV_384: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "TTL");
    map.insert("1".to_string(), "Manual");
    map.insert("2".to_string(), "Auto");
    map.insert("3".to_string(), "Off");
    map
});

static PRINT_CONV_385: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "1920x1080");
    map.insert("2".to_string(), "3840x2160");
    map.insert("3".to_string(), "7680x4320");
    map.insert("7".to_string(), "5376x3024");
    map
});

static PRINT_CONV_386: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "120p");
    map.insert("1".to_string(), "100p");
    map.insert("2".to_string(), "60p");
    map.insert("3".to_string(), "50p");
    map.insert("4".to_string(), "30p");
    map.insert("5".to_string(), "25p");
    map.insert("6".to_string(), "24p");
    map
});

static PRINT_CONV_387: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On (4x)");
    map.insert("2".to_string(), "On (5x)");
    map
});

static PRINT_CONV_388: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "MOV");
    map.insert("1".to_string(), "MP4");
    map
});

static PRINT_CONV_389: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_390: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("2".to_string(), "Low");
    map.insert("3".to_string(), "Normal");
    map.insert("4".to_string(), "High");
    map.insert("5".to_string(), "Extra High");
    map
});

static PRINT_CONV_391: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("2".to_string(), "Normal");
    map.insert("3".to_string(), "High");
    map
});

static PRINT_CONV_392: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("2".to_string(), "Normal");
    map.insert("3".to_string(), "High");
    map
});

static PRINT_CONV_393: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_394: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_395: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_396: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Manual");
    map.insert("1".to_string(), "AF-S");
    map.insert("2".to_string(), "AF-C");
    map.insert("4".to_string(), "AF-F");
    map
});

static PRINT_CONV_397: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On (Normal)");
    map.insert("2".to_string(), "On (Sport)");
    map
});

static PRINT_CONV_398: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_399: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_400: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Continuous Low");
    map.insert("1".to_string(), "Continuous High");
    map.insert("2".to_string(), "Continuous High (Extended)");
    map.insert("4".to_string(), "Timer");
    map.insert("5".to_string(), "Single Frame");
    map
});

static PRINT_CONV_401: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Daylight");
    map.insert("2".to_string(), "Shade");
    map.insert("3".to_string(), "Fluorescent");
    map.insert("4".to_string(), "Tungsten");
    map.insert("5".to_string(), "Manual");
    map
});

/// Get tag definitions for other category
pub fn get_other_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (11, TagKitDef {
            id: 11,
            name: "WhiteBalanceFineTune",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "WB_RBLevels",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (128, TagKitDef {
            id: 128,
            name: "ImageAdjustment",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (129, TagKitDef {
            id: 129,
            name: "ToneComp",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "ProgramShift",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::Exif::PrintFraction($val)"),
            value_conv: Some("my ($a,$b,$c)=unpack(\"c3\",$val); $c ? $a*($b/$c) : 0"),
            subdirectory: None,
        }),
        (130, TagKitDef {
            id: 130,
            name: "AuxiliaryLens",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (131, TagKitDef {
            id: 131,
            name: "LensType",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression(r#"$_ = $val ? Image::ExifTool::DecodeBits($val,
            {
                0 => 'MF',
                1 => 'D',
                2 => 'G',
                3 => 'VR',
                4 => '1', #PH
                5 => 'FT-1', #PH/IB
                6 => 'E', #PH (electromagnetic aperture mechanism)
                7 => 'AF-P', #PH/IB
            }) : 'AF';
            # remove commas and change "D G" to just "G"
            s/,//g; s/\bD G\b/G/;
            s/ E\b// and s/^(G )?/E /;      # put "E" at the start instead of "G"
            s/ 1// and $_ = "1 $_";         # put "1" at start
            s/FT-1 // and $_ .= ' FT-1';    # put "FT-1" at end
            return $_;
        "#),
            value_conv: None,
            subdirectory: None,
        }),
        (132, TagKitDef {
            id: 132,
            name: "Lens",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (133, TagKitDef {
            id: 133,
            name: "ManualFocusDistance",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (134, TagKitDef {
            id: 134,
            name: "DigitalZoom",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (135, TagKitDef {
            id: 135,
            name: "FlashMode",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_36),
            value_conv: None,
            subdirectory: None,
        }),
        (136, TagKitDef {
            id: 136,
            name: "AFInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x88_subdirectory }),
        }),
        (136, TagKitDef {
            id: 136,
            name: "AFInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x88_subdirectory }),
        }),
        (137, TagKitDef {
            id: 137,
            name: "ShootingMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("for the D70, Bit 5 = Unused LE-NR Slowdown"),
            print_conv: PrintConvType::Expression(r"
            $_ = '';
            unless ($val & 0x87) {
                return 'Single-Frame' unless $val;
                $_ = 'Single-Frame, ';
            }
            return $_ . Image::ExifTool::DecodeBits($val,
            {
                0 => 'Continuous',
                1 => 'Delay',
                2 => 'PC Control',
                3 => 'Self-timer', #forum6281 (NC)
                4 => 'Exposure Bracketing',
                5 => $$self{Model}=~/D70\b/ ? 'Unused LE-NR Slowdown' : 'Auto ISO',
                6 => 'White-Balance Bracketing',
                7 => 'IR Control',
                8 => 'D-Lighting Bracketing', #forum6281 (NC)
                11 => 'Pre-capture', #28  Z9 pre-release burst
            });
        "),
            value_conv: None,
            subdirectory: None,
        }),
        (139, TagKitDef {
            id: 139,
            name: "LensFStops",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.2f\", $val)"),
            value_conv: Some("my ($a,$b,$c)=unpack(\"C3\",$val); $c ? $a*($b/$c) : 0"),
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "ExposureDifference",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\",$val) : 0"),
            value_conv: Some("my ($a,$b,$c)=unpack(\"c3\",$val); $c ? $a*($b/$c) : 0"),
            subdirectory: None,
        }),
        (140, TagKitDef {
            id: 140,
            name: "ContrastCurve",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (141, TagKitDef {
            id: 141,
            name: "ColorHue",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (143, TagKitDef {
            id: 143,
            name: "SceneMode",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (144, TagKitDef {
            id: 144,
            name: "LightSource",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD40",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD80",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD90",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD3a",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD3b",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD3X",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD3S",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD300a",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD300b",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD300S",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD700",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD780",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD7500",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD800",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD810",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD850",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD5000",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD5100",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD5200",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD7000",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD4",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD4S",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD500",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD6",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoD610",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoZ6III",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoZ7II",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoZ8",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoZ9",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfo02xx",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "ShotInfoUnknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (146, TagKitDef {
            id: 146,
            name: "HueAdjustment",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (147, TagKitDef {
            id: 147,
            name: "NEFCompression",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_37),
            value_conv: None,
            subdirectory: None,
        }),
        (148, TagKitDef {
            id: 148,
            name: "SaturationAdj",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (149, TagKitDef {
            id: 149,
            name: "NoiseReduction",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (15, TagKitDef {
            id: 15,
            name: "ISOSelection",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (150, TagKitDef {
            id: 150,
            name: "NEFLinearizationTable",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (151, TagKitDef {
            id: 151,
            name: "ColorBalance0100",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x97_subdirectory }),
        }),
        (151, TagKitDef {
            id: 151,
            name: "ColorBalance0102",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x97_subdirectory }),
        }),
        (151, TagKitDef {
            id: 151,
            name: "ColorBalance0103",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x97_subdirectory }),
        }),
        (151, TagKitDef {
            id: 151,
            name: "ColorBalance0205",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x97_subdirectory }),
        }),
        (151, TagKitDef {
            id: 151,
            name: "ColorBalance0209",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x97_subdirectory }),
        }),
        (151, TagKitDef {
            id: 151,
            name: "ColorBalance02",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x97_subdirectory }),
        }),
        (151, TagKitDef {
            id: 151,
            name: "ColorBalance0211",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x97_subdirectory }),
        }),
        (151, TagKitDef {
            id: 151,
            name: "ColorBalance0213",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x97_subdirectory }),
        }),
        (151, TagKitDef {
            id: 151,
            name: "ColorBalance0215",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x97_subdirectory }),
        }),
        (151, TagKitDef {
            id: 151,
            name: "ColorBalance0219",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x97_subdirectory }),
        }),
        (151, TagKitDef {
            id: 151,
            name: "ColorBalanceUnknown1",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x97_subdirectory }),
        }),
        (151, TagKitDef {
            id: 151,
            name: "ColorBalanceUnknown2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x97_subdirectory }),
        }),
        (151, TagKitDef {
            id: 151,
            name: "ColorBalanceUnknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x97_subdirectory }),
        }),
        (152, TagKitDef {
            id: 152,
            name: "LensData0100",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x98_subdirectory }),
        }),
        (152, TagKitDef {
            id: 152,
            name: "LensData0101",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x98_subdirectory }),
        }),
        (152, TagKitDef {
            id: 152,
            name: "LensData0201",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x98_subdirectory }),
        }),
        (152, TagKitDef {
            id: 152,
            name: "LensData0204",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x98_subdirectory }),
        }),
        (152, TagKitDef {
            id: 152,
            name: "LensData0400",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x98_subdirectory }),
        }),
        (152, TagKitDef {
            id: 152,
            name: "LensData0402",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x98_subdirectory }),
        }),
        (152, TagKitDef {
            id: 152,
            name: "LensData0403",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x98_subdirectory }),
        }),
        (152, TagKitDef {
            id: 152,
            name: "LensData0800",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x98_subdirectory }),
        }),
        (152, TagKitDef {
            id: 152,
            name: "LensDataUnknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x98_subdirectory }),
        }),
        (153, TagKitDef {
            id: 153,
            name: "RawImageCenter",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (154, TagKitDef {
            id: 154,
            name: "SensorPixelSize",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression(r#"$val=~s/ / x /;"$val um""#),
            value_conv: None,
            subdirectory: None,
        }),
        (156, TagKitDef {
            id: 156,
            name: "SceneAssist",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (158, TagKitDef {
            id: 158,
            name: "RetouchHistory",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: Some("$val=~s/( 0)+$//; $val"),
            subdirectory: None,
        }),
        (16, TagKitDef {
            id: 16,
            name: "DataDump",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (160, TagKitDef {
            id: 160,
            name: "SerialNumber",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (162, TagKitDef {
            id: 162,
            name: "ImageDataSize",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (165, TagKitDef {
            id: 165,
            name: "ImageCount",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (166, TagKitDef {
            id: 166,
            name: "DeletedImageCount",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (167, TagKitDef {
            id: 167,
            name: "ShutterCount",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("includes both mechanical and electronic shutter activations for models with\n            this feature.  This value is used as a key to decrypt other information, and\n            writing this tag causes the other information to be re-encrypted with the\n            new key"),
            print_conv: PrintConvType::Expression("$val == 4294965247 ? \"n/a\" : $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (168, TagKitDef {
            id: 168,
            name: "FlashInfo0100",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xa8_subdirectory }),
        }),
        (168, TagKitDef {
            id: 168,
            name: "FlashInfo0102",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xa8_subdirectory }),
        }),
        (168, TagKitDef {
            id: 168,
            name: "FlashInfo0103",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xa8_subdirectory }),
        }),
        (168, TagKitDef {
            id: 168,
            name: "FlashInfo0106",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xa8_subdirectory }),
        }),
        (168, TagKitDef {
            id: 168,
            name: "FlashInfo0107",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xa8_subdirectory }),
        }),
        (168, TagKitDef {
            id: 168,
            name: "FlashInfo0300",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xa8_subdirectory }),
        }),
        (168, TagKitDef {
            id: 168,
            name: "FlashInfoUnknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xa8_subdirectory }),
        }),
        (169, TagKitDef {
            id: 169,
            name: "ImageOptimization",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (17, TagKitDef {
            id: 17,
            name: "PreviewIFD",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x11_subdirectory }),
        }),
        (170, TagKitDef {
            id: 170,
            name: "Saturation",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (171, TagKitDef {
            id: 171,
            name: "VariProgram",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (172, TagKitDef {
            id: 172,
            name: "ImageStabilization",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (173, TagKitDef {
            id: 173,
            name: "AFResponse",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (176, TagKitDef {
            id: 176,
            name: "MultiExposure",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xb0_subdirectory }),
        }),
        (176, TagKitDef {
            id: 176,
            name: "MultiExposure",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xb0_subdirectory }),
        }),
        (176, TagKitDef {
            id: 176,
            name: "MultiExposure2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xb0_subdirectory }),
        }),
        (177, TagKitDef {
            id: 177,
            name: "HighISONoiseReduction",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_38),
            value_conv: None,
            subdirectory: None,
        }),
        (179, TagKitDef {
            id: 179,
            name: "ToningEffect",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (18, TagKitDef {
            id: 18,
            name: "FlashExposureComp",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("may be set even if flash does not fire.  Does not include the effect of\n            flash bracketing."),
            print_conv: PrintConvType::Expression("Image::ExifTool::Exif::PrintFraction($val)"),
            value_conv: Some("my ($a,$b,$c)=unpack(\"c3\",$val); $c ? $a*($b/$c) : 0"),
            subdirectory: None,
        }),
        (183, TagKitDef {
            id: 183,
            name: "AFInfo2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xb7_subdirectory }),
        }),
        (183, TagKitDef {
            id: 183,
            name: "AFInfo2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xb7_subdirectory }),
        }),
        (183, TagKitDef {
            id: 183,
            name: "AFInfo2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xb7_subdirectory }),
        }),
        (183, TagKitDef {
            id: 183,
            name: "AFInfo2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xb7_subdirectory }),
        }),
        (183, TagKitDef {
            id: 183,
            name: "AFInfo2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xb7_subdirectory }),
        }),
        (184, TagKitDef {
            id: 184,
            name: "FileInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xb8_subdirectory }),
        }),
        (184, TagKitDef {
            id: 184,
            name: "FileInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xb8_subdirectory }),
        }),
        (185, TagKitDef {
            id: 185,
            name: "AFTune",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xb9_subdirectory }),
        }),
        (187, TagKitDef {
            id: 187,
            name: "RetouchInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xbb_subdirectory }),
        }),
        (189, TagKitDef {
            id: 189,
            name: "PictureControlData",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xbd_subdirectory }),
        }),
        (19, TagKitDef {
            id: 19,
            name: "ISOSetting",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("$_=$val;s/^0 //;$_"),
            value_conv: None,
            subdirectory: None,
        }),
        (191, TagKitDef {
            id: 191,
            name: "SilentPhotography",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_39),
            value_conv: None,
            subdirectory: None,
        }),
        (195, TagKitDef {
            id: 195,
            name: "BarometerInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xc3_subdirectory }),
        }),
        (20, TagKitDef {
            id: 20,
            name: "ColorBalanceA",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x14_subdirectory }),
        }),
        (20, TagKitDef {
            id: 20,
            name: "NRWData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x14_subdirectory }),
        }),
        (20, TagKitDef {
            id: 20,
            name: "NRWData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x14_subdirectory }),
        }),
        (22, TagKitDef {
            id: 22,
            name: "ImageBoundary",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (23, TagKitDef {
            id: 23,
            name: "ExternalFlashExposureComp",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::Exif::PrintFraction($val)"),
            value_conv: Some("my ($a,$b,$c)=unpack(\"c3\",$val); $c ? $a*($b/$c) : 0"),
            subdirectory: None,
        }),
        (24, TagKitDef {
            id: 24,
            name: "FlashExposureBracketValue",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f\",$val)"),
            value_conv: Some("my ($a,$b,$c)=unpack(\"c3\",$val); $c ? $a*($b/$c) : 0"),
            subdirectory: None,
        }),
        (25, TagKitDef {
            id: 25,
            name: "ExposureBracketValue",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression(r#"$val !~ /undef/ ?  Image::ExifTool::Exif::PrintFraction($val) : "n/a" "#),
            value_conv: None,
            subdirectory: None,
        }),
        (26, TagKitDef {
            id: 26,
            name: "ImageProcessing",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (27, TagKitDef {
            id: 27,
            name: "CropHiSpeed",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (28, TagKitDef {
            id: 28,
            name: "ExposureTuning",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::Exif::PrintFraction($val)"),
            value_conv: Some("my ($a,$b,$c)=unpack(\"c3\",$val); $c ? $a*($b/$c) : 0"),
            subdirectory: None,
        }),
        (29, TagKitDef {
            id: 29,
            name: "SerialNumber",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: Some("this value is used as a key to decrypt other information -- writing this tag\n            causes the other information to be re-encrypted with the new key"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (30, TagKitDef {
            id: 30,
            name: "ColorSpace",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_40),
            value_conv: None,
            subdirectory: None,
        }),
        (31, TagKitDef {
            id: 31,
            name: "VRInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x1f_subdirectory }),
        }),
        (32, TagKitDef {
            id: 32,
            name: "ImageAuthentication",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_41),
            value_conv: None,
            subdirectory: None,
        }),
        (33, TagKitDef {
            id: 33,
            name: "FaceDetect",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x21_subdirectory }),
        }),
        (34, TagKitDef {
            id: 34,
            name: "ActiveD-Lighting",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_42),
            value_conv: None,
            subdirectory: None,
        }),
        (35, TagKitDef {
            id: 35,
            name: "PictureControlData",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x23_subdirectory }),
        }),
        (35, TagKitDef {
            id: 35,
            name: "PictureControlData",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x23_subdirectory }),
        }),
        (35, TagKitDef {
            id: 35,
            name: "PictureControlData",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x23_subdirectory }),
        }),
        (35, TagKitDef {
            id: 35,
            name: "PictureControlData",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x23_subdirectory }),
        }),
        (3584, TagKitDef {
            id: 3584,
            name: "PrintIM",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xe00_subdirectory }),
        }),
        (3585, TagKitDef {
            id: 3585,
            name: "NikonCaptureData",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("this data is dropped when copying Nikon MakerNotes since it may be too large\n            to fit in the EXIF segment of a JPEG image, but it may be copied as a block\n            into existing Nikon MakerNotes later if desired"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xe01_subdirectory }),
        }),
        (3593, TagKitDef {
            id: 3593,
            name: "NikonCaptureVersion",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (3598, TagKitDef {
            id: 3598,
            name: "NikonCaptureOffsets",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xe0e_subdirectory }),
        }),
        (3600, TagKitDef {
            id: 3600,
            name: "NikonScanIFD",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xe10_subdirectory }),
        }),
        (3603, TagKitDef {
            id: 3603,
            name: "NikonCaptureEditVersions",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("the L<ExtractEmbedded|../ExifTool.html#ExtractEmbedded> option may be used to decode settings from the stored\n            edit versions, otherwise this is extracted as a binary data block"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xe13_subdirectory }),
        }),
        (3603, TagKitDef {
            id: 3603,
            name: "NikonCaptureEditVersions",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (3613, TagKitDef {
            id: 3613,
            name: "NikonICCProfile",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xe1d_subdirectory }),
        }),
        (3614, TagKitDef {
            id: 3614,
            name: "NikonCaptureOutput",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xe1e_subdirectory }),
        }),
        (3618, TagKitDef {
            id: 3618,
            name: "NEFBitDepth",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_43),
            value_conv: None,
            subdirectory: None,
        }),
        (37, TagKitDef {
            id: 37,
            name: "ISOInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x25_subdirectory }),
        }),
        (42, TagKitDef {
            id: 42,
            name: "VignetteControl",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_44),
            value_conv: None,
            subdirectory: None,
        }),
        (43, TagKitDef {
            id: 43,
            name: "DistortInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x2b_subdirectory }),
        }),
        (44, TagKitDef {
            id: 44,
            name: "UnknownInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x2c_subdirectory }),
        }),
        (50, TagKitDef {
            id: 50,
            name: "UnknownInfo2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x32_subdirectory }),
        }),
        (52, TagKitDef {
            id: 52,
            name: "ShutterMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_45),
            value_conv: None,
            subdirectory: None,
        }),
        (53, TagKitDef {
            id: 53,
            name: "HDRInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x35_subdirectory }),
        }),
        (53, TagKitDef {
            id: 53,
            name: "HDRInfo2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x35_subdirectory }),
        }),
        (55, TagKitDef {
            id: 55,
            name: "MechanicalShutterCount",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (57, TagKitDef {
            id: 57,
            name: "LocationInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x39_subdirectory }),
        }),
        (61, TagKitDef {
            id: 61,
            name: "BlackLevel",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (62, TagKitDef {
            id: 62,
            name: "ImageSizeRAW",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_46),
            value_conv: None,
            subdirectory: None,
        }),
        (63, TagKitDef {
            id: 63,
            name: "WhiteBalanceFineTune",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (68, TagKitDef {
            id: 68,
            name: "JPGCompression",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_47),
            value_conv: None,
            subdirectory: None,
        }),
        (69, TagKitDef {
            id: 69,
            name: "CropArea",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("left, top, width, height"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (78, TagKitDef {
            id: 78,
            name: "NikonSettings",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4e_subdirectory }),
        }),
        (79, TagKitDef {
            id: 79,
            name: "ColorTemperatureAuto",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (81, TagKitDef {
            id: 81,
            name: "MakerNotes0x51",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x51_subdirectory }),
        }),
        (86, TagKitDef {
            id: 86,
            name: "MakerNotes0x56",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x56_subdirectory }),
        }),
        (152, TagKitDef {
            id: 152,
            name: "MultipleExposureMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_48),
            value_conv: None,
            subdirectory: None,
        }),
        (154, TagKitDef {
            id: 154,
            name: "MultiExposureShots",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (184, TagKitDef {
            id: 184,
            name: "IntervalDurationHours",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (188, TagKitDef {
            id: 188,
            name: "IntervalDurationMinutes",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (192, TagKitDef {
            id: 192,
            name: "IntervalDurationSeconds",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (200, TagKitDef {
            id: 200,
            name: "Intervals",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (204, TagKitDef {
            id: 204,
            name: "ShotsPerInterval",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (208, TagKitDef {
            id: 208,
            name: "IntervalExposureSmoothing",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_49),
            value_conv: None,
            subdirectory: None,
        }),
        (210, TagKitDef {
            id: 210,
            name: "IntervalPriority",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_50),
            value_conv: None,
            subdirectory: None,
        }),
        (244, TagKitDef {
            id: 244,
            name: "FocusShiftNumberShots",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (248, TagKitDef {
            id: 248,
            name: "FocusShiftStepWidth",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (252, TagKitDef {
            id: 252,
            name: "FocusShiftInterval",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val == 1? \"1 Second\" : sprintf(\"%.0f Seconds\",$val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (338, TagKitDef {
            id: 338,
            name: "AutoISO",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_51),
            value_conv: None,
            subdirectory: None,
        }),
        (340, TagKitDef {
            id: 340,
            name: "ISOAutoHiLimit",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_52),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (342, TagKitDef {
            id: 342,
            name: "ISOAutoFlashLimit",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_53),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (432, TagKitDef {
            id: 432,
            name: "MovieVignetteControl",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_54),
            value_conv: None,
            subdirectory: None,
        }),
        (434, TagKitDef {
            id: 434,
            name: "DiffractionCompensation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_55),
            value_conv: None,
            subdirectory: None,
        }),
        (436, TagKitDef {
            id: 436,
            name: "FlickerReductionShooting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_56),
            value_conv: None,
            subdirectory: None,
        }),
        (440, TagKitDef {
            id: 440,
            name: "FlashControlMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_57),
            value_conv: None,
            subdirectory: None,
        }),
        (548, TagKitDef {
            id: 548,
            name: "AFAreaMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_58),
            value_conv: None,
            subdirectory: None,
        }),
        (550, TagKitDef {
            id: 550,
            name: "VRMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_59),
            value_conv: None,
            subdirectory: None,
        }),
        (554, TagKitDef {
            id: 554,
            name: "BracketSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_60),
            value_conv: None,
            subdirectory: None,
        }),
        (556, TagKitDef {
            id: 556,
            name: "BracketProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("AE and/or Flash Bracketing"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_61),
            value_conv: None,
            subdirectory: None,
        }),
        (558, TagKitDef {
            id: 558,
            name: "BracketIncrement",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("AE and/or Flash Bracketing"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_62),
            value_conv: None,
            subdirectory: None,
        }),
        (570, TagKitDef {
            id: 570,
            name: "HDR",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_63),
            value_conv: None,
            subdirectory: None,
        }),
        (576, TagKitDef {
            id: 576,
            name: "SecondarySlotFunction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_64),
            value_conv: None,
            subdirectory: None,
        }),
        (582, TagKitDef {
            id: 582,
            name: "HDRLevel",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_65),
            value_conv: None,
            subdirectory: None,
        }),
        (586, TagKitDef {
            id: 586,
            name: "Slot2JpgSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_66),
            value_conv: None,
            subdirectory: None,
        }),
        (592, TagKitDef {
            id: 592,
            name: "DXCropAlert",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_67),
            value_conv: None,
            subdirectory: None,
        }),
        (594, TagKitDef {
            id: 594,
            name: "SubjectDetection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_68),
            value_conv: None,
            subdirectory: None,
        }),
        (596, TagKitDef {
            id: 596,
            name: "DynamicAFAreaSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_69),
            value_conv: None,
            subdirectory: None,
        }),
        (618, TagKitDef {
            id: 618,
            name: "ToneMap",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_70),
            value_conv: None,
            subdirectory: None,
        }),
        (622, TagKitDef {
            id: 622,
            name: "PortraitImpressionBalance",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_71),
            value_conv: None,
            subdirectory: None,
        }),
        (636, TagKitDef {
            id: 636,
            name: "HighFrequencyFlickerReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_72),
            value_conv: None,
            subdirectory: None,
        }),
        (72, TagKitDef {
            id: 72,
            name: "HighFrameRate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_73),
            value_conv: None,
            subdirectory: None,
        }),
        (730, TagKitDef {
            id: 730,
            name: "MovieImageArea",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_74),
            value_conv: None,
            subdirectory: None,
        }),
        (740, TagKitDef {
            id: 740,
            name: "MovieType",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_75),
            value_conv: None,
            subdirectory: None,
        }),
        (742, TagKitDef {
            id: 742,
            name: "MovieISOAutoHiLimit",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_76),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (744, TagKitDef {
            id: 744,
            name: "MovieISOAutoControlManualMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_77),
            value_conv: None,
            subdirectory: None,
        }),
        (746, TagKitDef {
            id: 746,
            name: "MovieISOAutoManualMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_78),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (820, TagKitDef {
            id: 820,
            name: "MovieActiveD-Lighting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_79),
            value_conv: None,
            subdirectory: None,
        }),
        (822, TagKitDef {
            id: 822,
            name: "MovieHighISONoiseReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_80),
            value_conv: None,
            subdirectory: None,
        }),
        (828, TagKitDef {
            id: 828,
            name: "MovieFlickerReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_81),
            value_conv: None,
            subdirectory: None,
        }),
        (830, TagKitDef {
            id: 830,
            name: "MovieMeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_82),
            value_conv: None,
            subdirectory: None,
        }),
        (832, TagKitDef {
            id: 832,
            name: "MovieFocusMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_83),
            value_conv: None,
            subdirectory: None,
        }),
        (834, TagKitDef {
            id: 834,
            name: "MovieAFAreaMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_84),
            value_conv: None,
            subdirectory: None,
        }),
        (836, TagKitDef {
            id: 836,
            name: "MovieVRMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_85),
            value_conv: None,
            subdirectory: None,
        }),
        (840, TagKitDef {
            id: 840,
            name: "MovieElectronicVR",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_86),
            value_conv: None,
            subdirectory: None,
        }),
        (842, TagKitDef {
            id: 842,
            name: "MovieSoundRecording",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_87),
            value_conv: None,
            subdirectory: None,
        }),
        (844, TagKitDef {
            id: 844,
            name: "MicrophoneSensitivity",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (846, TagKitDef {
            id: 846,
            name: "MicrophoneAttenuator",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_88),
            value_conv: None,
            subdirectory: None,
        }),
        (848, TagKitDef {
            id: 848,
            name: "MicrophoneFrequencyResponse",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_89),
            value_conv: None,
            subdirectory: None,
        }),
        (850, TagKitDef {
            id: 850,
            name: "WindNoiseReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_90),
            value_conv: None,
            subdirectory: None,
        }),
        (882, TagKitDef {
            id: 882,
            name: "MovieFrameSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_91),
            value_conv: None,
            subdirectory: None,
        }),
        (884, TagKitDef {
            id: 884,
            name: "MovieFrameRate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_92),
            value_conv: None,
            subdirectory: None,
        }),
        (886, TagKitDef {
            id: 886,
            name: "MicrophoneJackPower",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_93),
            value_conv: None,
            subdirectory: None,
        }),
        (887, TagKitDef {
            id: 887,
            name: "MovieDXCropAlert",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_94),
            value_conv: None,
            subdirectory: None,
        }),
        (888, TagKitDef {
            id: 888,
            name: "MovieSubjectDetection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_95),
            value_conv: None,
            subdirectory: None,
        }),
        (896, TagKitDef {
            id: 896,
            name: "MovieHighResZoom",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_96),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "MenuSettingsZ8",
            format: "undef[943]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (1690, TagKitDef {
            id: 1690,
            name: "MonitorBrightness",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_97),
            value_conv: None,
            subdirectory: None,
        }),
        (1698, TagKitDef {
            id: 1698,
            name: "Language",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_98),
            value_conv: None,
            subdirectory: None,
        }),
        (1712, TagKitDef {
            id: 1712,
            name: "AFFineTune",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_99),
            value_conv: None,
            subdirectory: None,
        }),
        (1716, TagKitDef {
            id: 1716,
            name: "NonCPULens1FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1718, TagKitDef {
            id: 1718,
            name: "NonCPULens2FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1720, TagKitDef {
            id: 1720,
            name: "NonCPULens3FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1722, TagKitDef {
            id: 1722,
            name: "NonCPULens4FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1724, TagKitDef {
            id: 1724,
            name: "NonCPULens5FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1726, TagKitDef {
            id: 1726,
            name: "NonCPULens6FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1728, TagKitDef {
            id: 1728,
            name: "NonCPULens7FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1730, TagKitDef {
            id: 1730,
            name: "NonCPULens8FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1732, TagKitDef {
            id: 1732,
            name: "NonCPULens9FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1734, TagKitDef {
            id: 1734,
            name: "NonCPULens10FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1736, TagKitDef {
            id: 1736,
            name: "NonCPULens11FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1738, TagKitDef {
            id: 1738,
            name: "NonCPULens12FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1740, TagKitDef {
            id: 1740,
            name: "NonCPULens13FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1742, TagKitDef {
            id: 1742,
            name: "NonCPULens14FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1744, TagKitDef {
            id: 1744,
            name: "NonCPULens15FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1746, TagKitDef {
            id: 1746,
            name: "NonCPULens16FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1748, TagKitDef {
            id: 1748,
            name: "NonCPULens17FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1750, TagKitDef {
            id: 1750,
            name: "NonCPULens18FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1752, TagKitDef {
            id: 1752,
            name: "NonCPULens19FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1754, TagKitDef {
            id: 1754,
            name: "NonCPULens20FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1756, TagKitDef {
            id: 1756,
            name: "NonCPULens1MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_100),
            value_conv: None,
            subdirectory: None,
        }),
        (1758, TagKitDef {
            id: 1758,
            name: "NonCPULens2MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_101),
            value_conv: None,
            subdirectory: None,
        }),
        (1760, TagKitDef {
            id: 1760,
            name: "NonCPULens3MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_102),
            value_conv: None,
            subdirectory: None,
        }),
        (1762, TagKitDef {
            id: 1762,
            name: "NonCPULens4MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_103),
            value_conv: None,
            subdirectory: None,
        }),
        (1764, TagKitDef {
            id: 1764,
            name: "NonCPULens5MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_104),
            value_conv: None,
            subdirectory: None,
        }),
        (1766, TagKitDef {
            id: 1766,
            name: "NonCPULens6MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_105),
            value_conv: None,
            subdirectory: None,
        }),
        (1768, TagKitDef {
            id: 1768,
            name: "NonCPULens7MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_106),
            value_conv: None,
            subdirectory: None,
        }),
        (1770, TagKitDef {
            id: 1770,
            name: "NonCPULens8MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_107),
            value_conv: None,
            subdirectory: None,
        }),
        (1772, TagKitDef {
            id: 1772,
            name: "NonCPULens9MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_108),
            value_conv: None,
            subdirectory: None,
        }),
        (1774, TagKitDef {
            id: 1774,
            name: "NonCPULens10MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_109),
            value_conv: None,
            subdirectory: None,
        }),
        (1776, TagKitDef {
            id: 1776,
            name: "NonCPULens11MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_110),
            value_conv: None,
            subdirectory: None,
        }),
        (1778, TagKitDef {
            id: 1778,
            name: "NonCPULens12MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_111),
            value_conv: None,
            subdirectory: None,
        }),
        (1780, TagKitDef {
            id: 1780,
            name: "NonCPULens13MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_112),
            value_conv: None,
            subdirectory: None,
        }),
        (1782, TagKitDef {
            id: 1782,
            name: "NonCPULens14MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_113),
            value_conv: None,
            subdirectory: None,
        }),
        (1784, TagKitDef {
            id: 1784,
            name: "NonCPULens15MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_114),
            value_conv: None,
            subdirectory: None,
        }),
        (1786, TagKitDef {
            id: 1786,
            name: "NonCPULens16MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_115),
            value_conv: None,
            subdirectory: None,
        }),
        (1788, TagKitDef {
            id: 1788,
            name: "NonCPULens17MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_116),
            value_conv: None,
            subdirectory: None,
        }),
        (1790, TagKitDef {
            id: 1790,
            name: "NonCPULens18MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_117),
            value_conv: None,
            subdirectory: None,
        }),
        (1792, TagKitDef {
            id: 1792,
            name: "NonCPULens19MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_118),
            value_conv: None,
            subdirectory: None,
        }),
        (1794, TagKitDef {
            id: 1794,
            name: "NonCPULens20MaxAperture",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_119),
            value_conv: None,
            subdirectory: None,
        }),
        (1808, TagKitDef {
            id: 1808,
            name: "HDMIOutputResolution",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_120),
            value_conv: None,
            subdirectory: None,
        }),
        (1826, TagKitDef {
            id: 1826,
            name: "AirplaneMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_121),
            value_conv: None,
            subdirectory: None,
        }),
        (1827, TagKitDef {
            id: 1827,
            name: "EmptySlotRelease",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_122),
            value_conv: None,
            subdirectory: None,
        }),
        (1862, TagKitDef {
            id: 1862,
            name: "EnergySavingMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_123),
            value_conv: None,
            subdirectory: None,
        }),
        (1890, TagKitDef {
            id: 1890,
            name: "USBPowerDelivery",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_124),
            value_conv: None,
            subdirectory: None,
        }),
        (1899, TagKitDef {
            id: 1899,
            name: "SensorShield",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_125),
            value_conv: None,
            subdirectory: None,
        }),
        (943, TagKitDef {
            id: 943,
            name: "CustomSettingsZ8",
            format: "undef[730]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x3af_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "MenuSettingsZ8",
            format: "undef[943]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (1698, TagKitDef {
            id: 1698,
            name: "Language",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_126),
            value_conv: None,
            subdirectory: None,
        }),
        (1706, TagKitDef {
            id: 1706,
            name: "MonitorBrightness",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_127),
            value_conv: None,
            subdirectory: None,
        }),
        (1728, TagKitDef {
            id: 1728,
            name: "AFFineTune",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_128),
            value_conv: None,
            subdirectory: None,
        }),
        (1732, TagKitDef {
            id: 1732,
            name: "NonCPULens1FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1734, TagKitDef {
            id: 1734,
            name: "NonCPULens2FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1736, TagKitDef {
            id: 1736,
            name: "NonCPULens3FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1738, TagKitDef {
            id: 1738,
            name: "NonCPULens4FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1740, TagKitDef {
            id: 1740,
            name: "NonCPULens5FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1742, TagKitDef {
            id: 1742,
            name: "NonCPULens6FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1744, TagKitDef {
            id: 1744,
            name: "NonCPULens7FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1746, TagKitDef {
            id: 1746,
            name: "NonCPULens8FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1748, TagKitDef {
            id: 1748,
            name: "NonCPULens9FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1750, TagKitDef {
            id: 1750,
            name: "NonCPULens10FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1752, TagKitDef {
            id: 1752,
            name: "NonCPULens11FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1754, TagKitDef {
            id: 1754,
            name: "NonCPULens12FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1756, TagKitDef {
            id: 1756,
            name: "NonCPULens13FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1758, TagKitDef {
            id: 1758,
            name: "NonCPULens14FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1760, TagKitDef {
            id: 1760,
            name: "NonCPULens15FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1762, TagKitDef {
            id: 1762,
            name: "NonCPULens16FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1764, TagKitDef {
            id: 1764,
            name: "NonCPULens17FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1766, TagKitDef {
            id: 1766,
            name: "NonCPULens18FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1768, TagKitDef {
            id: 1768,
            name: "NonCPULens19FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1770, TagKitDef {
            id: 1770,
            name: "NonCPULens20FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1812, TagKitDef {
            id: 1812,
            name: "NonCPULens1MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1816, TagKitDef {
            id: 1816,
            name: "NonCPULens2MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1820, TagKitDef {
            id: 1820,
            name: "NonCPULens3MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1824, TagKitDef {
            id: 1824,
            name: "NonCPULens4MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1828, TagKitDef {
            id: 1828,
            name: "NonCPULens5MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1832, TagKitDef {
            id: 1832,
            name: "NonCPULens6MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1836, TagKitDef {
            id: 1836,
            name: "NonCPULens7MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1840, TagKitDef {
            id: 1840,
            name: "NonCPULens8MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1844, TagKitDef {
            id: 1844,
            name: "NonCPULens9MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1848, TagKitDef {
            id: 1848,
            name: "NonCPULens10MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1852, TagKitDef {
            id: 1852,
            name: "NonCPULens11MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1856, TagKitDef {
            id: 1856,
            name: "NonCPULens12MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1860, TagKitDef {
            id: 1860,
            name: "NonCPULens13MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1864, TagKitDef {
            id: 1864,
            name: "NonCPULens14MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1868, TagKitDef {
            id: 1868,
            name: "NonCPULens15MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1872, TagKitDef {
            id: 1872,
            name: "NonCPULens16MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1876, TagKitDef {
            id: 1876,
            name: "NonCPULens17MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1880, TagKitDef {
            id: 1880,
            name: "NonCPULens18MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1884, TagKitDef {
            id: 1884,
            name: "NonCPULens19MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1888, TagKitDef {
            id: 1888,
            name: "NonCPULens20MaxAperture",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1904, TagKitDef {
            id: 1904,
            name: "HDMIOutputResolution",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_129),
            value_conv: None,
            subdirectory: None,
        }),
        (1922, TagKitDef {
            id: 1922,
            name: "AirplaneMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_130),
            value_conv: None,
            subdirectory: None,
        }),
        (1923, TagKitDef {
            id: 1923,
            name: "EmptySlotRelease",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_131),
            value_conv: None,
            subdirectory: None,
        }),
        (1958, TagKitDef {
            id: 1958,
            name: "EnergySavingMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_132),
            value_conv: None,
            subdirectory: None,
        }),
        (1986, TagKitDef {
            id: 1986,
            name: "USBPowerDelivery",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_133),
            value_conv: None,
            subdirectory: None,
        }),
        (1995, TagKitDef {
            id: 1995,
            name: "SensorShield",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_134),
            value_conv: None,
            subdirectory: None,
        }),
        (2046, TagKitDef {
            id: 2046,
            name: "PixelShiftShooting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_135),
            value_conv: None,
            subdirectory: None,
        }),
        (2048, TagKitDef {
            id: 2048,
            name: "PixelShiftNumberShots",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_136),
            value_conv: None,
            subdirectory: None,
        }),
        (2050, TagKitDef {
            id: 2050,
            name: "PixelShiftDelay",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_137),
            value_conv: None,
            subdirectory: None,
        }),
        (2052, TagKitDef {
            id: 2052,
            name: "PlaybackButton",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_138),
            value_conv: None,
            subdirectory: None,
        }),
        (2054, TagKitDef {
            id: 2054,
            name: "WBButton",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_139),
            value_conv: None,
            subdirectory: None,
        }),
        (2056, TagKitDef {
            id: 2056,
            name: "BracketButton",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_140),
            value_conv: None,
            subdirectory: None,
        }),
        (2058, TagKitDef {
            id: 2058,
            name: "LensFunc1ButtonPlaybackMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_141),
            value_conv: None,
            subdirectory: None,
        }),
        (2060, TagKitDef {
            id: 2060,
            name: "LensFunc2ButtonPlaybackMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_142),
            value_conv: None,
            subdirectory: None,
        }),
        (2062, TagKitDef {
            id: 2062,
            name: "PlaybackButtonPlaybackMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_143),
            value_conv: None,
            subdirectory: None,
        }),
        (2064, TagKitDef {
            id: 2064,
            name: "BracketButtonPlaybackMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_144),
            value_conv: None,
            subdirectory: None,
        }),
        (2206, TagKitDef {
            id: 2206,
            name: "MaximumApertureLV",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_145),
            value_conv: None,
            subdirectory: None,
        }),
        (2208, TagKitDef {
            id: 2208,
            name: "ReleaseModeButton",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_146),
            value_conv: None,
            subdirectory: None,
        }),
        (2216, TagKitDef {
            id: 2216,
            name: "ReleaseModeButtonPlaybackMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_147),
            value_conv: None,
            subdirectory: None,
        }),
        (943, TagKitDef {
            id: 943,
            name: "CustomSettingsZ8",
            format: "undef[755]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x3af_subdirectory }),
        }),
        (140, TagKitDef {
            id: 140,
            name: "MultipleExposureMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_148),
            value_conv: None,
            subdirectory: None,
        }),
        (142, TagKitDef {
            id: 142,
            name: "MultiExposureShots",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (1426, TagKitDef {
            id: 1426,
            name: "Language",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_149),
            value_conv: None,
            subdirectory: None,
        }),
        (1434, TagKitDef {
            id: 1434,
            name: "MonitorBrightness",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val - 5"),
            subdirectory: None,
        }),
        (1456, TagKitDef {
            id: 1456,
            name: "AFFineTune",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_150),
            value_conv: None,
            subdirectory: None,
        }),
        (1552, TagKitDef {
            id: 1552,
            name: "HDMIOutputResolution",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_151),
            value_conv: None,
            subdirectory: None,
        }),
        (1565, TagKitDef {
            id: 1565,
            name: "SetClockFromLocationData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_152),
            value_conv: None,
            subdirectory: None,
        }),
        (1572, TagKitDef {
            id: 1572,
            name: "AirplaneMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_153),
            value_conv: None,
            subdirectory: None,
        }),
        (1573, TagKitDef {
            id: 1573,
            name: "EmptySlotRelease",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_154),
            value_conv: None,
            subdirectory: None,
        }),
        (1608, TagKitDef {
            id: 1608,
            name: "EnergySavingMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_155),
            value_conv: None,
            subdirectory: None,
        }),
        (1632, TagKitDef {
            id: 1632,
            name: "RecordLocationData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_156),
            value_conv: None,
            subdirectory: None,
        }),
        (1636, TagKitDef {
            id: 1636,
            name: "USBPowerDelivery",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_157),
            value_conv: None,
            subdirectory: None,
        }),
        (1645, TagKitDef {
            id: 1645,
            name: "SensorShield",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_158),
            value_conv: None,
            subdirectory: None,
        }),
        (188, TagKitDef {
            id: 188,
            name: "Intervals",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (192, TagKitDef {
            id: 192,
            name: "ShotsPerInterval",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (232, TagKitDef {
            id: 232,
            name: "FocusShiftNumberShots",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (236, TagKitDef {
            id: 236,
            name: "FocusShiftStepWidth",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (240, TagKitDef {
            id: 240,
            name: "FocusShiftInterval",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val == 1? \"1 Second\" : sprintf(\"%.0f Seconds\",$val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (244, TagKitDef {
            id: 244,
            name: "FocusShiftExposureLock",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_159),
            value_conv: None,
            subdirectory: None,
        }),
        (308, TagKitDef {
            id: 308,
            name: "PhotoShootingMenuBankImageArea",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_160),
            value_conv: None,
            subdirectory: None,
        }),
        (416, TagKitDef {
            id: 416,
            name: "MovieVignetteControl",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_161),
            value_conv: None,
            subdirectory: None,
        }),
        (418, TagKitDef {
            id: 418,
            name: "DiffractionCompensation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_162),
            value_conv: None,
            subdirectory: None,
        }),
        (420, TagKitDef {
            id: 420,
            name: "FlickerReductionShooting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_163),
            value_conv: None,
            subdirectory: None,
        }),
        (424, TagKitDef {
            id: 424,
            name: "FlashControlMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_164),
            value_conv: None,
            subdirectory: None,
        }),
        (426, TagKitDef {
            id: 426,
            name: "FlashMasterCompensation",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\",$val) : 0"),
            value_conv: Some("$val/6"),
            subdirectory: None,
        }),
        (430, TagKitDef {
            id: 430,
            name: "FlashGNDistance",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_165),
            value_conv: Some("$val + 3"),
            subdirectory: None,
        }),
        (434, TagKitDef {
            id: 434,
            name: "FlashOutput",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val>0.99 ? \"Full\" : sprintf(\"%.1f%%\",$val*100)"),
            value_conv: Some("power_neg_div_3_value_conv"),
            subdirectory: None,
        }),
        (444, TagKitDef {
            id: 444,
            name: "FlashRemoteControl",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_166),
            value_conv: None,
            subdirectory: None,
        }),
        (456, TagKitDef {
            id: 456,
            name: "FlashWirelessOption",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_167),
            value_conv: None,
            subdirectory: None,
        }),
        (536, TagKitDef {
            id: 536,
            name: "BracketProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("AE and/or Flash Bracketing"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_168),
            value_conv: None,
            subdirectory: None,
        }),
        (538, TagKitDef {
            id: 538,
            name: "BracketIncrement",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("AE and/or Flash Bracketing"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_169),
            value_conv: None,
            subdirectory: None,
        }),
        (556, TagKitDef {
            id: 556,
            name: "SecondarySlotFunction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_170),
            value_conv: None,
            subdirectory: None,
        }),
        (572, TagKitDef {
            id: 572,
            name: "DXCropAlert",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_171),
            value_conv: None,
            subdirectory: None,
        }),
        (574, TagKitDef {
            id: 574,
            name: "SubjectDetection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_172),
            value_conv: None,
            subdirectory: None,
        }),
        (576, TagKitDef {
            id: 576,
            name: "DynamicAFAreaSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_173),
            value_conv: None,
            subdirectory: None,
        }),
        (604, TagKitDef {
            id: 604,
            name: "MovieImageArea",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_174),
            value_conv: None,
            subdirectory: None,
        }),
        (614, TagKitDef {
            id: 614,
            name: "MovieType",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_175),
            value_conv: None,
            subdirectory: None,
        }),
        (616, TagKitDef {
            id: 616,
            name: "MovieISOAutoHiLimit",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_176),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (618, TagKitDef {
            id: 618,
            name: "MovieISOAutoControlManualMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_177),
            value_conv: None,
            subdirectory: None,
        }),
        (620, TagKitDef {
            id: 620,
            name: "MovieISOAutoManualMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_178),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (696, TagKitDef {
            id: 696,
            name: "MovieActiveD-Lighting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_179),
            value_conv: None,
            subdirectory: None,
        }),
        (698, TagKitDef {
            id: 698,
            name: "MovieHighISONoiseReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_180),
            value_conv: None,
            subdirectory: None,
        }),
        (704, TagKitDef {
            id: 704,
            name: "MovieFlickerReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_181),
            value_conv: None,
            subdirectory: None,
        }),
        (706, TagKitDef {
            id: 706,
            name: "MovieMeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_182),
            value_conv: None,
            subdirectory: None,
        }),
        (708, TagKitDef {
            id: 708,
            name: "MovieFocusMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_183),
            value_conv: None,
            subdirectory: None,
        }),
        (710, TagKitDef {
            id: 710,
            name: "MovieAFAreaMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_184),
            value_conv: None,
            subdirectory: None,
        }),
        (712, TagKitDef {
            id: 712,
            name: "MovieVRMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_185),
            value_conv: None,
            subdirectory: None,
        }),
        (716, TagKitDef {
            id: 716,
            name: "MovieElectronicVR",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_186),
            value_conv: None,
            subdirectory: None,
        }),
        (718, TagKitDef {
            id: 718,
            name: "MovieSoundRecording",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_187),
            value_conv: None,
            subdirectory: None,
        }),
        (720, TagKitDef {
            id: 720,
            name: "MicrophoneSensitivity",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (722, TagKitDef {
            id: 722,
            name: "MicrophoneAttenuator",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_188),
            value_conv: None,
            subdirectory: None,
        }),
        (724, TagKitDef {
            id: 724,
            name: "MicrophoneFrequencyResponse",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_189),
            value_conv: None,
            subdirectory: None,
        }),
        (726, TagKitDef {
            id: 726,
            name: "WindNoiseReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_190),
            value_conv: None,
            subdirectory: None,
        }),
        (748, TagKitDef {
            id: 748,
            name: "MovieToneMap",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_191),
            value_conv: None,
            subdirectory: None,
        }),
        (754, TagKitDef {
            id: 754,
            name: "MovieFrameSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_192),
            value_conv: None,
            subdirectory: None,
        }),
        (756, TagKitDef {
            id: 756,
            name: "MovieFrameRate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_193),
            value_conv: None,
            subdirectory: None,
        }),
        (762, TagKitDef {
            id: 762,
            name: "MicrophoneJackPower",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_194),
            value_conv: None,
            subdirectory: None,
        }),
        (763, TagKitDef {
            id: 763,
            name: "MovieDXCropAlert",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_195),
            value_conv: None,
            subdirectory: None,
        }),
        (764, TagKitDef {
            id: 764,
            name: "MovieSubjectDetection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_196),
            value_conv: None,
            subdirectory: None,
        }),
        (799, TagKitDef {
            id: 799,
            name: "CustomSettingsZ9",
            format: "undef[608]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x31f_subdirectory }),
        }),
        (1474, TagKitDef {
            id: 1474,
            name: "Language",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_197),
            value_conv: None,
            subdirectory: None,
        }),
        (1482, TagKitDef {
            id: 1482,
            name: "MonitorBrightness",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_198),
            value_conv: None,
            subdirectory: None,
        }),
        (1504, TagKitDef {
            id: 1504,
            name: "AFFineTune",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_199),
            value_conv: None,
            subdirectory: None,
        }),
        (154, TagKitDef {
            id: 154,
            name: "MultipleExposureMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_200),
            value_conv: None,
            subdirectory: None,
        }),
        (156, TagKitDef {
            id: 156,
            name: "MultiExposureShots",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (1600, TagKitDef {
            id: 1600,
            name: "HDMIOutputResolution",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_201),
            value_conv: None,
            subdirectory: None,
        }),
        (1613, TagKitDef {
            id: 1613,
            name: "SetClockFromLocationData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_202),
            value_conv: None,
            subdirectory: None,
        }),
        (1620, TagKitDef {
            id: 1620,
            name: "AirplaneMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_203),
            value_conv: None,
            subdirectory: None,
        }),
        (1621, TagKitDef {
            id: 1621,
            name: "EmptySlotRelease",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_204),
            value_conv: None,
            subdirectory: None,
        }),
        (1656, TagKitDef {
            id: 1656,
            name: "EnergySavingMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_205),
            value_conv: None,
            subdirectory: None,
        }),
        (1680, TagKitDef {
            id: 1680,
            name: "RecordLocationData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_206),
            value_conv: None,
            subdirectory: None,
        }),
        (1684, TagKitDef {
            id: 1684,
            name: "USBPowerDelivery",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_207),
            value_conv: None,
            subdirectory: None,
        }),
        (1693, TagKitDef {
            id: 1693,
            name: "SensorShield",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_208),
            value_conv: None,
            subdirectory: None,
        }),
        (1754, TagKitDef {
            id: 1754,
            name: "FocusShiftAutoReset",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_209),
            value_conv: None,
            subdirectory: None,
        }),
        (1810, TagKitDef {
            id: 1810,
            name: "PreReleaseBurstLength",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_210),
            value_conv: None,
            subdirectory: None,
        }),
        (1812, TagKitDef {
            id: 1812,
            name: "PostReleaseBurstLength",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_211),
            value_conv: None,
            subdirectory: None,
        }),
        (204, TagKitDef {
            id: 204,
            name: "Intervals",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (208, TagKitDef {
            id: 208,
            name: "ShotsPerInterval",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (248, TagKitDef {
            id: 248,
            name: "FocusShiftNumberShots",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (252, TagKitDef {
            id: 252,
            name: "FocusShiftStepWidth",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (342, TagKitDef {
            id: 342,
            name: "AutoISO",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_212),
            value_conv: None,
            subdirectory: None,
        }),
        (344, TagKitDef {
            id: 344,
            name: "ISOAutoHiLimit",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_213),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (346, TagKitDef {
            id: 346,
            name: "ISOAutoFlashLimit",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_214),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (436, TagKitDef {
            id: 436,
            name: "MovieVignetteControl",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_215),
            value_conv: None,
            subdirectory: None,
        }),
        (438, TagKitDef {
            id: 438,
            name: "DiffractionCompensation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_216),
            value_conv: None,
            subdirectory: None,
        }),
        (440, TagKitDef {
            id: 440,
            name: "FlickerReductionShooting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_217),
            value_conv: None,
            subdirectory: None,
        }),
        (444, TagKitDef {
            id: 444,
            name: "FlashControlMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_218),
            value_conv: None,
            subdirectory: None,
        }),
        (446, TagKitDef {
            id: 446,
            name: "FlashMasterCompensation",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\",$val) : 0"),
            value_conv: Some("$val/6"),
            subdirectory: None,
        }),
        (450, TagKitDef {
            id: 450,
            name: "FlashGNDistance",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_219),
            value_conv: Some("$val + 3"),
            subdirectory: None,
        }),
        (454, TagKitDef {
            id: 454,
            name: "FlashOutput",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val>0.99 ? \"Full\" : sprintf(\"%.1f%%\",$val*100)"),
            value_conv: Some("power_neg_div_3_value_conv"),
            subdirectory: None,
        }),
        (548, TagKitDef {
            id: 548,
            name: "AFAreaMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_220),
            value_conv: None,
            subdirectory: None,
        }),
        (550, TagKitDef {
            id: 550,
            name: "VRMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_221),
            value_conv: None,
            subdirectory: None,
        }),
        (554, TagKitDef {
            id: 554,
            name: "BracketSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_222),
            value_conv: None,
            subdirectory: None,
        }),
        (556, TagKitDef {
            id: 556,
            name: "BracketProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("AE and/or Flash Bracketing"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_223),
            value_conv: None,
            subdirectory: None,
        }),
        (558, TagKitDef {
            id: 558,
            name: "BracketIncrement",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("AE and/or Flash Bracketing"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_224),
            value_conv: None,
            subdirectory: None,
        }),
        (576, TagKitDef {
            id: 576,
            name: "SecondarySlotFunction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_225),
            value_conv: None,
            subdirectory: None,
        }),
        (592, TagKitDef {
            id: 592,
            name: "DXCropAlert",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_226),
            value_conv: None,
            subdirectory: None,
        }),
        (594, TagKitDef {
            id: 594,
            name: "SubjectDetection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_227),
            value_conv: None,
            subdirectory: None,
        }),
        (596, TagKitDef {
            id: 596,
            name: "DynamicAFAreaSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_228),
            value_conv: None,
            subdirectory: None,
        }),
        (636, TagKitDef {
            id: 636,
            name: "HighFrequencyFlickerReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_229),
            value_conv: None,
            subdirectory: None,
        }),
        (646, TagKitDef {
            id: 646,
            name: "MovieImageArea",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_230),
            value_conv: None,
            subdirectory: None,
        }),
        (656, TagKitDef {
            id: 656,
            name: "MovieType",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_231),
            value_conv: None,
            subdirectory: None,
        }),
        (658, TagKitDef {
            id: 658,
            name: "MovieISOAutoHiLimit",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_232),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (660, TagKitDef {
            id: 660,
            name: "MovieISOAutoControlManualMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_233),
            value_conv: None,
            subdirectory: None,
        }),
        (662, TagKitDef {
            id: 662,
            name: "MovieISOAutoManualMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_234),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (72, TagKitDef {
            id: 72,
            name: "HighFrameRate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_235),
            value_conv: None,
            subdirectory: None,
        }),
        (736, TagKitDef {
            id: 736,
            name: "MovieActiveD-Lighting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_236),
            value_conv: None,
            subdirectory: None,
        }),
        (738, TagKitDef {
            id: 738,
            name: "MovieHighISONoiseReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_237),
            value_conv: None,
            subdirectory: None,
        }),
        (744, TagKitDef {
            id: 744,
            name: "MovieFlickerReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_238),
            value_conv: None,
            subdirectory: None,
        }),
        (746, TagKitDef {
            id: 746,
            name: "MovieMeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_239),
            value_conv: None,
            subdirectory: None,
        }),
        (748, TagKitDef {
            id: 748,
            name: "MovieFocusMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_240),
            value_conv: None,
            subdirectory: None,
        }),
        (750, TagKitDef {
            id: 750,
            name: "MovieAFAreaMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_241),
            value_conv: None,
            subdirectory: None,
        }),
        (752, TagKitDef {
            id: 752,
            name: "MovieVRMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_242),
            value_conv: None,
            subdirectory: None,
        }),
        (756, TagKitDef {
            id: 756,
            name: "MovieElectronicVR",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_243),
            value_conv: None,
            subdirectory: None,
        }),
        (758, TagKitDef {
            id: 758,
            name: "MovieSoundRecording",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_244),
            value_conv: None,
            subdirectory: None,
        }),
        (760, TagKitDef {
            id: 760,
            name: "MicrophoneSensitivity",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (762, TagKitDef {
            id: 762,
            name: "MicrophoneAttenuator",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_245),
            value_conv: None,
            subdirectory: None,
        }),
        (764, TagKitDef {
            id: 764,
            name: "MicrophoneFrequencyResponse",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_246),
            value_conv: None,
            subdirectory: None,
        }),
        (766, TagKitDef {
            id: 766,
            name: "WindNoiseReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_247),
            value_conv: None,
            subdirectory: None,
        }),
        (788, TagKitDef {
            id: 788,
            name: "MovieToneMap",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_248),
            value_conv: None,
            subdirectory: None,
        }),
        (794, TagKitDef {
            id: 794,
            name: "MovieFrameSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_249),
            value_conv: None,
            subdirectory: None,
        }),
        (796, TagKitDef {
            id: 796,
            name: "MovieFrameRate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_250),
            value_conv: None,
            subdirectory: None,
        }),
        (802, TagKitDef {
            id: 802,
            name: "MicrophoneJackPower",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_251),
            value_conv: None,
            subdirectory: None,
        }),
        (803, TagKitDef {
            id: 803,
            name: "MovieDXCropAlert",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_252),
            value_conv: None,
            subdirectory: None,
        }),
        (804, TagKitDef {
            id: 804,
            name: "MovieSubjectDetection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_253),
            value_conv: None,
            subdirectory: None,
        }),
        (812, TagKitDef {
            id: 812,
            name: "MovieHighResZoom",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_254),
            value_conv: None,
            subdirectory: None,
        }),
        (847, TagKitDef {
            id: 847,
            name: "CustomSettingsZ9",
            format: "undef[608]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x34f_subdirectory }),
        }),
        (1498, TagKitDef {
            id: 1498,
            name: "Language",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_255),
            value_conv: None,
            subdirectory: None,
        }),
        (1506, TagKitDef {
            id: 1506,
            name: "MonitorBrightness",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_256),
            value_conv: None,
            subdirectory: None,
        }),
        (1528, TagKitDef {
            id: 1528,
            name: "AFFineTune",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_257),
            value_conv: None,
            subdirectory: None,
        }),
        (1532, TagKitDef {
            id: 1532,
            name: "NonCPULens1FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1536, TagKitDef {
            id: 1536,
            name: "NonCPULens2FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (154, TagKitDef {
            id: 154,
            name: "MultipleExposureMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_258),
            value_conv: None,
            subdirectory: None,
        }),
        (1540, TagKitDef {
            id: 1540,
            name: "NonCPULens3FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1544, TagKitDef {
            id: 1544,
            name: "NonCPULens4FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1548, TagKitDef {
            id: 1548,
            name: "NonCPULens5FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1552, TagKitDef {
            id: 1552,
            name: "NonCPULens6FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1556, TagKitDef {
            id: 1556,
            name: "NonCPULens7FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (156, TagKitDef {
            id: 156,
            name: "MultiExposureShots",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (1560, TagKitDef {
            id: 1560,
            name: "NonCPULens8FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1564, TagKitDef {
            id: 1564,
            name: "NonCPULens9FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1568, TagKitDef {
            id: 1568,
            name: "NonCPULens10FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1572, TagKitDef {
            id: 1572,
            name: "NonCPULens11FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1576, TagKitDef {
            id: 1576,
            name: "NonCPULens12FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1580, TagKitDef {
            id: 1580,
            name: "NonCPULens13FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1584, TagKitDef {
            id: 1584,
            name: "NonCPULens14FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1588, TagKitDef {
            id: 1588,
            name: "NonCPULens15FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1592, TagKitDef {
            id: 1592,
            name: "NonCPULens16FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1596, TagKitDef {
            id: 1596,
            name: "NonCPULens17FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1600, TagKitDef {
            id: 1600,
            name: "NonCPULens18FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1604, TagKitDef {
            id: 1604,
            name: "NonCPULens19FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1608, TagKitDef {
            id: 1608,
            name: "NonCPULens20FocalLength",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1fmm\",$val/10)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1612, TagKitDef {
            id: 1612,
            name: "NonCPULens1MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1616, TagKitDef {
            id: 1616,
            name: "NonCPULens2MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1620, TagKitDef {
            id: 1620,
            name: "NonCPULens3MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1624, TagKitDef {
            id: 1624,
            name: "NonCPULens4MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1628, TagKitDef {
            id: 1628,
            name: "NonCPULens5MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1632, TagKitDef {
            id: 1632,
            name: "NonCPULens6MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1636, TagKitDef {
            id: 1636,
            name: "NonCPULens7MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1640, TagKitDef {
            id: 1640,
            name: "NonCPULens8MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1644, TagKitDef {
            id: 1644,
            name: "NonCPULens9MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1648, TagKitDef {
            id: 1648,
            name: "NonCPULens10MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1652, TagKitDef {
            id: 1652,
            name: "NonCPULens11MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1656, TagKitDef {
            id: 1656,
            name: "NonCPULens12MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1660, TagKitDef {
            id: 1660,
            name: "NonCPULens13MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1664, TagKitDef {
            id: 1664,
            name: "NonCPULens14MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1668, TagKitDef {
            id: 1668,
            name: "NonCPULens15MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1672, TagKitDef {
            id: 1672,
            name: "NonCPULens16MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1676, TagKitDef {
            id: 1676,
            name: "NonCPULens17MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1680, TagKitDef {
            id: 1680,
            name: "NonCPULens18MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1684, TagKitDef {
            id: 1684,
            name: "NonCPULens19MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1688, TagKitDef {
            id: 1688,
            name: "NonCPULens20MaxAperture",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"f/%.1f\",$val/100)"),
            value_conv: None,
            subdirectory: None,
        }),
        (1704, TagKitDef {
            id: 1704,
            name: "HDMIOutputResolution",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_259),
            value_conv: None,
            subdirectory: None,
        }),
        (1717, TagKitDef {
            id: 1717,
            name: "SetClockFromLocationData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_260),
            value_conv: None,
            subdirectory: None,
        }),
        (1724, TagKitDef {
            id: 1724,
            name: "AirplaneMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_261),
            value_conv: None,
            subdirectory: None,
        }),
        (1725, TagKitDef {
            id: 1725,
            name: "EmptySlotRelease",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_262),
            value_conv: None,
            subdirectory: None,
        }),
        (1760, TagKitDef {
            id: 1760,
            name: "EnergySavingMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_263),
            value_conv: None,
            subdirectory: None,
        }),
        (1784, TagKitDef {
            id: 1784,
            name: "RecordLocationData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_264),
            value_conv: None,
            subdirectory: None,
        }),
        (1788, TagKitDef {
            id: 1788,
            name: "USBPowerDelivery",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_265),
            value_conv: None,
            subdirectory: None,
        }),
        (1797, TagKitDef {
            id: 1797,
            name: "SensorShield",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_266),
            value_conv: None,
            subdirectory: None,
        }),
        (1862, TagKitDef {
            id: 1862,
            name: "AutoCapturePreset",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_267),
            value_conv: None,
            subdirectory: None,
        }),
        (1864, TagKitDef {
            id: 1864,
            name: "FocusShiftAutoReset",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_268),
            value_conv: None,
            subdirectory: None,
        }),
        (1922, TagKitDef {
            id: 1922,
            name: "PreReleaseBurstLength",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_269),
            value_conv: None,
            subdirectory: None,
        }),
        (1924, TagKitDef {
            id: 1924,
            name: "PostReleaseBurstLength",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_270),
            value_conv: None,
            subdirectory: None,
        }),
        (1938, TagKitDef {
            id: 1938,
            name: "VerticalISOButton",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_271),
            value_conv: None,
            subdirectory: None,
        }),
        (1940, TagKitDef {
            id: 1940,
            name: "ExposureCompensationButton",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_272),
            value_conv: None,
            subdirectory: None,
        }),
        (1942, TagKitDef {
            id: 1942,
            name: "ISOButton",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_273),
            value_conv: None,
            subdirectory: None,
        }),
        (2002, TagKitDef {
            id: 2002,
            name: "ViewModeShowEffectsOfSettings",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_274),
            value_conv: None,
            subdirectory: None,
        }),
        (2004, TagKitDef {
            id: 2004,
            name: "DispButton",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_275),
            value_conv: None,
            subdirectory: None,
        }),
        (204, TagKitDef {
            id: 204,
            name: "Intervals",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (2048, TagKitDef {
            id: 2048,
            name: "ExposureDelay",
            format: "fixed32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%.1f sec\",$val/1000) : \"Off\""),
            value_conv: None,
            subdirectory: None,
        }),
        (2052, TagKitDef {
            id: 2052,
            name: "CommandDialFrameAdvanceZoom",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_276),
            value_conv: None,
            subdirectory: None,
        }),
        (2054, TagKitDef {
            id: 2054,
            name: "SubCommandDialFrameAdvanceZoom",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_277),
            value_conv: None,
            subdirectory: None,
        }),
        (2056, TagKitDef {
            id: 2056,
            name: "PlaybackButton",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_278),
            value_conv: None,
            subdirectory: None,
        }),
        (2058, TagKitDef {
            id: 2058,
            name: "WBButton",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_279),
            value_conv: None,
            subdirectory: None,
        }),
        (2060, TagKitDef {
            id: 2060,
            name: "BracketButton",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_280),
            value_conv: None,
            subdirectory: None,
        }),
        (2062, TagKitDef {
            id: 2062,
            name: "FlashModeButton",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_281),
            value_conv: None,
            subdirectory: None,
        }),
        (2064, TagKitDef {
            id: 2064,
            name: "LensFunc1ButtonPlaybackMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_282),
            value_conv: None,
            subdirectory: None,
        }),
        (2066, TagKitDef {
            id: 2066,
            name: "LensFunc2ButtonPlaybackMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_283),
            value_conv: None,
            subdirectory: None,
        }),
        (2068, TagKitDef {
            id: 2068,
            name: "PlaybackButtonPlaybackMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_284),
            value_conv: None,
            subdirectory: None,
        }),
        (2070, TagKitDef {
            id: 2070,
            name: "BracketButtonPlaybackMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_285),
            value_conv: None,
            subdirectory: None,
        }),
        (2072, TagKitDef {
            id: 2072,
            name: "FlashModeButtonPlaybackMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_286),
            value_conv: None,
            subdirectory: None,
        }),
        (208, TagKitDef {
            id: 208,
            name: "ShotsPerInterval",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (248, TagKitDef {
            id: 248,
            name: "FocusShiftNumberShots",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (252, TagKitDef {
            id: 252,
            name: "FocusShiftStepWidth",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (342, TagKitDef {
            id: 342,
            name: "AutoISO",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_287),
            value_conv: None,
            subdirectory: None,
        }),
        (344, TagKitDef {
            id: 344,
            name: "ISOAutoHiLimit",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_288),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (346, TagKitDef {
            id: 346,
            name: "ISOAutoFlashLimit",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_289),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (436, TagKitDef {
            id: 436,
            name: "MovieVignetteControl",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_290),
            value_conv: None,
            subdirectory: None,
        }),
        (438, TagKitDef {
            id: 438,
            name: "DiffractionCompensation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_291),
            value_conv: None,
            subdirectory: None,
        }),
        (440, TagKitDef {
            id: 440,
            name: "FlickerReductionShooting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_292),
            value_conv: None,
            subdirectory: None,
        }),
        (444, TagKitDef {
            id: 444,
            name: "FlashControlMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_293),
            value_conv: None,
            subdirectory: None,
        }),
        (446, TagKitDef {
            id: 446,
            name: "FlashMasterCompensation",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\",$val) : 0"),
            value_conv: Some("$val/6"),
            subdirectory: None,
        }),
        (450, TagKitDef {
            id: 450,
            name: "FlashGNDistance",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_294),
            value_conv: Some("$val + 3"),
            subdirectory: None,
        }),
        (454, TagKitDef {
            id: 454,
            name: "FlashOutput",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val>0.99 ? \"Full\" : sprintf(\"%.1f%%\",$val*100)"),
            value_conv: Some("power_neg_div_3_value_conv"),
            subdirectory: None,
        }),
        (548, TagKitDef {
            id: 548,
            name: "AFAreaMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_295),
            value_conv: None,
            subdirectory: None,
        }),
        (550, TagKitDef {
            id: 550,
            name: "VRMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_296),
            value_conv: None,
            subdirectory: None,
        }),
        (554, TagKitDef {
            id: 554,
            name: "BracketSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_297),
            value_conv: None,
            subdirectory: None,
        }),
        (556, TagKitDef {
            id: 556,
            name: "BracketProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("AE and/or Flash Bracketing"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_298),
            value_conv: None,
            subdirectory: None,
        }),
        (558, TagKitDef {
            id: 558,
            name: "BracketIncrement",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("AE and/or Flash Bracketing"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_299),
            value_conv: None,
            subdirectory: None,
        }),
        (570, TagKitDef {
            id: 570,
            name: "HDR",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_300),
            value_conv: None,
            subdirectory: None,
        }),
        (576, TagKitDef {
            id: 576,
            name: "SecondarySlotFunction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_301),
            value_conv: None,
            subdirectory: None,
        }),
        (582, TagKitDef {
            id: 582,
            name: "HDRLevel",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_302),
            value_conv: None,
            subdirectory: None,
        }),
        (586, TagKitDef {
            id: 586,
            name: "Slot2JpgSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_303),
            value_conv: None,
            subdirectory: None,
        }),
        (592, TagKitDef {
            id: 592,
            name: "DXCropAlert",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_304),
            value_conv: None,
            subdirectory: None,
        }),
        (594, TagKitDef {
            id: 594,
            name: "SubjectDetection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_305),
            value_conv: None,
            subdirectory: None,
        }),
        (596, TagKitDef {
            id: 596,
            name: "DynamicAFAreaSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_306),
            value_conv: None,
            subdirectory: None,
        }),
        (636, TagKitDef {
            id: 636,
            name: "HighFrequencyFlickerReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_307),
            value_conv: None,
            subdirectory: None,
        }),
        (646, TagKitDef {
            id: 646,
            name: "MovieImageArea",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_308),
            value_conv: None,
            subdirectory: None,
        }),
        (656, TagKitDef {
            id: 656,
            name: "MovieType",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_309),
            value_conv: None,
            subdirectory: None,
        }),
        (658, TagKitDef {
            id: 658,
            name: "MovieISOAutoHiLimit",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_310),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (660, TagKitDef {
            id: 660,
            name: "MovieISOAutoControlManualMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_311),
            value_conv: None,
            subdirectory: None,
        }),
        (662, TagKitDef {
            id: 662,
            name: "MovieISOAutoManualMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_312),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (72, TagKitDef {
            id: 72,
            name: "HighFrameRate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_313),
            value_conv: None,
            subdirectory: None,
        }),
        (736, TagKitDef {
            id: 736,
            name: "MovieActiveD-Lighting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_314),
            value_conv: None,
            subdirectory: None,
        }),
        (738, TagKitDef {
            id: 738,
            name: "MovieHighISONoiseReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_315),
            value_conv: None,
            subdirectory: None,
        }),
        (744, TagKitDef {
            id: 744,
            name: "MovieFlickerReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_316),
            value_conv: None,
            subdirectory: None,
        }),
        (746, TagKitDef {
            id: 746,
            name: "MovieMeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_317),
            value_conv: None,
            subdirectory: None,
        }),
        (748, TagKitDef {
            id: 748,
            name: "MovieFocusMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_318),
            value_conv: None,
            subdirectory: None,
        }),
        (750, TagKitDef {
            id: 750,
            name: "MovieAFAreaMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_319),
            value_conv: None,
            subdirectory: None,
        }),
        (752, TagKitDef {
            id: 752,
            name: "MovieVRMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_320),
            value_conv: None,
            subdirectory: None,
        }),
        (756, TagKitDef {
            id: 756,
            name: "MovieElectronicVR",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_321),
            value_conv: None,
            subdirectory: None,
        }),
        (758, TagKitDef {
            id: 758,
            name: "MovieSoundRecording",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_322),
            value_conv: None,
            subdirectory: None,
        }),
        (760, TagKitDef {
            id: 760,
            name: "MicrophoneSensitivity",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (762, TagKitDef {
            id: 762,
            name: "MicrophoneAttenuator",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_323),
            value_conv: None,
            subdirectory: None,
        }),
        (764, TagKitDef {
            id: 764,
            name: "MicrophoneFrequencyResponse",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_324),
            value_conv: None,
            subdirectory: None,
        }),
        (766, TagKitDef {
            id: 766,
            name: "WindNoiseReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_325),
            value_conv: None,
            subdirectory: None,
        }),
        (788, TagKitDef {
            id: 788,
            name: "MovieToneMap",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_326),
            value_conv: None,
            subdirectory: None,
        }),
        (794, TagKitDef {
            id: 794,
            name: "MovieFrameSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_327),
            value_conv: None,
            subdirectory: None,
        }),
        (796, TagKitDef {
            id: 796,
            name: "MovieFrameRate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_328),
            value_conv: None,
            subdirectory: None,
        }),
        (802, TagKitDef {
            id: 802,
            name: "MicrophoneJackPower",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_329),
            value_conv: None,
            subdirectory: None,
        }),
        (803, TagKitDef {
            id: 803,
            name: "MovieDXCropAlert",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_330),
            value_conv: None,
            subdirectory: None,
        }),
        (804, TagKitDef {
            id: 804,
            name: "MovieSubjectDetection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_331),
            value_conv: None,
            subdirectory: None,
        }),
        (812, TagKitDef {
            id: 812,
            name: "MovieHighResZoom",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_332),
            value_conv: None,
            subdirectory: None,
        }),
        (847, TagKitDef {
            id: 847,
            name: "CustomSettingsZ9v4",
            format: "undef[632]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x34f_subdirectory }),
        }),
        (1002, TagKitDef {
            id: 1002,
            name: "SubjectDetectionAreaMF",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_333),
            value_conv: None,
            subdirectory: None,
        }),
        (1004, TagKitDef {
            id: 1004,
            name: "LinkVRToFocusPoint",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_334),
            value_conv: None,
            subdirectory: None,
        }),
        (1046, TagKitDef {
            id: 1046,
            name: "MovieSlowMotion",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_335),
            value_conv: None,
            subdirectory: None,
        }),
        (1050, TagKitDef {
            id: 1050,
            name: "MovieType",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_336),
            value_conv: None,
            subdirectory: None,
        }),
        (1162, TagKitDef {
            id: 1162,
            name: "MovieFrameSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_337),
            value_conv: None,
            subdirectory: None,
        }),
        (1164, TagKitDef {
            id: 1164,
            name: "MovieFrameRate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_338),
            value_conv: None,
            subdirectory: None,
        }),
        (1255, TagKitDef {
            id: 1255,
            name: "CustomSettingsZ6III",
            format: "undef[700]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4e7_subdirectory }),
        }),
        (2300, TagKitDef {
            id: 2300,
            name: "Language",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_339),
            value_conv: None,
            subdirectory: None,
        }),
        (2308, TagKitDef {
            id: 2308,
            name: "MonitorBrightness",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_340),
            value_conv: None,
            subdirectory: None,
        }),
        (2444, TagKitDef {
            id: 2444,
            name: "EmptySlotRelease",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_341),
            value_conv: None,
            subdirectory: None,
        }),
        (2450, TagKitDef {
            id: 2450,
            name: "EnergySavingMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_342),
            value_conv: None,
            subdirectory: None,
        }),
        (2476, TagKitDef {
            id: 2476,
            name: "USBPowerDelivery",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_343),
            value_conv: None,
            subdirectory: None,
        }),
        (2480, TagKitDef {
            id: 2480,
            name: "SaveFocusPosition",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_344),
            value_conv: None,
            subdirectory: None,
        }),
        (2487, TagKitDef {
            id: 2487,
            name: "SilentPhotography",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_345),
            value_conv: None,
            subdirectory: None,
        }),
        (2496, TagKitDef {
            id: 2496,
            name: "AirplaneMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_346),
            value_conv: None,
            subdirectory: None,
        }),
        (360, TagKitDef {
            id: 360,
            name: "SingleFrame",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (364, TagKitDef {
            id: 364,
            name: "HighFrameRate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_347),
            value_conv: None,
            subdirectory: None,
        }),
        (444, TagKitDef {
            id: 444,
            name: "MultipleExposureMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_348),
            value_conv: None,
            subdirectory: None,
        }),
        (446, TagKitDef {
            id: 446,
            name: "MultiExposureShots",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (476, TagKitDef {
            id: 476,
            name: "IntervalDurationHours",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (480, TagKitDef {
            id: 480,
            name: "IntervalDurationMinutes",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (484, TagKitDef {
            id: 484,
            name: "IntervalDurationSeconds",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (492, TagKitDef {
            id: 492,
            name: "Intervals",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (496, TagKitDef {
            id: 496,
            name: "ShotsPerInterval",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (500, TagKitDef {
            id: 500,
            name: "IntervalExposureSmoothing",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_349),
            value_conv: None,
            subdirectory: None,
        }),
        (502, TagKitDef {
            id: 502,
            name: "IntervalPriority",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_350),
            value_conv: None,
            subdirectory: None,
        }),
        (536, TagKitDef {
            id: 536,
            name: "FocusShiftNumberShots",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (540, TagKitDef {
            id: 540,
            name: "FocusShiftStepWidth",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (544, TagKitDef {
            id: 544,
            name: "FocusShiftInterval",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val == 1? \"1 Second\" : sprintf(\"%.0f Seconds\",$val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (548, TagKitDef {
            id: 548,
            name: "FocusShiftExposureLock",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_351),
            value_conv: None,
            subdirectory: None,
        }),
        (648, TagKitDef {
            id: 648,
            name: "AutoISO",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_352),
            value_conv: None,
            subdirectory: None,
        }),
        (650, TagKitDef {
            id: 650,
            name: "ISOAutoHiLimit",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_353),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (718, TagKitDef {
            id: 718,
            name: "DiffractionCompensation",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_354),
            value_conv: None,
            subdirectory: None,
        }),
        (719, TagKitDef {
            id: 719,
            name: "AutoDistortionControl",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_355),
            value_conv: None,
            subdirectory: None,
        }),
        (720, TagKitDef {
            id: 720,
            name: "FlickerReductionShooting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_356),
            value_conv: None,
            subdirectory: None,
        }),
        (722, TagKitDef {
            id: 722,
            name: "NikonMeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_357),
            value_conv: None,
            subdirectory: None,
        }),
        (724, TagKitDef {
            id: 724,
            name: "FlashControlMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_358),
            value_conv: None,
            subdirectory: None,
        }),
        (730, TagKitDef {
            id: 730,
            name: "FlashGNDistance",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_359),
            value_conv: Some("$val + 3"),
            subdirectory: None,
        }),
        (734, TagKitDef {
            id: 734,
            name: "FlashOutput",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val>0.99 ? \"Full\" : sprintf(\"%.1f%%\",$val*100)"),
            value_conv: Some("power_neg_div_3_value_conv"),
            subdirectory: None,
        }),
        (742, TagKitDef {
            id: 742,
            name: "FlashWirelessOption",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_360),
            value_conv: None,
            subdirectory: None,
        }),
        (744, TagKitDef {
            id: 744,
            name: "FlashRemoteControl",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_361),
            value_conv: None,
            subdirectory: None,
        }),
        (748, TagKitDef {
            id: 748,
            name: "FlashMasterControlMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_362),
            value_conv: None,
            subdirectory: None,
        }),
        (750, TagKitDef {
            id: 750,
            name: "FlashMasterCompensation",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\",$val) : 0"),
            value_conv: Some("$val/6"),
            subdirectory: None,
        }),
        (754, TagKitDef {
            id: 754,
            name: "FlashMasterOutput",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val>0.99 ? \"Full\" : sprintf(\"%.1f%%\",$val*100)"),
            value_conv: Some("power_neg_div_3_value_conv"),
            subdirectory: None,
        }),
        (832, TagKitDef {
            id: 832,
            name: "AFAreaMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_363),
            value_conv: None,
            subdirectory: None,
        }),
        (834, TagKitDef {
            id: 834,
            name: "VRMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_364),
            value_conv: None,
            subdirectory: None,
        }),
        (838, TagKitDef {
            id: 838,
            name: "BracketSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_365),
            value_conv: None,
            subdirectory: None,
        }),
        (840, TagKitDef {
            id: 840,
            name: "BracketProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("AE and/or Flash Bracketing"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_366),
            value_conv: None,
            subdirectory: None,
        }),
        (842, TagKitDef {
            id: 842,
            name: "BracketIncrement",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("AE and/or Flash Bracketing"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_367),
            value_conv: None,
            subdirectory: None,
        }),
        (852, TagKitDef {
            id: 852,
            name: "HDR",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_368),
            value_conv: None,
            subdirectory: None,
        }),
        (858, TagKitDef {
            id: 858,
            name: "SecondarySlotFunction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_369),
            value_conv: None,
            subdirectory: None,
        }),
        (864, TagKitDef {
            id: 864,
            name: "HDRLevel",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_370),
            value_conv: None,
            subdirectory: None,
        }),
        (868, TagKitDef {
            id: 868,
            name: "Slot2JpgSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_371),
            value_conv: None,
            subdirectory: None,
        }),
        (878, TagKitDef {
            id: 878,
            name: "SubjectDetection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_372),
            value_conv: None,
            subdirectory: None,
        }),
        (880, TagKitDef {
            id: 880,
            name: "DynamicAFAreaSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_373),
            value_conv: None,
            subdirectory: None,
        }),
        (884, TagKitDef {
            id: 884,
            name: "ToneMap",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_374),
            value_conv: None,
            subdirectory: None,
        }),
        (888, TagKitDef {
            id: 888,
            name: "PortraitImpressionBalance",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_375),
            value_conv: None,
            subdirectory: None,
        }),
        (902, TagKitDef {
            id: 902,
            name: "HighFrequencyFlickerReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_376),
            value_conv: None,
            subdirectory: None,
        }),
        (904, TagKitDef {
            id: 904,
            name: "PixelShiftShooting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_377),
            value_conv: None,
            subdirectory: None,
        }),
        (906, TagKitDef {
            id: 906,
            name: "PixelShiftNumberShots",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_378),
            value_conv: None,
            subdirectory: None,
        }),
        (908, TagKitDef {
            id: 908,
            name: "PixelShiftDelay",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val == 0? \"No Delay\" : sprintf(\"%.0f sec\",$val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (910, TagKitDef {
            id: 910,
            name: "PixelShiftInterval",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val == 0? \"No Delay\" : sprintf(\"%.0f sec\",$val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (160, TagKitDef {
            id: 160,
            name: "IntervalDurationHours",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (164, TagKitDef {
            id: 164,
            name: "IntervalDurationMinutes",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (168, TagKitDef {
            id: 168,
            name: "IntervalDurationSeconds",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (176, TagKitDef {
            id: 176,
            name: "Intervals",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (180, TagKitDef {
            id: 180,
            name: "ShotsPerInterval",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (184, TagKitDef {
            id: 184,
            name: "IntervalExposureSmoothing",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_379),
            value_conv: None,
            subdirectory: None,
        }),
        (186, TagKitDef {
            id: 186,
            name: "IntervalPriority",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_380),
            value_conv: None,
            subdirectory: None,
        }),
        (220, TagKitDef {
            id: 220,
            name: "FocusShiftNumberShots",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (224, TagKitDef {
            id: 224,
            name: "FocusShiftStepWidth",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (228, TagKitDef {
            id: 228,
            name: "FocusShiftInterval",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val == 1? \"1 Second\" : sprintf(\"%.0f Seconds\",$val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (232, TagKitDef {
            id: 232,
            name: "FocusShiftExposureLock",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_381),
            value_conv: None,
            subdirectory: None,
        }),
        (338, TagKitDef {
            id: 338,
            name: "FlashOutput",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val>0.99 ? \"Full\" : sprintf(\"%.1f%%\",$val*100)"),
            value_conv: Some("power_neg_div_3_value_conv"),
            subdirectory: None,
        }),
        (346, TagKitDef {
            id: 346,
            name: "FlashWirelessOption",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_382),
            value_conv: None,
            subdirectory: None,
        }),
        (348, TagKitDef {
            id: 348,
            name: "FlashRemoteControl",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_383),
            value_conv: None,
            subdirectory: None,
        }),
        (352, TagKitDef {
            id: 352,
            name: "FlashMasterControlMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_384),
            value_conv: None,
            subdirectory: None,
        }),
        (354, TagKitDef {
            id: 354,
            name: "FlashMasterCompensation",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\",$val) : 0"),
            value_conv: Some("$val/6"),
            subdirectory: None,
        }),
        (358, TagKitDef {
            id: 358,
            name: "FlashMasterOutput",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val>0.99 ? \"Full\" : sprintf(\"%.1f%%\",$val*100)"),
            value_conv: Some("power_neg_div_3_value_conv"),
            subdirectory: None,
        }),
        (502, TagKitDef {
            id: 502,
            name: "MovieFrameSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_385),
            value_conv: None,
            subdirectory: None,
        }),
        (504, TagKitDef {
            id: 504,
            name: "MovieFrameRate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_386),
            value_conv: None,
            subdirectory: None,
        }),
        (506, TagKitDef {
            id: 506,
            name: "MovieSlowMotion",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_387),
            value_conv: None,
            subdirectory: None,
        }),
        (510, TagKitDef {
            id: 510,
            name: "MovieType",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_388),
            value_conv: None,
            subdirectory: None,
        }),
        (516, TagKitDef {
            id: 516,
            name: "MovieISOAutoManualMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_389),
            value_conv: Some("($val-104)/8"),
            subdirectory: None,
        }),
        (568, TagKitDef {
            id: 568,
            name: "MovieActiveD-Lighting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_390),
            value_conv: None,
            subdirectory: None,
        }),
        (572, TagKitDef {
            id: 572,
            name: "MovieHighISONoiseReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_391),
            value_conv: None,
            subdirectory: None,
        }),
        (574, TagKitDef {
            id: 574,
            name: "MovieVignetteControl",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_392),
            value_conv: None,
            subdirectory: None,
        }),
        (576, TagKitDef {
            id: 576,
            name: "MovieVignetteControlSameAsPhoto",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_393),
            value_conv: None,
            subdirectory: None,
        }),
        (577, TagKitDef {
            id: 577,
            name: "MovieDiffractionCompensation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_394),
            value_conv: None,
            subdirectory: None,
        }),
        (578, TagKitDef {
            id: 578,
            name: "MovieAutoDistortionControl",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_395),
            value_conv: None,
            subdirectory: None,
        }),
        (584, TagKitDef {
            id: 584,
            name: "MovieFocusMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_396),
            value_conv: None,
            subdirectory: None,
        }),
        (590, TagKitDef {
            id: 590,
            name: "MovieVibrationReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_397),
            value_conv: None,
            subdirectory: None,
        }),
        (591, TagKitDef {
            id: 591,
            name: "MovieVibrationReductionSameAsPhoto",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_398),
            value_conv: None,
            subdirectory: None,
        }),
        (858, TagKitDef {
            id: 858,
            name: "HDMIOutputN-Log",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_399),
            value_conv: None,
            subdirectory: None,
        }),
        (90, TagKitDef {
            id: 90,
            name: "SingleFrame",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (92, TagKitDef {
            id: 92,
            name: "ReleaseMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_400),
            value_conv: Some("$$self{SingleFrame} == 0 ? 5 : $val"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "NikonTags",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "NikonVers",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "PreviewImage",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Make",
            format: "string[24]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (175, TagKitDef {
            id: 175,
            name: "Software",
            format: "string[16]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (223, TagKitDef {
            id: 223,
            name: "ISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (24, TagKitDef {
            id: 24,
            name: "Model",
            format: "string[8]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (42, TagKitDef {
            id: 42,
            name: "FNumber",
            format: "rational64u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f\",$val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (50, TagKitDef {
            id: 50,
            name: "ExposureCompensation",
            format: "rational64s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::Exif::PrintFraction($val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (68, TagKitDef {
            id: 68,
            name: "WhiteBalance",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_401),
            value_conv: None,
            subdirectory: None,
        }),
        (72, TagKitDef {
            id: 72,
            name: "FocalLength",
            format: "rational64u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f mm\",$val)"),
            value_conv: None,
            subdirectory: None,
        }),
    ]
}
