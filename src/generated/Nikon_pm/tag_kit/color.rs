//! Tag kits for color category from Nikon.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_1: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "FX");
    map.insert("1".to_string(), "DX");
    map.insert("4".to_string(), "16:9");
    map.insert("8".to_string(), "1:1");
    map
});

static PRINT_CONV_2: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_3: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_4: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "ISO 64");
    map.insert("1".to_string(), "ISO 80");
    map.insert("10".to_string(), "ISO 640");
    map.insert("11".to_string(), "ISO 800");
    map.insert("12".to_string(), "ISO 1000");
    map.insert("13".to_string(), "ISO 1250");
    map.insert("14".to_string(), "ISO 1600");
    map.insert("15".to_string(), "ISO 2000");
    map.insert("16".to_string(), "ISO 2500");
    map.insert("17".to_string(), "ISO 3200");
    map.insert("18".to_string(), "ISO 4000");
    map.insert("19".to_string(), "ISO 5000");
    map.insert("2".to_string(), "ISO 100");
    map.insert("20".to_string(), "ISO 6400");
    map.insert("21".to_string(), "ISO 8000");
    map.insert("22".to_string(), "ISO 10000");
    map.insert("23".to_string(), "ISO 12800");
    map.insert("24".to_string(), "ISO 16000");
    map.insert("25".to_string(), "ISO 20000");
    map.insert("26".to_string(), "ISO 25600");
    map.insert("27".to_string(), "ISO Hi 0.3");
    map.insert("28".to_string(), "ISO Hi 0.7");
    map.insert("29".to_string(), "ISO Hi 1.0");
    map.insert("3".to_string(), "ISO 125");
    map.insert("32".to_string(), "ISO Hi 2.0");
    map.insert("4".to_string(), "ISO 160");
    map.insert("5".to_string(), "ISO 200");
    map.insert("6".to_string(), "ISO 250");
    map.insert("7".to_string(), "ISO 320");
    map.insert("8".to_string(), "ISO 400");
    map.insert("9".to_string(), "ISO 500");
    map
});

static PRINT_CONV_5: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Pinpoint");
    map.insert("1".to_string(), "Single");
    map.insert("11".to_string(), "Subject Tracking");
    map.insert("12".to_string(), "Wide (C1)");
    map.insert("13".to_string(), "Wide (C2)");
    map.insert("2".to_string(), "Dynamic");
    map.insert("3".to_string(), "Wide (S)");
    map.insert("4".to_string(), "Wide (L)");
    map.insert("5".to_string(), "3D");
    map.insert("6".to_string(), "Auto");
    map
});

static PRINT_CONV_6: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Normal");
    map.insert("2".to_string(), "Sport");
    map
});

static PRINT_CONV_7: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "AE/Flash");
    map.insert("1".to_string(), "AE");
    map.insert("2".to_string(), "Flash");
    map.insert("3".to_string(), "White Balance");
    map.insert("4".to_string(), "Active-D Lighting");
    map
});

static PRINT_CONV_8: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "FX");
    map.insert("1".to_string(), "DX");
    map.insert("4".to_string(), "16:9");
    map.insert("8".to_string(), "1:1");
    map
});

static PRINT_CONV_9: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "FX");
    map.insert("1".to_string(), "DX");
    map.insert("4".to_string(), "16:9");
    map.insert("8".to_string(), "1:1");
    map
});

static PRINT_CONV_10: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_11: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_12: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Matrix");
    map.insert("1".to_string(), "Center");
    map.insert("2".to_string(), "Spot");
    map.insert("3".to_string(), "Highlight");
    map
});

static PRINT_CONV_13: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "TTL");
    map.insert("1".to_string(), "Auto External Flash");
    map.insert("2".to_string(), "GN (distance priority)");
    map.insert("3".to_string(), "Manual");
    map.insert("4".to_string(), "Repeating Flash");
    map
});

static PRINT_CONV_14: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0");
    map.insert("1".to_string(), "0.1 m");
    map.insert("10".to_string(), "1.0 m");
    map.insert("11".to_string(), "1.1 m");
    map.insert("12".to_string(), "1.3 m");
    map.insert("13".to_string(), "1.4 m");
    map.insert("14".to_string(), "1.6 m");
    map.insert("15".to_string(), "1.8 m");
    map.insert("16".to_string(), "2.0 m");
    map.insert("17".to_string(), "2.2 m");
    map.insert("18".to_string(), "2.5 m");
    map.insert("19".to_string(), "2.8 m");
    map.insert("2".to_string(), "0.2 m");
    map.insert("20".to_string(), "3.2 m");
    map.insert("21".to_string(), "3.6 m");
    map.insert("22".to_string(), "4.0 m");
    map.insert("23".to_string(), "4.5 m");
    map.insert("24".to_string(), "5.0 m");
    map.insert("25".to_string(), "5.6 m");
    map.insert("255".to_string(), "n/a");
    map.insert("26".to_string(), "6.3 m");
    map.insert("27".to_string(), "7.1 m");
    map.insert("28".to_string(), "8.0 m");
    map.insert("29".to_string(), "9.0 m");
    map.insert("3".to_string(), "0.3 m");
    map.insert("30".to_string(), "10.0 m");
    map.insert("31".to_string(), "11.0 m");
    map.insert("32".to_string(), "13.0 m");
    map.insert("33".to_string(), "14.0 m");
    map.insert("34".to_string(), "16.0 m");
    map.insert("35".to_string(), "18.0 m");
    map.insert("36".to_string(), "20.0 m");
    map.insert("4".to_string(), "0.4 m");
    map.insert("5".to_string(), "0.5 m");
    map.insert("6".to_string(), "0.6 m");
    map.insert("7".to_string(), "0.7 m");
    map.insert("8".to_string(), "0.8 m");
    map.insert("9".to_string(), "0.9 m");
    map
});

/// Get tag definitions for color category
pub fn get_color_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (
            324,
            TagKitDef {
                id: 324,
                name: "PhotoShootingMenuBankImageArea",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_1),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            322,
            TagKitDef {
                id: 322,
                name: "AutoISO",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_2),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            324,
            TagKitDef {
                id: 324,
                name: "ISOAutoHiLimit",
                format: "int16u",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_3),
                value_conv: Some("($val-104)/8"),
                subdirectory: None,
            },
        ),
        (
            326,
            TagKitDef {
                id: 326,
                name: "ISOAutoFlashLimit",
                format: "int16u",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_4),
                value_conv: Some("($val-104)/8"),
                subdirectory: None,
            },
        ),
        (
            528,
            TagKitDef {
                id: 528,
                name: "AFAreaMode",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_5),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            530,
            TagKitDef {
                id: 530,
                name: "VRMode",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_6),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            534,
            TagKitDef {
                id: 534,
                name: "BracketSet",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_7),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            328,
            TagKitDef {
                id: 328,
                name: "PhotoShootingMenuBankImageArea",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_8),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            328,
            TagKitDef {
                id: 328,
                name: "PhotoShootingMenuBankImageArea",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_9),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            322,
            TagKitDef {
                id: 322,
                name: "DiffractionCompensation",
                format: "int8u",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_10),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            323,
            TagKitDef {
                id: 323,
                name: "AutoDistortionControl",
                format: "int8u",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_11),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            326,
            TagKitDef {
                id: 326,
                name: "NikonMeteringMode",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_12),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            328,
            TagKitDef {
                id: 328,
                name: "FlashControlMode",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_13),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            334,
            TagKitDef {
                id: 334,
                name: "FlashGNDistance",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_14),
                value_conv: Some("$val + 3"),
                subdirectory: None,
            },
        ),
    ]
}
