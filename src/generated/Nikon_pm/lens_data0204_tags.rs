//! Generated tag table definitions from Nikon::LensData0204
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_30::ast_print_30c6ff66128b242c;
use crate::generated::functions::hash_6b::ast_value_6baba6a308124f53;
use crate::generated::functions::hash_6e::ast_value_6ec31a66c09b11db;
use crate::generated::functions::hash_84::ast_print_8470e30e1e5b4729;
use crate::generated::functions::hash_9c::ast_print_9cf1a1875ed5985;
use crate::generated::functions::hash_9d::ast_value_9d597eb160959cc5;
use crate::generated::functions::hash_bb::ast_print_bb744a13f82c4cd2;
use crate::generated::functions::hash_be::ast_value_bebb546318de4cc0;
use crate::generated::functions::hash_d2::ast_print_d23a0db383ac12a7;
use crate::generated::functions::hash_d3::ast_value_d39b819d3cebc1bf;

/// Tag definitions for Nikon::LensData0204 table
pub static NIKON_LENSDATA0204_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "LensDataVersion",
                format: "string[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4,
            TagInfo {
                name: "ExitPupilPosition",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_30c6ff66128b242c)),
                value_conv: Some(ValueConv::Function(ast_value_9d597eb160959cc5)),
            },
        ),
        (
            5,
            TagInfo {
                name: "AFAperture",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_8470e30e1e5b4729)),
                value_conv: Some(ValueConv::Function(ast_value_d39b819d3cebc1bf)),
            },
        ),
        (
            8,
            TagInfo {
                name: "FocusPosition",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_9cf1a1875ed5985)),
                value_conv: None,
            },
        ),
        (
            10,
            TagInfo {
                name: "FocusDistance",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_d23a0db383ac12a7)),
                value_conv: Some(ValueConv::Function(ast_value_6baba6a308124f53)),
            },
        ),
        (
            11,
            TagInfo {
                name: "FocalLength",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_30c6ff66128b242c)),
                value_conv: Some(ValueConv::Function(ast_value_bebb546318de4cc0)),
            },
        ),
        (
            12,
            TagInfo {
                name: "LensIDNumber",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            13,
            TagInfo {
                name: "LensFStops",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_bb744a13f82c4cd2)),
                value_conv: Some(ValueConv::Function(ast_value_6ec31a66c09b11db)),
            },
        ),
        (
            14,
            TagInfo {
                name: "MinFocalLength",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_30c6ff66128b242c)),
                value_conv: Some(ValueConv::Function(ast_value_bebb546318de4cc0)),
            },
        ),
        (
            15,
            TagInfo {
                name: "MaxFocalLength",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_30c6ff66128b242c)),
                value_conv: Some(ValueConv::Function(ast_value_bebb546318de4cc0)),
            },
        ),
        (
            16,
            TagInfo {
                name: "MaxApertureAtMinFocal",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_8470e30e1e5b4729)),
                value_conv: Some(ValueConv::Function(ast_value_d39b819d3cebc1bf)),
            },
        ),
        (
            17,
            TagInfo {
                name: "MaxApertureAtMaxFocal",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_8470e30e1e5b4729)),
                value_conv: Some(ValueConv::Function(ast_value_d39b819d3cebc1bf)),
            },
        ),
        (
            19,
            TagInfo {
                name: "EffectiveMaxAperture",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_8470e30e1e5b4729)),
                value_conv: Some(ValueConv::Function(ast_value_d39b819d3cebc1bf)),
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = NIKON_LENSDATA0204_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value, None),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = NIKON_LENSDATA0204_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value, None),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
