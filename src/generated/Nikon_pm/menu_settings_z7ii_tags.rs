//! Generated tag table definitions from Nikon::MenuSettingsZ7II
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_52::ast_value_52696782fcca735b;
use crate::generated::functions::hash_6c::ast_print_6c62520a706b493;
use crate::generated::functions::hash_72::ast_value_72cc5ff262c4a455;
use crate::generated::functions::hash_83::ast_value_8390ff1421e71f53;
use crate::generated::functions::hash_ab::ast_print_ab0e6c517653bb46;
use crate::generated::functions::hash_ad::ast_value_ada28829e28f9303;
use crate::generated::functions::hash_b7::ast_print_b75f5f46a9f320cf;
use crate::generated::functions::hash_dd::ast_value_dd0f53a300f2b076;

/// Tag definitions for Nikon::MenuSettingsZ7II table
pub static NIKON_MENUSETTINGSZ7II_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            90,
            TagInfo {
                name: "SingleFrame",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            92,
            TagInfo {
                name: "ReleaseMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: Some(ValueConv::Function(ast_value_dd0f53a300f2b076)),
            },
        ),
        (
            160,
            TagInfo {
                name: "IntervalDurationHours",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            164,
            TagInfo {
                name: "IntervalDurationMinutes",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            168,
            TagInfo {
                name: "IntervalDurationSeconds",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            176,
            TagInfo {
                name: "Intervals",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            180,
            TagInfo {
                name: "ShotsPerInterval",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            184,
            TagInfo {
                name: "IntervalExposureSmoothing",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            186,
            TagInfo {
                name: "IntervalPriority",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            220,
            TagInfo {
                name: "FocusShiftNumberShots",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            224,
            TagInfo {
                name: "FocusShiftStepWidth",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            228,
            TagInfo {
                name: "FocusShiftInterval",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_ab0e6c517653bb46)),
                value_conv: None,
            },
        ),
        (
            232,
            TagInfo {
                name: "FocusShiftExposureLock",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            322,
            TagInfo {
                name: "DiffractionCompensation",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            323,
            TagInfo {
                name: "AutoDistortionControl",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            326,
            TagInfo {
                name: "NikonMeteringMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            328,
            TagInfo {
                name: "FlashControlMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            334,
            TagInfo {
                name: "FlashGNDistance",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: Some(ValueConv::Function(ast_value_72cc5ff262c4a455)),
            },
        ),
        (
            338,
            TagInfo {
                name: "FlashOutput",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_6c62520a706b493)),
                value_conv: Some(ValueConv::Function(ast_value_52696782fcca735b)),
            },
        ),
        (
            346,
            TagInfo {
                name: "FlashWirelessOption",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            348,
            TagInfo {
                name: "FlashRemoteControl",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            352,
            TagInfo {
                name: "FlashMasterControlMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            354,
            TagInfo {
                name: "FlashMasterCompensation",
                format: "int8s",
                print_conv: Some(PrintConv::Function(ast_print_b75f5f46a9f320cf)),
                value_conv: Some(ValueConv::Function(ast_value_ada28829e28f9303)),
            },
        ),
        (
            358,
            TagInfo {
                name: "FlashMasterOutput",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_6c62520a706b493)),
                value_conv: Some(ValueConv::Function(ast_value_52696782fcca735b)),
            },
        ),
        (
            502,
            TagInfo {
                name: "MovieFrameSize",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            504,
            TagInfo {
                name: "MovieFrameRate",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            506,
            TagInfo {
                name: "MovieSlowMotion",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            510,
            TagInfo {
                name: "MovieType",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            516,
            TagInfo {
                name: "MovieISOAutoManualMode",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: Some(ValueConv::Function(ast_value_8390ff1421e71f53)),
            },
        ),
        (
            568,
            TagInfo {
                name: "MovieActiveD-Lighting",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            572,
            TagInfo {
                name: "MovieHighISONoiseReduction",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            574,
            TagInfo {
                name: "MovieVignetteControl",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            576,
            TagInfo {
                name: "MovieVignetteControlSameAsPhoto",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            577,
            TagInfo {
                name: "MovieDiffractionCompensation",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            578,
            TagInfo {
                name: "MovieAutoDistortionControl",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            584,
            TagInfo {
                name: "MovieFocusMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            590,
            TagInfo {
                name: "MovieVibrationReduction",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            591,
            TagInfo {
                name: "MovieVibrationReductionSameAsPhoto",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            858,
            TagInfo {
                name: "HDMIOutputN-Log",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = NIKON_MENUSETTINGSZ7II_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value, None),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = NIKON_MENUSETTINGSZ7II_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value, None),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
