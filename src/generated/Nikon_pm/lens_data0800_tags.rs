//! Generated tag table definitions from Nikon::LensData0800
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{
    exposuretime_print_conv, fnumber_print_conv, gpsaltitude_print_conv, lensinfo_print_conv,
    print_fraction,
};
use crate::implementations::value_conv::{
    exif_date_value_conv, gps_coordinate_value_conv, gpstimestamp_value_conv,
    reciprocal_10_value_conv, reference_long_string_value_conv,
    reference_very_long_string_value_conv,
};

/// Tag definitions for Nikon::LensData0800 table
pub static NIKON_LENSDATA0800_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (0, TagInfo {
            name: "LensDataVersion",
            format: "string[4]",
            print_conv: None,
            value_conv: None,
        }),
        (3, TagInfo {
            name: "OldLensData",
            format: "undef[17]",
            print_conv: None,
            value_conv: None,
        }),
        (4, TagInfo {
            name: "ExitPupilPosition",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("sprintf(\"%.1f mm\",$val)".to_string())),
            value_conv: Some(ValueConv::Expression("$val ? 2048 / $val : $val".to_string())),
        }),
        (5, TagInfo {
            name: "AFAperture",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
            value_conv: Some(ValueConv::Expression("2**($val/24)".to_string())),
        }),
        (11, TagInfo {
            name: "FocusDistance",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("$val ? sprintf(\"%.2f m\",$val) : \"inf\"".to_string())),
            value_conv: Some(ValueConv::Expression("0.01 * 10**($val/40)".to_string())),
        }),
        (12, TagInfo {
            name: "FocalLength",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("sprintf(\"%.1f mm\",$val)".to_string())),
            value_conv: Some(ValueConv::Expression("5 * 2**($val/24)".to_string())),
        }),
        (13, TagInfo {
            name: "LensIDNumber",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (14, TagInfo {
            name: "LensFStops",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("sprintf(\"%.2f\", $val)".to_string())),
            value_conv: Some(ValueConv::Expression("$val / 12".to_string())),
        }),
        (15, TagInfo {
            name: "MinFocalLength",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("sprintf(\"%.1f mm\",$val)".to_string())),
            value_conv: Some(ValueConv::Expression("5 * 2**($val/24)".to_string())),
        }),
        (16, TagInfo {
            name: "MaxFocalLength",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("sprintf(\"%.1f mm\",$val)".to_string())),
            value_conv: Some(ValueConv::Expression("5 * 2**($val/24)".to_string())),
        }),
        (17, TagInfo {
            name: "MaxApertureAtMinFocal",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
            value_conv: Some(ValueConv::Expression("2**($val/24)".to_string())),
        }),
        (18, TagInfo {
            name: "MaxApertureAtMaxFocal",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
            value_conv: Some(ValueConv::Expression("2**($val/24)".to_string())),
        }),
        (19, TagInfo {
            name: "MCUVersion",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (20, TagInfo {
            name: "EffectiveMaxAperture",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
            value_conv: Some(ValueConv::Expression("2**($val/24)".to_string())),
        }),
        (47, TagInfo {
            name: "NewLensData",
            format: "undef[17]",
            print_conv: None,
            value_conv: None,
        }),
        (48, TagInfo {
            name: "LensID",
            format: "int16u",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (52, TagInfo {
            name: "LensFirmwareVersion",
            format: "int16u",
            print_conv: Some(PrintConv::Expression("\n            my $version = int($val / 256);\n            my $release =  int(($val - 256 * $version)/16);\n            my $modification = $val - (256 * $version + 16 * $release);\n            return sprintf(\"%.0f.%.0f.%.0f\", $version,$release,$modification);\n        ".to_string())),
            value_conv: None,
        }),
        (54, TagInfo {
            name: "MaxAperture",
            format: "int16u",
            print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
            value_conv: Some(ValueConv::Expression("2**($val/384-1)".to_string())),
        }),
        (56, TagInfo {
            name: "FNumber",
            format: "int16u",
            print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
            value_conv: Some(ValueConv::Expression("2**($val/384-1)".to_string())),
        }),
        (60, TagInfo {
            name: "FocalLength",
            format: "int16u",
            print_conv: Some(PrintConv::Expression("\"$val mm\"".to_string())),
            value_conv: None,
        }),
        (76, TagInfo {
            name: "FocusDistanceRangeWidth",
            format: "int8u",
            print_conv: None,
            value_conv: None,
        }),
        (78, TagInfo {
            name: "FocusDistance",
            format: "int16u",
            print_conv: Some(PrintConv::Expression("\n            (defined $$self{FocusStepsFromInfinity} and $$self{FocusStepsFromInfinity} eq 0) ? \"Inf\" : $val < 100 ? $val < 10 ? $val < 1 ? $val < 0.35 ? sprintf(\"%.4f m\", $val): sprintf(\"%.3f m\", $val): sprintf(\"%.2f m\", $val) : sprintf(\"%.1f m\", $val) : sprintf(\"%.0f m\", $val),\n        ".to_string())),
            value_conv: Some(ValueConv::Expression("2**(($val-80)/12)".to_string())),
        }),
        (86, TagInfo {
            name: "LensDriveEnd",
            format: "int8u",
            print_conv: None,
            value_conv: None,
        }),
        (88, TagInfo {
            name: "FocusStepsFromInfinity",
            format: "int8u",
            print_conv: None,
            value_conv: None,
        }),
        (90, TagInfo {
            name: "LensPositionAbsolute",
            format: "int32s",
            print_conv: None,
            value_conv: None,
        }),
        (95, TagInfo {
            name: "LensMountType",
            format: "int8u",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = NIKON_LENSDATA0800_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = NIKON_LENSDATA0800_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
