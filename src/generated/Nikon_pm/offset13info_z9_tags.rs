//! Generated tag table definitions from Nikon::Offset13InfoZ9
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{
    exposuretime_print_conv, fnumber_print_conv, gpsaltitude_print_conv, lensinfo_print_conv,
    print_fraction,
};
use crate::implementations::value_conv::{
    exif_date_value_conv, gps_coordinate_value_conv, gpstimestamp_value_conv,
    reciprocal_10_value_conv, reference_long_string_value_conv,
    reference_very_long_string_value_conv,
};

/// Tag definitions for Nikon::Offset13InfoZ9 table
pub static NIKON_OFFSET13INFOZ9_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (3048, TagInfo {
            name: "AFAreaInitialXPosition",
            format: "int8s",
            print_conv: Some(PrintConv::Expression("\n            my $imageArea = $$self{ImageArea};\n            my $afAreaMode = $$self{VALUE}{AFAreaMode};\n            my $dynamicAFAreaSize = ( defined $$self{DynamicAFAreaSize} ? $$self{DynamicAFAreaSize} : 0 );\n\n            my $FX = 0;            #image size 8256 x 5504\n            my $DX = 1;            #image size 5392 x 3592\n            my $WideScreen = 4;    #16:9 image area, image size 8256x4640\n            my $OneToOne = 8;      #1:1 image area, image size 5504x5504\n\n            my $Single = 1;\n            my $Dynamic = 2;\n            my $WideS = 3;\n            my $WideL = 4;\n            my $ThreeD = 5;\n            my $Auto = 6;\n            my $WideC1 = 12;\n\n            my $DynamicS = 0;\n            my $DynamicM = 1;\n            my $DynamicL = 2;\n\n            my $start = 502;           #FX, 16:9 & 1:1 formats\n            my $increment = 259;       #FX & 16:9 formats\n\n            $start = $start + 5 * $increment if $imageArea == $OneToOne;  # need to provide additional offset for the cropped horizontal pixels in 1:1 (19 vs 29 horizontal focus positions)\n            $start = $start - $increment if $val < 49 and ($imageArea == $FX or $imageArea == $WideScreen);   #calculations for the left side of the frames are offset by 1 position from the right side\n            $start = $start - $increment if $imageArea == $OneToOne and $afAreaMode == $Auto;\n\n            if ($imageArea == $DX) {    # DX results are in FX coordinate system to match reporting of ($AFAreaXPosition , $AFAreaYPosition)\n                $start = 636;\n                $increment = 388;\n                if ( $afAreaMode == $WideS ) {  #Wide S focus box width is an unusual size\n                    $start = 591;\n                    $increment = 393;\n                }\n                $start = $start - $increment if $afAreaMode == $Auto ;\n            }\n\n            my $divisor = 3.99;     #subtract .01 to ensure $val of 2n+2 rounds up\n            $divisor = 4.01 if $val >= 50;        #...but round up on the right side of the frame\n            $divisor = 6 if $imageArea == $DX or $imageArea == $OneToOne;\n\n            my $roundedValOverDivisor = sprintf(\"%.0f\", $val / $divisor);   #round to nearest int\n\n            my $focusBoxWidth = $$self{AFAreaInitialWidth}  ;     #wider focus boxes (e.g., DynM, DynL and some Wide C1/C2) will start and end closer to the center of the frame\n            $focusBoxWidth = int($focusBoxWidth * 2 / 3) if $imageArea == $DX or $imageArea == $OneToOne ;\n\n            my $skipPositions = int($focusBoxWidth / 2);   #jump over half the width of the focus box\n\n            my $result =  $start + $increment * ($roundedValOverDivisor + $skipPositions  - 1 ) ;\n\n            return $result;\n        ".to_string())),
            value_conv: None,
        }),
        (3049, TagInfo {
            name: "AFAreaInitialYPosition",
            format: "int8s",
            print_conv: Some(PrintConv::Expression("\n            my $imageArea = $$self{ImageArea};\n            my $afAreaMode = $$self{VALUE}{AFAreaMode};\n\n            my $FX = 0;            #image size 8256 x 5504\n            my $DX = 1;            #image size 5392 x 3592\n            my $WideScreen = 4;    #16:9 image area, image size 8256x4640\n            my $OneToOne = 8;      #1:1 image area, image size 5504x5504\n\n            my $Single = 1;\n            my $Dynamic = 2;\n            my $WideS = 3;\n            my $WideL = 4;\n            my $ThreeD = 5;\n            my $Auto = 6;\n            my $WideC1 = 12;\n\n            my $DynamicS = 0;\n            my $DynamicM = 1;\n            my $DynamicL = 2;\n\n            my $start = 424;           #FX, 16:9 & 1:1 formats\n            my $increment = 291;       #FX, & 16:9 formats\n            $start = $start + $increment if $imageArea == $WideScreen and $val > 0;\n\n            if ($imageArea == $DX) {    # DX results are in FX coordinate system to match reporting of ($AFAreaXPosition , $AFAreaYPosition)\n                $start = 572;\n                $increment = 436;\n                if ( $afAreaMode == $WideS ) {  #Wide S focus box is a strange size\n                    $start = 542;\n                    $increment = 442;\n                }\n            }\n\n            my $divisor = 6.67;\n            $divisor = 10.01 if $imageArea == $DX ;   #extra .01 to ensure $val of 10*n+5 rounds down\n            $divisor = 8.01 if $imageArea == $WideScreen ;\n\n            my $roundedValOverDivisor = sprintf(\"%.0f\", $val / $divisor);   #round to nearest int\n\n            my $focusBoxHeight = $$self{AFAreaInitialHeight}  ;    #wider focus boxes (e.g., DynM, DynL and some Wide C1/C2) will start and end closer to the center of the frame\n            $focusBoxHeight = int($focusBoxHeight * 2 / 3) if $imageArea == $DX ;\n\n            my $skipPositions = int($focusBoxHeight / 2);   #jump over half the height of the focus box\n\n            my $result =  $start + $increment * ($roundedValOverDivisor + $skipPositions  - 1 ) ;\n            return $result;\n        ".to_string())),
            value_conv: None,
        }),
        (3050, TagInfo {
            name: "AFAreaInitialWidth",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (3051, TagInfo {
            name: "AFAreaInitialHeight",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = NIKON_OFFSET13INFOZ9_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = NIKON_OFFSET13INFOZ9_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
