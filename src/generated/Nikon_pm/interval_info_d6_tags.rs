//! Generated tag table definitions from Nikon::IntervalInfoD6
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

/// Tag definitions for Nikon::IntervalInfoD6 table
pub static NIKON_INTERVALINFOD6_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            380,
            TagInfo {
                name: "Intervals",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            384,
            TagInfo {
                name: "ShotsPerInterval",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            388,
            TagInfo {
                name: "IntervalExposureSmoothing",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            390,
            TagInfo {
                name: "IntervalPriority",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            424,
            TagInfo {
                name: "FocusShiftNumberShots",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            428,
            TagInfo {
                name: "FocusShiftStepWidth",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            432,
            TagInfo {
                name: "FocusShiftInterval",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val == 1? \"1 Second\" : sprintf(\"%.0f Seconds\",$val)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            436,
            TagInfo {
                name: "FocusShiftExposureLock",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            526,
            TagInfo {
                name: "DiffractionCompensation",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            532,
            TagInfo {
                name: "FlashControlMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            538,
            TagInfo {
                name: "FlashGNDistance",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: Some(ValueConv::Expression("$val + 3".to_string())),
            },
        ),
        (
            542,
            TagInfo {
                name: "FlashOutput",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val>0.99 ? \"Full\" : sprintf(\"%.1f%%\",$val*100)".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("2 ** (-$val/3)".to_string())),
            },
        ),
        (
            552,
            TagInfo {
                name: "FlashRemoteControl",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            556,
            TagInfo {
                name: "FlashMasterControlMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            558,
            TagInfo {
                name: "FlashMasterCompensation",
                format: "int8s",
                print_conv: Some(PrintConv::Expression(
                    "$val ? sprintf(\"%+.1f\",$val) : 0".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("$val/6".to_string())),
            },
        ),
        (
            562,
            TagInfo {
                name: "FlashMasterOutput",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val>0.99 ? \"Full\" : sprintf(\"%.1f%%\",$val*100)".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("2 ** (-$val/3)".to_string())),
            },
        ),
        (
            564,
            TagInfo {
                name: "FlashWirelessOption",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            714,
            TagInfo {
                name: "MovieType",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = NIKON_INTERVALINFOD6_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = NIKON_INTERVALINFOD6_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
