//! Modular tag kits with embedded PrintConv for MinoltaRaw_pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.
//!
//! Generated from: MinoltaRaw.pm table: PRD
//!
#![allow(unused_imports)]
#![allow(unused_mut)]

pub mod interop;
pub mod other;

use crate::expressions::ExpressionEvaluator;
use crate::tiff_types::ByteOrder;
use crate::types::{Result, TagValue};
use std::collections::HashMap;
use std::sync::LazyLock;

#[derive(Debug, Clone)]
pub struct TagKitDef {
    pub id: u32,
    pub name: &'static str,
    pub format: &'static str,
    pub groups: HashMap<&'static str, &'static str>,
    pub writable: bool,
    pub notes: Option<&'static str>,
    pub print_conv: PrintConvType,
    pub value_conv: Option<&'static str>,
    pub subdirectory: Option<SubDirectoryType>,
}

#[derive(Debug, Clone)]
pub enum PrintConvType {
    None,
    Simple(&'static HashMap<String, &'static str>),
    Expression(&'static str),
    Manual(&'static str),
}

#[derive(Debug, Clone)]
pub enum SubDirectoryType {
    Binary {
        processor: fn(
            &[u8],
            crate::tiff_types::ByteOrder,
        ) -> crate::types::Result<Vec<(String, TagValue)>>,
    },
}

/// All tag kits for MinoltaRaw_pm
pub static MINOLTARAW_PM_TAG_KITS: LazyLock<HashMap<u32, TagKitDef>> = LazyLock::new(|| {
    let mut map = HashMap::new();

    // other tags
    for (id, tag_def) in other::get_other_tags() {
        map.insert(id, tag_def);
    }

    // interop tags
    for (id, tag_def) in interop::get_interop_tags() {
        map.insert(id, tag_def);
    }

    map
});

// Helper functions for reading binary data
fn read_int16s_array(data: &[u8], byte_order: ByteOrder, count: usize) -> Result<Vec<i16>> {
    if data.len() < count * 2 {
        return Err(crate::types::ExifError::ParseError(
            "Insufficient data for int16s array".to_string(),
        ));
    }
    let mut values = Vec::with_capacity(count);
    for i in 0..count {
        let offset = i * 2;
        let value = match byte_order {
            ByteOrder::LittleEndian => i16::from_le_bytes([data[offset], data[offset + 1]]),
            ByteOrder::BigEndian => i16::from_be_bytes([data[offset], data[offset + 1]]),
        };
        values.push(value);
    }
    Ok(values)
}

fn read_int16u_array(data: &[u8], byte_order: ByteOrder, count: usize) -> Result<Vec<u16>> {
    if data.len() < count * 2 {
        return Err(crate::types::ExifError::ParseError(
            "Insufficient data for int16u array".to_string(),
        ));
    }
    let mut values = Vec::with_capacity(count);
    for i in 0..count {
        let offset = i * 2;
        let value = match byte_order {
            ByteOrder::LittleEndian => u16::from_le_bytes([data[offset], data[offset + 1]]),
            ByteOrder::BigEndian => u16::from_be_bytes([data[offset], data[offset + 1]]),
        };
        values.push(value);
    }
    Ok(values)
}

fn read_int16s(data: &[u8], byte_order: ByteOrder) -> Result<i16> {
    if data.len() < 2 {
        return Err(crate::types::ExifError::ParseError(
            "Insufficient data for int16s".to_string(),
        ));
    }
    Ok(match byte_order {
        ByteOrder::LittleEndian => i16::from_le_bytes([data[0], data[1]]),
        ByteOrder::BigEndian => i16::from_be_bytes([data[0], data[1]]),
    })
}

/// Apply PrintConv for a tag from this module
pub fn apply_print_conv(
    tag_id: u32,
    value: &TagValue,
    _evaluator: &mut ExpressionEvaluator,
    _errors: &mut Vec<String>,
    warnings: &mut Vec<String>,
) -> TagValue {
    if let Some(tag_kit) = MINOLTARAW_PM_TAG_KITS.get(&tag_id) {
        // Normal PrintConv processing only
        match &tag_kit.print_conv {
            PrintConvType::None => value.clone(),
            PrintConvType::Simple(lookup) => {
                // Convert value to string key for lookup
                let key = match value {
                    TagValue::U8(v) => v.to_string(),
                    TagValue::U16(v) => v.to_string(),
                    TagValue::U32(v) => v.to_string(),
                    TagValue::I16(v) => v.to_string(),
                    TagValue::I32(v) => v.to_string(),
                    TagValue::String(s) => s.clone(),
                    _ => return value.clone(),
                };

                if let Some(result) = lookup.get(&key) {
                    TagValue::String(result.to_string())
                } else {
                    TagValue::String(format!("Unknown ({})", value))
                }
            }
            PrintConvType::Expression(expr) => {
                // TODO: Implement expression evaluation
                warnings.push(format!(
                    "Expression PrintConv not yet implemented for tag {}: {}",
                    tag_kit.name, expr
                ));
                value.clone()
            }
            PrintConvType::Manual(func_name) => {
                // TODO: Look up in manual registry
                warnings.push(format!(
                    "Manual PrintConv '{}' not found for tag {}",
                    func_name, tag_kit.name
                ));
                value.clone()
            }
        }
    } else {
        // Tag not found in kit
        value.clone()
    }
}

/// Check if a tag has subdirectory processing
pub fn has_subdirectory(tag_id: u32) -> bool {
    if let Some(tag_kit) = MINOLTARAW_PM_TAG_KITS.get(&tag_id) {
        tag_kit.subdirectory.is_some()
    } else {
        false
    }
}

/// Process subdirectory tags and return multiple extracted tags
pub fn process_subdirectory(
    tag_id: u32,
    value: &TagValue,
    byte_order: ByteOrder,
) -> Result<HashMap<String, TagValue>> {
    let mut result = HashMap::new();

    if let Some(tag_kit) = MINOLTARAW_PM_TAG_KITS.get(&tag_id) {
        if let Some(SubDirectoryType::Binary { processor }) = &tag_kit.subdirectory {
            let bytes = match value {
                TagValue::U16Array(arr) => {
                    // Convert U16 array to bytes based on byte order
                    let mut bytes = Vec::with_capacity(arr.len() * 2);
                    for val in arr {
                        match byte_order {
                            ByteOrder::LittleEndian => bytes.extend_from_slice(&val.to_le_bytes()),
                            ByteOrder::BigEndian => bytes.extend_from_slice(&val.to_be_bytes()),
                        }
                    }
                    bytes
                }
                TagValue::U8Array(arr) => arr.clone(),
                _ => return Ok(result), // Not array data
            };

            // Process subdirectory and collect all extracted tags
            if let Ok(extracted_tags) = processor(&bytes, byte_order) {
                for (name, value) in extracted_tags {
                    result.insert(name, value);
                }
            }
        }
    }

    Ok(result)
}
