//! Generated tag table definitions from FujiFilm::Main
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{
    exposuretime_print_conv, fnumber_print_conv, gpsaltitude_print_conv, lensinfo_print_conv,
    print_fraction,
};
use crate::implementations::value_conv::{
    exif_date_value_conv, gps_coordinate_value_conv, gpstimestamp_value_conv,
    reference_long_string_value_conv, reference_very_long_string_value_conv,
};

/// Tag definitions for FujiFilm::Main table
pub static FUJI_FILM_MAIN_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (0, TagInfo {
            name: "Version",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (16, TagInfo {
            name: "InternalSerialNumber",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("\n            if ($val =~ /^(.*?\\s*)([0-9a-fA-F]*)(\\d{2})(\\d{2})(\\d{2})(.{12})\\s*\\0*$/s\n                and $4 >= 1 and $4 <= 12 and $5 >= 1 and $5 <= 31)\n            {\n                my $yr = $3 + ($3 < 70 ? 2000 : 1900);\n                my $sn = pack 'H*', $2;\n                return \"$1$sn $yr:$4:$5 $6\";\n            } else {\n                # handle a couple of models which use a slightly different format\n                $val =~ s/\\b(592D(3[0-9])+)/pack(\"H*\",$1).' '/e;\n            }\n            return $val;\n        ".to_string())),
            value_conv: None,
        }),
        (4096, TagInfo {
            name: "Quality",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4097, TagInfo {
            name: "Sharpness",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4098, TagInfo {
            name: "WhiteBalance",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4099, TagInfo {
            name: "Saturation",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4100, TagInfo {
            name: "Contrast",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4101, TagInfo {
            name: "ColorTemperature",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4102, TagInfo {
            name: "Contrast",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4106, TagInfo {
            name: "WhiteBalanceFineTune",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("sprintf(\"Red %+d, Blue %+d\", split(\" \", $val))".to_string())),
            value_conv: None,
        }),
        (4107, TagInfo {
            name: "NoiseReduction",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4110, TagInfo {
            name: "NoiseReduction",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4111, TagInfo {
            name: "Clarity",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4112, TagInfo {
            name: "FujiFlashMode",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4113, TagInfo {
            name: "FlashExposureComp",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4128, TagInfo {
            name: "Macro",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4129, TagInfo {
            name: "FocusMode",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4130, TagInfo {
            name: "AFMode",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4131, TagInfo {
            name: "FocusPixel",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4139, TagInfo {
            name: "PrioritySettings",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4141, TagInfo {
            name: "FocusSettings",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4142, TagInfo {
            name: "AFCSettings",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4144, TagInfo {
            name: "SlowSync",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4145, TagInfo {
            name: "PictureMode",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4146, TagInfo {
            name: "ExposureCount",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4147, TagInfo {
            name: "EXRAuto",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4148, TagInfo {
            name: "EXRMode",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4160, TagInfo {
            name: "ShadowTone",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4161, TagInfo {
            name: "HighlightTone",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4164, TagInfo {
            name: "DigitalZoom",
            format: "unknown",
            print_conv: None,
            value_conv: Some(ValueConv::Expression("$val / 8".to_string())),
        }),
        (4165, TagInfo {
            name: "LensModulationOptimizer",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4167, TagInfo {
            name: "GrainEffectRoughness",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4168, TagInfo {
            name: "ColorChromeEffect",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4169, TagInfo {
            name: "BWAdjustment",
            format: "int8s",
            print_conv: Some(PrintConv::Expression("$val > 0 ? \"+$val\" : $val".to_string())),
            value_conv: None,
        }),
        (4171, TagInfo {
            name: "BWMagentaGreen",
            format: "int8s",
            print_conv: Some(PrintConv::Expression("$val > 0 ? \"+$val\" : $val".to_string())),
            value_conv: None,
        }),
        (4172, TagInfo {
            name: "GrainEffectSize",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4173, TagInfo {
            name: "CropMode",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4174, TagInfo {
            name: "ColorChromeFXBlue",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4176, TagInfo {
            name: "ShutterType",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4177, TagInfo {
            name: "CropFlag",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4178, TagInfo {
            name: "CropTopLeft",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4179, TagInfo {
            name: "CropSize",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4353, TagInfo {
            name: "SequenceNumber",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4355, TagInfo {
            name: "DriveSettings",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4357, TagInfo {
            name: "PixelShiftShots",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4358, TagInfo {
            name: "PixelShiftOffset",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4435, TagInfo {
            name: "PanoramaAngle",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4436, TagInfo {
            name: "PanoramaDirection",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4609, TagInfo {
            name: "AdvancedFilter",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4624, TagInfo {
            name: "ColorMode",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4864, TagInfo {
            name: "BlurWarning",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4865, TagInfo {
            name: "FocusWarning",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4866, TagInfo {
            name: "ExposureWarning",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (4868, TagInfo {
            name: "GEImageSize",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (5120, TagInfo {
            name: "DynamicRange",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (5121, TagInfo {
            name: "FilmMode",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (5122, TagInfo {
            name: "DynamicRangeSetting",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (5123, TagInfo {
            name: "DevelopmentDynamicRange",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (5124, TagInfo {
            name: "MinFocalLength",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (5125, TagInfo {
            name: "MaxFocalLength",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (5126, TagInfo {
            name: "MaxApertureAtMinFocal",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (5127, TagInfo {
            name: "MaxApertureAtMaxFocal",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (5131, TagInfo {
            name: "AutoDynamicRange",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("\"$val%\"".to_string())),
            value_conv: None,
        }),
        (5154, TagInfo {
            name: "ImageStabilization",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (5157, TagInfo {
            name: "SceneRecognition",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (5169, TagInfo {
            name: "Rating",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (5174, TagInfo {
            name: "ImageGeneration",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (5176, TagInfo {
            name: "ImageCount",
            format: "unknown",
            print_conv: None,
            value_conv: Some(ValueConv::Expression("$val & 0x7fff".to_string())),
        }),
        (5187, TagInfo {
            name: "DRangePriority",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (5188, TagInfo {
            name: "DRangePriorityAuto",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (5189, TagInfo {
            name: "DRangePriorityFixed",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (5190, TagInfo {
            name: "FlickerReduction",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("\n            my $on = ((($val >> 8) & 0x0f) == 1) ? 'On' : 'Off';\n            return sprintf('%s (0x%.4x)', $on, $val);\n        ".to_string())),
            value_conv: None,
        }),
        (5191, TagInfo {
            name: "FujiModel",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (5192, TagInfo {
            name: "FujiModel2",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (5194, TagInfo {
            name: "WBRed",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (5195, TagInfo {
            name: "WBGreen",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (5196, TagInfo {
            name: "WBBlue",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (5197, TagInfo {
            name: "RollAngle",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (14339, TagInfo {
            name: "VideoRecordingMode",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (14340, TagInfo {
            name: "PeripheralLighting",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (14342, TagInfo {
            name: "VideoCompression",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (14368, TagInfo {
            name: "FrameRate",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (14369, TagInfo {
            name: "FrameWidth",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (14370, TagInfo {
            name: "FrameHeight",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (14372, TagInfo {
            name: "FullHDHighSpeedRec",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (16389, TagInfo {
            name: "FaceElementSelected",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (16640, TagInfo {
            name: "FacesDetected",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (16643, TagInfo {
            name: "FacePositions",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (16896, TagInfo {
            name: "NumFaceElements",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (16897, TagInfo {
            name: "FaceElementTypes",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (16899, TagInfo {
            name: "FaceElementPositions",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (17026, TagInfo {
            name: "FaceRecInfo",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (32768, TagInfo {
            name: "FileSource",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (32770, TagInfo {
            name: "OrderNumber",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (32771, TagInfo {
            name: "FrameNumber",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (45585, TagInfo {
            name: "Parallax",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = FUJI_FILM_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = FUJI_FILM_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
