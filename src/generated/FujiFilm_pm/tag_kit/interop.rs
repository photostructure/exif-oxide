//! Tag kits for interop category from FujiFilm.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_0: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "-4 (softest)");
    map.insert("1".to_string(), "-3 (very soft)");
    map.insert("130".to_string(), "-1 (medium soft)");
    map.insert("132".to_string(), "+1 (medium hard)");
    map.insert("2".to_string(), "-2 (soft)");
    map.insert("3".to_string(), "0 (normal)");
    map.insert("32768".to_string(), "Film Simulation");
    map.insert("4".to_string(), "+2 (hard)");
    map.insert("5".to_string(), "+3 (very hard)");
    map.insert("6".to_string(), "+4 (hardest)");
    map.insert("65535".to_string(), "n/a");
    map
});

static PRINT_CONV_1: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Auto (white priority)");
    map.insert("1024".to_string(), "Incandescent");
    map.insert("1280".to_string(), "Flash");
    map.insert("1536".to_string(), "Underwater");
    map.insert("2".to_string(), "Auto (ambiance priority)");
    map.insert("256".to_string(), "Daylight");
    map.insert("3840".to_string(), "Custom");
    map.insert("3841".to_string(), "Custom2");
    map.insert("3842".to_string(), "Custom3");
    map.insert("3843".to_string(), "Custom4");
    map.insert("3844".to_string(), "Custom5");
    map.insert("4080".to_string(), "Kelvin");
    map.insert("512".to_string(), "Cloudy");
    map.insert("768".to_string(), "Daylight Fluorescent");
    map.insert("769".to_string(), "Day White Fluorescent");
    map.insert("770".to_string(), "White Fluorescent");
    map.insert("771".to_string(), "Warm White Fluorescent");
    map.insert("772".to_string(), "Living Room Warm White Fluorescent");
    map
});

static PRINT_CONV_2: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0 (normal)");
    map.insert("1024".to_string(), "-2 (low)");
    map.insert("1216".to_string(), "-3 (very low)");
    map.insert("1248".to_string(), "-4 (lowest)");
    map.insert("128".to_string(), "+1 (medium high)");
    map.insert("1280".to_string(), "Acros");
    map.insert("1281".to_string(), "Acros Red Filter");
    map.insert("1282".to_string(), "Acros Yellow Filter");
    map.insert("1283".to_string(), "Acros Green Filter");
    map.insert("192".to_string(), "+3 (very high)");
    map.insert("224".to_string(), "+4 (highest)");
    map.insert("256".to_string(), "+2 (high)");
    map.insert("32768".to_string(), "Film Simulation");
    map.insert("384".to_string(), "-1 (medium low)");
    map.insert("512".to_string(), "Low");
    map.insert("768".to_string(), "None (B&W)");
    map.insert("769".to_string(), "B&W Red Filter");
    map.insert("770".to_string(), "B&W Yellow Filter");
    map.insert("771".to_string(), "B&W Green Filter");
    map.insert("784".to_string(), "B&W Sepia");
    map
});

static PRINT_CONV_3: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("128".to_string(), "Medium High");
    map.insert("256".to_string(), "High");
    map.insert("32768".to_string(), "Film Simulation");
    map.insert("384".to_string(), "Medium Low");
    map.insert("512".to_string(), "Low");
    map
});

static PRINT_CONV_4: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("256".to_string(), "High");
    map.insert("768".to_string(), "Low");
    map
});

static PRINT_CONV_5: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("128".to_string(), "Normal");
    map.insert("256".to_string(), "n/a");
    map.insert("64".to_string(), "Low");
    map
});

static PRINT_CONV_6: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0 (normal)");
    map.insert("256".to_string(), "+2 (strong)");
    map.insert("384".to_string(), "+1 (medium strong)");
    map.insert("448".to_string(), "+3 (very strong)");
    map.insert("480".to_string(), "+4 (strongest)");
    map.insert("512".to_string(), "-2 (weak)");
    map.insert("640".to_string(), "-1 (medium weak)");
    map.insert("704".to_string(), "-3 (very weak)");
    map.insert("736".to_string(), "-4 (weakest)");
    map
});

static PRINT_CONV_7: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1000".to_string(), "-1");
    map.insert("-2000".to_string(), "-2");
    map.insert("-3000".to_string(), "-3");
    map.insert("-4000".to_string(), "-4");
    map.insert("-5000".to_string(), "-5");
    map.insert("0".to_string(), "0");
    map.insert("1000".to_string(), "1");
    map.insert("2000".to_string(), "2");
    map.insert("3000".to_string(), "3");
    map.insert("4000".to_string(), "4");
    map.insert("5000".to_string(), "5");
    map
});

static PRINT_CONV_8: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "On");
    map.insert("16".to_string(), "Commander");
    map.insert("2".to_string(), "Off");
    map.insert("3".to_string(), "Red-eye reduction");
    map.insert("32768".to_string(), "Not Attached");
    map.insert("33056".to_string(), "TTL");
    map.insert("33568".to_string(), "TTL Auto - Did not fire");
    map.insert("38976".to_string(), "Manual");
    map.insert("39008".to_string(), "Flash Commander");
    map.insert("39040".to_string(), "Multi-flash");
    map.insert("4".to_string(), "External");
    map.insert("43296".to_string(), "1st Curtain (front)");
    map.insert("43552".to_string(), "TTL Slow - 1st Curtain (front)");
    map.insert("43808".to_string(), "TTL Auto - 1st Curtain (front)");
    map.insert(
        "44320".to_string(),
        "TTL - Red-eye Flash - 1st Curtain (front)",
    );
    map.insert(
        "44576".to_string(),
        "TTL Slow - Red-eye Flash - 1st Curtain (front)",
    );
    map.insert(
        "44832".to_string(),
        "TTL Auto - Red-eye Flash - 1st Curtain (front)",
    );
    map.insert("51488".to_string(), "2nd Curtain (rear)");
    map.insert("51744".to_string(), "TTL Slow - 2nd Curtain (rear)");
    map.insert("52000".to_string(), "TTL Auto - 2nd Curtain (rear)");
    map.insert(
        "52512".to_string(),
        "TTL - Red-eye Flash - 2nd Curtain (rear)",
    );
    map.insert(
        "52768".to_string(),
        "TTL Slow - Red-eye Flash - 2nd Curtain (rear)",
    );
    map.insert(
        "53024".to_string(),
        "TTL Auto - Red-eye Flash - 2nd Curtain (rear)",
    );
    map.insert("59680".to_string(), "High Speed Sync (HSS)");
    map
});

static PRINT_CONV_9: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_10: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Manual");
    map.insert("65535".to_string(), "Movie");
    map
});

static PRINT_CONV_11: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Single Point");
    map.insert("256".to_string(), "Zone");
    map.insert("512".to_string(), "Wide/Tracking");
    map
});

static PRINT_CONV_12: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_13: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Portrait");
    map.insert("10".to_string(), "Sunset");
    map.insert("11".to_string(), "Museum");
    map.insert("12".to_string(), "Party");
    map.insert("13".to_string(), "Flower");
    map.insert("14".to_string(), "Text");
    map.insert("15".to_string(), "Natural Light & Flash");
    map.insert("16".to_string(), "Beach");
    map.insert("17".to_string(), "Snow");
    map.insert("18".to_string(), "Fireworks");
    map.insert("19".to_string(), "Underwater");
    map.insert("2".to_string(), "Landscape");
    map.insert("20".to_string(), "Portrait with Skin Correction");
    map.insert("22".to_string(), "Panorama");
    map.insert("23".to_string(), "Night (tripod)");
    map.insert("24".to_string(), "Pro Low-light");
    map.insert("25".to_string(), "Pro Focus");
    map.insert("256".to_string(), "Aperture-priority AE");
    map.insert("26".to_string(), "Portrait 2");
    map.insert("27".to_string(), "Dog Face Detection");
    map.insert("28".to_string(), "Cat Face Detection");
    map.insert("3".to_string(), "Macro");
    map.insert("4".to_string(), "Sports");
    map.insert("48".to_string(), "HDR");
    map.insert("5".to_string(), "Night Scene");
    map.insert("512".to_string(), "Shutter speed priority AE");
    map.insert("6".to_string(), "Program AE");
    map.insert("64".to_string(), "Advanced Filter");
    map.insert("7".to_string(), "Natural Light");
    map.insert("768".to_string(), "Manual");
    map.insert("8".to_string(), "Anti-blur");
    map.insert("9".to_string(), "Beach & Snow");
    map
});

static PRINT_CONV_14: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Manual");
    map
});

static PRINT_CONV_15: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("256".to_string(), "HR (High Resolution)");
    map.insert("512".to_string(), "SN (Signal to Noise priority)");
    map.insert("768".to_string(), "DR (Dynamic Range priority)");
    map
});

static PRINT_CONV_16: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_17: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("32".to_string(), "Weak");
    map.insert("64".to_string(), "Strong");
    map
});

static PRINT_CONV_18: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("32".to_string(), "Weak");
    map.insert("64".to_string(), "Strong");
    map
});

static PRINT_CONV_19: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("16".to_string(), "Small");
    map.insert("32".to_string(), "Large");
    map
});

static PRINT_CONV_20: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("1".to_string(), "Full-frame on GFX");
    map.insert("2".to_string(), "Sports Finder Mode");
    map.insert("4".to_string(), "Electronic Shutter 1.25x Crop");
    map.insert("8".to_string(), "Digital Tele-Conv");
    map
});

static PRINT_CONV_21: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("32".to_string(), "Weak");
    map.insert("64".to_string(), "Strong");
    map
});

static PRINT_CONV_22: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Mechanical");
    map.insert("1".to_string(), "Electronic");
    map.insert("2".to_string(), "Electronic (long shutter speed)");
    map.insert("3".to_string(), "Electronic Front Curtain");
    map
});

static PRINT_CONV_23: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("2".to_string(), "Pre-shot");
    map
});

static PRINT_CONV_24: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("2".to_string(), "No flash & flash");
    map.insert("6".to_string(), "Pixel Shift");
    map
});

static PRINT_CONV_25: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Right");
    map.insert("2".to_string(), "Up");
    map.insert("3".to_string(), "Left");
    map.insert("4".to_string(), "Down");
    map
});

static PRINT_CONV_26: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1048576".to_string(), "Light Leak");
    map.insert("1245184".to_string(), "Expired Film Green");
    map.insert("1245185".to_string(), "Expired Film Red");
    map.insert("1245186".to_string(), "Expired Film Neutral");
    map.insert("131072".to_string(), "Hi Key");
    map.insert("196608".to_string(), "Toy Camera");
    map.insert("262144".to_string(), "Miniature");
    map.insert("327680".to_string(), "Dynamic Tone");
    map.insert("393217".to_string(), "Partial Color Red");
    map.insert("393218".to_string(), "Partial Color Yellow");
    map.insert("393219".to_string(), "Partial Color Green");
    map.insert("393220".to_string(), "Partial Color Blue");
    map.insert("393221".to_string(), "Partial Color Orange");
    map.insert("393222".to_string(), "Partial Color Purple");
    map.insert("458752".to_string(), "Soft Focus");
    map.insert("589824".to_string(), "Low Key");
    map.insert("65536".to_string(), "Pop Color");
    map
});

static PRINT_CONV_27: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Standard");
    map.insert("16".to_string(), "Chrome");
    map.insert("48".to_string(), "B & W");
    map
});

static PRINT_CONV_28: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Blur Warning");
    map
});

static PRINT_CONV_29: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Good");
    map.insert("1".to_string(), "Out of focus");
    map
});

static PRINT_CONV_30: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Good");
    map.insert("1".to_string(), "Bad exposure");
    map
});

static PRINT_CONV_31: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Standard");
    map.insert("3".to_string(), "Wide");
    map
});

/// Get tag definitions for interop category
pub fn get_interop_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (4096, TagKitDef {
            id: 4096,
            name: "Quality",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4097, TagKitDef {
            id: 4097,
            name: "Sharpness",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_0),
            value_conv: None,
            subdirectory: None,
        }),
        (4098, TagKitDef {
            id: 4098,
            name: "WhiteBalance",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_1),
            value_conv: None,
            subdirectory: None,
        }),
        (4099, TagKitDef {
            id: 4099,
            name: "Saturation",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_2),
            value_conv: None,
            subdirectory: None,
        }),
        (4100, TagKitDef {
            id: 4100,
            name: "Contrast",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_3),
            value_conv: None,
            subdirectory: None,
        }),
        (4101, TagKitDef {
            id: 4101,
            name: "ColorTemperature",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4102, TagKitDef {
            id: 4102,
            name: "Contrast",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_4),
            value_conv: None,
            subdirectory: None,
        }),
        (4106, TagKitDef {
            id: 4106,
            name: "WhiteBalanceFineTune",
            format: "int32s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("newer cameras should divide these values by 20"),
            print_conv: PrintConvType::Expression("sprintf(\"Red %+d, Blue %+d\", split(\" \", $val))"),
            value_conv: None,
            subdirectory: None,
        }),
        (4107, TagKitDef {
            id: 4107,
            name: "NoiseReduction",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_5),
            value_conv: None,
            subdirectory: None,
        }),
        (4110, TagKitDef {
            id: 4110,
            name: "NoiseReduction",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_6),
            value_conv: None,
            subdirectory: None,
        }),
        (4111, TagKitDef {
            id: 4111,
            name: "Clarity",
            format: "int32s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_7),
            value_conv: None,
            subdirectory: None,
        }),
        (4112, TagKitDef {
            id: 4112,
            name: "FujiFlashMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_8),
            value_conv: None,
            subdirectory: None,
        }),
        (4113, TagKitDef {
            id: 4113,
            name: "FlashExposureComp",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4128, TagKitDef {
            id: 4128,
            name: "Macro",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_9),
            value_conv: None,
            subdirectory: None,
        }),
        (4129, TagKitDef {
            id: 4129,
            name: "FocusMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_10),
            value_conv: None,
            subdirectory: None,
        }),
        (4130, TagKitDef {
            id: 4130,
            name: "AFMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("\"No\" for manual and some AF-multi focus modes"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_11),
            value_conv: None,
            subdirectory: None,
        }),
        (4131, TagKitDef {
            id: 4131,
            name: "FocusPixel",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4139, TagKitDef {
            id: 4139,
            name: "PrioritySettings",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x102b_subdirectory }),
        }),
        (4141, TagKitDef {
            id: 4141,
            name: "FocusSettings",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x102d_subdirectory }),
        }),
        (4142, TagKitDef {
            id: 4142,
            name: "AFCSettings",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x102e_subdirectory }),
        }),
        (4144, TagKitDef {
            id: 4144,
            name: "SlowSync",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_12),
            value_conv: None,
            subdirectory: None,
        }),
        (4145, TagKitDef {
            id: 4145,
            name: "PictureMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_13),
            value_conv: None,
            subdirectory: None,
        }),
        (4146, TagKitDef {
            id: 4146,
            name: "ExposureCount",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("number of exposures used for this image"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4147, TagKitDef {
            id: 4147,
            name: "EXRAuto",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_14),
            value_conv: None,
            subdirectory: None,
        }),
        (4148, TagKitDef {
            id: 4148,
            name: "EXRMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_15),
            value_conv: None,
            subdirectory: None,
        }),
        (4160, TagKitDef {
            id: 4160,
            name: "ShadowTone",
            format: "int32s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4161, TagKitDef {
            id: 4161,
            name: "HighlightTone",
            format: "int32s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4164, TagKitDef {
            id: 4164,
            name: "DigitalZoom",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val / 8"),
            subdirectory: None,
        }),
        (4165, TagKitDef {
            id: 4165,
            name: "LensModulationOptimizer",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_16),
            value_conv: None,
            subdirectory: None,
        }),
        (4167, TagKitDef {
            id: 4167,
            name: "GrainEffectRoughness",
            format: "int32s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_17),
            value_conv: None,
            subdirectory: None,
        }),
        (4168, TagKitDef {
            id: 4168,
            name: "ColorChromeEffect",
            format: "int32s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_18),
            value_conv: None,
            subdirectory: None,
        }),
        (4169, TagKitDef {
            id: 4169,
            name: "BWAdjustment",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: Some("positive values are warm, negative values are cool"),
            print_conv: PrintConvType::Expression("$val > 0 ? \"+$val\" : $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (4171, TagKitDef {
            id: 4171,
            name: "BWMagentaGreen",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: Some("positive values are green, negative values are magenta"),
            print_conv: PrintConvType::Expression("$val > 0 ? \"+$val\" : $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (4172, TagKitDef {
            id: 4172,
            name: "GrainEffectSize",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_19),
            value_conv: None,
            subdirectory: None,
        }),
        (4173, TagKitDef {
            id: 4173,
            name: "CropMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_20),
            value_conv: None,
            subdirectory: None,
        }),
        (4174, TagKitDef {
            id: 4174,
            name: "ColorChromeFXBlue",
            format: "int32s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_21),
            value_conv: None,
            subdirectory: None,
        }),
        (4176, TagKitDef {
            id: 4176,
            name: "ShutterType",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_22),
            value_conv: None,
            subdirectory: None,
        }),
        (4177, TagKitDef {
            id: 4177,
            name: "CropFlag",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("this tag exists only if the image was cropped, and is 0 for cropped JPG\n            image or 1 for a cropped RAF"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4178, TagKitDef {
            id: 4178,
            name: "CropTopLeft",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4179, TagKitDef {
            id: 4179,
            name: "CropSize",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4352, TagKitDef {
            id: 4352,
            name: "AutoBracketing",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("X-T3 only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_23),
            value_conv: None,
            subdirectory: None,
        }),
        (4352, TagKitDef {
            id: 4352,
            name: "AutoBracketing",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("other models"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_24),
            value_conv: None,
            subdirectory: None,
        }),
        (4353, TagKitDef {
            id: 4353,
            name: "SequenceNumber",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4355, TagKitDef {
            id: 4355,
            name: "DriveSettings",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x1103_subdirectory }),
        }),
        (4357, TagKitDef {
            id: 4357,
            name: "PixelShiftShots",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4358, TagKitDef {
            id: 4358,
            name: "PixelShiftOffset",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4435, TagKitDef {
            id: 4435,
            name: "PanoramaAngle",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4436, TagKitDef {
            id: 4436,
            name: "PanoramaDirection",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_25),
            value_conv: None,
            subdirectory: None,
        }),
        (4609, TagKitDef {
            id: 4609,
            name: "AdvancedFilter",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_26),
            value_conv: None,
            subdirectory: None,
        }),
        (4624, TagKitDef {
            id: 4624,
            name: "ColorMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_27),
            value_conv: None,
            subdirectory: None,
        }),
        (4864, TagKitDef {
            id: 4864,
            name: "BlurWarning",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_28),
            value_conv: None,
            subdirectory: None,
        }),
        (4865, TagKitDef {
            id: 4865,
            name: "FocusWarning",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_29),
            value_conv: None,
            subdirectory: None,
        }),
        (4866, TagKitDef {
            id: 4866,
            name: "ExposureWarning",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_30),
            value_conv: None,
            subdirectory: None,
        }),
        (4868, TagKitDef {
            id: 4868,
            name: "GEImageSize",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: Some("GE models only"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (5120, TagKitDef {
            id: 5120,
            name: "DynamicRange",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_31),
            value_conv: None,
            subdirectory: None,
        }),
    ]
}
