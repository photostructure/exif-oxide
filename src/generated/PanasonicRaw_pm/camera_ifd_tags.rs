//! Generated tag table definitions from PanasonicRaw::CameraIFD
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_69::ast_value_69f47c9064ee4be6;
use crate::generated::functions::hash_70::ast_value_70d1d11e7183127a;
use crate::generated::functions::hash_78::ast_value_78de420ad35cdf27;
use crate::generated::functions::hash_84::ast_print_8470e30e1e5b4729;
use crate::generated::functions::hash_b2::ast_value_b2f81fafd2d2443b;
use crate::generated::functions::hash_ba::ast_print_ba030bb348470426;
use crate::generated::functions::hash_c6::ast_print_c60ce4347d672501;

/// Tag definitions for PanasonicRaw::CameraIFD table
pub static PANASONIC_RAW_CAMERAIFD_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            4097,
            TagInfo {
                name: "MultishotOn",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4352,
            TagInfo {
                name: "FocusStepNear",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4353,
            TagInfo {
                name: "FocusStepCount",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4354,
            TagInfo {
                name: "FlashFired",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4357,
            TagInfo {
                name: "ZoomPosition",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4608,
            TagInfo {
                name: "LensAttached",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4609,
            TagInfo {
                name: "LensTypeMake",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4610,
            TagInfo {
                name: "LensTypeModel",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_69f47c9064ee4be6)),
            },
        ),
        (
            4611,
            TagInfo {
                name: "FocalLengthIn35mmFormat",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_ba030bb348470426)),
                value_conv: None,
            },
        ),
        (
            4865,
            TagInfo {
                name: "ApertureValue",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_8470e30e1e5b4729)),
                value_conv: Some(ValueConv::Function(ast_value_78de420ad35cdf27)),
            },
        ),
        (
            4866,
            TagInfo {
                name: "ShutterSpeedValue",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_c60ce4347d672501)),
                value_conv: Some(ValueConv::Function(ast_value_b2f81fafd2d2443b)),
            },
        ),
        (
            4867,
            TagInfo {
                name: "SensitivityValue",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_70d1d11e7183127a)),
            },
        ),
        (
            4869,
            TagInfo {
                name: "HighISOMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            5138,
            TagInfo {
                name: "FacesDetected",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            12800,
            TagInfo {
                name: "WB_CFA0_LevelDaylight",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            12801,
            TagInfo {
                name: "WB_CFA1_LevelDaylight",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            12802,
            TagInfo {
                name: "WB_CFA2_LevelDaylight",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            12803,
            TagInfo {
                name: "WB_CFA3_LevelDaylight",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            13056,
            TagInfo {
                name: "WhiteBalanceSet",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            13344,
            TagInfo {
                name: "WB_RedLevelAuto",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            13345,
            TagInfo {
                name: "WB_BlueLevelAuto",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            13569,
            TagInfo {
                name: "Orientation",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            13824,
            TagInfo {
                name: "WhiteBalanceDetected",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = PANASONIC_RAW_CAMERAIFD_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = PANASONIC_RAW_CAMERAIFD_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
