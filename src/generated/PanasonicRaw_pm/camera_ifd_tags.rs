//! Generated tag table definitions from PanasonicRaw::CameraIFD
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{
    exposuretime_print_conv, fnumber_print_conv, gpsaltitude_print_conv, lensinfo_print_conv,
    print_fraction,
};
use crate::implementations::value_conv::{
    exif_date_value_conv, gps_coordinate_value_conv, gpstimestamp_value_conv,
    reciprocal_10_value_conv, reference_long_string_value_conv,
    reference_very_long_string_value_conv,
};

/// Tag definitions for PanasonicRaw::CameraIFD table
pub static PANASONIC_RAW_CAMERAIFD_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            4097,
            TagInfo {
                name: "MultishotOn",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4352,
            TagInfo {
                name: "FocusStepNear",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4353,
            TagInfo {
                name: "FocusStepCount",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4354,
            TagInfo {
                name: "FlashFired",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4357,
            TagInfo {
                name: "ZoomPosition",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4608,
            TagInfo {
                name: "LensAttached",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4609,
            TagInfo {
                name: "LensTypeMake",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4610,
            TagInfo {
                name: "LensTypeModel",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "$_=sprintf(\"%.4x\",$val); s/(..)(..)/$2 $1/; $_".to_string(),
                )),
            },
        ),
        (
            4611,
            TagInfo {
                name: "FocalLengthIn35mmFormat",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("\"$val mm\"".to_string())),
                value_conv: None,
            },
        ),
        (
            4865,
            TagInfo {
                name: "ApertureValue",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression("2 ** ($val / 512)".to_string())),
            },
        ),
        (
            4866,
            TagInfo {
                name: "ShutterSpeedValue",
                format: "unknown",
                print_conv: Some(PrintConv::Function(exposuretime_print_conv)),
                value_conv: Some(ValueConv::Expression(
                    "abs($val/256)<100 ? 2**(-$val/256) : 0".to_string(),
                )),
            },
        ),
        (
            4867,
            TagInfo {
                name: "SensitivityValue",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Expression("$val / 256".to_string())),
            },
        ),
        (
            4869,
            TagInfo {
                name: "HighISOMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            5138,
            TagInfo {
                name: "FacesDetected",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            12800,
            TagInfo {
                name: "WB_CFA0_LevelDaylight",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            12801,
            TagInfo {
                name: "WB_CFA1_LevelDaylight",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            12802,
            TagInfo {
                name: "WB_CFA2_LevelDaylight",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            12803,
            TagInfo {
                name: "WB_CFA3_LevelDaylight",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            13056,
            TagInfo {
                name: "WhiteBalanceSet",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            13344,
            TagInfo {
                name: "WB_RedLevelAuto",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            13345,
            TagInfo {
                name: "WB_BlueLevelAuto",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            13569,
            TagInfo {
                name: "Orientation",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            13824,
            TagInfo {
                name: "WhiteBalanceDetected",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = PANASONIC_RAW_CAMERAIFD_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = PANASONIC_RAW_CAMERAIFD_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
