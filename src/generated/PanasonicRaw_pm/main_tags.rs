//! Generated tag table definitions from PanasonicRaw::Main
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::value_conv::reference_long_string_value_conv;

/// Tag definitions for PanasonicRaw::Main table
pub static PANASONIC_RAW_MAIN_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            1,
            TagInfo {
                name: "PanasonicRawVersion",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            8,
            TagInfo {
                name: "SamplesPerPixel",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            9,
            TagInfo {
                name: "CFAPattern",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            10,
            TagInfo {
                name: "BitsPerSample",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            11,
            TagInfo {
                name: "Compression",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            14,
            TagInfo {
                name: "LinearityLimitRed",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            15,
            TagInfo {
                name: "LinearityLimitGreen",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            16,
            TagInfo {
                name: "LinearityLimitBlue",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            17,
            TagInfo {
                name: "RedBalance",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Expression("$val / 256".to_string())),
            },
        ),
        (
            18,
            TagInfo {
                name: "BlueBalance",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Expression("$val / 256".to_string())),
            },
        ),
        (
            19,
            TagInfo {
                name: "WBInfo",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            23,
            TagInfo {
                name: "ISO",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            24,
            TagInfo {
                name: "HighISOMultiplierRed",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Expression("$val / 256".to_string())),
            },
        ),
        (
            25,
            TagInfo {
                name: "HighISOMultiplierGreen",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Expression("$val / 256".to_string())),
            },
        ),
        (
            26,
            TagInfo {
                name: "HighISOMultiplierBlue",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Expression("$val / 256".to_string())),
            },
        ),
        (
            27,
            TagInfo {
                name: "NoiseReductionParams",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            28,
            TagInfo {
                name: "BlackLevelRed",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29,
            TagInfo {
                name: "BlackLevelGreen",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30,
            TagInfo {
                name: "BlackLevelBlue",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            36,
            TagInfo {
                name: "WBRedLevel",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            37,
            TagInfo {
                name: "WBGreenLevel",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            38,
            TagInfo {
                name: "WBBlueLevel",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            39,
            TagInfo {
                name: "WBInfo2",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            45,
            TagInfo {
                name: "RawFormat",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            46,
            TagInfo {
                name: "JpgFromRaw",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            47,
            TagInfo {
                name: "CropTop",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            48,
            TagInfo {
                name: "CropLeft",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            49,
            TagInfo {
                name: "CropBottom",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            50,
            TagInfo {
                name: "CropRight",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            55,
            TagInfo {
                name: "ISO",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            271,
            TagInfo {
                name: "Make",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            272,
            TagInfo {
                name: "Model",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            273,
            TagInfo {
                name: "StripOffsets",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Function(reference_long_string_value_conv)),
            },
        ),
        (
            274,
            TagInfo {
                name: "Orientation",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            278,
            TagInfo {
                name: "RowsPerStrip",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            279,
            TagInfo {
                name: "StripByteCounts",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Function(reference_long_string_value_conv)),
            },
        ),
        (
            280,
            TagInfo {
                name: "RawDataOffset",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            281,
            TagInfo {
                name: "DistortionInfo",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            284,
            TagInfo {
                name: "Gamma",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "$val / ($val >= 1024 ? 1024 : ($val >= 256 ? 256 : 100))".to_string(),
                )),
            },
        ),
        (
            288,
            TagInfo {
                name: "CameraIFD",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            289,
            TagInfo {
                name: "Multishot",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            295,
            TagInfo {
                name: "JpgFromRaw2",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            315,
            TagInfo {
                name: "Artist",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            700,
            TagInfo {
                name: "ApplicationNotes",
                format: "undef",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            33432,
            TagInfo {
                name: "Copyright",
                format: "undef",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            33723,
            TagInfo {
                name: "IPTC-NAA",
                format: "undef",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            34665,
            TagInfo {
                name: "ExifOffset",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            34853,
            TagInfo {
                name: "GPSInfo",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = PANASONIC_RAW_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = PANASONIC_RAW_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
