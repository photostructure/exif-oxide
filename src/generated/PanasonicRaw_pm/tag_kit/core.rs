//! Tag kits for core category from PanasonicRaw.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_0: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Horizontal (normal)");
    map.insert("2".to_string(), "Mirror horizontal");
    map.insert("3".to_string(), "Rotate 180");
    map.insert("4".to_string(), "Mirror vertical");
    map.insert("5".to_string(), "Mirror horizontal and rotate 270 CW");
    map.insert("6".to_string(), "Rotate 90 CW");
    map.insert("7".to_string(), "Mirror horizontal and rotate 90 CW");
    map.insert("8".to_string(), "Rotate 270 CW");
    map
});

/// Get tag definitions for core category
pub fn get_core_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (
            273,
            TagKitDef {
                id: 273,
                name: "StripOffsets",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: Some("length($val) > 32 ? \\$val : $val"),
                subdirectory: None,
            },
        ),
        (
            274,
            TagKitDef {
                id: 274,
                name: "Orientation",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_0),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            278,
            TagKitDef {
                id: 278,
                name: "RowsPerStrip",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            279,
            TagKitDef {
                id: 279,
                name: "StripByteCounts",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: Some("length($val) > 32 ? \\$val : $val"),
                subdirectory: None,
            },
        ),
        (
            280,
            TagKitDef {
                id: 280,
                name: "RawDataOffset",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            281,
            TagKitDef {
                id: 281,
                name: "DistortionInfo",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: Some(SubDirectoryType::Binary {
                    processor: process_tag_0x119_subdirectory,
                }),
            },
        ),
        (
            284,
            TagKitDef {
                id: 284,
                name: "Gamma",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: Some("$val / ($val >= 1024 ? 1024 : ($val >= 256 ? 256 : 100))"),
                subdirectory: None,
            },
        ),
    ]
}
