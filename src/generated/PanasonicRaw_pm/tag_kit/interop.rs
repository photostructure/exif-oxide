//! Tag kits for interop category from PanasonicRaw.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_2: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_3: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_4: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_5: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "On");
    map.insert("2".to_string(), "Off");
    map
});

static PRINT_CONV_6: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("1".to_string(), "[Red,Green][Green,Blue]");
    map.insert("2".to_string(), "[Green,Red][Blue,Green]");
    map.insert("3".to_string(), "[Green,Blue][Red,Green]");
    map.insert("4".to_string(), "[Blue,Green][Green,Red]");
    map
});

static PRINT_CONV_7: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Unknown");
    map.insert("1".to_string(), "Daylight");
    map.insert("10".to_string(), "Cloudy");
    map.insert("11".to_string(), "Shade");
    map.insert("12".to_string(), "Daylight Fluorescent");
    map.insert("13".to_string(), "Day White Fluorescent");
    map.insert("14".to_string(), "Cool White Fluorescent");
    map.insert("15".to_string(), "White Fluorescent");
    map.insert("16".to_string(), "Warm White Fluorescent");
    map.insert("17".to_string(), "Standard Light A");
    map.insert("18".to_string(), "Standard Light B");
    map.insert("19".to_string(), "Standard Light C");
    map.insert("2".to_string(), "Fluorescent");
    map.insert("20".to_string(), "D55");
    map.insert("21".to_string(), "D65");
    map.insert("22".to_string(), "D75");
    map.insert("23".to_string(), "D50");
    map.insert("24".to_string(), "ISO Studio Tungsten");
    map.insert("255".to_string(), "Other");
    map.insert("3".to_string(), "Tungsten (Incandescent)");
    map.insert("4".to_string(), "Flash");
    map.insert("9".to_string(), "Fine Weather");
    map
});

static PRINT_CONV_8: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Unknown");
    map.insert("1".to_string(), "Daylight");
    map.insert("10".to_string(), "Cloudy");
    map.insert("11".to_string(), "Shade");
    map.insert("12".to_string(), "Daylight Fluorescent");
    map.insert("13".to_string(), "Day White Fluorescent");
    map.insert("14".to_string(), "Cool White Fluorescent");
    map.insert("15".to_string(), "White Fluorescent");
    map.insert("16".to_string(), "Warm White Fluorescent");
    map.insert("17".to_string(), "Standard Light A");
    map.insert("18".to_string(), "Standard Light B");
    map.insert("19".to_string(), "Standard Light C");
    map.insert("2".to_string(), "Fluorescent");
    map.insert("20".to_string(), "D55");
    map.insert("21".to_string(), "D65");
    map.insert("22".to_string(), "D75");
    map.insert("23".to_string(), "D50");
    map.insert("24".to_string(), "ISO Studio Tungsten");
    map.insert("255".to_string(), "Other");
    map.insert("3".to_string(), "Tungsten (Incandescent)");
    map.insert("4".to_string(), "Flash");
    map.insert("9".to_string(), "Fine Weather");
    map
});

static PRINT_CONV_9: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Unknown");
    map.insert("1".to_string(), "Daylight");
    map.insert("10".to_string(), "Cloudy");
    map.insert("11".to_string(), "Shade");
    map.insert("12".to_string(), "Daylight Fluorescent");
    map.insert("13".to_string(), "Day White Fluorescent");
    map.insert("14".to_string(), "Cool White Fluorescent");
    map.insert("15".to_string(), "White Fluorescent");
    map.insert("16".to_string(), "Warm White Fluorescent");
    map.insert("17".to_string(), "Standard Light A");
    map.insert("18".to_string(), "Standard Light B");
    map.insert("19".to_string(), "Standard Light C");
    map.insert("2".to_string(), "Fluorescent");
    map.insert("20".to_string(), "D55");
    map.insert("21".to_string(), "D65");
    map.insert("22".to_string(), "D75");
    map.insert("23".to_string(), "D50");
    map.insert("24".to_string(), "ISO Studio Tungsten");
    map.insert("255".to_string(), "Other");
    map.insert("3".to_string(), "Tungsten (Incandescent)");
    map.insert("4".to_string(), "Flash");
    map.insert("9".to_string(), "Fine Weather");
    map
});

static PRINT_CONV_10: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Unknown");
    map.insert("1".to_string(), "Daylight");
    map.insert("10".to_string(), "Cloudy");
    map.insert("11".to_string(), "Shade");
    map.insert("12".to_string(), "Daylight Fluorescent");
    map.insert("13".to_string(), "Day White Fluorescent");
    map.insert("14".to_string(), "Cool White Fluorescent");
    map.insert("15".to_string(), "White Fluorescent");
    map.insert("16".to_string(), "Warm White Fluorescent");
    map.insert("17".to_string(), "Standard Light A");
    map.insert("18".to_string(), "Standard Light B");
    map.insert("19".to_string(), "Standard Light C");
    map.insert("2".to_string(), "Fluorescent");
    map.insert("20".to_string(), "D55");
    map.insert("21".to_string(), "D65");
    map.insert("22".to_string(), "D75");
    map.insert("23".to_string(), "D50");
    map.insert("24".to_string(), "ISO Studio Tungsten");
    map.insert("255".to_string(), "Other");
    map.insert("3".to_string(), "Tungsten (Incandescent)");
    map.insert("4".to_string(), "Flash");
    map.insert("9".to_string(), "Fine Weather");
    map
});

static PRINT_CONV_11: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Unknown");
    map.insert("1".to_string(), "Daylight");
    map.insert("10".to_string(), "Cloudy");
    map.insert("11".to_string(), "Shade");
    map.insert("12".to_string(), "Daylight Fluorescent");
    map.insert("13".to_string(), "Day White Fluorescent");
    map.insert("14".to_string(), "Cool White Fluorescent");
    map.insert("15".to_string(), "White Fluorescent");
    map.insert("16".to_string(), "Warm White Fluorescent");
    map.insert("17".to_string(), "Standard Light A");
    map.insert("18".to_string(), "Standard Light B");
    map.insert("19".to_string(), "Standard Light C");
    map.insert("2".to_string(), "Fluorescent");
    map.insert("20".to_string(), "D55");
    map.insert("21".to_string(), "D65");
    map.insert("22".to_string(), "D75");
    map.insert("23".to_string(), "D50");
    map.insert("24".to_string(), "ISO Studio Tungsten");
    map.insert("255".to_string(), "Other");
    map.insert("3".to_string(), "Tungsten (Incandescent)");
    map.insert("4".to_string(), "Flash");
    map.insert("9".to_string(), "Fine Weather");
    map
});

static PRINT_CONV_12: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Unknown");
    map.insert("1".to_string(), "Daylight");
    map.insert("10".to_string(), "Cloudy");
    map.insert("11".to_string(), "Shade");
    map.insert("12".to_string(), "Daylight Fluorescent");
    map.insert("13".to_string(), "Day White Fluorescent");
    map.insert("14".to_string(), "Cool White Fluorescent");
    map.insert("15".to_string(), "White Fluorescent");
    map.insert("16".to_string(), "Warm White Fluorescent");
    map.insert("17".to_string(), "Standard Light A");
    map.insert("18".to_string(), "Standard Light B");
    map.insert("19".to_string(), "Standard Light C");
    map.insert("2".to_string(), "Fluorescent");
    map.insert("20".to_string(), "D55");
    map.insert("21".to_string(), "D65");
    map.insert("22".to_string(), "D75");
    map.insert("23".to_string(), "D50");
    map.insert("24".to_string(), "ISO Studio Tungsten");
    map.insert("255".to_string(), "Other");
    map.insert("3".to_string(), "Tungsten (Incandescent)");
    map.insert("4".to_string(), "Flash");
    map.insert("9".to_string(), "Fine Weather");
    map
});

static PRINT_CONV_13: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Unknown");
    map.insert("1".to_string(), "Daylight");
    map.insert("10".to_string(), "Cloudy");
    map.insert("11".to_string(), "Shade");
    map.insert("12".to_string(), "Daylight Fluorescent");
    map.insert("13".to_string(), "Day White Fluorescent");
    map.insert("14".to_string(), "Cool White Fluorescent");
    map.insert("15".to_string(), "White Fluorescent");
    map.insert("16".to_string(), "Warm White Fluorescent");
    map.insert("17".to_string(), "Standard Light A");
    map.insert("18".to_string(), "Standard Light B");
    map.insert("19".to_string(), "Standard Light C");
    map.insert("2".to_string(), "Fluorescent");
    map.insert("20".to_string(), "D55");
    map.insert("21".to_string(), "D65");
    map.insert("22".to_string(), "D75");
    map.insert("23".to_string(), "D50");
    map.insert("24".to_string(), "ISO Studio Tungsten");
    map.insert("255".to_string(), "Other");
    map.insert("3".to_string(), "Tungsten (Incandescent)");
    map.insert("4".to_string(), "Flash");
    map.insert("9".to_string(), "Fine Weather");
    map
});

/// Get tag definitions for interop category
pub fn get_interop_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (
            4097,
            TagKitDef {
                id: 4097,
                name: "MultishotOn",
                format: "int32u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_2),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            4352,
            TagKitDef {
                id: 4352,
                name: "FocusStepNear",
                format: "int16s",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            4353,
            TagKitDef {
                id: 4353,
                name: "FocusStepCount",
                format: "int16s",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            4354,
            TagKitDef {
                id: 4354,
                name: "FlashFired",
                format: "int32u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_3),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            4357,
            TagKitDef {
                id: 4357,
                name: "ZoomPosition",
                format: "int32u",
                groups: HashMap::new(),
                writable: true,
                notes: Some("in the range 0-255 for most cameras"),
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            4608,
            TagKitDef {
                id: 4608,
                name: "LensAttached",
                format: "int32u",
                groups: HashMap::new(),
                writable: true,
                notes: Some("many CameraIFD tags are invalid if there is no lens attached"),
                print_conv: PrintConvType::Simple(&PRINT_CONV_4),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            4609,
            TagKitDef {
                id: 4609,
                name: "LensTypeMake",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            4610,
            TagKitDef {
                id: 4610,
                name: "LensTypeModel",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: Some("$_=sprintf(\"%.4x\",$val); s/(..)(..)/$2 $1/; $_"),
                subdirectory: None,
            },
        ),
        (
            4611,
            TagKitDef {
                id: 4611,
                name: "FocalLengthIn35mmFormat",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Expression("\"$val mm\""),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            4865,
            TagKitDef {
                id: 4865,
                name: "ApertureValue",
                format: "int16s",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Expression("sprintf(\"%.1f\",$val)"),
                value_conv: Some("2 ** ($val / 512)"),
                subdirectory: None,
            },
        ),
        (
            4866,
            TagKitDef {
                id: 4866,
                name: "ShutterSpeedValue",
                format: "int16s",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Expression(
                    "Image::ExifTool::Exif::PrintExposureTime($val)",
                ),
                value_conv: Some("abs($val/256)<100 ? 2**(-$val/256) : 0"),
                subdirectory: None,
            },
        ),
        (
            4867,
            TagKitDef {
                id: 4867,
                name: "SensitivityValue",
                format: "int16s",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: Some("$val / 256"),
                subdirectory: None,
            },
        ),
        (
            4869,
            TagKitDef {
                id: 4869,
                name: "HighISOMode",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_5),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            2,
            TagKitDef {
                id: 2,
                name: "DistortionParam02",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: Some("$val / 32768"),
                subdirectory: None,
            },
        ),
        (
            4,
            TagKitDef {
                id: 4,
                name: "DistortionParam04",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: Some("$val / 32768"),
                subdirectory: None,
            },
        ),
        (
            5,
            TagKitDef {
                id: 5,
                name: "DistortionScale",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: Some("1 / (1 + $val/32768)"),
                subdirectory: None,
            },
        ),
        (
            8,
            TagKitDef {
                id: 8,
                name: "DistortionParam08",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: Some("$val / 32768"),
                subdirectory: None,
            },
        ),
        (
            9,
            TagKitDef {
                id: 9,
                name: "DistortionParam09",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: Some("$val / 32768"),
                subdirectory: None,
            },
        ),
        (
            1,
            TagKitDef {
                id: 1,
                name: "PanasonicRawVersion",
                format: "undef",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            10,
            TagKitDef {
                id: 10,
                name: "BitsPerSample",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            8,
            TagKitDef {
                id: 8,
                name: "SamplesPerPixel",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            9,
            TagKitDef {
                id: 9,
                name: "CFAPattern",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_6),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            1,
            TagKitDef {
                id: 1,
                name: "WBType1",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_7),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            10,
            TagKitDef {
                id: 10,
                name: "WBType4",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_8),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            2,
            TagKitDef {
                id: 2,
                name: "WB_RBLevels1",
                format: "int16u[2]",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            4,
            TagKitDef {
                id: 4,
                name: "WBType2",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_9),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            5,
            TagKitDef {
                id: 5,
                name: "WB_RBLevels2",
                format: "int16u[2]",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            7,
            TagKitDef {
                id: 7,
                name: "WBType3",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_10),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            8,
            TagKitDef {
                id: 8,
                name: "WB_RBLevels3",
                format: "int16u[2]",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            1,
            TagKitDef {
                id: 1,
                name: "WBType1",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_11),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            10,
            TagKitDef {
                id: 10,
                name: "WB_RGBLevels3",
                format: "int16u[3]",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            2,
            TagKitDef {
                id: 2,
                name: "WB_RGBLevels1",
                format: "int16u[3]",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            5,
            TagKitDef {
                id: 5,
                name: "WBType2",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_12),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            6,
            TagKitDef {
                id: 6,
                name: "WB_RGBLevels2",
                format: "int16u[3]",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            9,
            TagKitDef {
                id: 9,
                name: "WBType3",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_13),
                value_conv: None,
                subdirectory: None,
            },
        ),
    ]
}
