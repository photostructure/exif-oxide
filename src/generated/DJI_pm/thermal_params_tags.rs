//! Generated tag table definitions from DJI::ThermalParams
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

/// Tag definitions for DJI::ThermalParams table
pub static DJI_THERMALPARAMS_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            36,
            TagInfo {
                name: "K1",
                format: "float",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40,
            TagInfo {
                name: "K2",
                format: "float",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            44,
            TagInfo {
                name: "K3",
                format: "float",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            48,
            TagInfo {
                name: "K4",
                format: "float",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            52,
            TagInfo {
                name: "KF",
                format: "float",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            56,
            TagInfo {
                name: "B1",
                format: "float",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            60,
            TagInfo {
                name: "B2",
                format: "float",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            68,
            TagInfo {
                name: "ObjectDistance",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            70,
            TagInfo {
                name: "RelativeHumidity",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            72,
            TagInfo {
                name: "Emissivity",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            74,
            TagInfo {
                name: "Reflection",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            76,
            TagInfo {
                name: "AmbientTemperature",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            80,
            TagInfo {
                name: "D2",
                format: "int32s",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            84,
            TagInfo {
                name: "KJ",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            86,
            TagInfo {
                name: "DB",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            88,
            TagInfo {
                name: "KK",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = DJI_THERMALPARAMS_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = DJI_THERMALPARAMS_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
