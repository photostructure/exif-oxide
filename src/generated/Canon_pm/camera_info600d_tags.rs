//! Generated tag table definitions from Canon::CameraInfo600D
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_13::ast_value_13e9fff1dc7b41b2;
use crate::generated::functions::hash_1a::ast_print_1ade125dab246be4;
use crate::generated::functions::hash_38::ast_value_380417f4c177add7;
use crate::generated::functions::hash_7d::ast_value_7d55a3546017f4c7;
use crate::generated::functions::hash_ba::ast_print_ba030bb348470426;
use crate::generated::functions::hash_bc::ast_print_bc983315d45d48a3;
use crate::generated::functions::hash_c6::ast_print_c60ce4347d672501;
use crate::generated::functions::hash_c8::ast_value_c8722122eace16df;
use crate::generated::functions::hash_cc::ast_value_cc6d20d1f05f91ec;
use crate::generated::functions::hash_d3::ast_print_d3baecf4975cff4c;
use crate::generated::functions::hash_da::ast_print_dad6b5d4251a08c7;
use crate::generated::functions::hash_ee::ast_value_ee9b0901d11400f9;
use crate::generated::functions::hash_f1::ast_value_f10fff6e97e57581;

/// Tag definitions for Canon::CameraInfo600D table
pub static CANON_CAMERAINFO600D_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            3,
            TagInfo {
                name: "FNumber",
                format: "int8u",
                print_conv: Some(PrintConv::Function(ast_print_bc983315d45d48a3)),
                value_conv: Some(ValueConv::Function(ast_value_380417f4c177add7)),
            },
        ),
        (
            4,
            TagInfo {
                name: "ExposureTime",
                format: "int8u",
                print_conv: Some(PrintConv::Function(ast_print_c60ce4347d672501)),
                value_conv: Some(ValueConv::Function(ast_value_13e9fff1dc7b41b2)),
            },
        ),
        (
            6,
            TagInfo {
                name: "ISO",
                format: "int8u",
                print_conv: Some(PrintConv::Function(ast_print_1ade125dab246be4)),
                value_conv: Some(ValueConv::Function(ast_value_c8722122eace16df)),
            },
        ),
        (
            7,
            TagInfo {
                name: "HighlightTonePriority",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            21,
            TagInfo {
                name: "FlashMeteringMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            25,
            TagInfo {
                name: "CameraTemperature",
                format: "int8u",
                print_conv: Some(PrintConv::Function(ast_print_d3baecf4975cff4c)),
                value_conv: Some(ValueConv::Function(ast_value_7d55a3546017f4c7)),
            },
        ),
        (
            30,
            TagInfo {
                name: "FocalLength",
                format: "int16uRev",
                print_conv: Some(PrintConv::Function(ast_print_ba030bb348470426)),
                value_conv: None,
            },
        ),
        (
            56,
            TagInfo {
                name: "CameraOrientation",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            87,
            TagInfo {
                name: "FocusDistanceUpper",
                format: "int16uRev",
                print_conv: Some(PrintConv::Function(ast_print_dad6b5d4251a08c7)),
                value_conv: Some(ValueConv::Function(ast_value_ee9b0901d11400f9)),
            },
        ),
        (
            89,
            TagInfo {
                name: "FocusDistanceLower",
                format: "int16uRev",
                print_conv: Some(PrintConv::Function(ast_print_dad6b5d4251a08c7)),
                value_conv: Some(ValueConv::Function(ast_value_ee9b0901d11400f9)),
            },
        ),
        (
            123,
            TagInfo {
                name: "WhiteBalance",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            127,
            TagInfo {
                name: "ColorTemperature",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            179,
            TagInfo {
                name: "PictureStyle",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            234,
            TagInfo {
                name: "LensType",
                format: "int16uRev",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            236,
            TagInfo {
                name: "MinFocalLength",
                format: "int16uRev",
                print_conv: Some(PrintConv::Function(ast_print_ba030bb348470426)),
                value_conv: None,
            },
        ),
        (
            238,
            TagInfo {
                name: "MaxFocalLength",
                format: "int16uRev",
                print_conv: Some(PrintConv::Function(ast_print_ba030bb348470426)),
                value_conv: None,
            },
        ),
        (
            411,
            TagInfo {
                name: "FirmwareVersion",
                format: "string[6]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            475,
            TagInfo {
                name: "FileIndex",
                format: "int32u",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_cc6d20d1f05f91ec)),
            },
        ),
        (
            487,
            TagInfo {
                name: "DirectoryIndex",
                format: "int32u",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_f10fff6e97e57581)),
            },
        ),
        (
            763,
            TagInfo {
                name: "PictureStyleInfo",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = CANON_CAMERAINFO600D_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value, None),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = CANON_CAMERAINFO600D_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value, None),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
