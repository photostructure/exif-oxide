//! Tag kits for other category from Canon.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_0: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Full auto");
    map.insert("1".to_string(), "Manual");
    map.insert("10".to_string(), "Macro");
    map.insert("11".to_string(), "Black & White");
    map.insert("12".to_string(), "Pan focus");
    map.insert("13".to_string(), "Vivid");
    map.insert("14".to_string(), "Neutral");
    map.insert("15".to_string(), "Flash Off");
    map.insert("16".to_string(), "Long Shutter");
    map.insert("17".to_string(), "Super Macro");
    map.insert("18".to_string(), "Foliage");
    map.insert("19".to_string(), "Indoor");
    map.insert("2".to_string(), "Landscape");
    map.insert("20".to_string(), "Fireworks");
    map.insert("21".to_string(), "Beach");
    map.insert("22".to_string(), "Underwater");
    map.insert("23".to_string(), "Snow");
    map.insert("24".to_string(), "Kids & Pets");
    map.insert("25".to_string(), "Night Snapshot");
    map.insert("257".to_string(), "Spotlight");
    map.insert("258".to_string(), "Night 2");
    map.insert("259".to_string(), "Night+");
    map.insert("26".to_string(), "Digital Macro");
    map.insert("260".to_string(), "Super Night");
    map.insert("261".to_string(), "Sunset");
    map.insert("263".to_string(), "Night Scene");
    map.insert("264".to_string(), "Surface");
    map.insert("265".to_string(), "Low Light 2");
    map.insert("27".to_string(), "My Colors");
    map.insert("28".to_string(), "Movie Snap");
    map.insert("29".to_string(), "Super Macro 2");
    map.insert("3".to_string(), "Fast shutter");
    map.insert("30".to_string(), "Color Accent");
    map.insert("31".to_string(), "Color Swap");
    map.insert("32".to_string(), "Aquarium");
    map.insert("33".to_string(), "ISO 3200");
    map.insert("34".to_string(), "ISO 6400");
    map.insert("35".to_string(), "Creative Light Effect");
    map.insert("36".to_string(), "Easy");
    map.insert("37".to_string(), "Quick Shot");
    map.insert("38".to_string(), "Creative Auto");
    map.insert("39".to_string(), "Zoom Blur");
    map.insert("4".to_string(), "Slow shutter");
    map.insert("40".to_string(), "Low Light");
    map.insert("41".to_string(), "Nostalgic");
    map.insert("42".to_string(), "Super Vivid");
    map.insert("43".to_string(), "Poster Effect");
    map.insert("44".to_string(), "Face Self-timer");
    map.insert("45".to_string(), "Smile");
    map.insert("46".to_string(), "Wink Self-timer");
    map.insert("47".to_string(), "Fisheye Effect");
    map.insert("48".to_string(), "Miniature Effect");
    map.insert("49".to_string(), "High-speed Burst");
    map.insert("5".to_string(), "Night");
    map.insert("50".to_string(), "Best Image Selection");
    map.insert("51".to_string(), "High Dynamic Range");
    map.insert("52".to_string(), "Handheld Night Scene");
    map.insert("53".to_string(), "Movie Digest");
    map.insert("54".to_string(), "Live View Control");
    map.insert("55".to_string(), "Discreet");
    map.insert("56".to_string(), "Blur Reduction");
    map.insert("57".to_string(), "Monochrome");
    map.insert("58".to_string(), "Toy Camera Effect");
    map.insert("59".to_string(), "Scene Intelligent Auto");
    map.insert("6".to_string(), "Gray Scale");
    map.insert("60".to_string(), "High-speed Burst HQ");
    map.insert("61".to_string(), "Smooth Skin");
    map.insert("62".to_string(), "Soft Focus");
    map.insert("68".to_string(), "Food");
    map.insert("7".to_string(), "Sepia");
    map.insert("8".to_string(), "Portrait");
    map.insert("84".to_string(), "HDR Art Standard");
    map.insert("85".to_string(), "HDR Art Vivid");
    map.insert("9".to_string(), "Sports");
    map.insert("93".to_string(), "HDR Art Bold");
    map
});

static PRINT_CONV_1: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "2x");
    map.insert("2".to_string(), "4x");
    map.insert("3".to_string(), "Other");
    map
});

static PRINT_CONV_2: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Default");
    map.insert("1".to_string(), "Spot");
    map.insert("2".to_string(), "Average");
    map.insert("3".to_string(), "Evaluative");
    map.insert("4".to_string(), "Partial");
    map.insert("5".to_string(), "Center-weighted average");
    map
});

static PRINT_CONV_3: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Manual");
    map.insert("1".to_string(), "Auto");
    map.insert("10".to_string(), "Infinity");
    map.insert("2".to_string(), "Not Known");
    map.insert("3".to_string(), "Macro");
    map.insert("4".to_string(), "Very Close");
    map.insert("5".to_string(), "Close");
    map.insert("6".to_string(), "Middle Range");
    map.insert("7".to_string(), "Far Range");
    map.insert("8".to_string(), "Pan Focus");
    map.insert("9".to_string(), "Super Macro");
    map
});

static PRINT_CONV_4: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("12288".to_string(), "None (MF)");
    map.insert("12289".to_string(), "Auto AF point selection");
    map.insert("12290".to_string(), "Right");
    map.insert("12291".to_string(), "Center");
    map.insert("12292".to_string(), "Left");
    map.insert("16385".to_string(), "Auto AF point selection");
    map.insert("16390".to_string(), "Face Detect");
    map.insert("8197".to_string(), "Manual AF point selection");
    map
});

static PRINT_CONV_5: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Easy");
    map.insert("1".to_string(), "Program AE");
    map.insert("2".to_string(), "Shutter speed priority AE");
    map.insert("3".to_string(), "Aperture-priority AE");
    map.insert("4".to_string(), "Manual");
    map.insert("5".to_string(), "Depth-of-field AE");
    map.insert("6".to_string(), "M-Dep");
    map.insert("7".to_string(), "Bulb");
    map.insert("8".to_string(), "Flexible-priority AE");
    map
});

static PRINT_CONV_6: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "n/a");
    map.insert("1".to_string(), "Canon EF 50mm f/1.8");
    map.insert("10".to_string(), "Canon EF 50mm f/2.5 Macro or Sigma Lens");
    map.insert("10.1".to_string(), "Sigma 50mm f/2.8 EX");
    map.insert("10.2".to_string(), "Sigma 28mm f/1.8");
    map.insert("10.3".to_string(), "Sigma 105mm f/2.8 Macro EX");
    map.insert("10.4".to_string(), "Sigma 70mm f/2.8 EX DG Macro EF");
    map.insert(
        "103".to_string(),
        "Samyang AF 14mm f/2.8 EF or Rokinon Lens",
    );
    map.insert("103.1".to_string(), "Rokinon SP 14mm f/2.4");
    map.insert("103.2".to_string(), "Rokinon AF 14mm f/2.8 EF");
    map.insert("106".to_string(), "Rokinon SP / Samyang XP 35mm f/1.2");
    map.insert("11".to_string(), "Canon EF 35mm f/2");
    map.insert(
        "112".to_string(),
        "Sigma 28mm f/1.5 FF High-speed Prime or other Sigma Lens",
    );
    map.insert("112.1".to_string(), "Sigma 40mm f/1.5 FF High-speed Prime");
    map.insert("112.2".to_string(), "Sigma 105mm f/1.5 FF High-speed Prime");
    map.insert("1136".to_string(), "Sigma 24-70mm f/2.8 DG OS HSM | A");
    map.insert(
        "117".to_string(),
        "Tamron 35-150mm f/2.8-4.0 Di VC OSD (A043) or other Tamron Lens",
    );
    map.insert("117.1".to_string(), "Tamron SP 35mm f/1.4 Di USD (F045)");
    map.insert("124".to_string(), "Canon MP-E 65mm f/2.8 1-5x Macro Photo");
    map.insert("125".to_string(), "Canon TS-E 24mm f/3.5L");
    map.insert("126".to_string(), "Canon TS-E 45mm f/2.8");
    map.insert("127".to_string(), "Canon TS-E 90mm f/2.8 or Tamron Lens");
    map.insert(
        "127.1".to_string(),
        "Tamron 18-200mm f/3.5-6.3 Di II VC (B018)",
    );
    map.insert("129".to_string(), "Canon EF 300mm f/2.8L USM");
    map.insert("13".to_string(), "Canon EF 15mm f/2.8 Fisheye");
    map.insert("130".to_string(), "Canon EF 50mm f/1.0L USM");
    map.insert(
        "131".to_string(),
        "Canon EF 28-80mm f/2.8-4L USM or Sigma Lens",
    );
    map.insert(
        "131.1".to_string(),
        "Sigma 8mm f/3.5 EX DG Circular Fisheye",
    );
    map.insert(
        "131.2".to_string(),
        "Sigma 17-35mm f/2.8-4 EX DG Aspherical HSM",
    );
    map.insert("131.3".to_string(), "Sigma 17-70mm f/2.8-4.5 DC Macro");
    map.insert(
        "131.4".to_string(),
        "Sigma APO 50-150mm f/2.8 [II] EX DC HSM",
    );
    map.insert("131.5".to_string(), "Sigma APO 120-300mm f/2.8 EX DG HSM");
    map.insert(
        "131.6".to_string(),
        "Sigma 4.5mm f/2.8 EX DC HSM Circular Fisheye",
    );
    map.insert("131.7".to_string(), "Sigma 70-200mm f/2.8 APO EX HSM");
    map.insert("131.8".to_string(), "Sigma 28-70mm f/2.8-4 DG");
    map.insert("132".to_string(), "Canon EF 1200mm f/5.6L USM");
    map.insert("134".to_string(), "Canon EF 600mm f/4L IS USM");
    map.insert("135".to_string(), "Canon EF 200mm f/1.8L USM");
    map.insert("136".to_string(), "Canon EF 300mm f/2.8L USM");
    map.insert(
        "136.1".to_string(),
        "Tamron SP 15-30mm f/2.8 Di VC USD (A012)",
    );
    map.insert(
        "137".to_string(),
        "Canon EF 85mm f/1.2L USM or Sigma or Tamron Lens",
    );
    map.insert("137.1".to_string(), "Sigma 18-50mm f/2.8-4.5 DC OS HSM");
    map.insert("137.10".to_string(), "Sigma 8-16mm f/4.5-5.6 DC HSM");
    map.insert(
        "137.11".to_string(),
        "Tamron SP 17-50mm f/2.8 XR Di II VC (B005)",
    );
    map.insert(
        "137.12".to_string(),
        "Tamron SP 60mm f/2 Macro Di II (G005)",
    );
    map.insert("137.13".to_string(), "Sigma 10-20mm f/3.5 EX DC HSM");
    map.insert("137.14".to_string(), "Tamron SP 24-70mm f/2.8 Di VC USD");
    map.insert("137.15".to_string(), "Sigma 18-35mm f/1.8 DC HSM");
    map.insert("137.16".to_string(), "Sigma 12-24mm f/4.5-5.6 DG HSM II");
    map.insert("137.17".to_string(), "Sigma 70-300mm f/4-5.6 DG OS");
    map.insert("137.2".to_string(), "Sigma 50-200mm f/4-5.6 DC OS HSM");
    map.insert("137.3".to_string(), "Sigma 18-250mm f/3.5-6.3 DC OS HSM");
    map.insert("137.4".to_string(), "Sigma 24-70mm f/2.8 IF EX DG HSM");
    map.insert("137.5".to_string(), "Sigma 18-125mm f/3.8-5.6 DC OS HSM");
    map.insert(
        "137.6".to_string(),
        "Sigma 17-70mm f/2.8-4 DC Macro OS HSM | C",
    );
    map.insert("137.7".to_string(), "Sigma 17-50mm f/2.8 OS HSM");
    map.insert(
        "137.8".to_string(),
        "Sigma 18-200mm f/3.5-6.3 DC OS HSM [II]",
    );
    map.insert(
        "137.9".to_string(),
        "Tamron AF 18-270mm f/3.5-6.3 Di II VC PZD (B008)",
    );
    map.insert("138".to_string(), "Canon EF 28-80mm f/2.8-4L");
    map.insert("139".to_string(), "Canon EF 400mm f/2.8L USM");
    map.insert("14".to_string(), "Canon EF 50-200mm f/3.5-4.5L");
    map.insert("140".to_string(), "Canon EF 500mm f/4.5L USM");
    map.insert("141".to_string(), "Canon EF 500mm f/4.5L USM");
    map.insert("142".to_string(), "Canon EF 300mm f/2.8L IS USM");
    map.insert(
        "143".to_string(),
        "Canon EF 500mm f/4L IS USM or Sigma Lens",
    );
    map.insert("143.1".to_string(), "Sigma 17-70mm f/2.8-4 DC Macro OS HSM");
    map.insert("144".to_string(), "Canon EF 35-135mm f/4-5.6 USM");
    map.insert("145".to_string(), "Canon EF 100-300mm f/4.5-5.6 USM");
    map.insert("146".to_string(), "Canon EF 70-210mm f/3.5-4.5 USM");
    map.insert("147".to_string(), "Canon EF 35-135mm f/4-5.6 USM");
    map.insert("148".to_string(), "Canon EF 28-80mm f/3.5-5.6 USM");
    map.insert("149".to_string(), "Canon EF 100mm f/2 USM");
    map.insert("15".to_string(), "Canon EF 50-200mm f/3.5-4.5");
    map.insert("150".to_string(), "Canon EF 14mm f/2.8L USM or Sigma Lens");
    map.insert("150.1".to_string(), "Sigma 20mm EX f/1.8");
    map.insert("150.2".to_string(), "Sigma 30mm f/1.4 DC HSM");
    map.insert("150.3".to_string(), "Sigma 24mm f/1.8 DG Macro EX");
    map.insert("150.4".to_string(), "Sigma 28mm f/1.8 DG Macro EX");
    map.insert("150.5".to_string(), "Sigma 18-35mm f/1.8 DC HSM | A");
    map.insert("151".to_string(), "Canon EF 200mm f/2.8L USM");
    map.insert(
        "152".to_string(),
        "Canon EF 300mm f/4L IS USM or Sigma Lens",
    );
    map.insert(
        "152.1".to_string(),
        "Sigma 12-24mm f/4.5-5.6 EX DG ASPHERICAL HSM",
    );
    map.insert("152.2".to_string(), "Sigma 14mm f/2.8 EX Aspherical HSM");
    map.insert("152.3".to_string(), "Sigma 10-20mm f/4-5.6");
    map.insert("152.4".to_string(), "Sigma 100-300mm f/4");
    map.insert("152.5".to_string(), "Sigma 300-800mm f/5.6 APO EX DG HSM");
    map.insert(
        "153".to_string(),
        "Canon EF 35-350mm f/3.5-5.6L USM or Sigma or Tamron Lens",
    );
    map.insert("153.1".to_string(), "Sigma 50-500mm f/4-6.3 APO HSM EX");
    map.insert(
        "153.2".to_string(),
        "Tamron AF 28-300mm f/3.5-6.3 XR LD Aspherical [IF] Macro",
    );
    map.insert(
        "153.3".to_string(),
        "Tamron AF 18-200mm f/3.5-6.3 XR Di II LD Aspherical [IF] Macro (A14)",
    );
    map.insert(
        "153.4".to_string(),
        "Tamron 18-250mm f/3.5-6.3 Di II LD Aspherical [IF] Macro",
    );
    map.insert("154".to_string(), "Canon EF 20mm f/2.8 USM or Zeiss Lens");
    map.insert("154.1".to_string(), "Zeiss Milvus 21mm f/2.8");
    map.insert("154.2".to_string(), "Zeiss Milvus 15mm f/2.8 ZE");
    map.insert("154.3".to_string(), "Zeiss Milvus 18mm f/2.8 ZE");
    map.insert("155".to_string(), "Canon EF 85mm f/1.8 USM or Sigma Lens");
    map.insert("155.1".to_string(), "Sigma 14mm f/1.8 DG HSM | A");
    map.insert(
        "156".to_string(),
        "Canon EF 28-105mm f/3.5-4.5 USM or Tamron Lens",
    );
    map.insert(
        "156.1".to_string(),
        "Tamron SP 70-300mm f/4-5.6 Di VC USD (A005)",
    );
    map.insert(
        "156.2".to_string(),
        "Tamron SP AF 28-105mm f/2.8 LD Aspherical IF (176D)",
    );
    map.insert("16".to_string(), "Canon EF 35-135mm f/3.5-4.5");
    map.insert(
        "160".to_string(),
        "Canon EF 20-35mm f/3.5-4.5 USM or Tamron or Tokina Lens",
    );
    map.insert("160.1".to_string(), "Tamron AF 19-35mm f/3.5-4.5");
    map.insert("160.2".to_string(), "Tokina AT-X 124 AF Pro DX 12-24mm f/4");
    map.insert(
        "160.3".to_string(),
        "Tokina AT-X 107 AF DX 10-17mm f/3.5-4.5 Fisheye",
    );
    map.insert(
        "160.4".to_string(),
        "Tokina AT-X 116 AF Pro DX 11-16mm f/2.8",
    );
    map.insert(
        "160.5".to_string(),
        "Tokina AT-X 11-20 F2.8 PRO DX Aspherical 11-20mm f/2.8",
    );
    map.insert(
        "161".to_string(),
        "Canon EF 28-70mm f/2.8L USM or Other Lens",
    );
    map.insert("161.1".to_string(), "Sigma 24-70mm f/2.8 EX");
    map.insert("161.2".to_string(), "Sigma 28-70mm f/2.8 EX");
    map.insert("161.3".to_string(), "Sigma 24-60mm f/2.8 EX DG");
    map.insert(
        "161.4".to_string(),
        "Tamron AF 17-50mm f/2.8 Di-II LD Aspherical",
    );
    map.insert("161.5".to_string(), "Tamron 90mm f/2.8");
    map.insert(
        "161.6".to_string(),
        "Tamron SP AF 17-35mm f/2.8-4 Di LD Aspherical IF (A05)",
    );
    map.insert(
        "161.7".to_string(),
        "Tamron SP AF 28-75mm f/2.8 XR Di LD Aspherical [IF] Macro",
    );
    map.insert("161.8".to_string(), "Tokina AT-X 24-70mm f/2.8 PRO FX (IF)");
    map.insert("162".to_string(), "Canon EF 200mm f/2.8L USM");
    map.insert("163".to_string(), "Canon EF 300mm f/4L");
    map.insert("164".to_string(), "Canon EF 400mm f/5.6L");
    map.insert("165".to_string(), "Canon EF 70-200mm f/2.8L USM");
    map.insert("166".to_string(), "Canon EF 70-200mm f/2.8L USM + 1.4x");
    map.insert("167".to_string(), "Canon EF 70-200mm f/2.8L USM + 2x");
    map.insert("168".to_string(), "Canon EF 28mm f/1.8 USM or Sigma Lens");
    map.insert("168.1".to_string(), "Sigma 50-100mm f/1.8 DC HSM | A");
    map.insert(
        "169".to_string(),
        "Canon EF 17-35mm f/2.8L USM or Sigma Lens",
    );
    map.insert("169.1".to_string(), "Sigma 18-200mm f/3.5-6.3 DC OS");
    map.insert(
        "169.2".to_string(),
        "Sigma 15-30mm f/3.5-4.5 EX DG Aspherical",
    );
    map.insert("169.3".to_string(), "Sigma 18-50mm f/2.8 Macro");
    map.insert("169.4".to_string(), "Sigma 50mm f/1.4 EX DG HSM");
    map.insert("169.5".to_string(), "Sigma 85mm f/1.4 EX DG HSM");
    map.insert("169.6".to_string(), "Sigma 30mm f/1.4 EX DC HSM");
    map.insert("169.7".to_string(), "Sigma 35mm f/1.4 DG HSM");
    map.insert(
        "169.8".to_string(),
        "Sigma 35mm f/1.5 FF High-Speed Prime | 017",
    );
    map.insert("169.9".to_string(), "Sigma 70mm f/2.8 Macro EX DG");
    map.insert("17".to_string(), "Canon EF 35-70mm f/3.5-4.5A");
    map.insert(
        "170".to_string(),
        "Canon EF 200mm f/2.8L II USM or Sigma Lens",
    );
    map.insert("170.1".to_string(), "Sigma 300mm f/2.8 APO EX DG HSM");
    map.insert("170.2".to_string(), "Sigma 800mm f/5.6 APO EX DG HSM");
    map.insert("171".to_string(), "Canon EF 300mm f/4L USM");
    map.insert("172".to_string(), "Canon EF 400mm f/5.6L USM or Sigma Lens");
    map.insert("172.1".to_string(), "Sigma 150-600mm f/5-6.3 DG OS HSM | S");
    map.insert("172.2".to_string(), "Sigma 500mm f/4.5 APO EX DG HSM");
    map.insert(
        "173".to_string(),
        "Canon EF 180mm Macro f/3.5L USM or Sigma Lens",
    );
    map.insert("173.1".to_string(), "Sigma 180mm EX HSM Macro f/3.5");
    map.insert("173.2".to_string(), "Sigma APO Macro 150mm f/2.8 EX DG HSM");
    map.insert("173.3".to_string(), "Sigma 10mm f/2.8 EX DC Fisheye");
    map.insert(
        "173.4".to_string(),
        "Sigma 15mm f/2.8 EX DG Diagonal Fisheye",
    );
    map.insert(
        "173.5".to_string(),
        "Venus Laowa 100mm F2.8 2X Ultra Macro APO",
    );
    map.insert("174".to_string(), "Canon EF 135mm f/2L USM or Other Lens");
    map.insert("174.1".to_string(), "Sigma 70-200mm f/2.8 EX DG APO OS HSM");
    map.insert(
        "174.2".to_string(),
        "Sigma 50-500mm f/4.5-6.3 APO DG OS HSM",
    );
    map.insert("174.3".to_string(), "Sigma 150-500mm f/5-6.3 APO DG OS HSM");
    map.insert("174.4".to_string(), "Zeiss Milvus 100mm f/2 Makro");
    map.insert("174.5".to_string(), "Sigma APO 50-150mm f/2.8 EX DC OS HSM");
    map.insert(
        "174.6".to_string(),
        "Sigma APO 120-300mm f/2.8 EX DG OS HSM",
    );
    map.insert("174.7".to_string(), "Sigma 120-300mm f/2.8 DG OS HSM S013");
    map.insert(
        "174.8".to_string(),
        "Sigma 120-400mm f/4.5-5.6 APO DG OS HSM",
    );
    map.insert("174.9".to_string(), "Sigma 200-500mm f/2.8 APO EX DG");
    map.insert("175".to_string(), "Canon EF 400mm f/2.8L USM");
    map.insert("176".to_string(), "Canon EF 24-85mm f/3.5-4.5 USM");
    map.insert("177".to_string(), "Canon EF 300mm f/4L IS USM");
    map.insert("178".to_string(), "Canon EF 28-135mm f/3.5-5.6 IS");
    map.insert("179".to_string(), "Canon EF 24mm f/1.4L USM");
    map.insert("18".to_string(), "Canon EF 28-70mm f/3.5-4.5");
    map.insert("180".to_string(), "Canon EF 35mm f/1.4L USM or Other Lens");
    map.insert("180.1".to_string(), "Sigma 50mm f/1.4 DG HSM | A");
    map.insert("180.10".to_string(), "Sigma 20mm f/1.4 DG HSM | A");
    map.insert("180.2".to_string(), "Sigma 24mm f/1.4 DG HSM | A");
    map.insert("180.3".to_string(), "Zeiss Milvus 50mm f/1.4");
    map.insert("180.4".to_string(), "Zeiss Milvus 85mm f/1.4");
    map.insert("180.5".to_string(), "Zeiss Otus 28mm f/1.4 ZE");
    map.insert(
        "180.6".to_string(),
        "Sigma 24mm f/1.5 FF High-Speed Prime | 017",
    );
    map.insert(
        "180.7".to_string(),
        "Sigma 50mm f/1.5 FF High-Speed Prime | 017",
    );
    map.insert(
        "180.8".to_string(),
        "Sigma 85mm f/1.5 FF High-Speed Prime | 017",
    );
    map.insert("180.9".to_string(), "Tokina Opera 50mm f/1.4 FF");
    map.insert(
        "181".to_string(),
        "Canon EF 100-400mm f/4.5-5.6L IS USM + 1.4x or Sigma Lens",
    );
    map.insert(
        "181.1".to_string(),
        "Sigma 150-600mm f/5-6.3 DG OS HSM | S + 1.4x",
    );
    map.insert(
        "182".to_string(),
        "Canon EF 100-400mm f/4.5-5.6L IS USM + 2x or Sigma Lens",
    );
    map.insert(
        "182.1".to_string(),
        "Sigma 150-600mm f/5-6.3 DG OS HSM | S + 2x",
    );
    map.insert(
        "183".to_string(),
        "Canon EF 100-400mm f/4.5-5.6L IS USM or Sigma Lens",
    );
    map.insert(
        "183.1".to_string(),
        "Sigma 150mm f/2.8 EX DG OS HSM APO Macro",
    );
    map.insert("183.2".to_string(), "Sigma 105mm f/2.8 EX DG OS HSM Macro");
    map.insert(
        "183.3".to_string(),
        "Sigma 180mm f/2.8 EX DG OS HSM APO Macro",
    );
    map.insert("183.4".to_string(), "Sigma 150-600mm f/5-6.3 DG OS HSM | C");
    map.insert("183.5".to_string(), "Sigma 150-600mm f/5-6.3 DG OS HSM | S");
    map.insert("183.6".to_string(), "Sigma 100-400mm f/5-6.3 DG OS HSM");
    map.insert(
        "183.7".to_string(),
        "Sigma 180mm f/3.5 APO Macro EX DG IF HSM",
    );
    map.insert("184".to_string(), "Canon EF 400mm f/2.8L USM + 2x");
    map.insert("185".to_string(), "Canon EF 600mm f/4L IS USM");
    map.insert("186".to_string(), "Canon EF 70-200mm f/4L USM");
    map.insert("187".to_string(), "Canon EF 70-200mm f/4L USM + 1.4x");
    map.insert("188".to_string(), "Canon EF 70-200mm f/4L USM + 2x");
    map.insert("189".to_string(), "Canon EF 70-200mm f/4L USM + 2.8x");
    map.insert("190".to_string(), "Canon EF 100mm f/2.8 Macro USM");
    map.insert("191".to_string(), "Canon EF 400mm f/4 DO IS or Sigma Lens");
    map.insert("191.1".to_string(), "Sigma 500mm f/4 DG OS HSM");
    map.insert("193".to_string(), "Canon EF 35-80mm f/4-5.6 USM");
    map.insert("194".to_string(), "Canon EF 80-200mm f/4.5-5.6 USM");
    map.insert("195".to_string(), "Canon EF 35-105mm f/4.5-5.6 USM");
    map.insert("196".to_string(), "Canon EF 75-300mm f/4-5.6 USM");
    map.insert(
        "197".to_string(),
        "Canon EF 75-300mm f/4-5.6 IS USM or Sigma Lens",
    );
    map.insert(
        "197.1".to_string(),
        "Sigma 18-300mm f/3.5-6.3 DC Macro OS HSM",
    );
    map.insert("198".to_string(), "Canon EF 50mm f/1.4 USM or Other Lens");
    map.insert("198.1".to_string(), "Zeiss Otus 55mm f/1.4 ZE");
    map.insert("198.2".to_string(), "Zeiss Otus 85mm f/1.4 ZE");
    map.insert("198.3".to_string(), "Zeiss Milvus 25mm f/1.4");
    map.insert("198.4".to_string(), "Zeiss Otus 100mm f/1.4");
    map.insert("198.5".to_string(), "Zeiss Milvus 35mm f/1.4 ZE");
    map.insert("198.6".to_string(), "Yongnuo YN 35mm f/2");
    map.insert("199".to_string(), "Canon EF 28-80mm f/3.5-5.6 USM");
    map.insert("2".to_string(), "Canon EF 28mm f/2.8 or Sigma Lens");
    map.insert("2.1".to_string(), "Sigma 24mm f/2.8 Super Wide II");
    map.insert("20".to_string(), "Canon EF 100-200mm f/4.5A");
    map.insert("200".to_string(), "Canon EF 75-300mm f/4-5.6 USM");
    map.insert("201".to_string(), "Canon EF 28-80mm f/3.5-5.6 USM");
    map.insert("202".to_string(), "Canon EF 28-80mm f/3.5-5.6 USM IV");
    map.insert("208".to_string(), "Canon EF 22-55mm f/4-5.6 USM");
    map.insert("209".to_string(), "Canon EF 55-200mm f/4.5-5.6");
    map.insert("21".to_string(), "Canon EF 80-200mm f/2.8L");
    map.insert("210".to_string(), "Canon EF 28-90mm f/4-5.6 USM");
    map.insert("211".to_string(), "Canon EF 28-200mm f/3.5-5.6 USM");
    map.insert("212".to_string(), "Canon EF 28-105mm f/4-5.6 USM");
    map.insert(
        "213".to_string(),
        "Canon EF 90-300mm f/4.5-5.6 USM or Tamron Lens",
    );
    map.insert(
        "213.1".to_string(),
        "Tamron SP 150-600mm f/5-6.3 Di VC USD (A011)",
    );
    map.insert(
        "213.2".to_string(),
        "Tamron 16-300mm f/3.5-6.3 Di II VC PZD Macro (B016)",
    );
    map.insert("213.3".to_string(), "Tamron SP 35mm f/1.8 Di VC USD (F012)");
    map.insert("213.4".to_string(), "Tamron SP 45mm f/1.8 Di VC USD (F013)");
    map.insert("214".to_string(), "Canon EF-S 18-55mm f/3.5-5.6 USM");
    map.insert("215".to_string(), "Canon EF 55-200mm f/4.5-5.6 II USM");
    map.insert(
        "217".to_string(),
        "Tamron AF 18-270mm f/3.5-6.3 Di II VC PZD",
    );
    map.insert("22".to_string(), "Canon EF 20-35mm f/2.8L or Tokina Lens");
    map.insert(
        "22.1".to_string(),
        "Tokina AT-X 280 AF Pro 28-80mm f/2.8 Aspherical",
    );
    map.insert("220".to_string(), "Yongnuo YN 50mm f/1.8");
    map.insert("224".to_string(), "Canon EF 70-200mm f/2.8L IS USM");
    map.insert("225".to_string(), "Canon EF 70-200mm f/2.8L IS USM + 1.4x");
    map.insert("226".to_string(), "Canon EF 70-200mm f/2.8L IS USM + 2x");
    map.insert("227".to_string(), "Canon EF 70-200mm f/2.8L IS USM + 2.8x");
    map.insert("228".to_string(), "Canon EF 28-105mm f/3.5-4.5 USM");
    map.insert("229".to_string(), "Canon EF 16-35mm f/2.8L USM");
    map.insert("23".to_string(), "Canon EF 35-105mm f/3.5-4.5");
    map.insert("230".to_string(), "Canon EF 24-70mm f/2.8L USM");
    map.insert("231".to_string(), "Canon EF 17-40mm f/4L USM or Sigma Lens");
    map.insert("231.1".to_string(), "Sigma 12-24mm f/4 DG HSM A016");
    map.insert("232".to_string(), "Canon EF 70-300mm f/4.5-5.6 DO IS USM");
    map.insert("233".to_string(), "Canon EF 28-300mm f/3.5-5.6L IS USM");
    map.insert(
        "234".to_string(),
        "Canon EF-S 17-85mm f/4-5.6 IS USM or Tokina Lens",
    );
    map.insert("234.1".to_string(), "Tokina AT-X 12-28 PRO DX 12-28mm f/4");
    map.insert("235".to_string(), "Canon EF-S 10-22mm f/3.5-4.5 USM");
    map.insert("236".to_string(), "Canon EF-S 60mm f/2.8 Macro USM");
    map.insert("237".to_string(), "Canon EF 24-105mm f/4L IS USM");
    map.insert("238".to_string(), "Canon EF 70-300mm f/4-5.6 IS USM");
    map.insert(
        "239".to_string(),
        "Canon EF 85mm f/1.2L II USM or Rokinon Lens",
    );
    map.insert("239.1".to_string(), "Rokinon SP 85mm f/1.2");
    map.insert("24".to_string(), "Canon EF 35-80mm f/4-5.6 Power Zoom");
    map.insert(
        "240".to_string(),
        "Canon EF-S 17-55mm f/2.8 IS USM or Sigma Lens",
    );
    map.insert("240.1".to_string(), "Sigma 17-50mm f/2.8 EX DC OS HSM");
    map.insert("241".to_string(), "Canon EF 50mm f/1.2L USM");
    map.insert("242".to_string(), "Canon EF 70-200mm f/4L IS USM");
    map.insert("243".to_string(), "Canon EF 70-200mm f/4L IS USM + 1.4x");
    map.insert("244".to_string(), "Canon EF 70-200mm f/4L IS USM + 2x");
    map.insert("245".to_string(), "Canon EF 70-200mm f/4L IS USM + 2.8x");
    map.insert("246".to_string(), "Canon EF 16-35mm f/2.8L II USM");
    map.insert("247".to_string(), "Canon EF 14mm f/2.8L II USM");
    map.insert(
        "248".to_string(),
        "Canon EF 200mm f/2L IS USM or Sigma Lens",
    );
    map.insert("248.1".to_string(), "Sigma 24-35mm f/2 DG HSM | A");
    map.insert(
        "248.2".to_string(),
        "Sigma 135mm f/2 FF High-Speed Prime | 017",
    );
    map.insert("248.3".to_string(), "Sigma 24-35mm f/2.2 FF Zoom | 017");
    map.insert("248.4".to_string(), "Sigma 135mm f/1.8 DG HSM A017");
    map.insert("249".to_string(), "Canon EF 800mm f/5.6L IS USM");
    map.insert("25".to_string(), "Canon EF 35-80mm f/4-5.6 Power Zoom");
    map.insert(
        "250".to_string(),
        "Canon EF 24mm f/1.4L II USM or Sigma Lens",
    );
    map.insert("250.1".to_string(), "Sigma 20mm f/1.4 DG HSM | A");
    map.insert(
        "250.2".to_string(),
        "Sigma 20mm f/1.5 FF High-Speed Prime | 017",
    );
    map.insert("250.3".to_string(), "Tokina Opera 16-28mm f/2.8 FF");
    map.insert("250.4".to_string(), "Sigma 85mm f/1.4 DG HSM A016");
    map.insert("251".to_string(), "Canon EF 70-200mm f/2.8L IS II USM");
    map.insert("251.1".to_string(), "Canon EF 70-200mm f/2.8L IS III USM");
    map.insert(
        "252".to_string(),
        "Canon EF 70-200mm f/2.8L IS II USM + 1.4x",
    );
    map.insert(
        "252.1".to_string(),
        "Canon EF 70-200mm f/2.8L IS III USM + 1.4x",
    );
    map.insert("253".to_string(), "Canon EF 70-200mm f/2.8L IS II USM + 2x");
    map.insert(
        "253.1".to_string(),
        "Canon EF 70-200mm f/2.8L IS III USM + 2x",
    );
    map.insert(
        "254".to_string(),
        "Canon EF 100mm f/2.8L Macro IS USM or Tamron Lens",
    );
    map.insert(
        "254.1".to_string(),
        "Tamron SP 90mm f/2.8 Di VC USD 1:1 Macro (F017)",
    );
    map.insert(
        "255".to_string(),
        "Sigma 24-105mm f/4 DG OS HSM | A or Other Lens",
    );
    map.insert(
        "255.1".to_string(),
        "Sigma 180mm f/2.8 EX DG OS HSM APO Macro",
    );
    map.insert("255.2".to_string(), "Tamron SP 70-200mm f/2.8 Di VC USD");
    map.insert("255.3".to_string(), "Yongnuo YN 50mm f/1.8");
    map.insert("26".to_string(), "Canon EF 100mm f/2.8 Macro or Other Lens");
    map.insert("26.1".to_string(), "Cosina 100mm f/3.5 Macro AF");
    map.insert("26.2".to_string(), "Tamron SP AF 90mm f/2.8 Di Macro");
    map.insert("26.3".to_string(), "Tamron SP AF 180mm f/3.5 Di Macro");
    map.insert("26.4".to_string(), "Carl Zeiss Planar T* 50mm f/1.4");
    map.insert(
        "26.5".to_string(),
        "Voigtlander APO Lanthar 125mm F2.5 SL Macro",
    );
    map.insert("26.6".to_string(), "Carl Zeiss Planar T 85mm f/1.4 ZE");
    map.insert("27".to_string(), "Canon EF 35-80mm f/4-5.6");
    map.insert(
        "28".to_string(),
        "Canon EF 80-200mm f/4.5-5.6 or Tamron Lens",
    );
    map.insert(
        "28.1".to_string(),
        "Tamron SP AF 28-105mm f/2.8 LD Aspherical IF",
    );
    map.insert(
        "28.2".to_string(),
        "Tamron SP AF 28-75mm f/2.8 XR Di LD Aspherical [IF] Macro",
    );
    map.insert(
        "28.3".to_string(),
        "Tamron AF 70-300mm f/4-5.6 Di LD 1:2 Macro",
    );
    map.insert(
        "28.4".to_string(),
        "Tamron AF Aspherical 28-200mm f/3.8-5.6",
    );
    map.insert("29".to_string(), "Canon EF 50mm f/1.8 II");
    map.insert("3".to_string(), "Canon EF 135mm f/2.8 Soft");
    map.insert("30".to_string(), "Canon EF 35-105mm f/4.5-5.6");
    map.insert("31".to_string(), "Canon EF 75-300mm f/4-5.6 or Tamron Lens");
    map.insert("31.1".to_string(), "Tamron SP AF 300mm f/2.8 LD IF");
    map.insert("32".to_string(), "Canon EF 24mm f/2.8 or Sigma Lens");
    map.insert("32.1".to_string(), "Sigma 15mm f/2.8 EX Fisheye");
    map.insert("33".to_string(), "Voigtlander or Carl Zeiss Lens");
    map.insert(
        "33.1".to_string(),
        "Voigtlander Ultron 40mm f/2 SLII Aspherical",
    );
    map.insert("33.10".to_string(), "Carl Zeiss Distagon T* 35mm f/1.4 ZE");
    map.insert("33.11".to_string(), "Carl Zeiss Planar T* 50mm f/1.4 ZE");
    map.insert(
        "33.12".to_string(),
        "Carl Zeiss Makro-Planar T* 50mm f/2 ZE",
    );
    map.insert(
        "33.13".to_string(),
        "Carl Zeiss Makro-Planar T* 100mm f/2 ZE",
    );
    map.insert("33.14".to_string(), "Carl Zeiss Apo-Sonnar T* 135mm f/2 ZE");
    map.insert(
        "33.2".to_string(),
        "Voigtlander Color Skopar 20mm f/3.5 SLII Aspherical",
    );
    map.insert(
        "33.3".to_string(),
        "Voigtlander APO-Lanthar 90mm f/3.5 SLII Close Focus",
    );
    map.insert("33.4".to_string(), "Carl Zeiss Distagon T* 15mm f/2.8 ZE");
    map.insert("33.5".to_string(), "Carl Zeiss Distagon T* 18mm f/3.5 ZE");
    map.insert("33.6".to_string(), "Carl Zeiss Distagon T* 21mm f/2.8 ZE");
    map.insert("33.7".to_string(), "Carl Zeiss Distagon T* 25mm f/2 ZE");
    map.insert("33.8".to_string(), "Carl Zeiss Distagon T* 28mm f/2 ZE");
    map.insert("33.9".to_string(), "Carl Zeiss Distagon T* 35mm f/2 ZE");
    map.insert("35".to_string(), "Canon EF 35-80mm f/4-5.6");
    map.insert("36".to_string(), "Canon EF 38-76mm f/4.5-5.6");
    map.insert(
        "368".to_string(),
        "Sigma 14-24mm f/2.8 DG HSM | A or other Sigma Lens",
    );
    map.insert("368.1".to_string(), "Sigma 20mm f/1.4 DG HSM | A");
    map.insert("368.10".to_string(), "Sigma 35mm f/1.4 DG HSM | A");
    map.insert("368.11".to_string(), "Sigma 70mm f/2.8 DG Macro");
    map.insert("368.12".to_string(), "Sigma 18-35mm f/1.8 DC HSM | A");
    map.insert("368.13".to_string(), "Sigma 24-105mm f/4 DG OS HSM | A");
    map.insert(
        "368.14".to_string(),
        "Sigma 18-300mm f/3.5-6.3 DC Macro OS HSM | C",
    );
    map.insert("368.2".to_string(), "Sigma 50mm f/1.4 DG HSM | A");
    map.insert("368.3".to_string(), "Sigma 40mm f/1.4 DG HSM | A");
    map.insert(
        "368.4".to_string(),
        "Sigma 60-600mm f/4.5-6.3 DG OS HSM | S",
    );
    map.insert("368.5".to_string(), "Sigma 28mm f/1.4 DG HSM | A");
    map.insert("368.6".to_string(), "Sigma 150-600mm f/5-6.3 DG OS HSM | S");
    map.insert("368.7".to_string(), "Sigma 85mm f/1.4 DG HSM | A");
    map.insert("368.8".to_string(), "Sigma 105mm f/1.4 DG HSM");
    map.insert("368.9".to_string(), "Sigma 14-24mm f/2.8 DG HSM");
    map.insert("36910".to_string(), "Canon EF 70-300mm f/4-5.6 IS II USM");
    map.insert("36912".to_string(), "Canon EF-S 18-135mm f/3.5-5.6 IS USM");
    map.insert("37".to_string(), "Canon EF 35-80mm f/4-5.6 or Tamron Lens");
    map.insert("37.1".to_string(), "Tamron 70-200mm f/2.8 Di LD IF Macro");
    map.insert(
        "37.2".to_string(),
        "Tamron AF 28-300mm f/3.5-6.3 XR Di VC LD Aspherical [IF] Macro (A20)",
    );
    map.insert(
        "37.3".to_string(),
        "Tamron SP AF 17-50mm f/2.8 XR Di II VC LD Aspherical [IF]",
    );
    map.insert(
        "37.4".to_string(),
        "Tamron AF 18-270mm f/3.5-6.3 Di II VC LD Aspherical [IF] Macro",
    );
    map.insert("38".to_string(), "Canon EF 80-200mm f/4.5-5.6 II");
    map.insert("39".to_string(), "Canon EF 75-300mm f/4-5.6");
    map.insert("4".to_string(), "Canon EF 35-105mm f/3.5-4.5 or Sigma Lens");
    map.insert("4.1".to_string(), "Sigma UC Zoom 35-135mm f/4-5.6");
    map.insert("40".to_string(), "Canon EF 28-80mm f/3.5-5.6");
    map.insert("41".to_string(), "Canon EF 28-90mm f/4-5.6");
    map.insert("4142".to_string(), "Canon EF-S 18-135mm f/3.5-5.6 IS STM");
    map.insert(
        "4143".to_string(),
        "Canon EF-M 18-55mm f/3.5-5.6 IS STM or Tamron Lens",
    );
    map.insert("4143.1".to_string(), "Tamron 18-200mm f/3.5-6.3 Di III VC");
    map.insert("4144".to_string(), "Canon EF 40mm f/2.8 STM");
    map.insert("4145".to_string(), "Canon EF-M 22mm f/2 STM");
    map.insert("4146".to_string(), "Canon EF-S 18-55mm f/3.5-5.6 IS STM");
    map.insert("4147".to_string(), "Canon EF-M 11-22mm f/4-5.6 IS STM");
    map.insert("4148".to_string(), "Canon EF-S 55-250mm f/4-5.6 IS STM");
    map.insert("4149".to_string(), "Canon EF-M 55-200mm f/4.5-6.3 IS STM");
    map.insert("4150".to_string(), "Canon EF-S 10-18mm f/4.5-5.6 IS STM");
    map.insert("4152".to_string(), "Canon EF 24-105mm f/3.5-5.6 IS STM");
    map.insert("4153".to_string(), "Canon EF-M 15-45mm f/3.5-6.3 IS STM");
    map.insert("4154".to_string(), "Canon EF-S 24mm f/2.8 STM");
    map.insert("4155".to_string(), "Canon EF-M 28mm f/3.5 Macro IS STM");
    map.insert("4156".to_string(), "Canon EF 50mm f/1.8 STM");
    map.insert("4157".to_string(), "Canon EF-M 18-150mm f/3.5-6.3 IS STM");
    map.insert("4158".to_string(), "Canon EF-S 18-55mm f/4-5.6 IS STM");
    map.insert("4159".to_string(), "Canon EF-M 32mm f/1.4 STM");
    map.insert("4160".to_string(), "Canon EF-S 35mm f/2.8 Macro IS STM");
    map.insert(
        "42".to_string(),
        "Canon EF 28-200mm f/3.5-5.6 or Tamron Lens",
    );
    map.insert(
        "42.1".to_string(),
        "Tamron AF 28-300mm f/3.5-6.3 XR Di VC LD Aspherical [IF] Macro (A20)",
    );
    map.insert(
        "4208".to_string(),
        "Sigma 56mm f/1.4 DC DN | C or other Sigma Lens",
    );
    map.insert("4208.1".to_string(), "Sigma 30mm F1.4 DC DN | C");
    map.insert("43".to_string(), "Canon EF 28-105mm f/4-5.6");
    map.insert("44".to_string(), "Canon EF 90-300mm f/4.5-5.6");
    map.insert("45".to_string(), "Canon EF-S 18-55mm f/3.5-5.6 [II]");
    map.insert("46".to_string(), "Canon EF 28-90mm f/4-5.6");
    map.insert("47".to_string(), "Zeiss Milvus 35mm f/2 or 50mm f/2");
    map.insert("47.1".to_string(), "Zeiss Milvus 50mm f/2 Makro");
    map.insert("47.2".to_string(), "Zeiss Milvus 135mm f/2 ZE");
    map.insert("48".to_string(), "Canon EF-S 18-55mm f/3.5-5.6 IS");
    map.insert("488".to_string(), "Canon EF-S 15-85mm f/3.5-5.6 IS USM");
    map.insert("489".to_string(), "Canon EF 70-300mm f/4-5.6L IS USM");
    map.insert("49".to_string(), "Canon EF-S 55-250mm f/4-5.6 IS");
    map.insert("490".to_string(), "Canon EF 8-15mm f/4L Fisheye USM");
    map.insert(
        "491".to_string(),
        "Canon EF 300mm f/2.8L IS II USM or Tamron Lens",
    );
    map.insert(
        "491.1".to_string(),
        "Tamron SP 70-200mm f/2.8 Di VC USD G2 (A025)",
    );
    map.insert(
        "491.2".to_string(),
        "Tamron 18-400mm f/3.5-6.3 Di II VC HLD (B028)",
    );
    map.insert(
        "491.3".to_string(),
        "Tamron 100-400mm f/4.5-6.3 Di VC USD (A035)",
    );
    map.insert("491.4".to_string(), "Tamron 70-210mm f/4 Di VC USD (A034)");
    map.insert(
        "491.5".to_string(),
        "Tamron 70-210mm f/4 Di VC USD (A034) + 1.4x",
    );
    map.insert(
        "491.6".to_string(),
        "Tamron SP 24-70mm f/2.8 Di VC USD G2 (A032)",
    );
    map.insert("492".to_string(), "Canon EF 400mm f/2.8L IS II USM");
    map.insert(
        "493".to_string(),
        "Canon EF 500mm f/4L IS II USM or EF 24-105mm f4L IS USM",
    );
    map.insert("493.1".to_string(), "Canon EF 24-105mm f/4L IS USM");
    map.insert("494".to_string(), "Canon EF 600mm f/4L IS II USM");
    map.insert(
        "495".to_string(),
        "Canon EF 24-70mm f/2.8L II USM or Sigma Lens",
    );
    map.insert("495.1".to_string(), "Sigma 24-70mm f/2.8 DG OS HSM | A");
    map.insert("496".to_string(), "Canon EF 200-400mm f/4L IS USM");
    map.insert("499".to_string(), "Canon EF 200-400mm f/4L IS USM + 1.4x");
    map.insert("5".to_string(), "Canon EF 35-70mm f/3.5-4.5");
    map.insert("50".to_string(), "Canon EF-S 18-200mm f/3.5-5.6 IS");
    map.insert(
        "502".to_string(),
        "Canon EF 28mm f/2.8 IS USM or Tamron Lens",
    );
    map.insert("502.1".to_string(), "Tamron 35mm f/1.8 Di VC USD (F012)");
    map.insert("503".to_string(), "Canon EF 24mm f/2.8 IS USM");
    map.insert("504".to_string(), "Canon EF 24-70mm f/4L IS USM");
    map.insert("505".to_string(), "Canon EF 35mm f/2 IS USM");
    map.insert("506".to_string(), "Canon EF 400mm f/4 DO IS II USM");
    map.insert("507".to_string(), "Canon EF 16-35mm f/4L IS USM");
    map.insert(
        "508".to_string(),
        "Canon EF 11-24mm f/4L USM or Tamron Lens",
    );
    map.insert(
        "508.1".to_string(),
        "Tamron 10-24mm f/3.5-4.5 Di II VC HLD (B023)",
    );
    map.insert("51".to_string(), "Canon EF-S 18-135mm f/3.5-5.6 IS");
    map.insert("52".to_string(), "Canon EF-S 18-55mm f/3.5-5.6 IS II");
    map.insert("53".to_string(), "Canon EF-S 18-55mm f/3.5-5.6 III");
    map.insert("54".to_string(), "Canon EF-S 55-250mm f/4-5.6 IS II");
    map.insert(
        "6".to_string(),
        "Canon EF 28-70mm f/3.5-4.5 or Sigma or Tokina Lens",
    );
    map.insert("6.1".to_string(), "Sigma 18-50mm f/3.5-5.6 DC");
    map.insert("6.2".to_string(), "Sigma 18-125mm f/3.5-5.6 DC IF ASP");
    map.insert("6.3".to_string(), "Tokina AF 193-2 19-35mm f/3.5-4.5");
    map.insert("6.4".to_string(), "Sigma 28-80mm f/3.5-5.6 II Macro");
    map.insert("6.5".to_string(), "Sigma 28-300mm f/3.5-6.3 DG Macro");
    map.insert("60".to_string(), "Irix 11mm f/4 or 15mm f/2.4");
    map.insert("60.1".to_string(), "Irix 15mm f/2.4");
    map.insert(
        "61182".to_string(),
        "Canon RF 50mm F1.2L USM or other Canon RF Lens",
    );
    map.insert("61182.1".to_string(), "Canon RF 24-105mm F4L IS USM");
    map.insert("61182.10".to_string(), "Canon RF 85mm F2 MACRO IS STM");
    map.insert("61182.11".to_string(), "Canon RF 600mm F11 IS STM");
    map.insert("61182.12".to_string(), "Canon RF 600mm F11 IS STM + RF1.4x");
    map.insert("61182.13".to_string(), "Canon RF 600mm F11 IS STM + RF2x");
    map.insert("61182.14".to_string(), "Canon RF 800mm F11 IS STM");
    map.insert("61182.15".to_string(), "Canon RF 800mm F11 IS STM + RF1.4x");
    map.insert("61182.16".to_string(), "Canon RF 800mm F11 IS STM + RF2x");
    map.insert("61182.17".to_string(), "Canon RF 24-105mm F4-7.1 IS STM");
    map.insert(
        "61182.18".to_string(),
        "Canon RF 100-500mm F4.5-7.1L IS USM",
    );
    map.insert(
        "61182.19".to_string(),
        "Canon RF 100-500mm F4.5-7.1L IS USM + RF1.4x",
    );
    map.insert("61182.2".to_string(), "Canon RF 28-70mm F2L USM");
    map.insert(
        "61182.20".to_string(),
        "Canon RF 100-500mm F4.5-7.1L IS USM + RF2x",
    );
    map.insert("61182.21".to_string(), "Canon RF 70-200mm F4L IS USM");
    map.insert("61182.22".to_string(), "Canon RF 100mm F2.8L MACRO IS USM");
    map.insert("61182.23".to_string(), "Canon RF 50mm F1.8 STM");
    map.insert("61182.24".to_string(), "Canon RF 14-35mm F4L IS USM");
    map.insert("61182.25".to_string(), "Canon RF-S 18-45mm F4.5-6.3 IS STM");
    map.insert("61182.26".to_string(), "Canon RF 100-400mm F5.6-8 IS USM");
    map.insert(
        "61182.27".to_string(),
        "Canon RF 100-400mm F5.6-8 IS USM + RF1.4x",
    );
    map.insert(
        "61182.28".to_string(),
        "Canon RF 100-400mm F5.6-8 IS USM + RF2x",
    );
    map.insert(
        "61182.29".to_string(),
        "Canon RF-S 18-150mm F3.5-6.3 IS STM",
    );
    map.insert("61182.3".to_string(), "Canon RF 35mm F1.8 MACRO IS STM");
    map.insert("61182.30".to_string(), "Canon RF 24mm F1.8 MACRO IS STM");
    map.insert("61182.31".to_string(), "Canon RF 16mm F2.8 STM");
    map.insert("61182.32".to_string(), "Canon RF 400mm F2.8L IS USM");
    map.insert(
        "61182.33".to_string(),
        "Canon RF 400mm F2.8L IS USM + RF1.4x",
    );
    map.insert("61182.34".to_string(), "Canon RF 400mm F2.8L IS USM + RF2x");
    map.insert("61182.35".to_string(), "Canon RF 600mm F4L IS USM");
    map.insert("61182.36".to_string(), "Canon RF 600mm F4L IS USM + RF1.4x");
    map.insert("61182.37".to_string(), "Canon RF 600mm F4L IS USM + RF2x");
    map.insert("61182.38".to_string(), "Canon RF 800mm F5.6L IS USM");
    map.insert(
        "61182.39".to_string(),
        "Canon RF 800mm F5.6L IS USM + RF1.4x",
    );
    map.insert("61182.4".to_string(), "Canon RF 85mm F1.2L USM");
    map.insert("61182.40".to_string(), "Canon RF 800mm F5.6L IS USM + RF2x");
    map.insert("61182.41".to_string(), "Canon RF 1200mm F8L IS USM");
    map.insert(
        "61182.42".to_string(),
        "Canon RF 1200mm F8L IS USM + RF1.4x",
    );
    map.insert("61182.43".to_string(), "Canon RF 1200mm F8L IS USM + RF2x");
    map.insert(
        "61182.44".to_string(),
        "Canon RF 5.2mm F2.8L Dual Fisheye 3D VR",
    );
    map.insert("61182.45".to_string(), "Canon RF 15-30mm F4.5-6.3 IS STM");
    map.insert("61182.46".to_string(), "Canon RF 135mm F1.8 L IS USM");
    map.insert("61182.47".to_string(), "Canon RF 24-50mm F4.5-6.3 IS STM");
    map.insert("61182.48".to_string(), "Canon RF-S 55-210mm F5-7.1 IS STM");
    map.insert("61182.49".to_string(), "Canon RF 100-300mm F2.8L IS USM");
    map.insert("61182.5".to_string(), "Canon RF 85mm F1.2L USM DS");
    map.insert(
        "61182.50".to_string(),
        "Canon RF 100-300mm F2.8L IS USM + RF1.4x",
    );
    map.insert(
        "61182.51".to_string(),
        "Canon RF 100-300mm F2.8L IS USM + RF2x",
    );
    map.insert("61182.52".to_string(), "Canon RF 10-20mm F4 L IS STM");
    map.insert("61182.53".to_string(), "Canon RF 28mm F2.8 STM");
    map.insert("61182.54".to_string(), "Canon RF 24-105mm F2.8 L IS USM Z");
    map.insert("61182.55".to_string(), "Canon RF-S 10-18mm F4.5-6.3 IS STM");
    map.insert("61182.56".to_string(), "Canon RF 35mm F1.4 L VCM");
    map.insert("61182.57".to_string(), "Canon RF 70-200mm F2.8 L IS USM Z");
    map.insert(
        "61182.58".to_string(),
        "Canon RF 70-200mm F2.8 L IS USM Z + RF1.4x",
    );
    map.insert(
        "61182.59".to_string(),
        "Canon RF 70-200mm F2.8 L IS USM Z + RF2x",
    );
    map.insert("61182.6".to_string(), "Canon RF 24-70mm F2.8L IS USM");
    map.insert("61182.60".to_string(), "Canon RF 16-28mm F2.8 IS STM");
    map.insert(
        "61182.61".to_string(),
        "Canon RF-S 14-30mm F4-6.3 IS STM PZ",
    );
    map.insert("61182.62".to_string(), "Canon RF 50mm F1.4 L VCM");
    map.insert("61182.63".to_string(), "Canon RF 24mm F1.4 L VCM");
    map.insert("61182.64".to_string(), "Canon RF 20mm F1.4 L VCM");
    map.insert("61182.7".to_string(), "Canon RF 15-35mm F2.8L IS USM");
    map.insert("61182.8".to_string(), "Canon RF 24-240mm F4-6.3 IS USM");
    map.insert("61182.9".to_string(), "Canon RF 70-200mm F2.8L IS USM");
    map.insert("61491".to_string(), "Canon CN-E 14mm T3.1 L F");
    map.insert("61492".to_string(), "Canon CN-E 24mm T1.5 L F");
    map.insert("61494".to_string(), "Canon CN-E 85mm T1.3 L F");
    map.insert("61495".to_string(), "Canon CN-E 135mm T2.2 L F");
    map.insert("61496".to_string(), "Canon CN-E 35mm T1.5 L F");
    map.insert(
        "624".to_string(),
        "Sigma 70-200mm f/2.8 DG OS HSM | S or other Sigma Lens",
    );
    map.insert("624.1".to_string(), "Sigma 150-600mm f/5-6.3 | C");
    map.insert("63".to_string(), "Irix 30mm F1.4 Dragonfly");
    map.insert("65535".to_string(), "n/a");
    map.insert("7".to_string(), "Canon EF 100-300mm f/5.6L");
    map.insert(
        "747".to_string(),
        "Canon EF 100-400mm f/4.5-5.6L IS II USM or Tamron Lens",
    );
    map.insert(
        "747.1".to_string(),
        "Tamron SP 150-600mm f/5-6.3 Di VC USD G2",
    );
    map.insert(
        "748".to_string(),
        "Canon EF 100-400mm f/4.5-5.6L IS II USM + 1.4x or Tamron Lens",
    );
    map.insert(
        "748.1".to_string(),
        "Tamron 100-400mm f/4.5-6.3 Di VC USD A035E + 1.4x",
    );
    map.insert(
        "748.2".to_string(),
        "Tamron 70-210mm f/4 Di VC USD (A034) + 2x",
    );
    map.insert(
        "749".to_string(),
        "Canon EF 100-400mm f/4.5-5.6L IS II USM + 2x or Tamron Lens",
    );
    map.insert(
        "749.1".to_string(),
        "Tamron 100-400mm f/4.5-6.3 Di VC USD A035E + 2x",
    );
    map.insert(
        "750".to_string(),
        "Canon EF 35mm f/1.4L II USM or Tamron Lens",
    );
    map.insert("750.1".to_string(), "Tamron SP 85mm f/1.8 Di VC USD (F016)");
    map.insert("750.2".to_string(), "Tamron SP 45mm f/1.8 Di VC USD (F013)");
    map.insert("751".to_string(), "Canon EF 16-35mm f/2.8L III USM");
    map.insert("752".to_string(), "Canon EF 24-105mm f/4L IS II USM");
    map.insert("753".to_string(), "Canon EF 85mm f/1.4L IS USM");
    map.insert("754".to_string(), "Canon EF 70-200mm f/4L IS II USM");
    map.insert("757".to_string(), "Canon EF 400mm f/2.8L IS III USM");
    map.insert("758".to_string(), "Canon EF 600mm f/4L IS III USM");
    map.insert(
        "8".to_string(),
        "Canon EF 100-300mm f/5.6 or Sigma or Tokina Lens",
    );
    map.insert("8.1".to_string(), "Sigma 70-300mm f/4-5.6 [APO] DG Macro");
    map.insert("8.2".to_string(), "Tokina AT-X 242 AF 24-200mm f/3.5-5.6");
    map.insert("80".to_string(), "Canon TS-E 50mm f/2.8L Macro");
    map.insert("81".to_string(), "Canon TS-E 90mm f/2.8L Macro");
    map.insert("82".to_string(), "Canon TS-E 135mm f/4L Macro");
    map.insert("9".to_string(), "Canon EF 70-210mm f/4");
    map.insert("9.1".to_string(), "Sigma 55-200mm f/4-5.6 DC");
    map.insert("94".to_string(), "Canon TS-E 17mm f/4L");
    map.insert("95".to_string(), "Canon TS-E 24mm f/3.5L II");
    map
});

static PRINT_CONV_7: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "(none)");
    map
});

static PRINT_CONV_8: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Single");
    map.insert("1".to_string(), "Continuous");
    map.insert("8".to_string(), "Manual");
    map
});

static PRINT_CONV_9: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal AE");
    map.insert("1".to_string(), "Exposure Compensation");
    map.insert("2".to_string(), "AE Lock");
    map.insert("3".to_string(), "AE Lock + Exposure Comp.");
    map.insert("4".to_string(), "No AE");
    map
});

static PRINT_CONV_10: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("2".to_string(), "Shoot Only");
    map.insert("256".to_string(), "Off (2)");
    map.insert("257".to_string(), "On (2)");
    map.insert("258".to_string(), "Shoot Only (2)");
    map.insert("259".to_string(), "Panning (2)");
    map.insert("260".to_string(), "Dynamic (2)");
    map.insert("3".to_string(), "Panning");
    map.insert("4".to_string(), "Dynamic");
    map
});

static PRINT_CONV_11: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Center");
    map.insert("1".to_string(), "AF Point");
    map
});

static PRINT_CONV_12: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Vivid");
    map.insert("100".to_string(), "My Color Data");
    map.insert("2".to_string(), "Neutral");
    map.insert("3".to_string(), "Smooth");
    map.insert("4".to_string(), "Sepia");
    map.insert("5".to_string(), "B&W");
    map.insert("6".to_string(), "Custom");
    map
});

static PRINT_CONV_13: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("1280".to_string(), "Full");
    map.insert("1282".to_string(), "Medium");
    map.insert("1284".to_string(), "Low");
    map.insert("32767".to_string(), "n/a");
    map
});

static PRINT_CONV_14: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("1".to_string(), "sRAW1 (mRAW)");
    map.insert("2".to_string(), "sRAW2 (sRAW)");
    map
});

static PRINT_CONV_15: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "n/a");
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_16: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("12288".to_string(), "None (MF)");
    map.insert("12289".to_string(), "Right");
    map.insert("12290".to_string(), "Center");
    map.insert("12291".to_string(), "Center+Right");
    map.insert("12292".to_string(), "Left");
    map.insert("12293".to_string(), "Left+Right");
    map.insert("12294".to_string(), "Left+Center");
    map.insert("12295".to_string(), "All");
    map
});

static PRINT_CONV_17: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "On");
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On (shot 1)");
    map.insert("2".to_string(), "On (shot 2)");
    map.insert("3".to_string(), "On (shot 3)");
    map
});

static PRINT_CONV_18: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("1".to_string(), "Camera Local Control");
    map.insert("3".to_string(), "Computer Remote Control");
    map
});

static PRINT_CONV_19: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("248".to_string(), "EOS High-end");
    map.insert("250".to_string(), "Compact");
    map.insert("252".to_string(), "EOS Mid-range");
    map.insert("255".to_string(), "DV Camera");
    map
});

static PRINT_CONV_20: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "n/a");
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Rotate 90 CW");
    map.insert("2".to_string(), "Rotate 180");
    map.insert("3".to_string(), "Rotate 270 CW");
    map
});

static PRINT_CONV_21: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "n/a");
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_22: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Fixed");
    map.insert("2".to_string(), "Zoom");
    map
});

static PRINT_CONV_23: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Yellow");
    map.insert("2".to_string(), "Orange");
    map.insert("3".to_string(), "Red");
    map.insert("4".to_string(), "Green");
    map
});

static PRINT_CONV_24: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Sepia");
    map.insert("2".to_string(), "Blue");
    map.insert("3".to_string(), "Purple");
    map.insert("4".to_string(), "Green");
    map
});

static PRINT_CONV_25: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_26: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Mechanical");
    map.insert("1".to_string(), "Electronic First Curtain");
    map.insert("2".to_string(), "Electronic");
    map
});

static PRINT_CONV_27: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_28: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_29: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("257".to_string(), "Canon RF 50mm F1.2L USM");
    map.insert("258".to_string(), "Canon RF 24-105mm F4L IS USM");
    map.insert("259".to_string(), "Canon RF 28-70mm F2L USM");
    map.insert("260".to_string(), "Canon RF 35mm F1.8 MACRO IS STM");
    map.insert("261".to_string(), "Canon RF 85mm F1.2L USM");
    map.insert("262".to_string(), "Canon RF 85mm F1.2L USM DS");
    map.insert("263".to_string(), "Canon RF 24-70mm F2.8L IS USM");
    map.insert("264".to_string(), "Canon RF 15-35mm F2.8L IS USM");
    map.insert("265".to_string(), "Canon RF 24-240mm F4-6.3 IS USM");
    map.insert("266".to_string(), "Canon RF 70-200mm F2.8L IS USM");
    map.insert("267".to_string(), "Canon RF 85mm F2 MACRO IS STM");
    map.insert("268".to_string(), "Canon RF 600mm F11 IS STM");
    map.insert("269".to_string(), "Canon RF 600mm F11 IS STM + RF1.4x");
    map.insert("270".to_string(), "Canon RF 600mm F11 IS STM + RF2x");
    map.insert("271".to_string(), "Canon RF 800mm F11 IS STM");
    map.insert("272".to_string(), "Canon RF 800mm F11 IS STM + RF1.4x");
    map.insert("273".to_string(), "Canon RF 800mm F11 IS STM + RF2x");
    map.insert("274".to_string(), "Canon RF 24-105mm F4-7.1 IS STM");
    map.insert("275".to_string(), "Canon RF 100-500mm F4.5-7.1L IS USM");
    map.insert(
        "276".to_string(),
        "Canon RF 100-500mm F4.5-7.1L IS USM + RF1.4x",
    );
    map.insert(
        "277".to_string(),
        "Canon RF 100-500mm F4.5-7.1L IS USM + RF2x",
    );
    map.insert("278".to_string(), "Canon RF 70-200mm F4L IS USM");
    map.insert("279".to_string(), "Canon RF 100mm F2.8L MACRO IS USM");
    map.insert("280".to_string(), "Canon RF 50mm F1.8 STM");
    map.insert("281".to_string(), "Canon RF 14-35mm F4L IS USM");
    map.insert("282".to_string(), "Canon RF-S 18-45mm F4.5-6.3 IS STM");
    map.insert("283".to_string(), "Canon RF 100-400mm F5.6-8 IS USM");
    map.insert(
        "284".to_string(),
        "Canon RF 100-400mm F5.6-8 IS USM + RF1.4x",
    );
    map.insert("285".to_string(), "Canon RF 100-400mm F5.6-8 IS USM + RF2x");
    map.insert("286".to_string(), "Canon RF-S 18-150mm F3.5-6.3 IS STM");
    map.insert("287".to_string(), "Canon RF 24mm F1.8 MACRO IS STM");
    map.insert("288".to_string(), "Canon RF 16mm F2.8 STM");
    map.insert("289".to_string(), "Canon RF 400mm F2.8L IS USM");
    map.insert("290".to_string(), "Canon RF 400mm F2.8L IS USM + RF1.4x");
    map.insert("291".to_string(), "Canon RF 400mm F2.8L IS USM + RF2x");
    map.insert("292".to_string(), "Canon RF 600mm F4L IS USM");
    map.insert("293".to_string(), "Canon RF 600mm F4L IS USM + RF1.4x");
    map.insert("294".to_string(), "Canon RF 600mm F4L IS USM + RF2x");
    map.insert("295".to_string(), "Canon RF 800mm F5.6L IS USM");
    map.insert("296".to_string(), "Canon RF 800mm F5.6L IS USM + RF1.4x");
    map.insert("297".to_string(), "Canon RF 800mm F5.6L IS USM + RF2x");
    map.insert("298".to_string(), "Canon RF 1200mm F8L IS USM");
    map.insert("299".to_string(), "Canon RF 1200mm F8L IS USM + RF1.4x");
    map.insert("300".to_string(), "Canon RF 1200mm F8L IS USM + RF2x");
    map.insert("301".to_string(), "Canon RF 5.2mm F2.8L Dual Fisheye 3D VR");
    map.insert("302".to_string(), "Canon RF 15-30mm F4.5-6.3 IS STM");
    map.insert("303".to_string(), "Canon RF 135mm F1.8 L IS USM");
    map.insert("304".to_string(), "Canon RF 24-50mm F4.5-6.3 IS STM");
    map.insert("305".to_string(), "Canon RF-S 55-210mm F5-7.1 IS STM");
    map.insert("306".to_string(), "Canon RF 100-300mm F2.8L IS USM");
    map.insert(
        "307".to_string(),
        "Canon RF 100-300mm F2.8L IS USM + RF1.4x",
    );
    map.insert("308".to_string(), "Canon RF 100-300mm F2.8L IS USM + RF2x");
    map.insert("309".to_string(), "Canon RF 200-800mm F6.3-9 IS USM");
    map.insert(
        "310".to_string(),
        "Canon RF 200-800mm F6.3-9 IS USM + RF1.4x",
    );
    map.insert("311".to_string(), "Canon RF 200-800mm F6.3-9 IS USM + RF2x");
    map.insert("312".to_string(), "Canon RF 10-20mm F4 L IS STM");
    map.insert("313".to_string(), "Canon RF 28mm F2.8 STM");
    map.insert("314".to_string(), "Canon RF 24-105mm F2.8 L IS USM Z");
    map.insert("315".to_string(), "Canon RF-S 10-18mm F4.5-6.3 IS STM");
    map.insert("316".to_string(), "Canon RF 35mm F1.4 L VCM");
    map.insert("317".to_string(), "Canon RF-S 3.9mm F3.5 STM DUAL FISHEYE");
    map.insert("318".to_string(), "Canon RF 28-70mm F2.8 IS STM");
    map.insert("319".to_string(), "Canon RF 70-200mm F2.8 L IS USM Z");
    map.insert(
        "320".to_string(),
        "Canon RF 70-200mm F2.8 L IS USM Z + RF1.4x",
    );
    map.insert(
        "321".to_string(),
        "Canon RF 70-200mm F2.8 L IS USM Z + RF2x",
    );
    map.insert("323".to_string(), "Canon RF 16-28mm F2.8 IS STM");
    map.insert("324".to_string(), "Canon RF-S 14-30mm F4-6.3 IS STM PZ");
    map.insert("325".to_string(), "Canon RF 50mm F1.4 L VCM");
    map.insert("326".to_string(), "Canon RF 24mm F1.4 L VCM");
    map.insert("327".to_string(), "Canon RF 20mm F1.4 L VCM");
    map
});

static PRINT_CONV_30: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "n/a");
    map.insert("1".to_string(), "Canon EF 50mm f/1.8");
    map.insert("10".to_string(), "Canon EF 50mm f/2.5 Macro or Sigma Lens");
    map.insert("10.1".to_string(), "Sigma 50mm f/2.8 EX");
    map.insert("10.2".to_string(), "Sigma 28mm f/1.8");
    map.insert("10.3".to_string(), "Sigma 105mm f/2.8 Macro EX");
    map.insert("10.4".to_string(), "Sigma 70mm f/2.8 EX DG Macro EF");
    map.insert(
        "103".to_string(),
        "Samyang AF 14mm f/2.8 EF or Rokinon Lens",
    );
    map.insert("103.1".to_string(), "Rokinon SP 14mm f/2.4");
    map.insert("103.2".to_string(), "Rokinon AF 14mm f/2.8 EF");
    map.insert("106".to_string(), "Rokinon SP / Samyang XP 35mm f/1.2");
    map.insert("11".to_string(), "Canon EF 35mm f/2");
    map.insert(
        "112".to_string(),
        "Sigma 28mm f/1.5 FF High-speed Prime or other Sigma Lens",
    );
    map.insert("112.1".to_string(), "Sigma 40mm f/1.5 FF High-speed Prime");
    map.insert("112.2".to_string(), "Sigma 105mm f/1.5 FF High-speed Prime");
    map.insert("1136".to_string(), "Sigma 24-70mm f/2.8 DG OS HSM | A");
    map.insert(
        "117".to_string(),
        "Tamron 35-150mm f/2.8-4.0 Di VC OSD (A043) or other Tamron Lens",
    );
    map.insert("117.1".to_string(), "Tamron SP 35mm f/1.4 Di USD (F045)");
    map.insert("124".to_string(), "Canon MP-E 65mm f/2.8 1-5x Macro Photo");
    map.insert("125".to_string(), "Canon TS-E 24mm f/3.5L");
    map.insert("126".to_string(), "Canon TS-E 45mm f/2.8");
    map.insert("127".to_string(), "Canon TS-E 90mm f/2.8 or Tamron Lens");
    map.insert(
        "127.1".to_string(),
        "Tamron 18-200mm f/3.5-6.3 Di II VC (B018)",
    );
    map.insert("129".to_string(), "Canon EF 300mm f/2.8L USM");
    map.insert("13".to_string(), "Canon EF 15mm f/2.8 Fisheye");
    map.insert("130".to_string(), "Canon EF 50mm f/1.0L USM");
    map.insert(
        "131".to_string(),
        "Canon EF 28-80mm f/2.8-4L USM or Sigma Lens",
    );
    map.insert(
        "131.1".to_string(),
        "Sigma 8mm f/3.5 EX DG Circular Fisheye",
    );
    map.insert(
        "131.2".to_string(),
        "Sigma 17-35mm f/2.8-4 EX DG Aspherical HSM",
    );
    map.insert("131.3".to_string(), "Sigma 17-70mm f/2.8-4.5 DC Macro");
    map.insert(
        "131.4".to_string(),
        "Sigma APO 50-150mm f/2.8 [II] EX DC HSM",
    );
    map.insert("131.5".to_string(), "Sigma APO 120-300mm f/2.8 EX DG HSM");
    map.insert(
        "131.6".to_string(),
        "Sigma 4.5mm f/2.8 EX DC HSM Circular Fisheye",
    );
    map.insert("131.7".to_string(), "Sigma 70-200mm f/2.8 APO EX HSM");
    map.insert("131.8".to_string(), "Sigma 28-70mm f/2.8-4 DG");
    map.insert("132".to_string(), "Canon EF 1200mm f/5.6L USM");
    map.insert("134".to_string(), "Canon EF 600mm f/4L IS USM");
    map.insert("135".to_string(), "Canon EF 200mm f/1.8L USM");
    map.insert("136".to_string(), "Canon EF 300mm f/2.8L USM");
    map.insert(
        "136.1".to_string(),
        "Tamron SP 15-30mm f/2.8 Di VC USD (A012)",
    );
    map.insert(
        "137".to_string(),
        "Canon EF 85mm f/1.2L USM or Sigma or Tamron Lens",
    );
    map.insert("137.1".to_string(), "Sigma 18-50mm f/2.8-4.5 DC OS HSM");
    map.insert("137.10".to_string(), "Sigma 8-16mm f/4.5-5.6 DC HSM");
    map.insert(
        "137.11".to_string(),
        "Tamron SP 17-50mm f/2.8 XR Di II VC (B005)",
    );
    map.insert(
        "137.12".to_string(),
        "Tamron SP 60mm f/2 Macro Di II (G005)",
    );
    map.insert("137.13".to_string(), "Sigma 10-20mm f/3.5 EX DC HSM");
    map.insert("137.14".to_string(), "Tamron SP 24-70mm f/2.8 Di VC USD");
    map.insert("137.15".to_string(), "Sigma 18-35mm f/1.8 DC HSM");
    map.insert("137.16".to_string(), "Sigma 12-24mm f/4.5-5.6 DG HSM II");
    map.insert("137.17".to_string(), "Sigma 70-300mm f/4-5.6 DG OS");
    map.insert("137.2".to_string(), "Sigma 50-200mm f/4-5.6 DC OS HSM");
    map.insert("137.3".to_string(), "Sigma 18-250mm f/3.5-6.3 DC OS HSM");
    map.insert("137.4".to_string(), "Sigma 24-70mm f/2.8 IF EX DG HSM");
    map.insert("137.5".to_string(), "Sigma 18-125mm f/3.8-5.6 DC OS HSM");
    map.insert(
        "137.6".to_string(),
        "Sigma 17-70mm f/2.8-4 DC Macro OS HSM | C",
    );
    map.insert("137.7".to_string(), "Sigma 17-50mm f/2.8 OS HSM");
    map.insert(
        "137.8".to_string(),
        "Sigma 18-200mm f/3.5-6.3 DC OS HSM [II]",
    );
    map.insert(
        "137.9".to_string(),
        "Tamron AF 18-270mm f/3.5-6.3 Di II VC PZD (B008)",
    );
    map.insert("138".to_string(), "Canon EF 28-80mm f/2.8-4L");
    map.insert("139".to_string(), "Canon EF 400mm f/2.8L USM");
    map.insert("14".to_string(), "Canon EF 50-200mm f/3.5-4.5L");
    map.insert("140".to_string(), "Canon EF 500mm f/4.5L USM");
    map.insert("141".to_string(), "Canon EF 500mm f/4.5L USM");
    map.insert("142".to_string(), "Canon EF 300mm f/2.8L IS USM");
    map.insert(
        "143".to_string(),
        "Canon EF 500mm f/4L IS USM or Sigma Lens",
    );
    map.insert("143.1".to_string(), "Sigma 17-70mm f/2.8-4 DC Macro OS HSM");
    map.insert("144".to_string(), "Canon EF 35-135mm f/4-5.6 USM");
    map.insert("145".to_string(), "Canon EF 100-300mm f/4.5-5.6 USM");
    map.insert("146".to_string(), "Canon EF 70-210mm f/3.5-4.5 USM");
    map.insert("147".to_string(), "Canon EF 35-135mm f/4-5.6 USM");
    map.insert("148".to_string(), "Canon EF 28-80mm f/3.5-5.6 USM");
    map.insert("149".to_string(), "Canon EF 100mm f/2 USM");
    map.insert("15".to_string(), "Canon EF 50-200mm f/3.5-4.5");
    map.insert("150".to_string(), "Canon EF 14mm f/2.8L USM or Sigma Lens");
    map.insert("150.1".to_string(), "Sigma 20mm EX f/1.8");
    map.insert("150.2".to_string(), "Sigma 30mm f/1.4 DC HSM");
    map.insert("150.3".to_string(), "Sigma 24mm f/1.8 DG Macro EX");
    map.insert("150.4".to_string(), "Sigma 28mm f/1.8 DG Macro EX");
    map.insert("150.5".to_string(), "Sigma 18-35mm f/1.8 DC HSM | A");
    map.insert("151".to_string(), "Canon EF 200mm f/2.8L USM");
    map.insert(
        "152".to_string(),
        "Canon EF 300mm f/4L IS USM or Sigma Lens",
    );
    map.insert(
        "152.1".to_string(),
        "Sigma 12-24mm f/4.5-5.6 EX DG ASPHERICAL HSM",
    );
    map.insert("152.2".to_string(), "Sigma 14mm f/2.8 EX Aspherical HSM");
    map.insert("152.3".to_string(), "Sigma 10-20mm f/4-5.6");
    map.insert("152.4".to_string(), "Sigma 100-300mm f/4");
    map.insert("152.5".to_string(), "Sigma 300-800mm f/5.6 APO EX DG HSM");
    map.insert(
        "153".to_string(),
        "Canon EF 35-350mm f/3.5-5.6L USM or Sigma or Tamron Lens",
    );
    map.insert("153.1".to_string(), "Sigma 50-500mm f/4-6.3 APO HSM EX");
    map.insert(
        "153.2".to_string(),
        "Tamron AF 28-300mm f/3.5-6.3 XR LD Aspherical [IF] Macro",
    );
    map.insert(
        "153.3".to_string(),
        "Tamron AF 18-200mm f/3.5-6.3 XR Di II LD Aspherical [IF] Macro (A14)",
    );
    map.insert(
        "153.4".to_string(),
        "Tamron 18-250mm f/3.5-6.3 Di II LD Aspherical [IF] Macro",
    );
    map.insert("154".to_string(), "Canon EF 20mm f/2.8 USM or Zeiss Lens");
    map.insert("154.1".to_string(), "Zeiss Milvus 21mm f/2.8");
    map.insert("154.2".to_string(), "Zeiss Milvus 15mm f/2.8 ZE");
    map.insert("154.3".to_string(), "Zeiss Milvus 18mm f/2.8 ZE");
    map.insert("155".to_string(), "Canon EF 85mm f/1.8 USM or Sigma Lens");
    map.insert("155.1".to_string(), "Sigma 14mm f/1.8 DG HSM | A");
    map.insert(
        "156".to_string(),
        "Canon EF 28-105mm f/3.5-4.5 USM or Tamron Lens",
    );
    map.insert(
        "156.1".to_string(),
        "Tamron SP 70-300mm f/4-5.6 Di VC USD (A005)",
    );
    map.insert(
        "156.2".to_string(),
        "Tamron SP AF 28-105mm f/2.8 LD Aspherical IF (176D)",
    );
    map.insert("16".to_string(), "Canon EF 35-135mm f/3.5-4.5");
    map.insert(
        "160".to_string(),
        "Canon EF 20-35mm f/3.5-4.5 USM or Tamron or Tokina Lens",
    );
    map.insert("160.1".to_string(), "Tamron AF 19-35mm f/3.5-4.5");
    map.insert("160.2".to_string(), "Tokina AT-X 124 AF Pro DX 12-24mm f/4");
    map.insert(
        "160.3".to_string(),
        "Tokina AT-X 107 AF DX 10-17mm f/3.5-4.5 Fisheye",
    );
    map.insert(
        "160.4".to_string(),
        "Tokina AT-X 116 AF Pro DX 11-16mm f/2.8",
    );
    map.insert(
        "160.5".to_string(),
        "Tokina AT-X 11-20 F2.8 PRO DX Aspherical 11-20mm f/2.8",
    );
    map.insert(
        "161".to_string(),
        "Canon EF 28-70mm f/2.8L USM or Other Lens",
    );
    map.insert("161.1".to_string(), "Sigma 24-70mm f/2.8 EX");
    map.insert("161.2".to_string(), "Sigma 28-70mm f/2.8 EX");
    map.insert("161.3".to_string(), "Sigma 24-60mm f/2.8 EX DG");
    map.insert(
        "161.4".to_string(),
        "Tamron AF 17-50mm f/2.8 Di-II LD Aspherical",
    );
    map.insert("161.5".to_string(), "Tamron 90mm f/2.8");
    map.insert(
        "161.6".to_string(),
        "Tamron SP AF 17-35mm f/2.8-4 Di LD Aspherical IF (A05)",
    );
    map.insert(
        "161.7".to_string(),
        "Tamron SP AF 28-75mm f/2.8 XR Di LD Aspherical [IF] Macro",
    );
    map.insert("161.8".to_string(), "Tokina AT-X 24-70mm f/2.8 PRO FX (IF)");
    map.insert("162".to_string(), "Canon EF 200mm f/2.8L USM");
    map.insert("163".to_string(), "Canon EF 300mm f/4L");
    map.insert("164".to_string(), "Canon EF 400mm f/5.6L");
    map.insert("165".to_string(), "Canon EF 70-200mm f/2.8L USM");
    map.insert("166".to_string(), "Canon EF 70-200mm f/2.8L USM + 1.4x");
    map.insert("167".to_string(), "Canon EF 70-200mm f/2.8L USM + 2x");
    map.insert("168".to_string(), "Canon EF 28mm f/1.8 USM or Sigma Lens");
    map.insert("168.1".to_string(), "Sigma 50-100mm f/1.8 DC HSM | A");
    map.insert(
        "169".to_string(),
        "Canon EF 17-35mm f/2.8L USM or Sigma Lens",
    );
    map.insert("169.1".to_string(), "Sigma 18-200mm f/3.5-6.3 DC OS");
    map.insert(
        "169.2".to_string(),
        "Sigma 15-30mm f/3.5-4.5 EX DG Aspherical",
    );
    map.insert("169.3".to_string(), "Sigma 18-50mm f/2.8 Macro");
    map.insert("169.4".to_string(), "Sigma 50mm f/1.4 EX DG HSM");
    map.insert("169.5".to_string(), "Sigma 85mm f/1.4 EX DG HSM");
    map.insert("169.6".to_string(), "Sigma 30mm f/1.4 EX DC HSM");
    map.insert("169.7".to_string(), "Sigma 35mm f/1.4 DG HSM");
    map.insert(
        "169.8".to_string(),
        "Sigma 35mm f/1.5 FF High-Speed Prime | 017",
    );
    map.insert("169.9".to_string(), "Sigma 70mm f/2.8 Macro EX DG");
    map.insert("17".to_string(), "Canon EF 35-70mm f/3.5-4.5A");
    map.insert(
        "170".to_string(),
        "Canon EF 200mm f/2.8L II USM or Sigma Lens",
    );
    map.insert("170.1".to_string(), "Sigma 300mm f/2.8 APO EX DG HSM");
    map.insert("170.2".to_string(), "Sigma 800mm f/5.6 APO EX DG HSM");
    map.insert("171".to_string(), "Canon EF 300mm f/4L USM");
    map.insert("172".to_string(), "Canon EF 400mm f/5.6L USM or Sigma Lens");
    map.insert("172.1".to_string(), "Sigma 150-600mm f/5-6.3 DG OS HSM | S");
    map.insert("172.2".to_string(), "Sigma 500mm f/4.5 APO EX DG HSM");
    map.insert(
        "173".to_string(),
        "Canon EF 180mm Macro f/3.5L USM or Sigma Lens",
    );
    map.insert("173.1".to_string(), "Sigma 180mm EX HSM Macro f/3.5");
    map.insert("173.2".to_string(), "Sigma APO Macro 150mm f/2.8 EX DG HSM");
    map.insert("173.3".to_string(), "Sigma 10mm f/2.8 EX DC Fisheye");
    map.insert(
        "173.4".to_string(),
        "Sigma 15mm f/2.8 EX DG Diagonal Fisheye",
    );
    map.insert(
        "173.5".to_string(),
        "Venus Laowa 100mm F2.8 2X Ultra Macro APO",
    );
    map.insert("174".to_string(), "Canon EF 135mm f/2L USM or Other Lens");
    map.insert("174.1".to_string(), "Sigma 70-200mm f/2.8 EX DG APO OS HSM");
    map.insert(
        "174.2".to_string(),
        "Sigma 50-500mm f/4.5-6.3 APO DG OS HSM",
    );
    map.insert("174.3".to_string(), "Sigma 150-500mm f/5-6.3 APO DG OS HSM");
    map.insert("174.4".to_string(), "Zeiss Milvus 100mm f/2 Makro");
    map.insert("174.5".to_string(), "Sigma APO 50-150mm f/2.8 EX DC OS HSM");
    map.insert(
        "174.6".to_string(),
        "Sigma APO 120-300mm f/2.8 EX DG OS HSM",
    );
    map.insert("174.7".to_string(), "Sigma 120-300mm f/2.8 DG OS HSM S013");
    map.insert(
        "174.8".to_string(),
        "Sigma 120-400mm f/4.5-5.6 APO DG OS HSM",
    );
    map.insert("174.9".to_string(), "Sigma 200-500mm f/2.8 APO EX DG");
    map.insert("175".to_string(), "Canon EF 400mm f/2.8L USM");
    map.insert("176".to_string(), "Canon EF 24-85mm f/3.5-4.5 USM");
    map.insert("177".to_string(), "Canon EF 300mm f/4L IS USM");
    map.insert("178".to_string(), "Canon EF 28-135mm f/3.5-5.6 IS");
    map.insert("179".to_string(), "Canon EF 24mm f/1.4L USM");
    map.insert("18".to_string(), "Canon EF 28-70mm f/3.5-4.5");
    map.insert("180".to_string(), "Canon EF 35mm f/1.4L USM or Other Lens");
    map.insert("180.1".to_string(), "Sigma 50mm f/1.4 DG HSM | A");
    map.insert("180.10".to_string(), "Sigma 20mm f/1.4 DG HSM | A");
    map.insert("180.2".to_string(), "Sigma 24mm f/1.4 DG HSM | A");
    map.insert("180.3".to_string(), "Zeiss Milvus 50mm f/1.4");
    map.insert("180.4".to_string(), "Zeiss Milvus 85mm f/1.4");
    map.insert("180.5".to_string(), "Zeiss Otus 28mm f/1.4 ZE");
    map.insert(
        "180.6".to_string(),
        "Sigma 24mm f/1.5 FF High-Speed Prime | 017",
    );
    map.insert(
        "180.7".to_string(),
        "Sigma 50mm f/1.5 FF High-Speed Prime | 017",
    );
    map.insert(
        "180.8".to_string(),
        "Sigma 85mm f/1.5 FF High-Speed Prime | 017",
    );
    map.insert("180.9".to_string(), "Tokina Opera 50mm f/1.4 FF");
    map.insert(
        "181".to_string(),
        "Canon EF 100-400mm f/4.5-5.6L IS USM + 1.4x or Sigma Lens",
    );
    map.insert(
        "181.1".to_string(),
        "Sigma 150-600mm f/5-6.3 DG OS HSM | S + 1.4x",
    );
    map.insert(
        "182".to_string(),
        "Canon EF 100-400mm f/4.5-5.6L IS USM + 2x or Sigma Lens",
    );
    map.insert(
        "182.1".to_string(),
        "Sigma 150-600mm f/5-6.3 DG OS HSM | S + 2x",
    );
    map.insert(
        "183".to_string(),
        "Canon EF 100-400mm f/4.5-5.6L IS USM or Sigma Lens",
    );
    map.insert(
        "183.1".to_string(),
        "Sigma 150mm f/2.8 EX DG OS HSM APO Macro",
    );
    map.insert("183.2".to_string(), "Sigma 105mm f/2.8 EX DG OS HSM Macro");
    map.insert(
        "183.3".to_string(),
        "Sigma 180mm f/2.8 EX DG OS HSM APO Macro",
    );
    map.insert("183.4".to_string(), "Sigma 150-600mm f/5-6.3 DG OS HSM | C");
    map.insert("183.5".to_string(), "Sigma 150-600mm f/5-6.3 DG OS HSM | S");
    map.insert("183.6".to_string(), "Sigma 100-400mm f/5-6.3 DG OS HSM");
    map.insert(
        "183.7".to_string(),
        "Sigma 180mm f/3.5 APO Macro EX DG IF HSM",
    );
    map.insert("184".to_string(), "Canon EF 400mm f/2.8L USM + 2x");
    map.insert("185".to_string(), "Canon EF 600mm f/4L IS USM");
    map.insert("186".to_string(), "Canon EF 70-200mm f/4L USM");
    map.insert("187".to_string(), "Canon EF 70-200mm f/4L USM + 1.4x");
    map.insert("188".to_string(), "Canon EF 70-200mm f/4L USM + 2x");
    map.insert("189".to_string(), "Canon EF 70-200mm f/4L USM + 2.8x");
    map.insert("190".to_string(), "Canon EF 100mm f/2.8 Macro USM");
    map.insert("191".to_string(), "Canon EF 400mm f/4 DO IS or Sigma Lens");
    map.insert("191.1".to_string(), "Sigma 500mm f/4 DG OS HSM");
    map.insert("193".to_string(), "Canon EF 35-80mm f/4-5.6 USM");
    map.insert("194".to_string(), "Canon EF 80-200mm f/4.5-5.6 USM");
    map.insert("195".to_string(), "Canon EF 35-105mm f/4.5-5.6 USM");
    map.insert("196".to_string(), "Canon EF 75-300mm f/4-5.6 USM");
    map.insert(
        "197".to_string(),
        "Canon EF 75-300mm f/4-5.6 IS USM or Sigma Lens",
    );
    map.insert(
        "197.1".to_string(),
        "Sigma 18-300mm f/3.5-6.3 DC Macro OS HSM",
    );
    map.insert("198".to_string(), "Canon EF 50mm f/1.4 USM or Other Lens");
    map.insert("198.1".to_string(), "Zeiss Otus 55mm f/1.4 ZE");
    map.insert("198.2".to_string(), "Zeiss Otus 85mm f/1.4 ZE");
    map.insert("198.3".to_string(), "Zeiss Milvus 25mm f/1.4");
    map.insert("198.4".to_string(), "Zeiss Otus 100mm f/1.4");
    map.insert("198.5".to_string(), "Zeiss Milvus 35mm f/1.4 ZE");
    map.insert("198.6".to_string(), "Yongnuo YN 35mm f/2");
    map.insert("199".to_string(), "Canon EF 28-80mm f/3.5-5.6 USM");
    map.insert("2".to_string(), "Canon EF 28mm f/2.8 or Sigma Lens");
    map.insert("2.1".to_string(), "Sigma 24mm f/2.8 Super Wide II");
    map.insert("20".to_string(), "Canon EF 100-200mm f/4.5A");
    map.insert("200".to_string(), "Canon EF 75-300mm f/4-5.6 USM");
    map.insert("201".to_string(), "Canon EF 28-80mm f/3.5-5.6 USM");
    map.insert("202".to_string(), "Canon EF 28-80mm f/3.5-5.6 USM IV");
    map.insert("208".to_string(), "Canon EF 22-55mm f/4-5.6 USM");
    map.insert("209".to_string(), "Canon EF 55-200mm f/4.5-5.6");
    map.insert("21".to_string(), "Canon EF 80-200mm f/2.8L");
    map.insert("210".to_string(), "Canon EF 28-90mm f/4-5.6 USM");
    map.insert("211".to_string(), "Canon EF 28-200mm f/3.5-5.6 USM");
    map.insert("212".to_string(), "Canon EF 28-105mm f/4-5.6 USM");
    map.insert(
        "213".to_string(),
        "Canon EF 90-300mm f/4.5-5.6 USM or Tamron Lens",
    );
    map.insert(
        "213.1".to_string(),
        "Tamron SP 150-600mm f/5-6.3 Di VC USD (A011)",
    );
    map.insert(
        "213.2".to_string(),
        "Tamron 16-300mm f/3.5-6.3 Di II VC PZD Macro (B016)",
    );
    map.insert("213.3".to_string(), "Tamron SP 35mm f/1.8 Di VC USD (F012)");
    map.insert("213.4".to_string(), "Tamron SP 45mm f/1.8 Di VC USD (F013)");
    map.insert("214".to_string(), "Canon EF-S 18-55mm f/3.5-5.6 USM");
    map.insert("215".to_string(), "Canon EF 55-200mm f/4.5-5.6 II USM");
    map.insert(
        "217".to_string(),
        "Tamron AF 18-270mm f/3.5-6.3 Di II VC PZD",
    );
    map.insert("22".to_string(), "Canon EF 20-35mm f/2.8L or Tokina Lens");
    map.insert(
        "22.1".to_string(),
        "Tokina AT-X 280 AF Pro 28-80mm f/2.8 Aspherical",
    );
    map.insert("220".to_string(), "Yongnuo YN 50mm f/1.8");
    map.insert("224".to_string(), "Canon EF 70-200mm f/2.8L IS USM");
    map.insert("225".to_string(), "Canon EF 70-200mm f/2.8L IS USM + 1.4x");
    map.insert("226".to_string(), "Canon EF 70-200mm f/2.8L IS USM + 2x");
    map.insert("227".to_string(), "Canon EF 70-200mm f/2.8L IS USM + 2.8x");
    map.insert("228".to_string(), "Canon EF 28-105mm f/3.5-4.5 USM");
    map.insert("229".to_string(), "Canon EF 16-35mm f/2.8L USM");
    map.insert("23".to_string(), "Canon EF 35-105mm f/3.5-4.5");
    map.insert("230".to_string(), "Canon EF 24-70mm f/2.8L USM");
    map.insert("231".to_string(), "Canon EF 17-40mm f/4L USM or Sigma Lens");
    map.insert("231.1".to_string(), "Sigma 12-24mm f/4 DG HSM A016");
    map.insert("232".to_string(), "Canon EF 70-300mm f/4.5-5.6 DO IS USM");
    map.insert("233".to_string(), "Canon EF 28-300mm f/3.5-5.6L IS USM");
    map.insert(
        "234".to_string(),
        "Canon EF-S 17-85mm f/4-5.6 IS USM or Tokina Lens",
    );
    map.insert("234.1".to_string(), "Tokina AT-X 12-28 PRO DX 12-28mm f/4");
    map.insert("235".to_string(), "Canon EF-S 10-22mm f/3.5-4.5 USM");
    map.insert("236".to_string(), "Canon EF-S 60mm f/2.8 Macro USM");
    map.insert("237".to_string(), "Canon EF 24-105mm f/4L IS USM");
    map.insert("238".to_string(), "Canon EF 70-300mm f/4-5.6 IS USM");
    map.insert(
        "239".to_string(),
        "Canon EF 85mm f/1.2L II USM or Rokinon Lens",
    );
    map.insert("239.1".to_string(), "Rokinon SP 85mm f/1.2");
    map.insert("24".to_string(), "Canon EF 35-80mm f/4-5.6 Power Zoom");
    map.insert(
        "240".to_string(),
        "Canon EF-S 17-55mm f/2.8 IS USM or Sigma Lens",
    );
    map.insert("240.1".to_string(), "Sigma 17-50mm f/2.8 EX DC OS HSM");
    map.insert("241".to_string(), "Canon EF 50mm f/1.2L USM");
    map.insert("242".to_string(), "Canon EF 70-200mm f/4L IS USM");
    map.insert("243".to_string(), "Canon EF 70-200mm f/4L IS USM + 1.4x");
    map.insert("244".to_string(), "Canon EF 70-200mm f/4L IS USM + 2x");
    map.insert("245".to_string(), "Canon EF 70-200mm f/4L IS USM + 2.8x");
    map.insert("246".to_string(), "Canon EF 16-35mm f/2.8L II USM");
    map.insert("247".to_string(), "Canon EF 14mm f/2.8L II USM");
    map.insert(
        "248".to_string(),
        "Canon EF 200mm f/2L IS USM or Sigma Lens",
    );
    map.insert("248.1".to_string(), "Sigma 24-35mm f/2 DG HSM | A");
    map.insert(
        "248.2".to_string(),
        "Sigma 135mm f/2 FF High-Speed Prime | 017",
    );
    map.insert("248.3".to_string(), "Sigma 24-35mm f/2.2 FF Zoom | 017");
    map.insert("248.4".to_string(), "Sigma 135mm f/1.8 DG HSM A017");
    map.insert("249".to_string(), "Canon EF 800mm f/5.6L IS USM");
    map.insert("25".to_string(), "Canon EF 35-80mm f/4-5.6 Power Zoom");
    map.insert(
        "250".to_string(),
        "Canon EF 24mm f/1.4L II USM or Sigma Lens",
    );
    map.insert("250.1".to_string(), "Sigma 20mm f/1.4 DG HSM | A");
    map.insert(
        "250.2".to_string(),
        "Sigma 20mm f/1.5 FF High-Speed Prime | 017",
    );
    map.insert("250.3".to_string(), "Tokina Opera 16-28mm f/2.8 FF");
    map.insert("250.4".to_string(), "Sigma 85mm f/1.4 DG HSM A016");
    map.insert("251".to_string(), "Canon EF 70-200mm f/2.8L IS II USM");
    map.insert("251.1".to_string(), "Canon EF 70-200mm f/2.8L IS III USM");
    map.insert(
        "252".to_string(),
        "Canon EF 70-200mm f/2.8L IS II USM + 1.4x",
    );
    map.insert(
        "252.1".to_string(),
        "Canon EF 70-200mm f/2.8L IS III USM + 1.4x",
    );
    map.insert("253".to_string(), "Canon EF 70-200mm f/2.8L IS II USM + 2x");
    map.insert(
        "253.1".to_string(),
        "Canon EF 70-200mm f/2.8L IS III USM + 2x",
    );
    map.insert(
        "254".to_string(),
        "Canon EF 100mm f/2.8L Macro IS USM or Tamron Lens",
    );
    map.insert(
        "254.1".to_string(),
        "Tamron SP 90mm f/2.8 Di VC USD 1:1 Macro (F017)",
    );
    map.insert(
        "255".to_string(),
        "Sigma 24-105mm f/4 DG OS HSM | A or Other Lens",
    );
    map.insert(
        "255.1".to_string(),
        "Sigma 180mm f/2.8 EX DG OS HSM APO Macro",
    );
    map.insert("255.2".to_string(), "Tamron SP 70-200mm f/2.8 Di VC USD");
    map.insert("255.3".to_string(), "Yongnuo YN 50mm f/1.8");
    map.insert("26".to_string(), "Canon EF 100mm f/2.8 Macro or Other Lens");
    map.insert("26.1".to_string(), "Cosina 100mm f/3.5 Macro AF");
    map.insert("26.2".to_string(), "Tamron SP AF 90mm f/2.8 Di Macro");
    map.insert("26.3".to_string(), "Tamron SP AF 180mm f/3.5 Di Macro");
    map.insert("26.4".to_string(), "Carl Zeiss Planar T* 50mm f/1.4");
    map.insert(
        "26.5".to_string(),
        "Voigtlander APO Lanthar 125mm F2.5 SL Macro",
    );
    map.insert("26.6".to_string(), "Carl Zeiss Planar T 85mm f/1.4 ZE");
    map.insert("27".to_string(), "Canon EF 35-80mm f/4-5.6");
    map.insert(
        "28".to_string(),
        "Canon EF 80-200mm f/4.5-5.6 or Tamron Lens",
    );
    map.insert(
        "28.1".to_string(),
        "Tamron SP AF 28-105mm f/2.8 LD Aspherical IF",
    );
    map.insert(
        "28.2".to_string(),
        "Tamron SP AF 28-75mm f/2.8 XR Di LD Aspherical [IF] Macro",
    );
    map.insert(
        "28.3".to_string(),
        "Tamron AF 70-300mm f/4-5.6 Di LD 1:2 Macro",
    );
    map.insert(
        "28.4".to_string(),
        "Tamron AF Aspherical 28-200mm f/3.8-5.6",
    );
    map.insert("29".to_string(), "Canon EF 50mm f/1.8 II");
    map.insert("3".to_string(), "Canon EF 135mm f/2.8 Soft");
    map.insert("30".to_string(), "Canon EF 35-105mm f/4.5-5.6");
    map.insert("31".to_string(), "Canon EF 75-300mm f/4-5.6 or Tamron Lens");
    map.insert("31.1".to_string(), "Tamron SP AF 300mm f/2.8 LD IF");
    map.insert("32".to_string(), "Canon EF 24mm f/2.8 or Sigma Lens");
    map.insert("32.1".to_string(), "Sigma 15mm f/2.8 EX Fisheye");
    map.insert("33".to_string(), "Voigtlander or Carl Zeiss Lens");
    map.insert(
        "33.1".to_string(),
        "Voigtlander Ultron 40mm f/2 SLII Aspherical",
    );
    map.insert("33.10".to_string(), "Carl Zeiss Distagon T* 35mm f/1.4 ZE");
    map.insert("33.11".to_string(), "Carl Zeiss Planar T* 50mm f/1.4 ZE");
    map.insert(
        "33.12".to_string(),
        "Carl Zeiss Makro-Planar T* 50mm f/2 ZE",
    );
    map.insert(
        "33.13".to_string(),
        "Carl Zeiss Makro-Planar T* 100mm f/2 ZE",
    );
    map.insert("33.14".to_string(), "Carl Zeiss Apo-Sonnar T* 135mm f/2 ZE");
    map.insert(
        "33.2".to_string(),
        "Voigtlander Color Skopar 20mm f/3.5 SLII Aspherical",
    );
    map.insert(
        "33.3".to_string(),
        "Voigtlander APO-Lanthar 90mm f/3.5 SLII Close Focus",
    );
    map.insert("33.4".to_string(), "Carl Zeiss Distagon T* 15mm f/2.8 ZE");
    map.insert("33.5".to_string(), "Carl Zeiss Distagon T* 18mm f/3.5 ZE");
    map.insert("33.6".to_string(), "Carl Zeiss Distagon T* 21mm f/2.8 ZE");
    map.insert("33.7".to_string(), "Carl Zeiss Distagon T* 25mm f/2 ZE");
    map.insert("33.8".to_string(), "Carl Zeiss Distagon T* 28mm f/2 ZE");
    map.insert("33.9".to_string(), "Carl Zeiss Distagon T* 35mm f/2 ZE");
    map.insert("35".to_string(), "Canon EF 35-80mm f/4-5.6");
    map.insert("36".to_string(), "Canon EF 38-76mm f/4.5-5.6");
    map.insert(
        "368".to_string(),
        "Sigma 14-24mm f/2.8 DG HSM | A or other Sigma Lens",
    );
    map.insert("368.1".to_string(), "Sigma 20mm f/1.4 DG HSM | A");
    map.insert("368.10".to_string(), "Sigma 35mm f/1.4 DG HSM | A");
    map.insert("368.11".to_string(), "Sigma 70mm f/2.8 DG Macro");
    map.insert("368.12".to_string(), "Sigma 18-35mm f/1.8 DC HSM | A");
    map.insert("368.13".to_string(), "Sigma 24-105mm f/4 DG OS HSM | A");
    map.insert(
        "368.14".to_string(),
        "Sigma 18-300mm f/3.5-6.3 DC Macro OS HSM | C",
    );
    map.insert("368.2".to_string(), "Sigma 50mm f/1.4 DG HSM | A");
    map.insert("368.3".to_string(), "Sigma 40mm f/1.4 DG HSM | A");
    map.insert(
        "368.4".to_string(),
        "Sigma 60-600mm f/4.5-6.3 DG OS HSM | S",
    );
    map.insert("368.5".to_string(), "Sigma 28mm f/1.4 DG HSM | A");
    map.insert("368.6".to_string(), "Sigma 150-600mm f/5-6.3 DG OS HSM | S");
    map.insert("368.7".to_string(), "Sigma 85mm f/1.4 DG HSM | A");
    map.insert("368.8".to_string(), "Sigma 105mm f/1.4 DG HSM");
    map.insert("368.9".to_string(), "Sigma 14-24mm f/2.8 DG HSM");
    map.insert("36910".to_string(), "Canon EF 70-300mm f/4-5.6 IS II USM");
    map.insert("36912".to_string(), "Canon EF-S 18-135mm f/3.5-5.6 IS USM");
    map.insert("37".to_string(), "Canon EF 35-80mm f/4-5.6 or Tamron Lens");
    map.insert("37.1".to_string(), "Tamron 70-200mm f/2.8 Di LD IF Macro");
    map.insert(
        "37.2".to_string(),
        "Tamron AF 28-300mm f/3.5-6.3 XR Di VC LD Aspherical [IF] Macro (A20)",
    );
    map.insert(
        "37.3".to_string(),
        "Tamron SP AF 17-50mm f/2.8 XR Di II VC LD Aspherical [IF]",
    );
    map.insert(
        "37.4".to_string(),
        "Tamron AF 18-270mm f/3.5-6.3 Di II VC LD Aspherical [IF] Macro",
    );
    map.insert("38".to_string(), "Canon EF 80-200mm f/4.5-5.6 II");
    map.insert("39".to_string(), "Canon EF 75-300mm f/4-5.6");
    map.insert("4".to_string(), "Canon EF 35-105mm f/3.5-4.5 or Sigma Lens");
    map.insert("4.1".to_string(), "Sigma UC Zoom 35-135mm f/4-5.6");
    map.insert("40".to_string(), "Canon EF 28-80mm f/3.5-5.6");
    map.insert("41".to_string(), "Canon EF 28-90mm f/4-5.6");
    map.insert("4142".to_string(), "Canon EF-S 18-135mm f/3.5-5.6 IS STM");
    map.insert(
        "4143".to_string(),
        "Canon EF-M 18-55mm f/3.5-5.6 IS STM or Tamron Lens",
    );
    map.insert("4143.1".to_string(), "Tamron 18-200mm f/3.5-6.3 Di III VC");
    map.insert("4144".to_string(), "Canon EF 40mm f/2.8 STM");
    map.insert("4145".to_string(), "Canon EF-M 22mm f/2 STM");
    map.insert("4146".to_string(), "Canon EF-S 18-55mm f/3.5-5.6 IS STM");
    map.insert("4147".to_string(), "Canon EF-M 11-22mm f/4-5.6 IS STM");
    map.insert("4148".to_string(), "Canon EF-S 55-250mm f/4-5.6 IS STM");
    map.insert("4149".to_string(), "Canon EF-M 55-200mm f/4.5-6.3 IS STM");
    map.insert("4150".to_string(), "Canon EF-S 10-18mm f/4.5-5.6 IS STM");
    map.insert("4152".to_string(), "Canon EF 24-105mm f/3.5-5.6 IS STM");
    map.insert("4153".to_string(), "Canon EF-M 15-45mm f/3.5-6.3 IS STM");
    map.insert("4154".to_string(), "Canon EF-S 24mm f/2.8 STM");
    map.insert("4155".to_string(), "Canon EF-M 28mm f/3.5 Macro IS STM");
    map.insert("4156".to_string(), "Canon EF 50mm f/1.8 STM");
    map.insert("4157".to_string(), "Canon EF-M 18-150mm f/3.5-6.3 IS STM");
    map.insert("4158".to_string(), "Canon EF-S 18-55mm f/4-5.6 IS STM");
    map.insert("4159".to_string(), "Canon EF-M 32mm f/1.4 STM");
    map.insert("4160".to_string(), "Canon EF-S 35mm f/2.8 Macro IS STM");
    map.insert(
        "42".to_string(),
        "Canon EF 28-200mm f/3.5-5.6 or Tamron Lens",
    );
    map.insert(
        "42.1".to_string(),
        "Tamron AF 28-300mm f/3.5-6.3 XR Di VC LD Aspherical [IF] Macro (A20)",
    );
    map.insert(
        "4208".to_string(),
        "Sigma 56mm f/1.4 DC DN | C or other Sigma Lens",
    );
    map.insert("4208.1".to_string(), "Sigma 30mm F1.4 DC DN | C");
    map.insert("43".to_string(), "Canon EF 28-105mm f/4-5.6");
    map.insert("44".to_string(), "Canon EF 90-300mm f/4.5-5.6");
    map.insert("45".to_string(), "Canon EF-S 18-55mm f/3.5-5.6 [II]");
    map.insert("46".to_string(), "Canon EF 28-90mm f/4-5.6");
    map.insert("47".to_string(), "Zeiss Milvus 35mm f/2 or 50mm f/2");
    map.insert("47.1".to_string(), "Zeiss Milvus 50mm f/2 Makro");
    map.insert("47.2".to_string(), "Zeiss Milvus 135mm f/2 ZE");
    map.insert("48".to_string(), "Canon EF-S 18-55mm f/3.5-5.6 IS");
    map.insert("488".to_string(), "Canon EF-S 15-85mm f/3.5-5.6 IS USM");
    map.insert("489".to_string(), "Canon EF 70-300mm f/4-5.6L IS USM");
    map.insert("49".to_string(), "Canon EF-S 55-250mm f/4-5.6 IS");
    map.insert("490".to_string(), "Canon EF 8-15mm f/4L Fisheye USM");
    map.insert(
        "491".to_string(),
        "Canon EF 300mm f/2.8L IS II USM or Tamron Lens",
    );
    map.insert(
        "491.1".to_string(),
        "Tamron SP 70-200mm f/2.8 Di VC USD G2 (A025)",
    );
    map.insert(
        "491.2".to_string(),
        "Tamron 18-400mm f/3.5-6.3 Di II VC HLD (B028)",
    );
    map.insert(
        "491.3".to_string(),
        "Tamron 100-400mm f/4.5-6.3 Di VC USD (A035)",
    );
    map.insert("491.4".to_string(), "Tamron 70-210mm f/4 Di VC USD (A034)");
    map.insert(
        "491.5".to_string(),
        "Tamron 70-210mm f/4 Di VC USD (A034) + 1.4x",
    );
    map.insert(
        "491.6".to_string(),
        "Tamron SP 24-70mm f/2.8 Di VC USD G2 (A032)",
    );
    map.insert("492".to_string(), "Canon EF 400mm f/2.8L IS II USM");
    map.insert(
        "493".to_string(),
        "Canon EF 500mm f/4L IS II USM or EF 24-105mm f4L IS USM",
    );
    map.insert("493.1".to_string(), "Canon EF 24-105mm f/4L IS USM");
    map.insert("494".to_string(), "Canon EF 600mm f/4L IS II USM");
    map.insert(
        "495".to_string(),
        "Canon EF 24-70mm f/2.8L II USM or Sigma Lens",
    );
    map.insert("495.1".to_string(), "Sigma 24-70mm f/2.8 DG OS HSM | A");
    map.insert("496".to_string(), "Canon EF 200-400mm f/4L IS USM");
    map.insert("499".to_string(), "Canon EF 200-400mm f/4L IS USM + 1.4x");
    map.insert("5".to_string(), "Canon EF 35-70mm f/3.5-4.5");
    map.insert("50".to_string(), "Canon EF-S 18-200mm f/3.5-5.6 IS");
    map.insert(
        "502".to_string(),
        "Canon EF 28mm f/2.8 IS USM or Tamron Lens",
    );
    map.insert("502.1".to_string(), "Tamron 35mm f/1.8 Di VC USD (F012)");
    map.insert("503".to_string(), "Canon EF 24mm f/2.8 IS USM");
    map.insert("504".to_string(), "Canon EF 24-70mm f/4L IS USM");
    map.insert("505".to_string(), "Canon EF 35mm f/2 IS USM");
    map.insert("506".to_string(), "Canon EF 400mm f/4 DO IS II USM");
    map.insert("507".to_string(), "Canon EF 16-35mm f/4L IS USM");
    map.insert(
        "508".to_string(),
        "Canon EF 11-24mm f/4L USM or Tamron Lens",
    );
    map.insert(
        "508.1".to_string(),
        "Tamron 10-24mm f/3.5-4.5 Di II VC HLD (B023)",
    );
    map.insert("51".to_string(), "Canon EF-S 18-135mm f/3.5-5.6 IS");
    map.insert("52".to_string(), "Canon EF-S 18-55mm f/3.5-5.6 IS II");
    map.insert("53".to_string(), "Canon EF-S 18-55mm f/3.5-5.6 III");
    map.insert("54".to_string(), "Canon EF-S 55-250mm f/4-5.6 IS II");
    map.insert(
        "6".to_string(),
        "Canon EF 28-70mm f/3.5-4.5 or Sigma or Tokina Lens",
    );
    map.insert("6.1".to_string(), "Sigma 18-50mm f/3.5-5.6 DC");
    map.insert("6.2".to_string(), "Sigma 18-125mm f/3.5-5.6 DC IF ASP");
    map.insert("6.3".to_string(), "Tokina AF 193-2 19-35mm f/3.5-4.5");
    map.insert("6.4".to_string(), "Sigma 28-80mm f/3.5-5.6 II Macro");
    map.insert("6.5".to_string(), "Sigma 28-300mm f/3.5-6.3 DG Macro");
    map.insert("60".to_string(), "Irix 11mm f/4 or 15mm f/2.4");
    map.insert("60.1".to_string(), "Irix 15mm f/2.4");
    map.insert(
        "61182".to_string(),
        "Canon RF 50mm F1.2L USM or other Canon RF Lens",
    );
    map.insert("61182.1".to_string(), "Canon RF 24-105mm F4L IS USM");
    map.insert("61182.10".to_string(), "Canon RF 85mm F2 MACRO IS STM");
    map.insert("61182.11".to_string(), "Canon RF 600mm F11 IS STM");
    map.insert("61182.12".to_string(), "Canon RF 600mm F11 IS STM + RF1.4x");
    map.insert("61182.13".to_string(), "Canon RF 600mm F11 IS STM + RF2x");
    map.insert("61182.14".to_string(), "Canon RF 800mm F11 IS STM");
    map.insert("61182.15".to_string(), "Canon RF 800mm F11 IS STM + RF1.4x");
    map.insert("61182.16".to_string(), "Canon RF 800mm F11 IS STM + RF2x");
    map.insert("61182.17".to_string(), "Canon RF 24-105mm F4-7.1 IS STM");
    map.insert(
        "61182.18".to_string(),
        "Canon RF 100-500mm F4.5-7.1L IS USM",
    );
    map.insert(
        "61182.19".to_string(),
        "Canon RF 100-500mm F4.5-7.1L IS USM + RF1.4x",
    );
    map.insert("61182.2".to_string(), "Canon RF 28-70mm F2L USM");
    map.insert(
        "61182.20".to_string(),
        "Canon RF 100-500mm F4.5-7.1L IS USM + RF2x",
    );
    map.insert("61182.21".to_string(), "Canon RF 70-200mm F4L IS USM");
    map.insert("61182.22".to_string(), "Canon RF 100mm F2.8L MACRO IS USM");
    map.insert("61182.23".to_string(), "Canon RF 50mm F1.8 STM");
    map.insert("61182.24".to_string(), "Canon RF 14-35mm F4L IS USM");
    map.insert("61182.25".to_string(), "Canon RF-S 18-45mm F4.5-6.3 IS STM");
    map.insert("61182.26".to_string(), "Canon RF 100-400mm F5.6-8 IS USM");
    map.insert(
        "61182.27".to_string(),
        "Canon RF 100-400mm F5.6-8 IS USM + RF1.4x",
    );
    map.insert(
        "61182.28".to_string(),
        "Canon RF 100-400mm F5.6-8 IS USM + RF2x",
    );
    map.insert(
        "61182.29".to_string(),
        "Canon RF-S 18-150mm F3.5-6.3 IS STM",
    );
    map.insert("61182.3".to_string(), "Canon RF 35mm F1.8 MACRO IS STM");
    map.insert("61182.30".to_string(), "Canon RF 24mm F1.8 MACRO IS STM");
    map.insert("61182.31".to_string(), "Canon RF 16mm F2.8 STM");
    map.insert("61182.32".to_string(), "Canon RF 400mm F2.8L IS USM");
    map.insert(
        "61182.33".to_string(),
        "Canon RF 400mm F2.8L IS USM + RF1.4x",
    );
    map.insert("61182.34".to_string(), "Canon RF 400mm F2.8L IS USM + RF2x");
    map.insert("61182.35".to_string(), "Canon RF 600mm F4L IS USM");
    map.insert("61182.36".to_string(), "Canon RF 600mm F4L IS USM + RF1.4x");
    map.insert("61182.37".to_string(), "Canon RF 600mm F4L IS USM + RF2x");
    map.insert("61182.38".to_string(), "Canon RF 800mm F5.6L IS USM");
    map.insert(
        "61182.39".to_string(),
        "Canon RF 800mm F5.6L IS USM + RF1.4x",
    );
    map.insert("61182.4".to_string(), "Canon RF 85mm F1.2L USM");
    map.insert("61182.40".to_string(), "Canon RF 800mm F5.6L IS USM + RF2x");
    map.insert("61182.41".to_string(), "Canon RF 1200mm F8L IS USM");
    map.insert(
        "61182.42".to_string(),
        "Canon RF 1200mm F8L IS USM + RF1.4x",
    );
    map.insert("61182.43".to_string(), "Canon RF 1200mm F8L IS USM + RF2x");
    map.insert(
        "61182.44".to_string(),
        "Canon RF 5.2mm F2.8L Dual Fisheye 3D VR",
    );
    map.insert("61182.45".to_string(), "Canon RF 15-30mm F4.5-6.3 IS STM");
    map.insert("61182.46".to_string(), "Canon RF 135mm F1.8 L IS USM");
    map.insert("61182.47".to_string(), "Canon RF 24-50mm F4.5-6.3 IS STM");
    map.insert("61182.48".to_string(), "Canon RF-S 55-210mm F5-7.1 IS STM");
    map.insert("61182.49".to_string(), "Canon RF 100-300mm F2.8L IS USM");
    map.insert("61182.5".to_string(), "Canon RF 85mm F1.2L USM DS");
    map.insert(
        "61182.50".to_string(),
        "Canon RF 100-300mm F2.8L IS USM + RF1.4x",
    );
    map.insert(
        "61182.51".to_string(),
        "Canon RF 100-300mm F2.8L IS USM + RF2x",
    );
    map.insert("61182.52".to_string(), "Canon RF 10-20mm F4 L IS STM");
    map.insert("61182.53".to_string(), "Canon RF 28mm F2.8 STM");
    map.insert("61182.54".to_string(), "Canon RF 24-105mm F2.8 L IS USM Z");
    map.insert("61182.55".to_string(), "Canon RF-S 10-18mm F4.5-6.3 IS STM");
    map.insert("61182.56".to_string(), "Canon RF 35mm F1.4 L VCM");
    map.insert("61182.57".to_string(), "Canon RF 70-200mm F2.8 L IS USM Z");
    map.insert(
        "61182.58".to_string(),
        "Canon RF 70-200mm F2.8 L IS USM Z + RF1.4x",
    );
    map.insert(
        "61182.59".to_string(),
        "Canon RF 70-200mm F2.8 L IS USM Z + RF2x",
    );
    map.insert("61182.6".to_string(), "Canon RF 24-70mm F2.8L IS USM");
    map.insert("61182.60".to_string(), "Canon RF 16-28mm F2.8 IS STM");
    map.insert(
        "61182.61".to_string(),
        "Canon RF-S 14-30mm F4-6.3 IS STM PZ",
    );
    map.insert("61182.62".to_string(), "Canon RF 50mm F1.4 L VCM");
    map.insert("61182.63".to_string(), "Canon RF 24mm F1.4 L VCM");
    map.insert("61182.64".to_string(), "Canon RF 20mm F1.4 L VCM");
    map.insert("61182.7".to_string(), "Canon RF 15-35mm F2.8L IS USM");
    map.insert("61182.8".to_string(), "Canon RF 24-240mm F4-6.3 IS USM");
    map.insert("61182.9".to_string(), "Canon RF 70-200mm F2.8L IS USM");
    map.insert("61491".to_string(), "Canon CN-E 14mm T3.1 L F");
    map.insert("61492".to_string(), "Canon CN-E 24mm T1.5 L F");
    map.insert("61494".to_string(), "Canon CN-E 85mm T1.3 L F");
    map.insert("61495".to_string(), "Canon CN-E 135mm T2.2 L F");
    map.insert("61496".to_string(), "Canon CN-E 35mm T1.5 L F");
    map.insert(
        "624".to_string(),
        "Sigma 70-200mm f/2.8 DG OS HSM | S or other Sigma Lens",
    );
    map.insert("624.1".to_string(), "Sigma 150-600mm f/5-6.3 | C");
    map.insert("63".to_string(), "Irix 30mm F1.4 Dragonfly");
    map.insert("65535".to_string(), "n/a");
    map.insert("7".to_string(), "Canon EF 100-300mm f/5.6L");
    map.insert(
        "747".to_string(),
        "Canon EF 100-400mm f/4.5-5.6L IS II USM or Tamron Lens",
    );
    map.insert(
        "747.1".to_string(),
        "Tamron SP 150-600mm f/5-6.3 Di VC USD G2",
    );
    map.insert(
        "748".to_string(),
        "Canon EF 100-400mm f/4.5-5.6L IS II USM + 1.4x or Tamron Lens",
    );
    map.insert(
        "748.1".to_string(),
        "Tamron 100-400mm f/4.5-6.3 Di VC USD A035E + 1.4x",
    );
    map.insert(
        "748.2".to_string(),
        "Tamron 70-210mm f/4 Di VC USD (A034) + 2x",
    );
    map.insert(
        "749".to_string(),
        "Canon EF 100-400mm f/4.5-5.6L IS II USM + 2x or Tamron Lens",
    );
    map.insert(
        "749.1".to_string(),
        "Tamron 100-400mm f/4.5-6.3 Di VC USD A035E + 2x",
    );
    map.insert(
        "750".to_string(),
        "Canon EF 35mm f/1.4L II USM or Tamron Lens",
    );
    map.insert("750.1".to_string(), "Tamron SP 85mm f/1.8 Di VC USD (F016)");
    map.insert("750.2".to_string(), "Tamron SP 45mm f/1.8 Di VC USD (F013)");
    map.insert("751".to_string(), "Canon EF 16-35mm f/2.8L III USM");
    map.insert("752".to_string(), "Canon EF 24-105mm f/4L IS II USM");
    map.insert("753".to_string(), "Canon EF 85mm f/1.4L IS USM");
    map.insert("754".to_string(), "Canon EF 70-200mm f/4L IS II USM");
    map.insert("757".to_string(), "Canon EF 400mm f/2.8L IS III USM");
    map.insert("758".to_string(), "Canon EF 600mm f/4L IS III USM");
    map.insert(
        "8".to_string(),
        "Canon EF 100-300mm f/5.6 or Sigma or Tokina Lens",
    );
    map.insert("8.1".to_string(), "Sigma 70-300mm f/4-5.6 [APO] DG Macro");
    map.insert("8.2".to_string(), "Tokina AT-X 242 AF 24-200mm f/3.5-5.6");
    map.insert("80".to_string(), "Canon TS-E 50mm f/2.8L Macro");
    map.insert("81".to_string(), "Canon TS-E 90mm f/2.8L Macro");
    map.insert("82".to_string(), "Canon TS-E 135mm f/4L Macro");
    map.insert("9".to_string(), "Canon EF 70-210mm f/4");
    map.insert("9.1".to_string(), "Sigma 55-200mm f/4-5.6 DC");
    map.insert("94".to_string(), "Canon TS-E 17mm f/4L");
    map.insert("95".to_string(), "Canon TS-E 24mm f/3.5L II");
    map
});

static PRINT_CONV_31: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("1".to_string(), "Lowest");
    map.insert("2".to_string(), "Low");
    map.insert("3".to_string(), "Standard");
    map.insert("4".to_string(), "High");
    map.insert("5".to_string(), "Highest");
    map
});

static PRINT_CONV_32: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Daylight");
    map.insert("10".to_string(), "PC Set1");
    map.insert("11".to_string(), "PC Set2");
    map.insert("12".to_string(), "PC Set3");
    map.insert("14".to_string(), "Daylight Fluorescent");
    map.insert("15".to_string(), "Custom 1");
    map.insert("16".to_string(), "Custom 2");
    map.insert("17".to_string(), "Underwater");
    map.insert("18".to_string(), "Custom 3");
    map.insert("19".to_string(), "Custom 4");
    map.insert("2".to_string(), "Cloudy");
    map.insert("20".to_string(), "PC Set4");
    map.insert("21".to_string(), "PC Set5");
    map.insert("23".to_string(), "Auto (ambience priority)");
    map.insert("3".to_string(), "Tungsten");
    map.insert("4".to_string(), "Fluorescent");
    map.insert("5".to_string(), "Flash");
    map.insert("6".to_string(), "Custom");
    map.insert("7".to_string(), "Black & White");
    map.insert("8".to_string(), "Shade");
    map.insert("9".to_string(), "Manual Temperature (Kelvin)");
    map
});

static PRINT_CONV_33: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("1".to_string(), "Lowest");
    map.insert("2".to_string(), "Low");
    map.insert("3".to_string(), "Standard");
    map.insert("4".to_string(), "High");
    map.insert("5".to_string(), "Highest");
    map
});

static PRINT_CONV_34: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Daylight");
    map.insert("10".to_string(), "PC Set1");
    map.insert("11".to_string(), "PC Set2");
    map.insert("12".to_string(), "PC Set3");
    map.insert("14".to_string(), "Daylight Fluorescent");
    map.insert("15".to_string(), "Custom 1");
    map.insert("16".to_string(), "Custom 2");
    map.insert("17".to_string(), "Underwater");
    map.insert("18".to_string(), "Custom 3");
    map.insert("19".to_string(), "Custom 4");
    map.insert("2".to_string(), "Cloudy");
    map.insert("20".to_string(), "PC Set4");
    map.insert("21".to_string(), "PC Set5");
    map.insert("23".to_string(), "Auto (ambience priority)");
    map.insert("3".to_string(), "Tungsten");
    map.insert("4".to_string(), "Fluorescent");
    map.insert("5".to_string(), "Flash");
    map.insert("6".to_string(), "Custom");
    map.insert("7".to_string(), "Black & White");
    map.insert("8".to_string(), "Shade");
    map.insert("9".to_string(), "Manual Temperature (Kelvin)");
    map
});

static PRINT_CONV_35: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Standard");
    map.insert("129".to_string(), "Standard");
    map.insert("130".to_string(), "Portrait");
    map.insert("131".to_string(), "Landscape");
    map.insert("132".to_string(), "Neutral");
    map.insert("133".to_string(), "Faithful");
    map.insert("134".to_string(), "Monochrome");
    map.insert("135".to_string(), "Auto");
    map.insert("136".to_string(), "Fine Detail");
    map.insert("2".to_string(), "Portrait");
    map.insert("255".to_string(), "n/a");
    map.insert("3".to_string(), "High Saturation");
    map.insert("33".to_string(), "User Def. 1");
    map.insert("34".to_string(), "User Def. 2");
    map.insert("35".to_string(), "User Def. 3");
    map.insert("4".to_string(), "Adobe RGB");
    map.insert("5".to_string(), "Low Saturation");
    map.insert("6".to_string(), "CM Set 1");
    map.insert("65".to_string(), "PC 1");
    map.insert("65535".to_string(), "n/a");
    map.insert("66".to_string(), "PC 2");
    map.insert("67".to_string(), "PC 3");
    map.insert("7".to_string(), "CM Set 2");
    map
});

static PRINT_CONV_36: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Standard");
    map.insert("129".to_string(), "Standard");
    map.insert("130".to_string(), "Portrait");
    map.insert("131".to_string(), "Landscape");
    map.insert("132".to_string(), "Neutral");
    map.insert("133".to_string(), "Faithful");
    map.insert("134".to_string(), "Monochrome");
    map.insert("135".to_string(), "Auto");
    map.insert("136".to_string(), "Fine Detail");
    map.insert("2".to_string(), "Portrait");
    map.insert("255".to_string(), "n/a");
    map.insert("3".to_string(), "High Saturation");
    map.insert("33".to_string(), "User Def. 1");
    map.insert("34".to_string(), "User Def. 2");
    map.insert("35".to_string(), "User Def. 3");
    map.insert("4".to_string(), "Adobe RGB");
    map.insert("5".to_string(), "Low Saturation");
    map.insert("6".to_string(), "CM Set 1");
    map.insert("65".to_string(), "PC 1");
    map.insert("65535".to_string(), "n/a");
    map.insert("66".to_string(), "PC 2");
    map.insert("67".to_string(), "PC 3");
    map.insert("7".to_string(), "CM Set 2");
    map
});

static PRINT_CONV_37: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert(
        "100925440".to_string(),
        "PowerShot S100 / Digital IXUS / IXY Digital",
    );
    map.insert("1042".to_string(), "EOS M50 / Kiss M");
    map.insert("1074255475".to_string(), "DC19/DC21/DC22");
    map.insert("1074255476".to_string(), "XH A1");
    map.insert("1074255477".to_string(), "HV10");
    map.insert("1074255478".to_string(), "MD130/MD140/MD150/MD160/ZR850");
    map.insert("1074255735".to_string(), "DC50");
    map.insert("1074255736".to_string(), "HV20");
    map.insert("1074255737".to_string(), "DC211");
    map.insert("1074255738".to_string(), "HG10");
    map.insert("1074255739".to_string(), "HR10");
    map.insert("1074255741".to_string(), "MD255/ZR950");
    map.insert("1074255900".to_string(), "HF11");
    map.insert("1074255992".to_string(), "HV30");
    map.insert("1074255996".to_string(), "XH A1S");
    map.insert("1074255998".to_string(), "DC301/DC310/DC311/DC320/DC330");
    map.insert("1074255999".to_string(), "FS100");
    map.insert("1074256000".to_string(), "HF10");
    map.insert("1074256002".to_string(), "HG20/HG21");
    map.insert("1074256165".to_string(), "HF21");
    map.insert("1074256166".to_string(), "HF S11");
    map.insert("1074256248".to_string(), "HV40");
    map.insert("1074256263".to_string(), "DC410/DC411/DC420");
    map.insert("1074256264".to_string(), "FS19/FS20/FS21/FS22/FS200");
    map.insert("1074256265".to_string(), "HF20/HF200");
    map.insert("1074256266".to_string(), "HF S10/S100");
    map.insert("1074256526".to_string(), "HF R10/R16/R17/R18/R100/R106");
    map.insert("1074256527".to_string(), "HF M30/M31/M36/M300/M306");
    map.insert("1074256528".to_string(), "HF S20/S21/S200");
    map.insert(
        "1074256530".to_string(),
        "FS31/FS36/FS37/FS300/FS305/FS306/FS307",
    );
    map.insert("1074257056".to_string(), "EOS C300");
    map.insert("1074257321".to_string(), "HF G25");
    map.insert("1074257844".to_string(), "XC10");
    map.insert("1074258371".to_string(), "EOS C200");
    map.insert("16842752".to_string(), "PowerShot A30");
    map.insert(
        "17039360".to_string(),
        "PowerShot S300 / Digital IXUS 300 / IXY Digital 300",
    );
    map.insert("17170432".to_string(), "PowerShot A20");
    map.insert("17301504".to_string(), "PowerShot A10");
    map.insert(
        "17367040".to_string(),
        "PowerShot S110 / Digital IXUS v / IXY Digital 200",
    );
    map.insert("17825792".to_string(), "PowerShot G2");
    map.insert("17891328".to_string(), "PowerShot S40");
    map.insert("17956864".to_string(), "PowerShot S30");
    map.insert("18022400".to_string(), "PowerShot A40");
    map.insert("18087936".to_string(), "EOS D30");
    map.insert("18153472".to_string(), "PowerShot A100");
    map.insert(
        "18219008".to_string(),
        "PowerShot S200 / Digital IXUS v2 / IXY Digital 200a",
    );
    map.insert("18284544".to_string(), "PowerShot A200");
    map.insert(
        "18350080".to_string(),
        "PowerShot S330 / Digital IXUS 330 / IXY Digital 300a",
    );
    map.insert("18415616".to_string(), "PowerShot G3");
    map.insert("18939904".to_string(), "PowerShot S45");
    map.insert(
        "19070976".to_string(),
        "PowerShot SD100 / Digital IXUS II / IXY Digital 30",
    );
    map.insert(
        "19136512".to_string(),
        "PowerShot S230 / Digital IXUS v3 / IXY Digital 320",
    );
    map.insert("19202048".to_string(), "PowerShot A70");
    map.insert("19267584".to_string(), "PowerShot A60");
    map.insert(
        "19333120".to_string(),
        "PowerShot S400 / Digital IXUS 400 / IXY Digital 400",
    );
    map.insert("19464192".to_string(), "PowerShot G5");
    map.insert("19922944".to_string(), "PowerShot A300");
    map.insert("19988480".to_string(), "PowerShot S50");
    map.insert("20185088".to_string(), "PowerShot A80");
    map.insert(
        "20250624".to_string(),
        "PowerShot SD10 / Digital IXUS i / IXY Digital L",
    );
    map.insert("20316160".to_string(), "PowerShot S1 IS");
    map.insert("20381696".to_string(), "PowerShot Pro1");
    map.insert("20447232".to_string(), "PowerShot S70");
    map.insert("2049".to_string(), "PowerShot SX740 HS");
    map.insert("20512768".to_string(), "PowerShot S60");
    map.insert("2052".to_string(), "PowerShot G5 X Mark II");
    map.insert("2053".to_string(), "PowerShot SX70 HS");
    map.insert("2056".to_string(), "PowerShot G7 X Mark III");
    map.insert("2065".to_string(), "EOS M6 Mark II");
    map.insert("2066".to_string(), "EOS M200");
    map.insert("20971520".to_string(), "PowerShot G6");
    map.insert(
        "21037056".to_string(),
        "PowerShot S500 / Digital IXUS 500 / IXY Digital 500",
    );
    map.insert("21102592".to_string(), "PowerShot A75");
    map.insert(
        "21233664".to_string(),
        "PowerShot SD110 / Digital IXUS IIs / IXY Digital 30a",
    );
    map.insert("21299200".to_string(), "PowerShot A400");
    map.insert("21430272".to_string(), "PowerShot A310");
    map.insert("2147483649".to_string(), "EOS-1D");
    map.insert("2147484007".to_string(), "EOS-1DS");
    map.insert("2147484008".to_string(), "EOS 10D");
    map.insert("2147484009".to_string(), "EOS-1D Mark III");
    map.insert(
        "2147484016".to_string(),
        "EOS Digital Rebel / 300D / Kiss Digital",
    );
    map.insert("2147484020".to_string(), "EOS-1D Mark II");
    map.insert("2147484021".to_string(), "EOS 20D");
    map.insert(
        "2147484022".to_string(),
        "EOS Digital Rebel XSi / 450D / Kiss X2",
    );
    map.insert("2147484040".to_string(), "EOS-1Ds Mark II");
    map.insert(
        "2147484041".to_string(),
        "EOS Digital Rebel XT / 350D / Kiss Digital N",
    );
    map.insert("2147484048".to_string(), "EOS 40D");
    map.insert("2147484179".to_string(), "EOS 5D");
    map.insert("2147484181".to_string(), "EOS-1Ds Mark III");
    map.insert("2147484184".to_string(), "EOS 5D Mark II");
    map.insert("2147484185".to_string(), "WFT-E1");
    map.insert("2147484210".to_string(), "EOS-1D Mark II N");
    map.insert("2147484212".to_string(), "EOS 30D");
    map.insert(
        "2147484214".to_string(),
        "EOS Digital Rebel XTi / 400D / Kiss Digital X",
    );
    map.insert("2147484225".to_string(), "WFT-E2");
    map.insert("2147484230".to_string(), "WFT-E3");
    map.insert("2147484240".to_string(), "EOS 7D");
    map.insert("2147484242".to_string(), "EOS Rebel T1i / 500D / Kiss X3");
    map.insert("2147484244".to_string(), "EOS Rebel XS / 1000D / Kiss F");
    map.insert("2147484257".to_string(), "EOS 50D");
    map.insert("2147484265".to_string(), "EOS-1D X");
    map.insert("2147484272".to_string(), "EOS Rebel T2i / 550D / Kiss X4");
    map.insert("2147484273".to_string(), "WFT-E4");
    map.insert("2147484275".to_string(), "WFT-E5");
    map.insert("2147484289".to_string(), "EOS-1D Mark IV");
    map.insert("2147484293".to_string(), "EOS 5D Mark III");
    map.insert("2147484294".to_string(), "EOS Rebel T3i / 600D / Kiss X5");
    map.insert("2147484295".to_string(), "EOS 60D");
    map.insert("2147484296".to_string(), "EOS Rebel T3 / 1100D / Kiss X50");
    map.insert("2147484297".to_string(), "EOS 7D Mark II");
    map.insert("2147484311".to_string(), "WFT-E2 II");
    map.insert("2147484312".to_string(), "WFT-E4 II");
    map.insert("2147484417".to_string(), "EOS Rebel T4i / 650D / Kiss X6i");
    map.insert("2147484418".to_string(), "EOS 6D");
    map.insert("2147484452".to_string(), "EOS-1D C");
    map.insert("2147484453".to_string(), "EOS 70D");
    map.insert("2147484454".to_string(), "EOS Rebel T5i / 700D / Kiss X7i");
    map.insert(
        "2147484455".to_string(),
        "EOS Rebel T5 / 1200D / Kiss X70 / Hi",
    );
    map.insert("2147484456".to_string(), "EOS-1D X Mark II");
    map.insert("2147484465".to_string(), "EOS M");
    map.insert("2147484486".to_string(), "EOS Rebel SL1 / 100D / Kiss X7");
    map.insert("2147484487".to_string(), "EOS Rebel T6s / 760D / 8000D");
    map.insert("2147484489".to_string(), "EOS 5D Mark IV");
    map.insert("2147484496".to_string(), "EOS 80D");
    map.insert("2147484501".to_string(), "EOS M2");
    map.insert("2147484546".to_string(), "EOS 5DS");
    map.insert("2147484563".to_string(), "EOS Rebel T6i / 750D / Kiss X8i");
    map.insert("2147484673".to_string(), "EOS 5DS R");
    map.insert("2147484676".to_string(), "EOS Rebel T6 / 1300D / Kiss X80");
    map.insert("2147484677".to_string(), "EOS Rebel T7i / 800D / Kiss X9i");
    map.insert("2147484678".to_string(), "EOS 6D Mark II");
    map.insert("2147484680".to_string(), "EOS 77D / 9000D");
    map.insert("2147484695".to_string(), "EOS Rebel SL2 / 200D / Kiss X9");
    map.insert("2147484705".to_string(), "EOS R5");
    map.insert("2147484706".to_string(), "EOS Rebel T100 / 4000D / 3000D");
    map.insert("2147484708".to_string(), "EOS R");
    map.insert("2147484712".to_string(), "EOS-1D X Mark III");
    map.insert(
        "2147484722".to_string(),
        "EOS Rebel T7 / 2000D / 1500D / Kiss X90",
    );
    map.insert("2147484723".to_string(), "EOS RP");
    map.insert("2147484725".to_string(), "EOS Rebel T8i / 850D / X10i");
    map.insert("2147484726".to_string(), "EOS SL3 / 250D / Kiss X10");
    map.insert("2147484727".to_string(), "EOS 90D");
    map.insert("2147484752".to_string(), "EOS R3");
    map.insert("2147484755".to_string(), "EOS R6");
    map.insert("2147484772".to_string(), "EOS R7");
    map.insert("2147484773".to_string(), "EOS R10");
    map.insert("2147484775".to_string(), "PowerShot ZOOM");
    map.insert("2147484776".to_string(), "EOS M50 Mark II / Kiss M2");
    map.insert("2147484800".to_string(), "EOS R50");
    map.insert("2147484801".to_string(), "EOS R6 Mark II");
    map.insert("2147484807".to_string(), "EOS R8");
    map.insert("2147484817".to_string(), "PowerShot V10");
    map.insert("2147484821".to_string(), "EOS R1");
    map.insert("2147484822".to_string(), "R5 Mark II");
    map.insert("2147484824".to_string(), "EOS R100");
    map.insert("2147484950".to_string(), "EOS R50 V");
    map.insert("2147484960".to_string(), "EOS D2000C");
    map.insert("2147485024".to_string(), "EOS D6000C");
    map.insert("21561344".to_string(), "PowerShot A85");
    map.insert(
        "22151168".to_string(),
        "PowerShot S410 / Digital IXUS 430 / IXY Digital 450",
    );
    map.insert("22216704".to_string(), "PowerShot A95");
    map.insert(
        "22282240".to_string(),
        "PowerShot SD300 / Digital IXUS 40 / IXY Digital 50",
    );
    map.insert(
        "22347776".to_string(),
        "PowerShot SD200 / Digital IXUS 30 / IXY Digital 40",
    );
    map.insert("22413312".to_string(), "PowerShot A520");
    map.insert("22478848".to_string(), "PowerShot A510");
    map.insert(
        "22609920".to_string(),
        "PowerShot SD20 / Digital IXUS i5 / IXY Digital L2",
    );
    map.insert("23330816".to_string(), "PowerShot S2 IS");
    map.insert(
        "23396352".to_string(),
        "PowerShot SD430 / Digital IXUS Wireless / IXY Digital Wireless",
    );
    map.insert(
        "23461888".to_string(),
        "PowerShot SD500 / Digital IXUS 700 / IXY Digital 600",
    );
    map.insert("23494656".to_string(), "EOS D60");
    map.insert(
        "24117248".to_string(),
        "PowerShot SD30 / Digital IXUS i Zoom / IXY Digital L3",
    );
    map.insert("24379392".to_string(), "PowerShot A430");
    map.insert("24444928".to_string(), "PowerShot A410");
    map.insert("24510464".to_string(), "PowerShot S80");
    map.insert("24641536".to_string(), "PowerShot A620");
    map.insert("24707072".to_string(), "PowerShot A610");
    map.insert(
        "25165824".to_string(),
        "PowerShot SD630 / Digital IXUS 65 / IXY Digital 80",
    );
    map.insert(
        "25231360".to_string(),
        "PowerShot SD450 / Digital IXUS 55 / IXY Digital 60",
    );
    map.insert("25296896".to_string(), "PowerShot TX1");
    map.insert(
        "25624576".to_string(),
        "PowerShot SD400 / Digital IXUS 50 / IXY Digital 55",
    );
    map.insert("25690112".to_string(), "PowerShot A420");
    map.insert(
        "25755648".to_string(),
        "PowerShot SD900 / Digital IXUS 900 Ti / IXY Digital 1000",
    );
    map.insert(
        "26214400".to_string(),
        "PowerShot SD550 / Digital IXUS 750 / IXY Digital 700",
    );
    map.insert("26345472".to_string(), "PowerShot A700");
    map.insert(
        "26476544".to_string(),
        "PowerShot SD700 IS / Digital IXUS 800 IS / IXY Digital 800 IS",
    );
    map.insert("26542080".to_string(), "PowerShot S3 IS");
    map.insert("26607616".to_string(), "PowerShot A540");
    map.insert(
        "26673152".to_string(),
        "PowerShot SD600 / Digital IXUS 60 / IXY Digital 70",
    );
    map.insert("26738688".to_string(), "PowerShot G7");
    map.insert("26804224".to_string(), "PowerShot A530");
    map.insert(
        "33554432".to_string(),
        "PowerShot SD800 IS / Digital IXUS 850 IS / IXY Digital 900 IS",
    );
    map.insert(
        "33619968".to_string(),
        "PowerShot SD40 / Digital IXUS i7 / IXY Digital L4",
    );
    map.insert("33685504".to_string(), "PowerShot A710 IS");
    map.insert("33751040".to_string(), "PowerShot A640");
    map.insert("33816576".to_string(), "PowerShot A630");
    map.insert("34144256".to_string(), "PowerShot S5 IS");
    map.insert("34603008".to_string(), "PowerShot A460");
    map.insert(
        "34734080".to_string(),
        "PowerShot SD850 IS / Digital IXUS 950 IS / IXY Digital 810 IS",
    );
    map.insert("34799616".to_string(), "PowerShot A570 IS");
    map.insert("34865152".to_string(), "PowerShot A560");
    map.insert(
        "34930688".to_string(),
        "PowerShot SD750 / Digital IXUS 75 / IXY Digital 90",
    );
    map.insert(
        "34996224".to_string(),
        "PowerShot SD1000 / Digital IXUS 70 / IXY Digital 10",
    );
    map.insert("35127296".to_string(), "PowerShot A550");
    map.insert("35192832".to_string(), "PowerShot A450");
    map.insert("35848192".to_string(), "PowerShot G9");
    map.insert("35913728".to_string(), "PowerShot A650 IS");
    map.insert("36044800".to_string(), "PowerShot A720 IS");
    map.insert("36241408".to_string(), "PowerShot SX100 IS");
    map.insert(
        "36700160".to_string(),
        "PowerShot SD950 IS / Digital IXUS 960 IS / IXY Digital 2000 IS",
    );
    map.insert(
        "36765696".to_string(),
        "PowerShot SD870 IS / Digital IXUS 860 IS / IXY Digital 910 IS",
    );
    map.insert(
        "36831232".to_string(),
        "PowerShot SD890 IS / Digital IXUS 970 IS / IXY Digital 820 IS",
    );
    map.insert(
        "37093376".to_string(),
        "PowerShot SD790 IS / Digital IXUS 90 IS / IXY Digital 95 IS",
    );
    map.insert(
        "37158912".to_string(),
        "PowerShot SD770 IS / Digital IXUS 85 IS / IXY Digital 25 IS",
    );
    map.insert("37224448".to_string(), "PowerShot A590 IS");
    map.insert("37289984".to_string(), "PowerShot A580");
    map.insert("37879808".to_string(), "PowerShot A470");
    map.insert(
        "37945344".to_string(),
        "PowerShot SD1100 IS / Digital IXUS 80 IS / IXY Digital 20 IS",
    );
    map.insert("38141952".to_string(), "PowerShot SX1 IS");
    map.insert("38207488".to_string(), "PowerShot SX10 IS");
    map.insert("38273024".to_string(), "PowerShot A1000 IS");
    map.insert("38338560".to_string(), "PowerShot G10");
    map.insert("38862848".to_string(), "PowerShot A2000 IS");
    map.insert("38928384".to_string(), "PowerShot SX110 IS");
    map.insert(
        "38993920".to_string(),
        "PowerShot SD990 IS / Digital IXUS 980 IS / IXY Digital 3000 IS",
    );
    map.insert(
        "39059456".to_string(),
        "PowerShot SD880 IS / Digital IXUS 870 IS / IXY Digital 920 IS",
    );
    map.insert("39124992".to_string(), "PowerShot E1");
    map.insert("39190528".to_string(), "PowerShot D10");
    map.insert(
        "39256064".to_string(),
        "PowerShot SD960 IS / Digital IXUS 110 IS / IXY Digital 510 IS",
    );
    map.insert("39321600".to_string(), "PowerShot A2100 IS");
    map.insert("39387136".to_string(), "PowerShot A480");
    map.insert("39845888".to_string(), "PowerShot SX200 IS");
    map.insert(
        "39911424".to_string(),
        "PowerShot SD970 IS / Digital IXUS 990 IS / IXY Digital 830 IS",
    );
    map.insert(
        "39976960".to_string(),
        "PowerShot SD780 IS / Digital IXUS 100 IS / IXY Digital 210 IS",
    );
    map.insert("40042496".to_string(), "PowerShot A1100 IS");
    map.insert(
        "40108032".to_string(),
        "PowerShot SD1200 IS / Digital IXUS 95 IS / IXY Digital 110 IS",
    );
    map.insert("40894464".to_string(), "PowerShot G11");
    map.insert("40960000".to_string(), "PowerShot SX120 IS");
    map.insert("41025536".to_string(), "PowerShot S90");
    map.insert("41222144".to_string(), "PowerShot SX20 IS");
    map.insert(
        "41287680".to_string(),
        "PowerShot SD980 IS / Digital IXUS 200 IS / IXY Digital 930 IS",
    );
    map.insert(
        "41353216".to_string(),
        "PowerShot SD940 IS / Digital IXUS 120 IS / IXY Digital 220 IS",
    );
    map.insert("41943040".to_string(), "PowerShot A495");
    map.insert("42008576".to_string(), "PowerShot A490");
    map.insert("42074112".to_string(), "PowerShot A3100/A3150 IS");
    map.insert("42139648".to_string(), "PowerShot A3000 IS");
    map.insert(
        "42205184".to_string(),
        "PowerShot SD1400 IS / IXUS 130 / IXY 400F",
    );
    map.insert(
        "42270720".to_string(),
        "PowerShot SD1300 IS / IXUS 105 / IXY 200F",
    );
    map.insert(
        "42336256".to_string(),
        "PowerShot SD3500 IS / IXUS 210 / IXY 10S",
    );
    map.insert("42401792".to_string(), "PowerShot SX210 IS");
    map.insert(
        "42467328".to_string(),
        "PowerShot SD4000 IS / IXUS 300 HS / IXY 30S",
    );
    map.insert(
        "42532864".to_string(),
        "PowerShot SD4500 IS / IXUS 1000 HS / IXY 50S",
    );
    map.insert("43122688".to_string(), "PowerShot G12");
    map.insert("43188224".to_string(), "PowerShot SX30 IS");
    map.insert("43253760".to_string(), "PowerShot SX130 IS");
    map.insert("43319296".to_string(), "PowerShot S95");
    map.insert("43515904".to_string(), "PowerShot A3300 IS");
    map.insert("43581440".to_string(), "PowerShot A3200 IS");
    map.insert(
        "50331648".to_string(),
        "PowerShot ELPH 500 HS / IXUS 310 HS / IXY 31S",
    );
    map.insert("50397184".to_string(), "PowerShot Pro90 IS");
    map.insert("50397185".to_string(), "PowerShot A800");
    map.insert(
        "50462720".to_string(),
        "PowerShot ELPH 100 HS / IXUS 115 HS / IXY 210F",
    );
    map.insert("50528256".to_string(), "PowerShot SX230 HS");
    map.insert(
        "50593792".to_string(),
        "PowerShot ELPH 300 HS / IXUS 220 HS / IXY 410F",
    );
    map.insert("50659328".to_string(), "PowerShot A2200");
    map.insert("50724864".to_string(), "PowerShot A1200");
    map.insert("50790400".to_string(), "PowerShot SX220 HS");
    map.insert("50855936".to_string(), "PowerShot G1 X");
    map.insert("50921472".to_string(), "PowerShot SX150 IS");
    map.insert(
        "51380224".to_string(),
        "PowerShot ELPH 510 HS / IXUS 1100 HS / IXY 51S",
    );
    map.insert("51445760".to_string(), "PowerShot S100 (new)");
    map.insert(
        "51511296".to_string(),
        "PowerShot ELPH 310 HS / IXUS 230 HS / IXY 600F",
    );
    map.insert("51576832".to_string(), "PowerShot SX40 HS");
    map.insert("51642368".to_string(), "IXY 32S");
    map.insert("51773440".to_string(), "PowerShot A1300");
    map.insert("51838976".to_string(), "PowerShot A810");
    map.insert(
        "51904512".to_string(),
        "PowerShot ELPH 320 HS / IXUS 240 HS / IXY 420F",
    );
    map.insert(
        "51970048".to_string(),
        "PowerShot ELPH 110 HS / IXUS 125 HS / IXY 220F",
    );
    map.insert("52428800".to_string(), "PowerShot D20");
    map.insert("52494336".to_string(), "PowerShot A4000 IS");
    map.insert("52559872".to_string(), "PowerShot SX260 HS");
    map.insert("52625408".to_string(), "PowerShot SX240 HS");
    map.insert(
        "52690944".to_string(),
        "PowerShot ELPH 530 HS / IXUS 510 HS / IXY 1",
    );
    map.insert(
        "52756480".to_string(),
        "PowerShot ELPH 520 HS / IXUS 500 HS / IXY 3",
    );
    map.insert("52822016".to_string(), "PowerShot A3400 IS");
    map.insert("52887552".to_string(), "PowerShot A2400 IS");
    map.insert("52953088".to_string(), "PowerShot A2300");
    map.insert("53608448".to_string(), "PowerShot S100V");
    map.insert("53673984".to_string(), "PowerShot G15");
    map.insert("53739520".to_string(), "PowerShot SX50 HS");
    map.insert("53805056".to_string(), "PowerShot SX160 IS");
    map.insert("53870592".to_string(), "PowerShot S110 (new)");
    map.insert("53936128".to_string(), "PowerShot SX500 IS");
    map.insert("54001664".to_string(), "PowerShot N");
    map.insert("54067200".to_string(), "IXUS 245 HS / IXY 430F");
    map.insert("54525952".to_string(), "PowerShot SX280 HS");
    map.insert("54591488".to_string(), "PowerShot SX270 HS");
    map.insert("54657024".to_string(), "PowerShot A3500 IS");
    map.insert("54722560".to_string(), "PowerShot A2600");
    map.insert("54788096".to_string(), "PowerShot SX275 HS");
    map.insert("54853632".to_string(), "PowerShot A1400");
    map.insert(
        "54919168".to_string(),
        "PowerShot ELPH 130 IS / IXUS 140 / IXY 110F",
    );
    map.insert(
        "54984704".to_string(),
        "PowerShot ELPH 115/120 IS / IXUS 132/135 / IXY 90F/100F",
    );
    map.insert(
        "55115776".to_string(),
        "PowerShot ELPH 330 HS / IXUS 255 HS / IXY 610F",
    );
    map.insert("55640064".to_string(), "PowerShot A2500");
    map.insert("55836672".to_string(), "PowerShot G16");
    map.insert("55902208".to_string(), "PowerShot S120");
    map.insert("55967744".to_string(), "PowerShot SX170 IS");
    map.insert("56098816".to_string(), "PowerShot SX510 HS");
    map.insert("56164352".to_string(), "PowerShot S200 (new)");
    map.insert("56623104".to_string(), "IXY 620F");
    map.insert("56688640".to_string(), "PowerShot N100");
    map.insert("56885248".to_string(), "PowerShot G1 X Mark II");
    map.insert("56950784".to_string(), "PowerShot D30");
    map.insert("57016320".to_string(), "PowerShot SX700 HS");
    map.insert("57081856".to_string(), "PowerShot SX600 HS");
    map.insert(
        "57147392".to_string(),
        "PowerShot ELPH 140 IS / IXUS 150 / IXY 130",
    );
    map.insert(
        "57212928".to_string(),
        "PowerShot ELPH 135 / IXUS 145 / IXY 120",
    );
    map.insert(
        "57671680".to_string(),
        "PowerShot ELPH 340 HS / IXUS 265 HS / IXY 630",
    );
    map.insert(
        "57737216".to_string(),
        "PowerShot ELPH 150 IS / IXUS 155 / IXY 140",
    );
    map.insert("57933824".to_string(), "EOS M3");
    map.insert("57999360".to_string(), "PowerShot SX60 HS");
    map.insert("58064896".to_string(), "PowerShot SX520 HS");
    map.insert("58130432".to_string(), "PowerShot SX400 IS");
    map.insert("58195968".to_string(), "PowerShot G7 X");
    map.insert("58261504".to_string(), "PowerShot N2");
    map.insert("58720256".to_string(), "PowerShot SX530 HS");
    map.insert("58851328".to_string(), "PowerShot SX710 HS");
    map.insert("58916864".to_string(), "PowerShot SX610 HS");
    map.insert("58982400".to_string(), "EOS M10");
    map.insert("59047936".to_string(), "PowerShot G3 X");
    map.insert(
        "59113472".to_string(),
        "PowerShot ELPH 165 HS / IXUS 165 / IXY 160",
    );
    map.insert("59179008".to_string(), "PowerShot ELPH 160 / IXUS 160");
    map.insert(
        "59244544".to_string(),
        "PowerShot ELPH 350 HS / IXUS 275 HS / IXY 640",
    );
    map.insert("59310080".to_string(), "PowerShot ELPH 170 IS / IXUS 170");
    map.insert("59834368".to_string(), "PowerShot SX410 IS");
    map.insert("59965440".to_string(), "PowerShot G9 X");
    map.insert("60030976".to_string(), "EOS M5");
    map.insert("60096512".to_string(), "PowerShot G5 X");
    map.insert("60227584".to_string(), "PowerShot G7 X Mark II");
    map.insert("60293120".to_string(), "EOS M100");
    map.insert(
        "60358656".to_string(),
        "PowerShot ELPH 360 HS / IXUS 285 HS / IXY 650",
    );
    map.insert("67174400".to_string(), "PowerShot SX540 HS");
    map.insert("67239936".to_string(), "PowerShot SX420 IS");
    map.insert(
        "67305472".to_string(),
        "PowerShot ELPH 190 IS / IXUS 180 / IXY 190",
    );
    map.insert("67371008".to_string(), "PowerShot G1");
    map.insert(
        "67371009".to_string(),
        "PowerShot ELPH 180 IS / IXUS 175 / IXY 180",
    );
    map.insert("67436544".to_string(), "PowerShot SX720 HS");
    map.insert("67502080".to_string(), "PowerShot SX620 HS");
    map.insert("67567616".to_string(), "EOS M6");
    map.insert("68157440".to_string(), "PowerShot G9 X Mark II");
    map.insert(
        "68485120".to_string(),
        "PowerShot ELPH 185 / IXUS 185 / IXY 200",
    );
    map.insert("68550656".to_string(), "PowerShot SX430 IS");
    map.insert("68616192".to_string(), "PowerShot SX730 HS");
    map.insert("68681728".to_string(), "PowerShot G1 X Mark III");
    map
});

static PRINT_CONV_38: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "sRGB");
    map.insert("2".to_string(), "Adobe RGB");
    map.insert("65535".to_string(), "n/a");
    map
});

static PRINT_CONV_39: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("2415919104".to_string(), "Format 1");
    map.insert("2684354560".to_string(), "Format 2");
    map
});

static PRINT_CONV_40: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On (1)");
    map.insert("2".to_string(), "On (2)");
    map
});

static PRINT_CONV_41: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "(none)");
    map
});

static PRINT_CONV_42: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-559038737".to_string(), "n/a");
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Yellow");
    map.insert("2".to_string(), "Orange");
    map.insert("3".to_string(), "Red");
    map.insert("4".to_string(), "Green");
    map
});

static PRINT_CONV_43: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-559038737".to_string(), "n/a");
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Sepia");
    map.insert("2".to_string(), "Blue");
    map.insert("3".to_string(), "Purple");
    map.insert("4".to_string(), "Green");
    map
});

static PRINT_CONV_44: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-559038737".to_string(), "n/a");
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Yellow");
    map.insert("2".to_string(), "Orange");
    map.insert("3".to_string(), "Red");
    map.insert("4".to_string(), "Green");
    map
});

static PRINT_CONV_45: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-559038737".to_string(), "n/a");
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Sepia");
    map.insert("2".to_string(), "Blue");
    map.insert("3".to_string(), "Purple");
    map.insert("4".to_string(), "Green");
    map
});

static PRINT_CONV_46: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-559038737".to_string(), "n/a");
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Yellow");
    map.insert("2".to_string(), "Orange");
    map.insert("3".to_string(), "Red");
    map.insert("4".to_string(), "Green");
    map
});

static PRINT_CONV_47: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-559038737".to_string(), "n/a");
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Sepia");
    map.insert("2".to_string(), "Blue");
    map.insert("3".to_string(), "Purple");
    map.insert("4".to_string(), "Green");
    map
});

static PRINT_CONV_48: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-559038737".to_string(), "n/a");
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Yellow");
    map.insert("2".to_string(), "Orange");
    map.insert("3".to_string(), "Red");
    map.insert("4".to_string(), "Green");
    map
});

static PRINT_CONV_49: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-559038737".to_string(), "n/a");
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Sepia");
    map.insert("2".to_string(), "Blue");
    map.insert("3".to_string(), "Purple");
    map.insert("4".to_string(), "Green");
    map
});

static PRINT_CONV_50: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("129".to_string(), "Standard");
    map.insert("130".to_string(), "Portrait");
    map.insert("131".to_string(), "Landscape");
    map.insert("132".to_string(), "Neutral");
    map.insert("133".to_string(), "Faithful");
    map.insert("134".to_string(), "Monochrome");
    map.insert("135".to_string(), "Auto");
    map.insert("65".to_string(), "PC 1");
    map.insert("66".to_string(), "PC 2");
    map.insert("67".to_string(), "PC 3");
    map
});

static PRINT_CONV_51: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("129".to_string(), "Standard");
    map.insert("130".to_string(), "Portrait");
    map.insert("131".to_string(), "Landscape");
    map.insert("132".to_string(), "Neutral");
    map.insert("133".to_string(), "Faithful");
    map.insert("134".to_string(), "Monochrome");
    map.insert("135".to_string(), "Auto");
    map.insert("65".to_string(), "PC 1");
    map.insert("66".to_string(), "PC 2");
    map.insert("67".to_string(), "PC 3");
    map
});

static PRINT_CONV_52: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("129".to_string(), "Standard");
    map.insert("130".to_string(), "Portrait");
    map.insert("131".to_string(), "Landscape");
    map.insert("132".to_string(), "Neutral");
    map.insert("133".to_string(), "Faithful");
    map.insert("134".to_string(), "Monochrome");
    map.insert("135".to_string(), "Auto");
    map.insert("65".to_string(), "PC 1");
    map.insert("66".to_string(), "PC 2");
    map.insert("67".to_string(), "PC 3");
    map
});

static PRINT_CONV_53: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Continue Focus Search");
    map.insert("1".to_string(), "Stop Focus Search");
    map
});

static PRINT_CONV_54: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "M-Fn Button");
    map.insert("1".to_string(), "Main Dial");
    map
});

static PRINT_CONV_55: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Same for Vert/Horiz Points");
    map.insert("1".to_string(), "Separate Vert/Horiz Points");
    map.insert("2".to_string(), "Separate Area+Points");
    map
});

static PRINT_CONV_56: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Stops at AF Area Edges");
    map.insert("1".to_string(), "Continuous");
    map
});

static PRINT_CONV_57: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Selected (constant)");
    map.insert("1".to_string(), "All (constant)");
    map.insert("2".to_string(), "Selected (pre-AF, focused)");
    map.insert("3".to_string(), "Selected (focused)");
    map.insert("4".to_string(), "Disabled");
    map
});

static PRINT_CONV_58: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Enable");
    map.insert("2".to_string(), "Disable");
    map
});

static PRINT_CONV_59: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Show in Field of View");
    map.insert("1".to_string(), "Show Outside View");
    map
});

static PRINT_CONV_60: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Initial AF Point Selected");
    map.insert("1".to_string(), "Manual AF Point");
    map.insert("2".to_string(), "Auto");
    map
});

static PRINT_CONV_61: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "People");
    map.insert("2".to_string(), "Animals");
    map.insert("3".to_string(), "Vehicles");
    map
});

static PRINT_CONV_62: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

/// Get tag definitions for other category
pub fn get_other_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (11, TagKitDef {
            id: 11,
            name: "EasyMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_0),
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "DigitalZoom",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_1),
            value_conv: None,
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "Contrast",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "Saturation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (15, TagKitDef {
            id: 15,
            name: "Sharpness",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("some models use a range of -2 to +2 where 0 is normal sharpening, and\n            others use a range of 0 to 7 where 0 is no sharpening"),
            print_conv: PrintConvType::Expression("$val > 0 ? \"+$val\" : $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (16, TagKitDef {
            id: 16,
            name: "CameraISO",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("Image::ExifTool::Canon::CameraISO($val)"),
            subdirectory: None,
        }),
        (17, TagKitDef {
            id: 17,
            name: "MeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_2),
            value_conv: None,
            subdirectory: None,
        }),
        (18, TagKitDef {
            id: 18,
            name: "FocusRange",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_3),
            value_conv: None,
            subdirectory: None,
        }),
        (19, TagKitDef {
            id: 19,
            name: "AFPoint",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_4),
            value_conv: None,
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "CanonExposureMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_5),
            value_conv: None,
            subdirectory: None,
        }),
        (22, TagKitDef {
            id: 22,
            name: "LensType",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("this value is incorrect for EOS 7D images with lenses of type 256 or greater"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_6),
            value_conv: None,
            subdirectory: None,
        }),
        (23, TagKitDef {
            id: 23,
            name: "MaxFocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val mm\""),
            value_conv: Some("$val / ($$self{FocalUnits} || 1)"),
            subdirectory: None,
        }),
        (24, TagKitDef {
            id: 24,
            name: "MinFocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val mm\""),
            value_conv: Some("$val / ($$self{FocalUnits} || 1)"),
            subdirectory: None,
        }),
        (25, TagKitDef {
            id: 25,
            name: "FocalUnits",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val/mm\""),
            value_conv: None,
            subdirectory: None,
        }),
        (26, TagKitDef {
            id: 26,
            name: "MaxAperture",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.2g\",$val)"),
            value_conv: Some("exp(Image::ExifTool::Canon::CanonEv($val)*log(2)/2)"),
            subdirectory: None,
        }),
        (27, TagKitDef {
            id: 27,
            name: "MinAperture",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.2g\",$val)"),
            value_conv: Some("exp(Image::ExifTool::Canon::CanonEv($val)*log(2)/2)"),
            subdirectory: None,
        }),
        (28, TagKitDef {
            id: 28,
            name: "FlashActivity",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (29, TagKitDef {
            id: 29,
            name: "FlashBits",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_7),
            value_conv: None,
            subdirectory: None,
        }),
        (32, TagKitDef {
            id: 32,
            name: "FocusContinuous",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_8),
            value_conv: None,
            subdirectory: None,
        }),
        (33, TagKitDef {
            id: 33,
            name: "AESetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_9),
            value_conv: None,
            subdirectory: None,
        }),
        (34, TagKitDef {
            id: 34,
            name: "ImageStabilization",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_10),
            value_conv: None,
            subdirectory: None,
        }),
        (35, TagKitDef {
            id: 35,
            name: "DisplayAperture",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val / 10"),
            subdirectory: None,
        }),
        (39, TagKitDef {
            id: 39,
            name: "SpotMeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_11),
            value_conv: None,
            subdirectory: None,
        }),
        (40, TagKitDef {
            id: 40,
            name: "PhotoEffect",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_12),
            value_conv: None,
            subdirectory: None,
        }),
        (41, TagKitDef {
            id: 41,
            name: "ManualFlashOutput",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_13),
            value_conv: None,
            subdirectory: None,
        }),
        (42, TagKitDef {
            id: 42,
            name: "ColorTone",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (46, TagKitDef {
            id: 46,
            name: "SRAWQuality",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_14),
            value_conv: None,
            subdirectory: None,
        }),
        (51, TagKitDef {
            id: 51,
            name: "Clarity",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (52, TagKitDef {
            id: 52,
            name: "HDR-PQ",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_15),
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "CameraTemperature",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("newer EOS models only"),
            print_conv: PrintConvType::Expression("\"$val C\""),
            value_conv: Some("$val - 128"),
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "FlashGuideNumber",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val / 32"),
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "AFPointsInFocus",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("used by D30, D60 and some PowerShot/Ixus models"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_16),
            value_conv: None,
            subdirectory: None,
        }),
        (15, TagKitDef {
            id: 15,
            name: "FlashExposureComp",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("Image::ExifTool::Canon::CanonEv($val)"),
            subdirectory: None,
        }),
        (16, TagKitDef {
            id: 16,
            name: "AutoExposureBracketing",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_17),
            value_conv: None,
            subdirectory: None,
        }),
        (17, TagKitDef {
            id: 17,
            name: "AEBBracketValue",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("Image::ExifTool::Canon::CanonEv($val)"),
            subdirectory: None,
        }),
        (18, TagKitDef {
            id: 18,
            name: "ControlMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_18),
            value_conv: None,
            subdirectory: None,
        }),
        (19, TagKitDef {
            id: 19,
            name: "FocusDistanceUpper",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("FocusDistance tags are only extracted if FocusDistanceUpper is non-zero"),
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("$val / 100"),
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "FocusDistanceLower",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("$val / 100"),
            subdirectory: None,
        }),
        (21, TagKitDef {
            id: 21,
            name: "FNumber",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.2g\",$val)"),
            value_conv: Some("exp(Image::ExifTool::Canon::CanonEv($val)*log(2)/2)"),
            subdirectory: None,
        }),
        (23, TagKitDef {
            id: 23,
            name: "MeasuredEV2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val / 8 - 6"),
            subdirectory: None,
        }),
        (24, TagKitDef {
            id: 24,
            name: "BulbDuration",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val / 10"),
            subdirectory: None,
        }),
        (26, TagKitDef {
            id: 26,
            name: "CameraType",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_19),
            value_conv: None,
            subdirectory: None,
        }),
        (27, TagKitDef {
            id: 27,
            name: "AutoRotate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_20),
            value_conv: None,
            subdirectory: None,
        }),
        (28, TagKitDef {
            id: 28,
            name: "NDFilter",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_21),
            value_conv: None,
            subdirectory: None,
        }),
        (33, TagKitDef {
            id: 33,
            name: "FlashOutput",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("used only for PowerShot models, this has a maximum value of 500 for models\n            like the A570IS"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "FocalType",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_22),
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "FilterEffect",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_23),
            value_conv: None,
            subdirectory: None,
        }),
        (15, TagKitDef {
            id: 15,
            name: "ToningEffect",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_24),
            value_conv: None,
            subdirectory: None,
        }),
        (16, TagKitDef {
            id: 16,
            name: "MacroMagnification",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("currently decoded only for the MP-E 65mm f/2.8 1-5x Macro Photo, and not\n            valid for all camera models"),
            print_conv: PrintConvType::Expression("sprintf(\"%.1fx\",$val)"),
            value_conv: Some("exp((75-$val) * log(2) * 3 / 40)"),
            subdirectory: None,
        }),
        (19, TagKitDef {
            id: 19,
            name: "LiveViewShooting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_25),
            value_conv: None,
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "FocusDistanceUpper",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("$val / 100"),
            subdirectory: None,
        }),
        (21, TagKitDef {
            id: 21,
            name: "FocusDistanceLower",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("$val / 100"),
            subdirectory: None,
        }),
        (23, TagKitDef {
            id: 23,
            name: "ShutterMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_26),
            value_conv: None,
            subdirectory: None,
        }),
        (25, TagKitDef {
            id: 25,
            name: "FlashExposureLock",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_27),
            value_conv: None,
            subdirectory: None,
        }),
        (32, TagKitDef {
            id: 32,
            name: "AntiFlicker",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_28),
            value_conv: None,
            subdirectory: None,
        }),
        (61, TagKitDef {
            id: 61,
            name: "RFLensType",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_29),
            value_conv: None,
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "LensType",
            format: "int16uRev",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_30),
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "MinFocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val mm\""),
            value_conv: None,
            subdirectory: None,
        }),
        (16, TagKitDef {
            id: 16,
            name: "MaxFocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val mm\""),
            value_conv: None,
            subdirectory: None,
        }),
        (65, TagKitDef {
            id: 65,
            name: "SharpnessFrequency",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("1D only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_31),
            value_conv: None,
            subdirectory: None,
        }),
        (66, TagKitDef {
            id: 66,
            name: "Sharpness",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: Some("1D only"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (68, TagKitDef {
            id: 68,
            name: "WhiteBalance",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("1D only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_32),
            value_conv: None,
            subdirectory: None,
        }),
        (71, TagKitDef {
            id: 71,
            name: "SharpnessFrequency",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("1DS only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_33),
            value_conv: None,
            subdirectory: None,
        }),
        (72, TagKitDef {
            id: 72,
            name: "ColorTemperature",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("1D only"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (72, TagKitDef {
            id: 72,
            name: "Sharpness",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: Some("1DS only"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (74, TagKitDef {
            id: 74,
            name: "WhiteBalance",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("1DS only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_34),
            value_conv: None,
            subdirectory: None,
        }),
        (75, TagKitDef {
            id: 75,
            name: "PictureStyle",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("1D only, called 'Color Matrix' in owner's manual"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_35),
            value_conv: None,
            subdirectory: None,
        }),
        (78, TagKitDef {
            id: 78,
            name: "ColorTemperature",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("1DS only"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (81, TagKitDef {
            id: 81,
            name: "PictureStyle",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("1DS only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_36),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "NumAFPoints",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (11, TagKitDef {
            id: 11,
            name: "PrimaryAFPoint",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (11, TagKitDef {
            id: 11,
            name: "Canon_AFInfo_0x000b",
            format: "int16u[8]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AFInfoSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (11, TagKitDef {
            id: 11,
            name: "AFAreaYPositions",
            format: "int16s[$val{2}]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "AFPointsInFocus",
            format: "int16s[int(($val{2}+15)/16)]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "AFPointsSelected",
            format: "int16s[int(($val{2}+15)/16)]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "Canon_AFInfo2_0x000d",
            format: "int16s[int(($val{2}+15)/16)+1]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "PrimaryAFPoint",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "SerialNumber",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.4x%.5d\",$val>>16,$val&0xffff)"),
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "SerialNumber",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.6u\",$val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "SerialNumber",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.10u\",$val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (129, TagKitDef {
            id: 129,
            name: "RawDataOffset",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo1D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo1DmkII",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo1DmkIIN",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo1DmkIII",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo1DmkIV",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo1DX",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo5D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo5DmkII",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo5DmkIII",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo6D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo7D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo40D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo50D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo60D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo70D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo80D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo450D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo500D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo550D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo600D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo650D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo700D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo750D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo760D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo1000D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo1100D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfo1200D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfoR6",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfoR6m2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfoG5XII",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfoPowerShot",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfoPowerShot2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfoUnknown32",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfoUnknown16",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (13, TagKitDef {
            id: 13,
            name: "CanonCameraInfoUnknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xd_subdirectory }),
        }),
        (130, TagKitDef {
            id: 130,
            name: "RawDataLength",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (131, TagKitDef {
            id: 131,
            name: "OriginalDecisionDataOffset",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "CanonFileLength",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (144, TagKitDef {
            id: 144,
            name: "CustomFunctions1D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x90_subdirectory }),
        }),
        (145, TagKitDef {
            id: 145,
            name: "PersonalFunctions",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x91_subdirectory }),
        }),
        (146, TagKitDef {
            id: 146,
            name: "PersonalFunctionValues",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x92_subdirectory }),
        }),
        (147, TagKitDef {
            id: 147,
            name: "CanonFileInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x93_subdirectory }),
        }),
        (148, TagKitDef {
            id: 148,
            name: "AFPointsInFocus1D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("EOS 1D -- 5 rows: A1-7, B1-10, C1-11, D1-10, E1-7, center point is C6"),
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (149, TagKitDef {
            id: 149,
            name: "LensModel",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (15, TagKitDef {
            id: 15,
            name: "CustomFunctions1D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xf_subdirectory }),
        }),
        (15, TagKitDef {
            id: 15,
            name: "CustomFunctions5D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xf_subdirectory }),
        }),
        (15, TagKitDef {
            id: 15,
            name: "CustomFunctions10D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xf_subdirectory }),
        }),
        (15, TagKitDef {
            id: 15,
            name: "CustomFunctions20D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xf_subdirectory }),
        }),
        (15, TagKitDef {
            id: 15,
            name: "CustomFunctions30D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xf_subdirectory }),
        }),
        (15, TagKitDef {
            id: 15,
            name: "CustomFunctions350D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xf_subdirectory }),
        }),
        (15, TagKitDef {
            id: 15,
            name: "CustomFunctions400D",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xf_subdirectory }),
        }),
        (15, TagKitDef {
            id: 15,
            name: "CustomFunctionsD30",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xf_subdirectory }),
        }),
        (15, TagKitDef {
            id: 15,
            name: "CustomFunctionsD60",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xf_subdirectory }),
        }),
        (15, TagKitDef {
            id: 15,
            name: "CustomFunctionsUnknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xf_subdirectory }),
        }),
        (150, TagKitDef {
            id: 150,
            name: "SerialInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x96_subdirectory }),
        }),
        (150, TagKitDef {
            id: 150,
            name: "InternalSerialNumber",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val=~s/\\xff+$//; $val"),
            subdirectory: None,
        }),
        (151, TagKitDef {
            id: 151,
            name: "DustRemovalData",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (152, TagKitDef {
            id: 152,
            name: "CropInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x98_subdirectory }),
        }),
        (153, TagKitDef {
            id: 153,
            name: "CustomFunctions2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x99_subdirectory }),
        }),
        (154, TagKitDef {
            id: 154,
            name: "AspectInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x9a_subdirectory }),
        }),
        (16, TagKitDef {
            id: 16,
            name: "CanonModelID",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_37),
            value_conv: None,
            subdirectory: None,
        }),
        (160, TagKitDef {
            id: 160,
            name: "ProcessingInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xa0_subdirectory }),
        }),
        (161, TagKitDef {
            id: 161,
            name: "ToneCurveTable",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("length($val) > 64 ? \\$val : $val"),
            subdirectory: None,
        }),
        (162, TagKitDef {
            id: 162,
            name: "SharpnessTable",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("length($val) > 64 ? \\$val : $val"),
            subdirectory: None,
        }),
        (163, TagKitDef {
            id: 163,
            name: "SharpnessFreqTable",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("length($val) > 64 ? \\$val : $val"),
            subdirectory: None,
        }),
        (16385, TagKitDef {
            id: 16385,
            name: "ColorData1",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4001_subdirectory }),
        }),
        (16385, TagKitDef {
            id: 16385,
            name: "ColorData2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4001_subdirectory }),
        }),
        (16385, TagKitDef {
            id: 16385,
            name: "ColorData3",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4001_subdirectory }),
        }),
        (16385, TagKitDef {
            id: 16385,
            name: "ColorData4",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4001_subdirectory }),
        }),
        (16385, TagKitDef {
            id: 16385,
            name: "ColorData5",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4001_subdirectory }),
        }),
        (16385, TagKitDef {
            id: 16385,
            name: "ColorData6",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4001_subdirectory }),
        }),
        (16385, TagKitDef {
            id: 16385,
            name: "ColorData7",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4001_subdirectory }),
        }),
        (16385, TagKitDef {
            id: 16385,
            name: "ColorData8",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4001_subdirectory }),
        }),
        (16385, TagKitDef {
            id: 16385,
            name: "ColorData9",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4001_subdirectory }),
        }),
        (16385, TagKitDef {
            id: 16385,
            name: "ColorData10",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4001_subdirectory }),
        }),
        (16385, TagKitDef {
            id: 16385,
            name: "ColorData11",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4001_subdirectory }),
        }),
        (16385, TagKitDef {
            id: 16385,
            name: "ColorData12",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4001_subdirectory }),
        }),
        (16385, TagKitDef {
            id: 16385,
            name: "ColorDataUnknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4001_subdirectory }),
        }),
        (16386, TagKitDef {
            id: 16386,
            name: "CRWParam",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (16387, TagKitDef {
            id: 16387,
            name: "ColorInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4003_subdirectory }),
        }),
        (16389, TagKitDef {
            id: 16389,
            name: "Flavor",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("unknown 49kB block, not copied to JPEG images"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (16392, TagKitDef {
            id: 16392,
            name: "PictureStyleUserDef",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (16393, TagKitDef {
            id: 16393,
            name: "PictureStylePC",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (164, TagKitDef {
            id: 164,
            name: "WhiteBalanceTable",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("length($val) > 64 ? \\$val : $val"),
            subdirectory: None,
        }),
        (16400, TagKitDef {
            id: 16400,
            name: "CustomPictureStyleFileName",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (16403, TagKitDef {
            id: 16403,
            name: "AFMicroAdj",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4013_subdirectory }),
        }),
        (16405, TagKitDef {
            id: 16405,
            name: "VignettingCorr",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4015_subdirectory }),
        }),
        (16405, TagKitDef {
            id: 16405,
            name: "VignettingCorrUnknown1",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4015_subdirectory }),
        }),
        (16405, TagKitDef {
            id: 16405,
            name: "VignettingCorrUnknown2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4015_subdirectory }),
        }),
        (16406, TagKitDef {
            id: 16406,
            name: "VignettingCorr2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4016_subdirectory }),
        }),
        (16408, TagKitDef {
            id: 16408,
            name: "LightingOpt",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4018_subdirectory }),
        }),
        (16409, TagKitDef {
            id: 16409,
            name: "LensInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4019_subdirectory }),
        }),
        (16416, TagKitDef {
            id: 16416,
            name: "AmbienceInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4020_subdirectory }),
        }),
        (16417, TagKitDef {
            id: 16417,
            name: "MultiExp",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4021_subdirectory }),
        }),
        (16420, TagKitDef {
            id: 16420,
            name: "FilterInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4024_subdirectory }),
        }),
        (16421, TagKitDef {
            id: 16421,
            name: "HDRInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4025_subdirectory }),
        }),
        (16422, TagKitDef {
            id: 16422,
            name: "LogInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4026_subdirectory }),
        }),
        (16424, TagKitDef {
            id: 16424,
            name: "AFConfig",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4028_subdirectory }),
        }),
        (16447, TagKitDef {
            id: 16447,
            name: "RawBurstModeRoll",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x403f_subdirectory }),
        }),
        (16473, TagKitDef {
            id: 16473,
            name: "LevelInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4059_subdirectory }),
        }),
        (169, TagKitDef {
            id: 169,
            name: "ColorBalance",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xa9_subdirectory }),
        }),
        (17, TagKitDef {
            id: 17,
            name: "MovieInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x11_subdirectory }),
        }),
        (170, TagKitDef {
            id: 170,
            name: "MeasuredColor",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xaa_subdirectory }),
        }),
        (174, TagKitDef {
            id: 174,
            name: "ColorTemperature",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (176, TagKitDef {
            id: 176,
            name: "CanonFlags",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xb0_subdirectory }),
        }),
        (177, TagKitDef {
            id: 177,
            name: "ModifiedInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xb1_subdirectory }),
        }),
        (178, TagKitDef {
            id: 178,
            name: "ToneCurveMatching",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("length($val) > 64 ? \\$val : $val"),
            subdirectory: None,
        }),
        (179, TagKitDef {
            id: 179,
            name: "WhiteBalanceMatching",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("length($val) > 64 ? \\$val : $val"),
            subdirectory: None,
        }),
        (18, TagKitDef {
            id: 18,
            name: "CanonAFInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x12_subdirectory }),
        }),
        (180, TagKitDef {
            id: 180,
            name: "ColorSpace",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_38),
            value_conv: None,
            subdirectory: None,
        }),
        (182, TagKitDef {
            id: 182,
            name: "PreviewImageInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xb6_subdirectory }),
        }),
        (208, TagKitDef {
            id: 208,
            name: "VRDOffset",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("offset of VRD \"recipe data\" if it exists"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (21, TagKitDef {
            id: 21,
            name: "SerialNumberFormat",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_39),
            value_conv: None,
            subdirectory: None,
        }),
        (224, TagKitDef {
            id: 224,
            name: "SensorInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xe0_subdirectory }),
        }),
        (26, TagKitDef {
            id: 26,
            name: "SuperMacro",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_40),
            value_conv: None,
            subdirectory: None,
        }),
        (29, TagKitDef {
            id: 29,
            name: "MyColors",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x1d_subdirectory }),
        }),
        (30, TagKitDef {
            id: 30,
            name: "FirmwareRevision",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (35, TagKitDef {
            id: 35,
            name: "Categories",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("2 values: 1. always 8, 2. Categories"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_41),
            value_conv: Some("$val =~ s/^8 //; $val"),
            subdirectory: None,
        }),
        (36, TagKitDef {
            id: 36,
            name: "FaceDetect1",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x24_subdirectory }),
        }),
        (37, TagKitDef {
            id: 37,
            name: "FaceDetect2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x25_subdirectory }),
        }),
        (38, TagKitDef {
            id: 38,
            name: "CanonAFInfo2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x26_subdirectory }),
        }),
        (39, TagKitDef {
            id: 39,
            name: "ContrastInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x27_subdirectory }),
        }),
        (40, TagKitDef {
            id: 40,
            name: "ImageUniqueID",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("unpack(\"H*\", $val)"),
            subdirectory: None,
        }),
        (41, TagKitDef {
            id: 41,
            name: "WBInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x29_subdirectory }),
        }),
        (47, TagKitDef {
            id: 47,
            name: "FaceDetect3",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x2f_subdirectory }),
        }),
        (56, TagKitDef {
            id: 56,
            name: "BatteryType",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (60, TagKitDef {
            id: 60,
            name: "AFInfo3",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x3c_subdirectory }),
        }),
        (12, TagKitDef {
            id: 12,
            name: "Face3Position",
            format: "int16s[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "Face4Position",
            format: "int16s[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (16, TagKitDef {
            id: 16,
            name: "Face5Position",
            format: "int16s[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (18, TagKitDef {
            id: 18,
            name: "Face6Position",
            format: "int16s[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "Face7Position",
            format: "int16s[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (22, TagKitDef {
            id: 22,
            name: "Face8Position",
            format: "int16s[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (24, TagKitDef {
            id: 24,
            name: "Face9Position",
            format: "int16s[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (11, TagKitDef {
            id: 11,
            name: "DigitalGain",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val / 10"),
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "WBShiftAB",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("positive is a shift toward amber"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "WBShiftGM",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("positive is a shift toward green"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (11, TagKitDef {
            id: 11,
            name: "ModifiedDigitalGain",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val / 10"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ContrastStandard",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (100, TagKitDef {
            id: 100,
            name: "SharpnessFaithful",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (104, TagKitDef {
            id: 104,
            name: "SaturationFaithful",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (108, TagKitDef {
            id: 108,
            name: "ColorToneFaithful",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (112, TagKitDef {
            id: 112,
            name: "FilterEffectFaithful",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (116, TagKitDef {
            id: 116,
            name: "ToningEffectFaithful",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "ColorToneStandard",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (120, TagKitDef {
            id: 120,
            name: "ContrastMonochrome",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (124, TagKitDef {
            id: 124,
            name: "SharpnessMonochrome",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (128, TagKitDef {
            id: 128,
            name: "SaturationMonochrome",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (132, TagKitDef {
            id: 132,
            name: "ColorToneMonochrome",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (136, TagKitDef {
            id: 136,
            name: "FilterEffectMonochrome",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_42),
            value_conv: None,
            subdirectory: None,
        }),
        (140, TagKitDef {
            id: 140,
            name: "ToningEffectMonochrome",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_43),
            value_conv: None,
            subdirectory: None,
        }),
        (144, TagKitDef {
            id: 144,
            name: "ContrastUserDef1",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (148, TagKitDef {
            id: 148,
            name: "SharpnessUserDef1",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (152, TagKitDef {
            id: 152,
            name: "SaturationUserDef1",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (156, TagKitDef {
            id: 156,
            name: "ColorToneUserDef1",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (16, TagKitDef {
            id: 16,
            name: "FilterEffectStandard",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (160, TagKitDef {
            id: 160,
            name: "FilterEffectUserDef1",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_44),
            value_conv: None,
            subdirectory: None,
        }),
        (164, TagKitDef {
            id: 164,
            name: "ToningEffectUserDef1",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_45),
            value_conv: None,
            subdirectory: None,
        }),
        (168, TagKitDef {
            id: 168,
            name: "ContrastUserDef2",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (172, TagKitDef {
            id: 172,
            name: "SharpnessUserDef2",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (176, TagKitDef {
            id: 176,
            name: "SaturationUserDef2",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (180, TagKitDef {
            id: 180,
            name: "ColorToneUserDef2",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (184, TagKitDef {
            id: 184,
            name: "FilterEffectUserDef2",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_46),
            value_conv: None,
            subdirectory: None,
        }),
        (188, TagKitDef {
            id: 188,
            name: "ToningEffectUserDef2",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_47),
            value_conv: None,
            subdirectory: None,
        }),
        (192, TagKitDef {
            id: 192,
            name: "ContrastUserDef3",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (196, TagKitDef {
            id: 196,
            name: "SharpnessUserDef3",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "ToningEffectStandard",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (200, TagKitDef {
            id: 200,
            name: "SaturationUserDef3",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (204, TagKitDef {
            id: 204,
            name: "ColorToneUserDef3",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (208, TagKitDef {
            id: 208,
            name: "FilterEffectUserDef3",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_48),
            value_conv: None,
            subdirectory: None,
        }),
        (212, TagKitDef {
            id: 212,
            name: "ToningEffectUserDef3",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_49),
            value_conv: None,
            subdirectory: None,
        }),
        (216, TagKitDef {
            id: 216,
            name: "UserDef1PictureStyle",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_50),
            value_conv: None,
            subdirectory: None,
        }),
        (218, TagKitDef {
            id: 218,
            name: "UserDef2PictureStyle",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_51),
            value_conv: None,
            subdirectory: None,
        }),
        (220, TagKitDef {
            id: 220,
            name: "UserDef3PictureStyle",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_52),
            value_conv: None,
            subdirectory: None,
        }),
        (24, TagKitDef {
            id: 24,
            name: "ContrastPortrait",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (28, TagKitDef {
            id: 28,
            name: "SharpnessPortrait",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (32, TagKitDef {
            id: 32,
            name: "SaturationPortrait",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (36, TagKitDef {
            id: 36,
            name: "ColorTonePortrait",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (40, TagKitDef {
            id: 40,
            name: "FilterEffectPortrait",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (44, TagKitDef {
            id: 44,
            name: "ToningEffectPortrait",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (48, TagKitDef {
            id: 48,
            name: "ContrastLandscape",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (52, TagKitDef {
            id: 52,
            name: "SharpnessLandscape",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (56, TagKitDef {
            id: 56,
            name: "SaturationLandscape",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (60, TagKitDef {
            id: 60,
            name: "ColorToneLandscape",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (64, TagKitDef {
            id: 64,
            name: "FilterEffectLandscape",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (68, TagKitDef {
            id: 68,
            name: "ToningEffectLandscape",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (72, TagKitDef {
            id: 72,
            name: "ContrastNeutral",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (76, TagKitDef {
            id: 76,
            name: "SharpnessNeutral",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (80, TagKitDef {
            id: 80,
            name: "SaturationNeutral",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (84, TagKitDef {
            id: 84,
            name: "ColorToneNeutral",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (88, TagKitDef {
            id: 88,
            name: "FilterEffectNeutral",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (92, TagKitDef {
            id: 92,
            name: "ToningEffectNeutral",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (96, TagKitDef {
            id: 96,
            name: "ContrastFaithful",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (11, TagKitDef {
            id: 11,
            name: "LensDriveWhenAFImpossible",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_53),
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "SelectAFAreaSelectionMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "AFAreaSelectionMethod",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_54),
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "OrientationLinkedAF",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_55),
            value_conv: None,
            subdirectory: None,
        }),
        (15, TagKitDef {
            id: 15,
            name: "ManualAFPointSelPattern",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_56),
            value_conv: None,
            subdirectory: None,
        }),
        (16, TagKitDef {
            id: 16,
            name: "AFPointDisplayDuringFocus",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_57),
            value_conv: None,
            subdirectory: None,
        }),
        (17, TagKitDef {
            id: 17,
            name: "VFDisplayIllumination",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_58),
            value_conv: None,
            subdirectory: None,
        }),
        (18, TagKitDef {
            id: 18,
            name: "AFStatusViewfinder",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("1D X and R models"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_59),
            value_conv: None,
            subdirectory: None,
        }),
        (19, TagKitDef {
            id: 19,
            name: "InitialAFPointInServo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("1D X and R models"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_60),
            value_conv: None,
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "SubjectToDetect",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_61),
            value_conv: None,
            subdirectory: None,
        }),
        (24, TagKitDef {
            id: 24,
            name: "EyeDetection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_62),
            value_conv: None,
            subdirectory: None,
        }),
    ]
}
