//! Tag kits for interop category from Canon.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_2: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Macro");
    map.insert("2".to_string(), "Normal");
    map
});

static PRINT_CONV_3: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "n/a");
    map.insert("0".to_string(), "Large");
    map.insert("1".to_string(), "Medium");
    map.insert("10".to_string(), "Medium Widescreen");
    map.insert("128".to_string(), "640x480 Movie");
    map.insert("129".to_string(), "Medium Movie");
    map.insert("130".to_string(), "Small Movie");
    map.insert("137".to_string(), "1280x720 Movie");
    map.insert("14".to_string(), "Small 1");
    map.insert("142".to_string(), "1920x1080 Movie");
    map.insert("143".to_string(), "4096x2160 Movie");
    map.insert("15".to_string(), "Small 2");
    map.insert("16".to_string(), "Small 3");
    map.insert("2".to_string(), "Small");
    map.insert("5".to_string(), "Medium 1");
    map.insert("6".to_string(), "Medium 2");
    map.insert("7".to_string(), "Medium 3");
    map.insert("8".to_string(), "Postcard");
    map.insert("9".to_string(), "Widescreen");
    map
});

static PRINT_CONV_4: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "n/a");
    map.insert("1".to_string(), "Economy");
    map.insert("130".to_string(), "Light (RAW)");
    map.insert("131".to_string(), "Standard (RAW)");
    map.insert("2".to_string(), "Normal");
    map.insert("3".to_string(), "Fine");
    map.insert("4".to_string(), "RAW");
    map.insert("5".to_string(), "Superfine");
    map.insert("7".to_string(), "CRAW");
    map
});

static PRINT_CONV_5: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "n/a");
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("16".to_string(), "External flash");
    map.insert("2".to_string(), "On");
    map.insert("3".to_string(), "Red-eye reduction");
    map.insert("4".to_string(), "Slow-sync");
    map.insert("5".to_string(), "Red-eye reduction (Auto)");
    map.insert("6".to_string(), "Red-eye reduction (On)");
    map
});

static PRINT_CONV_6: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Single");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous, Silent");
    map.insert("2".to_string(), "Movie");
    map.insert("3".to_string(), "Continuous, Speed Priority");
    map.insert("4".to_string(), "Continuous, Low");
    map.insert("5".to_string(), "Continuous, High");
    map.insert("6".to_string(), "Silent Single");
    map.insert("8".to_string(), "Continuous, High+");
    map.insert("9".to_string(), "Single, Silent");
    map
});

static PRINT_CONV_7: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "One-shot AF");
    map.insert("1".to_string(), "AI Servo AF");
    map.insert("16".to_string(), "Pan Focus");
    map.insert("2".to_string(), "AI Focus AF");
    map.insert("256".to_string(), "One-shot AF (Live View)");
    map.insert("257".to_string(), "AI Servo AF (Live View)");
    map.insert("258".to_string(), "AI Focus AF (Live View)");
    map.insert("3".to_string(), "Manual Focus (3)");
    map.insert("4".to_string(), "Single");
    map.insert("5".to_string(), "Continuous");
    map.insert("512".to_string(), "Movie Snap Focus");
    map.insert("519".to_string(), "Movie Servo AF");
    map.insert("6".to_string(), "Manual Focus (6)");
    map
});

static PRINT_CONV_8: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "JPEG");
    map.insert("10".to_string(), "MP4");
    map.insert("11".to_string(), "CRM");
    map.insert("12".to_string(), "CR3");
    map.insert("13".to_string(), "CR3+JPEG");
    map.insert("14".to_string(), "HIF");
    map.insert("15".to_string(), "CR3+HIF");
    map.insert("2".to_string(), "CRW+THM");
    map.insert("3".to_string(), "AVI+THM");
    map.insert("4".to_string(), "TIF");
    map.insert("5".to_string(), "TIF+JPEG");
    map.insert("6".to_string(), "CR2");
    map.insert("7".to_string(), "CR2+JPEG");
    map.insert("9".to_string(), "MOV");
    map
});

static PRINT_CONV_9: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Daylight");
    map.insert("10".to_string(), "PC Set1");
    map.insert("11".to_string(), "PC Set2");
    map.insert("12".to_string(), "PC Set3");
    map.insert("14".to_string(), "Daylight Fluorescent");
    map.insert("15".to_string(), "Custom 1");
    map.insert("16".to_string(), "Custom 2");
    map.insert("17".to_string(), "Underwater");
    map.insert("18".to_string(), "Custom 3");
    map.insert("19".to_string(), "Custom 4");
    map.insert("2".to_string(), "Cloudy");
    map.insert("20".to_string(), "PC Set4");
    map.insert("21".to_string(), "PC Set5");
    map.insert("23".to_string(), "Auto (ambience priority)");
    map.insert("3".to_string(), "Tungsten");
    map.insert("4".to_string(), "Fluorescent");
    map.insert("5".to_string(), "Flash");
    map.insert("6".to_string(), "Custom");
    map.insert("7".to_string(), "Black & White");
    map.insert("8".to_string(), "Shade");
    map.insert("9".to_string(), "Manual Temperature (Kelvin)");
    map
});

static PRINT_CONV_10: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "n/a");
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Night Scene");
    map.insert("2".to_string(), "On");
    map.insert("3".to_string(), "None");
    map
});

static PRINT_CONV_11: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Left to Right");
    map.insert("1".to_string(), "Right to Left");
    map.insert("2".to_string(), "Bottom to Top");
    map.insert("3".to_string(), "Top to Bottom");
    map.insert("4".to_string(), "2x2 Matrix (Clockwise)");
    map
});

static PRINT_CONV_12: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "AEB");
    map.insert("2".to_string(), "FEB");
    map.insert("3".to_string(), "ISO");
    map.insert("4".to_string(), "WB");
    map
});

static PRINT_CONV_13: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "n/a");
    map.insert("1".to_string(), "Economy");
    map.insert("130".to_string(), "Light (RAW)");
    map.insert("131".to_string(), "Standard (RAW)");
    map.insert("2".to_string(), "Normal");
    map.insert("3".to_string(), "Fine");
    map.insert("4".to_string(), "RAW");
    map.insert("5".to_string(), "Superfine");
    map.insert("7".to_string(), "CRAW");
    map
});

static PRINT_CONV_14: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "n/a");
    map.insert("0".to_string(), "Large");
    map.insert("1".to_string(), "Medium");
    map.insert("10".to_string(), "Medium Widescreen");
    map.insert("128".to_string(), "640x480 Movie");
    map.insert("129".to_string(), "Medium Movie");
    map.insert("130".to_string(), "Small Movie");
    map.insert("137".to_string(), "1280x720 Movie");
    map.insert("14".to_string(), "Small 1");
    map.insert("142".to_string(), "1920x1080 Movie");
    map.insert("143".to_string(), "4096x2160 Movie");
    map.insert("15".to_string(), "Small 2");
    map.insert("16".to_string(), "Small 3");
    map.insert("2".to_string(), "Small");
    map.insert("5".to_string(), "Medium 1");
    map.insert("6".to_string(), "Medium 2");
    map.insert("7".to_string(), "Medium 3");
    map.insert("8".to_string(), "Postcard");
    map.insert("9".to_string(), "Widescreen");
    map
});

static PRINT_CONV_15: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On (1D)");
    map.insert("3".to_string(), "On");
    map.insert("4".to_string(), "Auto");
    map
});

static PRINT_CONV_16: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On (shift AB)");
    map.insert("2".to_string(), "On (shift GM)");
    map
});

static PRINT_CONV_17: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off (Manual Focus)");
    map.insert("1".to_string(), "AF Point Expansion (surround)");
    map.insert("10".to_string(), "AF Point Expansion (8 point)");
    map.insert("11".to_string(), "Flexizone Multi (49 point)");
    map.insert("12".to_string(), "Flexizone Multi (9 point)");
    map.insert("13".to_string(), "Flexizone Single");
    map.insert("14".to_string(), "Large Zone AF");
    map.insert("16".to_string(), "Large Zone AF (vertical)");
    map.insert("17".to_string(), "Large Zone AF (horizontal)");
    map.insert("19".to_string(), "Flexible Zone AF 1");
    map.insert("2".to_string(), "Single-point AF");
    map.insert("20".to_string(), "Flexible Zone AF 2");
    map.insert("21".to_string(), "Flexible Zone AF 3");
    map.insert("22".to_string(), "Whole Area AF");
    map.insert("4".to_string(), "Auto");
    map.insert("5".to_string(), "Face Detect AF");
    map.insert("6".to_string(), "Face + Tracking");
    map.insert("7".to_string(), "Zone AF");
    map.insert("8".to_string(), "AF Point Expansion (4 point)");
    map.insert("9".to_string(), "Spot AF");
    map
});

static PRINT_CONV_18: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Positive Film");
    map.insert("12".to_string(), "Vivid");
    map.insert("13".to_string(), "Neutral");
    map.insert("14".to_string(), "Sepia");
    map.insert("15".to_string(), "B&W");
    map.insert("2".to_string(), "Light Skin Tone");
    map.insert("3".to_string(), "Dark Skin Tone");
    map.insert("4".to_string(), "Vivid Blue");
    map.insert("5".to_string(), "Vivid Green");
    map.insert("6".to_string(), "Vivid Red");
    map.insert("7".to_string(), "Color Accent");
    map.insert("8".to_string(), "Color Swap");
    map.insert("9".to_string(), "Custom");
    map
});

static PRINT_CONV_19: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("60".to_string(), "On");
    map
});

static PRINT_CONV_20: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Standard");
    map.insert("1".to_string(), "Manual");
    map.insert("2".to_string(), "Custom");
    map
});

static PRINT_CONV_21: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Standard");
    map.insert("129".to_string(), "Standard");
    map.insert("130".to_string(), "Portrait");
    map.insert("131".to_string(), "Landscape");
    map.insert("132".to_string(), "Neutral");
    map.insert("133".to_string(), "Faithful");
    map.insert("134".to_string(), "Monochrome");
    map.insert("135".to_string(), "Auto");
    map.insert("136".to_string(), "Fine Detail");
    map.insert("2".to_string(), "Portrait");
    map.insert("255".to_string(), "n/a");
    map.insert("3".to_string(), "High Saturation");
    map.insert("33".to_string(), "User Def. 1");
    map.insert("34".to_string(), "User Def. 2");
    map.insert("35".to_string(), "User Def. 3");
    map.insert("4".to_string(), "Adobe RGB");
    map.insert("5".to_string(), "Low Saturation");
    map.insert("6".to_string(), "CM Set 1");
    map.insert("65".to_string(), "PC 1");
    map.insert("65535".to_string(), "n/a");
    map.insert("66".to_string(), "PC 2");
    map.insert("67".to_string(), "PC 3");
    map.insert("7".to_string(), "CM Set 2");
    map
});

static PRINT_CONV_22: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("1".to_string(), "Lowest");
    map.insert("2".to_string(), "Low");
    map.insert("3".to_string(), "Standard");
    map.insert("4".to_string(), "High");
    map.insert("5".to_string(), "Highest");
    map
});

static PRINT_CONV_23: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Daylight");
    map.insert("10".to_string(), "PC Set1");
    map.insert("11".to_string(), "PC Set2");
    map.insert("12".to_string(), "PC Set3");
    map.insert("14".to_string(), "Daylight Fluorescent");
    map.insert("15".to_string(), "Custom 1");
    map.insert("16".to_string(), "Custom 2");
    map.insert("17".to_string(), "Underwater");
    map.insert("18".to_string(), "Custom 3");
    map.insert("19".to_string(), "Custom 4");
    map.insert("2".to_string(), "Cloudy");
    map.insert("20".to_string(), "PC Set4");
    map.insert("21".to_string(), "PC Set5");
    map.insert("23".to_string(), "Auto (ambience priority)");
    map.insert("3".to_string(), "Tungsten");
    map.insert("4".to_string(), "Fluorescent");
    map.insert("5".to_string(), "Flash");
    map.insert("6".to_string(), "Custom");
    map.insert("7".to_string(), "Black & White");
    map.insert("8".to_string(), "Shade");
    map.insert("9".to_string(), "Manual Temperature (Kelvin)");
    map
});

static PRINT_CONV_24: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Standard");
    map.insert("1".to_string(), "Manual");
    map.insert("2".to_string(), "Custom");
    map
});

static PRINT_CONV_25: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "None");
    map.insert("1".to_string(), "Standard");
    map.insert("129".to_string(), "Standard");
    map.insert("130".to_string(), "Portrait");
    map.insert("131".to_string(), "Landscape");
    map.insert("132".to_string(), "Neutral");
    map.insert("133".to_string(), "Faithful");
    map.insert("134".to_string(), "Monochrome");
    map.insert("135".to_string(), "Auto");
    map.insert("136".to_string(), "Fine Detail");
    map.insert("2".to_string(), "Portrait");
    map.insert("255".to_string(), "n/a");
    map.insert("3".to_string(), "High Saturation");
    map.insert("33".to_string(), "User Def. 1");
    map.insert("34".to_string(), "User Def. 2");
    map.insert("35".to_string(), "User Def. 3");
    map.insert("4".to_string(), "Adobe RGB");
    map.insert("5".to_string(), "Low Saturation");
    map.insert("6".to_string(), "CM Set 1");
    map.insert("65".to_string(), "PC 1");
    map.insert("65535".to_string(), "n/a");
    map.insert("66".to_string(), "PC 2");
    map.insert("67".to_string(), "PC 3");
    map.insert("7".to_string(), "CM Set 2");
    map
});

static PRINT_CONV_26: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("1".to_string(), "Lowest");
    map.insert("2".to_string(), "Low");
    map.insert("3".to_string(), "Standard");
    map.insert("4".to_string(), "High");
    map.insert("5".to_string(), "Highest");
    map
});

static PRINT_CONV_27: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Daylight");
    map.insert("10".to_string(), "PC Set1");
    map.insert("11".to_string(), "PC Set2");
    map.insert("12".to_string(), "PC Set3");
    map.insert("14".to_string(), "Daylight Fluorescent");
    map.insert("15".to_string(), "Custom 1");
    map.insert("16".to_string(), "Custom 2");
    map.insert("17".to_string(), "Underwater");
    map.insert("18".to_string(), "Custom 3");
    map.insert("19".to_string(), "Custom 4");
    map.insert("2".to_string(), "Cloudy");
    map.insert("20".to_string(), "PC Set4");
    map.insert("21".to_string(), "PC Set5");
    map.insert("23".to_string(), "Auto (ambience priority)");
    map.insert("3".to_string(), "Tungsten");
    map.insert("4".to_string(), "Fluorescent");
    map.insert("5".to_string(), "Flash");
    map.insert("6".to_string(), "Custom");
    map.insert("7".to_string(), "Black & White");
    map.insert("8".to_string(), "Shade");
    map.insert("9".to_string(), "Manual Temperature (Kelvin)");
    map
});

static PRINT_CONV_28: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Standard");
    map.insert("1".to_string(), "Vivid");
    map.insert("2".to_string(), "Warm");
    map.insert("3".to_string(), "Soft");
    map.insert("4".to_string(), "Cool");
    map.insert("5".to_string(), "Intense");
    map.insert("6".to_string(), "Brighter");
    map.insert("7".to_string(), "Darker");
    map.insert("8".to_string(), "Monochrome");
    map
});

static PRINT_CONV_29: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Enable");
    map.insert("1".to_string(), "Disable");
    map
});

static PRINT_CONV_30: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Equal Priority");
    map.insert("1".to_string(), "Release Priority");
    map.insert("2".to_string(), "Focus Priority");
    map
});

static PRINT_CONV_31: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Equal Priority");
    map.insert("1".to_string(), "Release Priority");
    map.insert("2".to_string(), "Focus Priority");
    map.insert("3".to_string(), "Release High Priority");
    map.insert("4".to_string(), "Focus High Priority");
    map
});

static PRINT_CONV_32: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Disable After One-Shot");
    map.insert("1".to_string(), "One-Shot -> Enabled");
    map.insert("2".to_string(), "One-Shot -> Enabled (magnify)");
    map.insert("3".to_string(), "Disable in AF Mode");
    map
});

static PRINT_CONV_33: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Enable After AF");
    map.insert("1".to_string(), "Disable After AF");
    map.insert("2".to_string(), "Disable in AF Mode");
    map
});

static PRINT_CONV_34: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Enable");
    map.insert("1".to_string(), "Disable");
    map.insert("2".to_string(), "IR AF Assist Beam Only");
    map.insert("3".to_string(), "LED AF Assist Beam Only");
    map
});

static PRINT_CONV_35: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Focus Priority");
    map.insert("1".to_string(), "Release Priority");
    map
});

/// Get tag definitions for interop category
pub fn get_interop_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (1, TagKitDef {
            id: 1,
            name: "MacroMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_2),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "CanonImageSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_3),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "Quality",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_4),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "CanonFlashMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_5),
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "ContinuousDrive",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_6),
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "FocusMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_7),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "RecordMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_8),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "AutoISO",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("actual ISO used = BaseISO * AutoISO / 100"),
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("canon_auto_iso_value_conv"),
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "OpticalZoomCode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("for many PowerShot models, a this is 0-6 for wide-tele zoom"),
            print_conv: PrintConvType::Expression("$val == 8 ? \"n/a\" : $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "BaseISO",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("canon_base_iso_value_conv"),
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "MeasuredEV",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("this is the Canon name for what could better be called MeasuredLV, and\n            should be close to the calculated LightValue for a proper exposure with most\n            models"),
            print_conv: PrintConvType::Expression("sprintf(\"%.2f\",$val)"),
            value_conv: Some("$val / 32 + 5"),
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "TargetAperture",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.2g\",$val)"),
            value_conv: Some("exp(Image::ExifTool::Canon::CanonEv($val)*log(2)/2)"),
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "ExposureCompensation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::Exif::PrintFraction($val)"),
            value_conv: Some("Image::ExifTool::Canon::CanonEv($val)"),
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "WhiteBalance",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_9),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "SlowShutter",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_10),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "SequenceNumber",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("valid only for some models"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "FocalLength",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val mm\""),
            value_conv: Some("$val / ($$self{FocalUnits} || 1)"),
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "FocalPlaneXSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("these focal plane sizes are only valid for some models, and are affected by\n                digital zoom if applied"),
            print_conv: PrintConvType::Expression("sprintf(\"%.2f mm\",$val)"),
            value_conv: Some("$val * 25.4 / 1000"),
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "FocalPlaneXUnknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "FocalPlaneYSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.2f mm\",$val)"),
            value_conv: Some("$val * 25.4 / 1000"),
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "FocalPlaneYUnknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "PanoramaDirection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_11),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "FileNumber",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression(r"$_=$val,s/(\d+)(\d{4})/$1-$2/,$_"),
            value_conv: Some("canon_directory_number_value_conv"),
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "FileNumber",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("the location of the upper 4 bits of the directory number is a mystery for\n                the EOS 30D, so the reported directory number will be incorrect for original\n                images with a directory number of 164 or greater"),
            print_conv: PrintConvType::Expression(r"$_=$val,s/(\d+)(\d{4})/$1-$2/,$_"),
            value_conv: Some("\n                my $d = ($val & 0xffc00) >> 10;\n                # we know there are missing bits if directory number is < 100\n                $d += 0x40 while $d < 100;  # (repair the damage as best we can)\n                return $d*10000 + (($val&0x3ff)<<4) + (($val>>20)&0x0f);\n            "),
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "ShutterCount",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "ShutterCount",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("there are reports that the ShutterCount changed when loading a settings file\n                on the 1DSmkII"),
            print_conv: PrintConvType::None,
            value_conv: Some("canon_file_number_value_conv"),
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "BracketMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_12),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "RawJpgQuality",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_13),
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "RawJpgSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_14),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "LongExposureNoiseReduction2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("for some modules this gives the long exposure noise reduction applied to the\n            image, but for other models this just reflects the setting independent of\n            whether or not it was applied"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_15),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "WBBracketMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_16),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val mm\""),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "ValidAFPoints",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("number of AF points valid in the following information"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "AFPointsInFocus",
            format: "int16s[int(($val{0}+15)/16)]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::DecodeBits($val, undef, 16)"),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "CanonImageWidth",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "CanonImageHeight",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "AFImageWidth",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("size of image in AF coordinates"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "AFAreaXPositions",
            format: "int16s[$val{0}]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "AFAreaYPositions",
            format: "int16s[$val{0}]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "AFAreaMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_17),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "AFAreaXPositions",
            format: "int16s[$val{2}]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "NumAFPoints",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "ValidAFPoints",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("number of AF points valid in the following information"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "CanonImageWidth",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "CanonImageHeight",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "AFImageWidth",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("size of image in AF coordinates"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "AFAreaWidths",
            format: "int16s[$val{2}]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "AFAreaHeights",
            format: "int16s[$val{2}]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "CanonCameraSettings",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x1_subdirectory }),
        }),
        (10, TagKitDef {
            id: 10,
            name: "UnknownD30",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xa_subdirectory }),
        }),
        (2, TagKitDef {
            id: 2,
            name: "CanonFocalLength",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x2_subdirectory }),
        }),
        (3, TagKitDef {
            id: 3,
            name: "CanonFlashInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "CanonShotInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x4_subdirectory }),
        }),
        (5, TagKitDef {
            id: 5,
            name: "CanonPanorama",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x5_subdirectory }),
        }),
        (6, TagKitDef {
            id: 6,
            name: "CanonImageType",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "CanonFirmwareVersion",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "FileNumber",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression(r"$_=$val,s/(\d+)(\d{4})/$1-$2/,$_"),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "OwnerName",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "MyColorMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_18),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "Face2Position",
            format: "int16s[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "FacesDetected",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "FaceDetectFrameSize",
            format: "int16u[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "Face1Position",
            format: "int16s[2]",
            groups: HashMap::new(),
            writable: false,
            notes: Some("X-Y coordinates for the center of each face in the Face Detect frame at the\n            time of focus lock. \"0 0\" is the center, and positive X and Y are to the\n            right and downwards respectively"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "DaylightSavings",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_19),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "ToneCurve",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_20),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "PictureStyle",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_21),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "Sharpness",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("all models except the 20D and 350D"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "SharpnessFrequency",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_22),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "WhiteBalance",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_23),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "ModifiedToneCurve",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_24),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "ModifiedPictureStyle",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_25),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "ModifiedSharpness",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("1D and 5D only"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "ModifiedSharpnessFreq",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_26),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "ModifiedWhiteBalance",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_27),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "AmbienceSelection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_28),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "IntelligentContrast",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "SharpnessStandard",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "SaturationStandard",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "AFConfigTool",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"Case $val\""),
            value_conv: Some("$val + 1"),
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "AutoAFPointSelEOSiTRAF",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("only valid for some models"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_29),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "AFAccelDecelTracking",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "AIServoFirstImage",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_30),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "AIServoSecondImage",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_31),
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "USMLensElectronicMF",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("EOS R models"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_32),
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "USMLensElectronicMF",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("Other models"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_33),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "AFAssistBeam",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_34),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "OneShotAFRelease",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_35),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "SharpnessStandard",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "SaturationStandard",
            format: "int32s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "CameraColorCalibration02",
            format: "int16s[4]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%4d %4d %4d (%dK)\", split(\" \",$val))"),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "CameraColorCalibration03",
            format: "int16s[4]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%4d %4d %4d (%dK)\", split(\" \",$val))"),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "CameraColorCalibration03",
            format: "int16s[5]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%4d %4d %4d %4d (%dK)\", split(\" \",$val))"),
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "CameraColorCalibration02",
            format: "int16s[5]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%4d %4d %4d %4d (%dK)\", split(\" \",$val))"),
            value_conv: None,
            subdirectory: None,
        }),
    ]
}
