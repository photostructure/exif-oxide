//! Generated tag table definitions from Canon::ShotInfo
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{exposuretime_print_conv, print_fraction};

/// Tag definitions for Canon::ShotInfo table
pub static CANON_SHOTINFO_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            1,
            TagInfo {
                name: "AutoISO",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.0f\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression("exp($val/32*log(2))*100".to_string())),
            },
        ),
        (
            2,
            TagInfo {
                name: "BaseISO",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.0f\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression(
                    "exp($val/32*log(2))*100/32".to_string(),
                )),
            },
        ),
        (
            3,
            TagInfo {
                name: "MeasuredEV",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.2f\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression("$val / 32 + 5".to_string())),
            },
        ),
        (
            4,
            TagInfo {
                name: "TargetAperture",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.2g\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression(
                    "exp(Image::ExifTool::Canon::CanonEv($val)*log(2)/2)".to_string(),
                )),
            },
        ),
        (
            5,
            TagInfo {
                name: "TargetExposureTime",
                format: "unknown",
                print_conv: Some(PrintConv::Function(exposuretime_print_conv)),
                value_conv: Some(ValueConv::Expression(
                    "exp(-Image::ExifTool::Canon::CanonEv($val)*log(2))".to_string(),
                )),
            },
        ),
        (
            6,
            TagInfo {
                name: "ExposureCompensation",
                format: "unknown",
                print_conv: Some(PrintConv::Function(print_fraction)),
                value_conv: Some(ValueConv::Expression(
                    "Image::ExifTool::Canon::CanonEv($val)".to_string(),
                )),
            },
        ),
        (
            7,
            TagInfo {
                name: "WhiteBalance",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            8,
            TagInfo {
                name: "SlowShutter",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            9,
            TagInfo {
                name: "SequenceNumber",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            10,
            TagInfo {
                name: "OpticalZoomCode",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val == 8 ? \"n/a\" : $val".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            12,
            TagInfo {
                name: "CameraTemperature",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("\"$val C\"".to_string())),
                value_conv: Some(ValueConv::Expression("$val - 128".to_string())),
            },
        ),
        (
            13,
            TagInfo {
                name: "FlashGuideNumber",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Expression("$val / 32".to_string())),
            },
        ),
        (
            14,
            TagInfo {
                name: "AFPointsInFocus",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            15,
            TagInfo {
                name: "FlashExposureComp",
                format: "unknown",
                print_conv: Some(PrintConv::Function(print_fraction)),
                value_conv: Some(ValueConv::Expression(
                    "Image::ExifTool::Canon::CanonEv($val)".to_string(),
                )),
            },
        ),
        (
            16,
            TagInfo {
                name: "AutoExposureBracketing",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            17,
            TagInfo {
                name: "AEBBracketValue",
                format: "unknown",
                print_conv: Some(PrintConv::Function(print_fraction)),
                value_conv: Some(ValueConv::Expression(
                    "Image::ExifTool::Canon::CanonEv($val)".to_string(),
                )),
            },
        ),
        (
            18,
            TagInfo {
                name: "ControlMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            19,
            TagInfo {
                name: "FocusDistanceUpper",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "$val > 655.345 ? \"inf\" : \"$val m\"".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("$val / 100".to_string())),
            },
        ),
        (
            20,
            TagInfo {
                name: "FocusDistanceLower",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "$val > 655.345 ? \"inf\" : \"$val m\"".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("$val / 100".to_string())),
            },
        ),
        (
            21,
            TagInfo {
                name: "FNumber",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.2g\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression(
                    "exp(Image::ExifTool::Canon::CanonEv($val)*log(2)/2)".to_string(),
                )),
            },
        ),
        (
            23,
            TagInfo {
                name: "MeasuredEV2",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Expression("$val / 8 - 6".to_string())),
            },
        ),
        (
            24,
            TagInfo {
                name: "BulbDuration",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Expression("$val / 10".to_string())),
            },
        ),
        (
            26,
            TagInfo {
                name: "CameraType",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            27,
            TagInfo {
                name: "AutoRotate",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            28,
            TagInfo {
                name: "NDFilter",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            29,
            TagInfo {
                name: "SelfTimer2",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Expression("$val / 10".to_string())),
            },
        ),
        (
            33,
            TagInfo {
                name: "FlashOutput",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = CANON_SHOTINFO_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = CANON_SHOTINFO_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
