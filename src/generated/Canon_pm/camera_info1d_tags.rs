//! Generated tag table definitions from Canon::CameraInfo1D
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::exposuretime_print_conv;

/// Tag definitions for Canon::CameraInfo1D table
pub static CANON_CAMERAINFO1D_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            4,
            TagInfo {
                name: "ExposureTime",
                format: "int8u",
                print_conv: Some(PrintConv::Function(exposuretime_print_conv)),
                value_conv: Some(ValueConv::Expression(
                    "exp(4*log(2)*(1-Image::ExifTool::Canon::CanonEv($val-24)))".to_string(),
                )),
            },
        ),
        (
            10,
            TagInfo {
                name: "FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression("\"$val mm\"".to_string())),
                value_conv: None,
            },
        ),
        (
            13,
            TagInfo {
                name: "LensType",
                format: "int16uRev",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            14,
            TagInfo {
                name: "MinFocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression("\"$val mm\"".to_string())),
                value_conv: None,
            },
        ),
        (
            16,
            TagInfo {
                name: "MaxFocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression("\"$val mm\"".to_string())),
                value_conv: None,
            },
        ),
        (
            65,
            TagInfo {
                name: "SharpnessFrequency",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            66,
            TagInfo {
                name: "Sharpness",
                format: "int8s",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            68,
            TagInfo {
                name: "WhiteBalance",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            71,
            TagInfo {
                name: "SharpnessFrequency",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            74,
            TagInfo {
                name: "WhiteBalance",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            75,
            TagInfo {
                name: "PictureStyle",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            78,
            TagInfo {
                name: "ColorTemperature",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            81,
            TagInfo {
                name: "PictureStyle",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = CANON_CAMERAINFO1D_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = CANON_CAMERAINFO1D_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
