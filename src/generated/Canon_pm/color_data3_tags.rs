//! Generated tag table definitions from Canon::ColorData3
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{
    exposuretime_print_conv, fnumber_print_conv, gpsaltitude_print_conv, lensinfo_print_conv,
    print_fraction,
};
use crate::implementations::value_conv::{
    exif_date_value_conv, gps_coordinate_value_conv, gpstimestamp_value_conv,
    reference_long_string_value_conv, reference_very_long_string_value_conv,
};

/// Tag definitions for Canon::ColorData3 table
pub static CANON_COLORDATA3_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "ColorDataVersion",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            63,
            TagInfo {
                name: "WB_RGGBLevelsAsShot",
                format: "int16s[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            68,
            TagInfo {
                name: "WB_RGGBLevelsAuto",
                format: "int16s[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            73,
            TagInfo {
                name: "WB_RGGBLevelsMeasured",
                format: "int16s[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            78,
            TagInfo {
                name: "WB_RGGBLevelsDaylight",
                format: "int16s[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            83,
            TagInfo {
                name: "WB_RGGBLevelsShade",
                format: "int16s[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            88,
            TagInfo {
                name: "WB_RGGBLevelsCloudy",
                format: "int16s[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            93,
            TagInfo {
                name: "WB_RGGBLevelsTungsten",
                format: "int16s[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            98,
            TagInfo {
                name: "WB_RGGBLevelsFluorescent",
                format: "int16s[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            103,
            TagInfo {
                name: "WB_RGGBLevelsKelvin",
                format: "int16s[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            108,
            TagInfo {
                name: "WB_RGGBLevelsFlash",
                format: "int16s[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            113,
            TagInfo {
                name: "WB_RGGBLevelsPC1",
                format: "int16s[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            118,
            TagInfo {
                name: "WB_RGGBLevelsPC2",
                format: "int16s[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            123,
            TagInfo {
                name: "WB_RGGBLevelsPC3",
                format: "int16s[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            128,
            TagInfo {
                name: "WB_RGGBLevelsCustom",
                format: "int16s[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            133,
            TagInfo {
                name: "ColorCalib",
                format: "undef[120]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            196,
            TagInfo {
                name: "PerChannelBlackLevel",
                format: "int16u[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            584,
            TagInfo {
                name: "FlashOutput",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val == 255 ? \"Strobe or Misfire\" : sprintf(\"%.0f%%\", $val * 100)"
                        .to_string(),
                )),
                value_conv: Some(ValueConv::Expression(
                    "$val >= 255 ? 255 : exp(($val-200)/16*log(2))".to_string(),
                )),
            },
        ),
        (
            585,
            TagInfo {
                name: "FlashBatteryLevel",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val ? sprintf(\"%.2fV\", $val * 5 / 186) : \"n/a\"".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            586,
            TagInfo {
                name: "ColorTempFlashData",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            647,
            TagInfo {
                name: "MeasuredRGGBData",
                format: "int32u[4]",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "[Function: Image::ExifTool::Canon::SwapWords]".to_string(),
                )),
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = CANON_COLORDATA3_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = CANON_COLORDATA3_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
