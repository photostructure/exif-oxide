//! Generated conversion reference lists
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

use std::collections::HashSet;
use std::sync::LazyLock;

/// All unique PrintConv references found in tag definitions
pub static PRINT_CONV_REFS: LazyLock<HashSet<&'static str>> = LazyLock::new(|| {
    let mut set = HashSet::new();
    set.insert("alphadatadiscard_print_conv");
    set.insert("ambienttemperature_print_conv");
    set.insert("aperturevalue_print_conv");
    set.insert("backgroundcolorindicator_print_conv");
    set.insert("cacheversion_print_conv");
    set.insert("calibrationilluminant1_print_conv");
    set.insert("calibrationilluminant2_print_conv");
    set.insert("calibrationilluminant3_print_conv");
    set.insert("cfalayout_print_conv");
    set.insert("cfapattern_print_conv");
    set.insert("cfaplanecolor_print_conv");
    set.insert("chromaticaberrationcorrection_print_conv");
    set.insert("cleanfaxdata_print_conv");
    set.insert("codingmethods_print_conv");
    set.insert("colorimetricreference_print_conv");
    set.insert("colorspace_print_conv");
    set.insert("componentsconfiguration_print_conv");
    set.insert("compositeimage_print_conv");
    set.insert("compositeimageexposuretimes_print_conv");
    set.insert("compression_print_conv");
    set.insert("contrast_print_conv");
    set.insert("cr2cfapattern_print_conv");
    set.insert("createdate_print_conv");
    set.insert("customrendered_print_conv");
    set.insert("datetimeoriginal_print_conv");
    set.insert("defaultblackrender_print_conv");
    set.insert("depthformat_print_conv");
    set.insert("depthmeasuretype_print_conv");
    set.insert("depthunits_print_conv");
    set.insert("distortioncorrection_print_conv");
    set.insert("dngbackwardversion_print_conv");
    set.insert("dnglensinfo_print_conv");
    set.insert("dngversion_print_conv");
    set.insert("exposurecompensation_print_conv");
    set.insert("exposuremode_print_conv");
    set.insert("exposureprogram_print_conv");
    set.insert("exposuretime_print_conv");
    set.insert("extrasamples_print_conv");
    set.insert("faxprofile_print_conv");
    set.insert("filesource_print_conv");
    set.insert("fillorder_print_conv");
    set.insert("flash_print_conv");
    set.insert("fnumber_print_conv");
    set.insert("focallength_print_conv");
    set.insert("focallengthin35mmformat_print_conv");
    set.insert("focalplaneresolutionunit_print_conv");
    set.insert("framerate_print_conv");
    set.insert("gaincontrol_print_conv");
    set.insert("grayresponseunit_print_conv");
    set.insert("hcusage_print_conv");
    set.insert("imagecolorindicator_print_conv");
    set.insert("imagedatadiscard_print_conv");
    set.insert("imagetype_print_conv");
    set.insert("indexed_print_conv");
    set.insert("inkset_print_conv");
    set.insert("interopindex_print_conv");
    set.insert("iso_print_conv");
    set.insert("jpegproc_print_conv");
    set.insert("lensinfo_print_conv");
    set.insert("lightsource_print_conv");
    set.insert("localizedcameramodel_print_conv");
    set.insert("makernotesafety_print_conv");
    set.insert("maxaperturevalue_print_conv");
    set.insert("meteringmode_print_conv");
    set.insert("modifydate_print_conv");
    set.insert("multiprofiles_print_conv");
    set.insert("oldsubfiletype_print_conv");
    set.insert("opcodelist1_print_conv");
    set.insert("opcodelist2_print_conv");
    set.insert("opcodelist3_print_conv");
    set.insert("opiproxy_print_conv");
    set.insert("orientation_print_conv");
    set.insert("photometricinterpretation_print_conv");
    set.insert("pixelformat_print_conv");
    set.insert("planarconfiguration_print_conv");
    set.insert("predictor_print_conv");
    set.insert("previewcolorspace_print_conv");
    set.insert("previewdatetime_print_conv");
    set.insert("profileembedpolicy_print_conv");
    set.insert("profilehuesatmapencoding_print_conv");
    set.insert("profilelooktableencoding_print_conv");
    set.insert("profiletype_print_conv");
    set.insert("rasterpadding_print_conv");
    set.insert("renderingintent_print_conv");
    set.insert("resolutionunit_print_conv");
    set.insert("sampleformat_print_conv");
    set.insert("saturation_print_conv");
    set.insert("scenecapturetype_print_conv");
    set.insert("scenetype_print_conv");
    set.insert("securityclassification_print_conv");
    set.insert("sensingmethod_print_conv");
    set.insert("sensitivitytype_print_conv");
    set.insert("sharpness_print_conv");
    set.insert("shutterspeedvalue_print_conv");
    set.insert("sonyrawfiletype_print_conv");
    set.insert("spatialfrequencyresponse_print_conv");
    set.insert("subfiletype_print_conv");
    set.insert("subjectdistance_print_conv");
    set.insert("subjectdistancerange_print_conv");
    set.insert("t4options_print_conv");
    set.insert("t6options_print_conv");
    set.insert("thresholding_print_conv");
    set.insert("tiff_epstandardid_print_conv");
    set.insert("tiff_fxextensions_print_conv");
    set.insert("timecodes_print_conv");
    set.insert("transformation_print_conv");
    set.insert("tstop_print_conv");
    set.insert("uncompressed_print_conv");
    set.insert("usptooriginalcontenttype_print_conv");
    set.insert("vignettingcorrection_print_conv");
    set.insert("wangtag4_print_conv");
    set.insert("whitebalance_print_conv");
    set.insert("ycbcrpositioning_print_conv");
    set.insert("ycbcrsubsampling_print_conv");
    set.insert("gpsaltitude_print_conv");
    set.insert("gpsaltituderef_print_conv");
    set.insert("gpsdestbearingref_print_conv");
    set.insert("gpsdestdistanceref_print_conv");
    set.insert("gpsdestlatitude_print_conv");
    set.insert("gpsdestlatituderef_print_conv");
    set.insert("gpsdestlongitude_print_conv");
    set.insert("gpsdestlongituderef_print_conv");
    set.insert("gpsdifferential_print_conv");
    set.insert("gpshpositioningerror_print_conv");
    set.insert("gpsimgdirectionref_print_conv");
    set.insert("gpslatitude_print_conv");
    set.insert("gpslatituderef_print_conv");
    set.insert("gpslongitude_print_conv");
    set.insert("gpslongituderef_print_conv");
    set.insert("gpsmeasuremode_print_conv");
    set.insert("gpsspeedref_print_conv");
    set.insert("gpsstatus_print_conv");
    set.insert("gpstimestamp_print_conv");
    set.insert("gpstrackref_print_conv");
    set.insert("gpsversionid_print_conv");
    set.insert("2_print_conv");
    set.insert("aperture_print_conv");
    set.insert("bluebalance_print_conv");
    set.insert("circleofconfusion_print_conv");
    set.insert("focallength35efl_print_conv");
    set.insert("gpsposition_print_conv");
    set.insert("hyperfocaldistance_print_conv");
    set.insert("imagesize_print_conv");
    set.insert("lensid_print_conv");
    set.insert("lightvalue_print_conv");
    set.insert("megapixels_print_conv");
    set.insert("redbalance_print_conv");
    set.insert("scalefactor35efl_print_conv");
    set.insert("shutterspeed_print_conv");
    set.insert("subseccreatedate_print_conv");
    set.insert("subsecdatetimeoriginal_print_conv");
    set.insert("subsecmodifydate_print_conv");
    set.insert("gpsdatetime_print_conv");
    set
});

/// All unique ValueConv references found in tag definitions
pub static VALUE_CONV_REFS: LazyLock<HashSet<&'static str>> = LazyLock::new(|| {
    let mut set = HashSet::new();
    set.insert("aperturevalue_value_conv");
    set.insert("asshotprofilename_value_conv");
    set.insert("blackleveldeltah_value_conv");
    set.insert("blackleveldeltav_value_conv");
    set.insert("brightness_value_conv");
    set.insert("cameracalibrationsig_value_conv");
    set.insert("contrast_value_conv");
    set.insert("converter_value_conv");
    set.insert("cr2cfapattern_value_conv");
    set.insert("exposure_value_conv");
    set.insert("freebytecounts_value_conv");
    set.insert("freeoffsets_value_conv");
    set.insert("lens_value_conv");
    set.insert("localizedcameramodel_value_conv");
    set.insert("maxaperturevalue_value_conv");
    set.insert("moirefilter_value_conv");
    set.insert("newrawimagedigest_value_conv");
    set.insert("originalrawfiledigest_value_conv");
    set.insert("originalrawfilename_value_conv");
    set.insert("ownername_value_conv");
    set.insert("panasonictitle2_value_conv");
    set.insert("panasonictitle_value_conv");
    set.insert("pixelformat_value_conv");
    set.insert("previewapplicationname_value_conv");
    set.insert("previewapplicationversion_value_conv");
    set.insert("previewdatetime_value_conv");
    set.insert("previewsettingsdigest_value_conv");
    set.insert("previewsettingsname_value_conv");
    set.insert("profilecalibrationsig_value_conv");
    set.insert("profilecopyright_value_conv");
    set.insert("profilehuesatmapdata1_value_conv");
    set.insert("profilehuesatmapdata2_value_conv");
    set.insert("profilehuesatmapdata3_value_conv");
    set.insert("profilelooktabledata_value_conv");
    set.insert("profilename_value_conv");
    set.insert("profiletonecurve_value_conv");
    set.insert("rawdatauniqueid_value_conv");
    set.insert("rawfile_value_conv");
    set.insert("rawimagedigest_value_conv");
    set.insert("saturation_value_conv");
    set.insert("serialnumber_value_conv");
    set.insert("shadows_value_conv");
    set.insert("sharpness_value_conv");
    set.insert("shutterspeedvalue_value_conv");
    set.insert("smoothness_value_conv");
    set.insert("subsectime_value_conv");
    set.insert("subsectimedigitized_value_conv");
    set.insert("subsectimeoriginal_value_conv");
    set.insert("tilebytecounts_value_conv");
    set.insert("tileoffsets_value_conv");
    set.insert("timecodes_value_conv");
    set.insert("whitebalance_value_conv");
    set.insert("xp_dip_xml_value_conv");
    set.insert("xpauthor_value_conv");
    set.insert("xpcomment_value_conv");
    set.insert("xpkeywords_value_conv");
    set.insert("xpsubject_value_conv");
    set.insert("xptitle_value_conv");
    set.insert("gpsdatestamp_value_conv");
    set.insert("gpsdestlatitude_value_conv");
    set.insert("gpsdestlongitude_value_conv");
    set.insert("gpslatitude_value_conv");
    set.insert("gpslongitude_value_conv");
    set.insert("gpstimestamp_value_conv");
    set.insert("2_value_conv");
    set.insert("aperture_value_conv");
    set.insert("bluebalance_value_conv");
    set.insert("cfapattern_value_conv");
    set.insert("circleofconfusion_value_conv");
    set.insert("datetimeoriginal_value_conv");
    set.insert("focallength35efl_value_conv");
    set.insert("gpsposition_value_conv");
    set.insert("hyperfocaldistance_value_conv");
    set.insert("imagesize_value_conv");
    set.insert("lensid_value_conv");
    set.insert("lightvalue_value_conv");
    set.insert("megapixels_value_conv");
    set.insert("previewimagesize_value_conv");
    set.insert("redbalance_value_conv");
    set.insert("scalefactor35efl_value_conv");
    set.insert("shutterspeed_value_conv");
    set.insert("gpsaltitude_value_conv");
    set.insert("gpsdatetime_value_conv");
    set
});

/// Check if a PrintConv reference exists
pub fn has_print_conv_ref(name: &str) -> bool {
    PRINT_CONV_REFS.contains(name)
}

/// Check if a ValueConv reference exists
pub fn has_value_conv_ref(name: &str) -> bool {
    VALUE_CONV_REFS.contains(name)
}

/// Get statistics about conversion references
pub fn conversion_ref_stats() -> (usize, usize) {
    (PRINT_CONV_REFS.len(), VALUE_CONV_REFS.len())
}
