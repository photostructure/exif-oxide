//! Generated tag table definitions from IPTC::NewsPhoto
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_16::ast_print_16efff3478ac3340;

/// Tag definitions for IPTC::NewsPhoto table
pub static IPTC_NEWSPHOTO_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "NewsPhotoVersion",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            10,
            TagInfo {
                name: "IPTCPictureNumber",
                format: "string[16]",
                print_conv: Some(PrintConv::Function(ast_print_16efff3478ac3340)),
                value_conv: None,
            },
        ),
        (
            20,
            TagInfo {
                name: "IPTCImageWidth",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30,
            TagInfo {
                name: "IPTCImageHeight",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40,
            TagInfo {
                name: "IPTCPixelWidth",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            50,
            TagInfo {
                name: "IPTCPixelHeight",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            55,
            TagInfo {
                name: "SupplementalType",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            60,
            TagInfo {
                name: "ColorRepresentation",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            64,
            TagInfo {
                name: "InterchangeColorSpace",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            65,
            TagInfo {
                name: "ColorSequence",
                format: "int8u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            66,
            TagInfo {
                name: "ICC_Profile",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            70,
            TagInfo {
                name: "ColorCalibrationMatrix",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            80,
            TagInfo {
                name: "LookupTable",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            84,
            TagInfo {
                name: "NumIndexEntries",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            85,
            TagInfo {
                name: "ColorPalette",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            86,
            TagInfo {
                name: "IPTCBitsPerSample",
                format: "int8u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            90,
            TagInfo {
                name: "SampleStructure",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            100,
            TagInfo {
                name: "ScanningDirection",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            102,
            TagInfo {
                name: "IPTCImageRotation",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            110,
            TagInfo {
                name: "DataCompressionMethod",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            120,
            TagInfo {
                name: "QuantizationMethod",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            125,
            TagInfo {
                name: "EndPoints",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            130,
            TagInfo {
                name: "ExcursionTolerance",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            135,
            TagInfo {
                name: "BitsPerComponent",
                format: "int8u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            140,
            TagInfo {
                name: "MaximumDensityRange",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            145,
            TagInfo {
                name: "GammaCompensatedValue",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = IPTC_NEWSPHOTO_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = IPTC_NEWSPHOTO_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
