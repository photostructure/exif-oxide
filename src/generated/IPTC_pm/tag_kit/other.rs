//! Tag kits for other category from IPTC.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_3: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("L".to_string(), "Landscape");
    map.insert("P".to_string(), "Portrait");
    map.insert("S".to_string(), "Square");
    map
});

static PRINT_CONV_4: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0T".to_string(), "Text Only");
    map.insert("1A".to_string(), "Mono Actuality");
    map.insert("1C".to_string(), "Mono Question and Answer Session");
    map.insert("1M".to_string(), "Mono Music");
    map.insert("1Q".to_string(), "Mono Response to a Question");
    map.insert("1R".to_string(), "Mono Raw Sound");
    map.insert("1S".to_string(), "Mono Scener");
    map.insert("1V".to_string(), "Mono Voicer");
    map.insert("1W".to_string(), "Mono Wrap");
    map.insert("2A".to_string(), "Stereo Actuality");
    map.insert("2C".to_string(), "Stereo Question and Answer Session");
    map.insert("2M".to_string(), "Stereo Music");
    map.insert("2Q".to_string(), "Stereo Response to a Question");
    map.insert("2R".to_string(), "Stereo Raw Sound");
    map.insert("2S".to_string(), "Stereo Scener");
    map.insert("2V".to_string(), "Stereo Voicer");
    map.insert("2W".to_string(), "Stereo Wrap");
    map
});

static PRINT_CONV_5: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No ObjectData");
    map.insert(
        "1".to_string(),
        "IPTC-NAA Digital Newsphoto Parameter Record",
    );
    map.insert(
        "10".to_string(),
        "United Press International Down-Load Message",
    );
    map.insert("11".to_string(), "JPEG File Interchange (JFIF)");
    map.insert("12".to_string(), "Photo-CD Image-Pac (Eastman Kodak)");
    map.insert(
        "13".to_string(),
        "Bit Mapped Graphics File [.BMP] (Microsoft)",
    );
    map.insert(
        "14".to_string(),
        "Digital Audio File [.WAV] (Microsoft & Creative Labs)",
    );
    map.insert(
        "15".to_string(),
        "Audio plus Moving Video [.AVI] (Microsoft)",
    );
    map.insert(
        "16".to_string(),
        "PC DOS/Windows Executable Files [.COM][.EXE]",
    );
    map.insert(
        "17".to_string(),
        "Compressed Binary File [.ZIP] (PKWare Inc)",
    );
    map.insert(
        "18".to_string(),
        "Audio Interchange File Format AIFF (Apple Computer Inc)",
    );
    map.insert("19".to_string(), "RIFF Wave (Microsoft Corporation)");
    map.insert("2".to_string(), "IPTC7901 Recommended Message Format");
    map.insert("20".to_string(), "Freehand (Macromedia/Aldus)");
    map.insert(
        "21".to_string(),
        "Hypertext Markup Language [.HTML] (The Internet Society)",
    );
    map.insert("22".to_string(), "MPEG 2 Audio Layer 2 (Musicom), ISO/IEC");
    map.insert("23".to_string(), "MPEG 2 Audio Layer 3, ISO/IEC");
    map.insert("24".to_string(), "Portable Document File [.PDF] Adobe");
    map.insert("25".to_string(), "News Industry Text Format (NITF)");
    map.insert("26".to_string(), "Tape Archive [.TAR]");
    map.insert(
        "27".to_string(),
        "Tidningarnas Telegrambyra NITF version (TTNITF DTD)",
    );
    map.insert("28".to_string(), "Ritzaus Bureau NITF version (RBNITF DTD)");
    map.insert("29".to_string(), "Corel Draw [.CDR]");
    map.insert(
        "3".to_string(),
        "Tagged Image File Format (Adobe/Aldus Image data)",
    );
    map.insert("4".to_string(), "Illustrator (Adobe Graphics data)");
    map.insert("5".to_string(), "AppleSingle (Apple Computer Inc)");
    map.insert("6".to_string(), "NAA 89-3 (ANPA 1312)");
    map.insert("7".to_string(), "MacBinary II");
    map.insert(
        "8".to_string(),
        "IPTC Unstructured Character Oriented File Format (UCOFF)",
    );
    map.insert(
        "9".to_string(),
        "United Press International ANPA 1312 variant",
    );
    map
});

static PRINT_CONV_6: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("".to_string(), "");
    map.insert("01".to_string(), "Object Kill");
    map.insert("02".to_string(), "Object Replace");
    map.insert("03".to_string(), "Object Append");
    map.insert("04".to_string(), "Object Reference");
    map
});

static PRINT_CONV_7: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("a".to_string(), "Morning");
    map.insert("b".to_string(), "Both Morning and Evening");
    map.insert("p".to_string(), "Evening");
    map
});

static PRINT_CONV_8: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No ObjectData");
    map.insert(
        "1".to_string(),
        "IPTC-NAA Digital Newsphoto Parameter Record",
    );
    map.insert(
        "10".to_string(),
        "United Press International Down-Load Message",
    );
    map.insert("11".to_string(), "JPEG File Interchange (JFIF)");
    map.insert("12".to_string(), "Photo-CD Image-Pac (Eastman Kodak)");
    map.insert(
        "13".to_string(),
        "Bit Mapped Graphics File [.BMP] (Microsoft)",
    );
    map.insert(
        "14".to_string(),
        "Digital Audio File [.WAV] (Microsoft & Creative Labs)",
    );
    map.insert(
        "15".to_string(),
        "Audio plus Moving Video [.AVI] (Microsoft)",
    );
    map.insert(
        "16".to_string(),
        "PC DOS/Windows Executable Files [.COM][.EXE]",
    );
    map.insert(
        "17".to_string(),
        "Compressed Binary File [.ZIP] (PKWare Inc)",
    );
    map.insert(
        "18".to_string(),
        "Audio Interchange File Format AIFF (Apple Computer Inc)",
    );
    map.insert("19".to_string(), "RIFF Wave (Microsoft Corporation)");
    map.insert("2".to_string(), "IPTC7901 Recommended Message Format");
    map.insert("20".to_string(), "Freehand (Macromedia/Aldus)");
    map.insert(
        "21".to_string(),
        "Hypertext Markup Language [.HTML] (The Internet Society)",
    );
    map.insert("22".to_string(), "MPEG 2 Audio Layer 2 (Musicom), ISO/IEC");
    map.insert("23".to_string(), "MPEG 2 Audio Layer 3, ISO/IEC");
    map.insert("24".to_string(), "Portable Document File [.PDF] Adobe");
    map.insert("25".to_string(), "News Industry Text Format (NITF)");
    map.insert("26".to_string(), "Tape Archive [.TAR]");
    map.insert(
        "27".to_string(),
        "Tidningarnas Telegrambyra NITF version (TTNITF DTD)",
    );
    map.insert("28".to_string(), "Ritzaus Bureau NITF version (RBNITF DTD)");
    map.insert("29".to_string(), "Corel Draw [.CDR]");
    map.insert(
        "3".to_string(),
        "Tagged Image File Format (Adobe/Aldus Image data)",
    );
    map.insert("4".to_string(), "Illustrator (Adobe Graphics data)");
    map.insert("5".to_string(), "AppleSingle (Apple Computer Inc)");
    map.insert("6".to_string(), "NAA 89-3 (ANPA 1312)");
    map.insert("7".to_string(), "MacBinary II");
    map.insert(
        "8".to_string(),
        "IPTC Unstructured Character Oriented File Format (UCOFF)",
    );
    map.insert(
        "9".to_string(),
        "United Press International ANPA 1312 variant",
    );
    map
});

static PRINT_CONV_9: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0 (reserved)");
    map.insert("1".to_string(), "1 (most urgent)");
    map.insert("2".to_string(), "2");
    map.insert("3".to_string(), "3");
    map.insert("4".to_string(), "4");
    map.insert("5".to_string(), "5 (normal urgency)");
    map.insert("6".to_string(), "6");
    map.insert("7".to_string(), "7");
    map.insert("8".to_string(), "8 (least urgent)");
    map.insert("9".to_string(), "9 (user-defined priority)");
    map
});

static PRINT_CONV_10: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "L-R, Top-Bottom");
    map.insert("1".to_string(), "R-L, Top-Bottom");
    map.insert("2".to_string(), "L-R, Bottom-Top");
    map.insert("3".to_string(), "R-L, Bottom-Top");
    map.insert("4".to_string(), "Top-Bottom, L-R");
    map.insert("5".to_string(), "Bottom-Top, L-R");
    map.insert("6".to_string(), "Top-Bottom, R-L");
    map.insert("7".to_string(), "Bottom-Top, R-L");
    map
});

static PRINT_CONV_11: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0");
    map.insert("1".to_string(), "90");
    map.insert("2".to_string(), "180");
    map.insert("3".to_string(), "270");
    map
});

static PRINT_CONV_12: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Linear Reflectance/Transmittance");
    map.insert("1".to_string(), "Linear Density");
    map.insert("2".to_string(), "IPTC Ref B");
    map.insert("3".to_string(), "Linear Dot Percent");
    map.insert("4".to_string(), "AP Domestic Analogue");
    map.insert("5".to_string(), "Compression Method Specific");
    map.insert("6".to_string(), "Color Space Specific");
    map.insert("7".to_string(), "Gamma Compensated");
    map
});

static PRINT_CONV_13: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Not Allowed");
    map.insert("1".to_string(), "Allowed");
    map
});

static PRINT_CONV_14: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Main Image");
    map.insert("1".to_string(), "Reduced Resolution Image");
    map.insert("2".to_string(), "Logo");
    map.insert("3".to_string(), "Rasterized Caption");
    map
});

static PRINT_CONV_15: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No Image, Single Frame");
    map.insert("1024".to_string(), "4 Components, Single Frame");
    map.insert(
        "1025".to_string(),
        "4 Components, Frame Sequential in Multiple Objects",
    );
    map.insert(
        "1026".to_string(),
        "4 Components, Frame Sequential in One Object",
    );
    map.insert("1027".to_string(), "4 Components, Line Sequential");
    map.insert("1028".to_string(), "4 Components, Pixel Sequential");
    map.insert("1029".to_string(), "4 Components, Special Interleaving");
    map.insert("256".to_string(), "Monochrome, Single Frame");
    map.insert("768".to_string(), "3 Components, Single Frame");
    map.insert(
        "769".to_string(),
        "3 Components, Frame Sequential in Multiple Objects",
    );
    map.insert(
        "770".to_string(),
        "3 Components, Frame Sequential in One Object",
    );
    map.insert("771".to_string(), "3 Components, Line Sequential");
    map.insert("772".to_string(), "3 Components, Pixel Sequential");
    map.insert("773".to_string(), "3 Components, Special Interleaving");
    map
});

static PRINT_CONV_16: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "X,Y,Z CIE");
    map.insert("2".to_string(), "RGB SMPTE");
    map.insert("3".to_string(), "Y,U,V (K) (D65)");
    map.insert("4".to_string(), "RGB Device Dependent");
    map.insert("5".to_string(), "CMY (K) Device Dependent");
    map.insert("6".to_string(), "Lab (K) CIE");
    map.insert("7".to_string(), "YCbCr");
    map.insert("8".to_string(), "sRGB");
    map
});

static PRINT_CONV_17: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "OrthogonalConstangSampling");
    map.insert("1".to_string(), "Orthogonal4-2-2Sampling");
    map.insert("2".to_string(), "CompressionDependent");
    map
});

/// Get tag definitions for other category
pub fn get_other_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (0, TagKitDef {
            id: 0,
            name: "ApplicationRecordVersion",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (100, TagKitDef {
            id: 100,
            name: "Country-PrimaryLocationCode",
            format: "string[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (101, TagKitDef {
            id: 101,
            name: "Country-PrimaryLocationName",
            format: "string[0,64]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (103, TagKitDef {
            id: 103,
            name: "OriginalTransmissionReference",
            format: "string[0,32]",
            groups: HashMap::new(),
            writable: false,
            notes: Some("now used as a job identifier"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (105, TagKitDef {
            id: 105,
            name: "Headline",
            format: "string[0,256]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (110, TagKitDef {
            id: 110,
            name: "Credit",
            format: "string[0,32]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (115, TagKitDef {
            id: 115,
            name: "Source",
            format: "string[0,32]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (116, TagKitDef {
            id: 116,
            name: "CopyrightNotice",
            format: "string[0,128]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (118, TagKitDef {
            id: 118,
            name: "Contact",
            format: "string[0,128]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "SubjectReference",
            format: "string[13,236]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (120, TagKitDef {
            id: 120,
            name: "Caption-Abstract",
            format: "string[0,2000]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (121, TagKitDef {
            id: 121,
            name: "LocalCaption",
            format: "string[0,256]",
            groups: HashMap::new(),
            writable: false,
            notes: Some("I haven't found a reference for the format of tags 121, 184-188 and\n            225-232, so I have just make them writable as strings with\n            reasonable length.  Beware that if this is wrong, other utilities\n            may not be able to read these tags as written by ExifTool"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (122, TagKitDef {
            id: 122,
            name: "Writer-Editor",
            format: "string[0,32]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (125, TagKitDef {
            id: 125,
            name: "RasterizedCaption",
            format: "undef[7360]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (130, TagKitDef {
            id: 130,
            name: "ImageType",
            format: "string[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (131, TagKitDef {
            id: 131,
            name: "ImageOrientation",
            format: "string[1]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_3),
            value_conv: None,
            subdirectory: None,
        }),
        (135, TagKitDef {
            id: 135,
            name: "LanguageIdentifier",
            format: "string[2,3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (15, TagKitDef {
            id: 15,
            name: "Category",
            format: "string[0,3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (150, TagKitDef {
            id: 150,
            name: "AudioType",
            format: "string[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_4),
            value_conv: None,
            subdirectory: None,
        }),
        (151, TagKitDef {
            id: 151,
            name: "AudioSamplingRate",
            format: "digits[6]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (152, TagKitDef {
            id: 152,
            name: "AudioSamplingResolution",
            format: "digits[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (153, TagKitDef {
            id: 153,
            name: "AudioDuration",
            format: "digits[6]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (154, TagKitDef {
            id: 154,
            name: "AudioOutcue",
            format: "string[0,64]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (184, TagKitDef {
            id: 184,
            name: "JobID",
            format: "string[0,64]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (185, TagKitDef {
            id: 185,
            name: "MasterDocumentID",
            format: "string[0,256]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (186, TagKitDef {
            id: 186,
            name: "ShortDocumentID",
            format: "string[0,64]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (187, TagKitDef {
            id: 187,
            name: "UniqueDocumentID",
            format: "string[0,128]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (188, TagKitDef {
            id: 188,
            name: "OwnerID",
            format: "string[0,128]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "SupplementalCategories",
            format: "string[0,32]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (200, TagKitDef {
            id: 200,
            name: "ObjectPreviewFileFormat",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_5),
            value_conv: None,
            subdirectory: None,
        }),
        (201, TagKitDef {
            id: 201,
            name: "ObjectPreviewFileVersion",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (202, TagKitDef {
            id: 202,
            name: "ObjectPreviewData",
            format: "undef[0,256000]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (22, TagKitDef {
            id: 22,
            name: "FixtureIdentifier",
            format: "string[0,32]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (221, TagKitDef {
            id: 221,
            name: "Prefs",
            format: "string[0,64]",
            groups: HashMap::new(),
            writable: false,
            notes: Some("PhotoMechanic preferences"),
            print_conv: PrintConvType::Expression(r"
            $val =~ s[\s*(\d+):\s*(\d+):\s*(\d+):\s*(\S*)]
                     [Tagged:$1, ColorClass:$2, Rating:$3, FrameNum:$4];
            return $val;
        "),
            value_conv: None,
            subdirectory: None,
        }),
        (225, TagKitDef {
            id: 225,
            name: "ClassifyState",
            format: "string[0,64]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (228, TagKitDef {
            id: 228,
            name: "SimilarityIndex",
            format: "string[0,32]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (230, TagKitDef {
            id: 230,
            name: "DocumentNotes",
            format: "string[0,1024]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (231, TagKitDef {
            id: 231,
            name: "DocumentHistory",
            format: "string[0,256]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ s/\\0+/\\n/g; $val"),
            subdirectory: None,
        }),
        (232, TagKitDef {
            id: 232,
            name: "ExifCameraInfo",
            format: "string[0,4096]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (25, TagKitDef {
            id: 25,
            name: "Keywords",
            format: "string[0,64]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (26, TagKitDef {
            id: 26,
            name: "ContentLocationCode",
            format: "string[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (27, TagKitDef {
            id: 27,
            name: "ContentLocationName",
            format: "string[0,64]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (40, TagKitDef {
            id: 40,
            name: "SpecialInstructions",
            format: "string[0,256]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (42, TagKitDef {
            id: 42,
            name: "ActionAdvised",
            format: "digits[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_6),
            value_conv: None,
            subdirectory: None,
        }),
        (45, TagKitDef {
            id: 45,
            name: "ReferenceService",
            format: "string[0,10]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (50, TagKitDef {
            id: 50,
            name: "ReferenceNumber",
            format: "digits[8]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (65, TagKitDef {
            id: 65,
            name: "OriginatingProgram",
            format: "string[0,32]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (70, TagKitDef {
            id: 70,
            name: "ProgramVersion",
            format: "string[0,10]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (75, TagKitDef {
            id: 75,
            name: "ObjectCycle",
            format: "string[1]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_7),
            value_conv: None,
            subdirectory: None,
        }),
        (80, TagKitDef {
            id: 80,
            name: "By-line",
            format: "string[0,32]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (85, TagKitDef {
            id: 85,
            name: "By-lineTitle",
            format: "string[0,32]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (90, TagKitDef {
            id: 90,
            name: "City",
            format: "string[0,32]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (92, TagKitDef {
            id: 92,
            name: "Sub-location",
            format: "string[0,32]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (95, TagKitDef {
            id: 95,
            name: "Province-State",
            format: "string[0,32]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "EnvelopeRecordVersion",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (100, TagKitDef {
            id: 100,
            name: "UniqueObjectName",
            format: "string[14,80]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (120, TagKitDef {
            id: 120,
            name: "ARMIdentifier",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (122, TagKitDef {
            id: 122,
            name: "ARMVersion",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "FileFormat",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_8),
            value_conv: None,
            subdirectory: None,
        }),
        (22, TagKitDef {
            id: 22,
            name: "FileVersion",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (30, TagKitDef {
            id: 30,
            name: "ServiceIdentifier",
            format: "string[0,10]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (40, TagKitDef {
            id: 40,
            name: "EnvelopeNumber",
            format: "digits[8]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (50, TagKitDef {
            id: 50,
            name: "ProductID",
            format: "string[0,32]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (60, TagKitDef {
            id: 60,
            name: "EnvelopePriority",
            format: "digits[1]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_9),
            value_conv: None,
            subdirectory: None,
        }),
        (90, TagKitDef {
            id: 90,
            name: "CodedCharacterSet",
            format: "string[0,32]",
            groups: HashMap::new(),
            writable: false,
            notes: Some("values are entered in the form \"ESC X Y[, ...]\".  The escape sequence for\n            UTF-8 character coding is \"ESC % G\", but this is displayed as \"UTF8\" for\n            convenience.  Either string may be used when writing.  The value of this tag\n            affects the decoding of string values in the Application and NewsPhoto\n            records.  This tag is marked as \"unsafe\" to prevent it from being copied by\n            default in a group operation because existing tags in the destination image\n            may use a different encoding.  When creating a new IPTC record from scratch,\n            it is suggested that this be set to \"UTF8\" if special characters are a\n            possibility"),
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (240, TagKitDef {
            id: 240,
            name: "IPTCFotoStation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xf0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "NewsPhotoVersion",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (100, TagKitDef {
            id: 100,
            name: "ScanningDirection",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_10),
            value_conv: None,
            subdirectory: None,
        }),
        (102, TagKitDef {
            id: 102,
            name: "IPTCImageRotation",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_11),
            value_conv: None,
            subdirectory: None,
        }),
        (110, TagKitDef {
            id: 110,
            name: "DataCompressionMethod",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (120, TagKitDef {
            id: 120,
            name: "QuantizationMethod",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_12),
            value_conv: None,
            subdirectory: None,
        }),
        (125, TagKitDef {
            id: 125,
            name: "EndPoints",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (130, TagKitDef {
            id: 130,
            name: "ExcursionTolerance",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_13),
            value_conv: None,
            subdirectory: None,
        }),
        (135, TagKitDef {
            id: 135,
            name: "BitsPerComponent",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (140, TagKitDef {
            id: 140,
            name: "MaximumDensityRange",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (145, TagKitDef {
            id: 145,
            name: "GammaCompensatedValue",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "IPTCImageWidth",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (30, TagKitDef {
            id: 30,
            name: "IPTCImageHeight",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (40, TagKitDef {
            id: 40,
            name: "IPTCPixelWidth",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (50, TagKitDef {
            id: 50,
            name: "IPTCPixelHeight",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (55, TagKitDef {
            id: 55,
            name: "SupplementalType",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_14),
            value_conv: None,
            subdirectory: None,
        }),
        (60, TagKitDef {
            id: 60,
            name: "ColorRepresentation",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_15),
            value_conv: None,
            subdirectory: None,
        }),
        (64, TagKitDef {
            id: 64,
            name: "InterchangeColorSpace",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_16),
            value_conv: None,
            subdirectory: None,
        }),
        (65, TagKitDef {
            id: 65,
            name: "ColorSequence",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (66, TagKitDef {
            id: 66,
            name: "ICC_Profile",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (70, TagKitDef {
            id: 70,
            name: "ColorCalibrationMatrix",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (80, TagKitDef {
            id: 80,
            name: "LookupTable",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (84, TagKitDef {
            id: 84,
            name: "NumIndexEntries",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (85, TagKitDef {
            id: 85,
            name: "ColorPalette",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (86, TagKitDef {
            id: 86,
            name: "IPTCBitsPerSample",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (90, TagKitDef {
            id: 90,
            name: "SampleStructure",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_17),
            value_conv: None,
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "MaxSubfileSize",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (90, TagKitDef {
            id: 90,
            name: "ObjectSizeAnnounced",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (95, TagKitDef {
            id: 95,
            name: "MaximumObjectSize",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
    ]
}
