//! Generated tag table definitions from IPTC::ApplicationRecord
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::value_conv::exif_date_value_conv;

/// Tag definitions for IPTC::ApplicationRecord table
pub static IPTC_APPLICATIONRECORD_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (0, TagInfo {
            name: "ApplicationRecordVersion",
            format: "int16u",
            print_conv: None,
            value_conv: None,
        }),
        (3, TagInfo {
            name: "ObjectTypeReference",
            format: "string[3,67]",
            print_conv: None,
            value_conv: None,
        }),
        (4, TagInfo {
            name: "ObjectAttributeReference",
            format: "string[4,68]",
            print_conv: None,
            value_conv: None,
        }),
        (5, TagInfo {
            name: "ObjectName",
            format: "string[0,64]",
            print_conv: None,
            value_conv: None,
        }),
        (7, TagInfo {
            name: "EditStatus",
            format: "string[0,64]",
            print_conv: None,
            value_conv: None,
        }),
        (8, TagInfo {
            name: "EditorialUpdate",
            format: "digits[2]",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (10, TagInfo {
            name: "Urgency",
            format: "digits[1]",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (12, TagInfo {
            name: "SubjectReference",
            format: "string[13,236]",
            print_conv: None,
            value_conv: None,
        }),
        (15, TagInfo {
            name: "Category",
            format: "string[0,3]",
            print_conv: None,
            value_conv: None,
        }),
        (20, TagInfo {
            name: "SupplementalCategories",
            format: "string[0,32]",
            print_conv: None,
            value_conv: None,
        }),
        (22, TagInfo {
            name: "FixtureIdentifier",
            format: "string[0,32]",
            print_conv: None,
            value_conv: None,
        }),
        (25, TagInfo {
            name: "Keywords",
            format: "string[0,64]",
            print_conv: None,
            value_conv: None,
        }),
        (26, TagInfo {
            name: "ContentLocationCode",
            format: "string[3]",
            print_conv: None,
            value_conv: None,
        }),
        (27, TagInfo {
            name: "ContentLocationName",
            format: "string[0,64]",
            print_conv: None,
            value_conv: None,
        }),
        (30, TagInfo {
            name: "ReleaseDate",
            format: "digits[8]",
            print_conv: None,
            value_conv: Some(ValueConv::Function(exif_date_value_conv)),
        }),
        (35, TagInfo {
            name: "ReleaseTime",
            format: "string[11]",
            print_conv: None,
            value_conv: Some(ValueConv::Expression("Image::ExifTool::Exif::ExifTime($val)".to_string())),
        }),
        (37, TagInfo {
            name: "ExpirationDate",
            format: "digits[8]",
            print_conv: None,
            value_conv: Some(ValueConv::Function(exif_date_value_conv)),
        }),
        (38, TagInfo {
            name: "ExpirationTime",
            format: "string[11]",
            print_conv: None,
            value_conv: Some(ValueConv::Expression("Image::ExifTool::Exif::ExifTime($val)".to_string())),
        }),
        (40, TagInfo {
            name: "SpecialInstructions",
            format: "string[0,256]",
            print_conv: None,
            value_conv: None,
        }),
        (42, TagInfo {
            name: "ActionAdvised",
            format: "digits[2]",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (45, TagInfo {
            name: "ReferenceService",
            format: "string[0,10]",
            print_conv: None,
            value_conv: None,
        }),
        (47, TagInfo {
            name: "ReferenceDate",
            format: "digits[8]",
            print_conv: None,
            value_conv: Some(ValueConv::Function(exif_date_value_conv)),
        }),
        (50, TagInfo {
            name: "ReferenceNumber",
            format: "digits[8]",
            print_conv: None,
            value_conv: None,
        }),
        (55, TagInfo {
            name: "DateCreated",
            format: "digits[8]",
            print_conv: Some(PrintConv::Expression("$self->Options(\"DateFormat\") ? $self->ConvertDateTime(\"$val 00:00:00\") : $val".to_string())),
            value_conv: Some(ValueConv::Function(exif_date_value_conv)),
        }),
        (60, TagInfo {
            name: "TimeCreated",
            format: "string[11]",
            print_conv: Some(PrintConv::Expression("$self->Options(\"DateFormat\") ? $self->ConvertDateTime(\"1970:01:01 $val\") : $val".to_string())),
            value_conv: Some(ValueConv::Expression("Image::ExifTool::Exif::ExifTime($val)".to_string())),
        }),
        (62, TagInfo {
            name: "DigitalCreationDate",
            format: "digits[8]",
            print_conv: Some(PrintConv::Expression("$self->Options(\"DateFormat\") ? $self->ConvertDateTime(\"$val 00:00:00\") : $val".to_string())),
            value_conv: Some(ValueConv::Function(exif_date_value_conv)),
        }),
        (63, TagInfo {
            name: "DigitalCreationTime",
            format: "string[11]",
            print_conv: Some(PrintConv::Expression("$self->Options(\"DateFormat\") ? $self->ConvertDateTime(\"1970:01:01 $val\") : $val".to_string())),
            value_conv: Some(ValueConv::Expression("Image::ExifTool::Exif::ExifTime($val)".to_string())),
        }),
        (65, TagInfo {
            name: "OriginatingProgram",
            format: "string[0,32]",
            print_conv: None,
            value_conv: None,
        }),
        (70, TagInfo {
            name: "ProgramVersion",
            format: "string[0,10]",
            print_conv: None,
            value_conv: None,
        }),
        (75, TagInfo {
            name: "ObjectCycle",
            format: "string[1]",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (80, TagInfo {
            name: "By-line",
            format: "string[0,32]",
            print_conv: None,
            value_conv: None,
        }),
        (85, TagInfo {
            name: "By-lineTitle",
            format: "string[0,32]",
            print_conv: None,
            value_conv: None,
        }),
        (90, TagInfo {
            name: "City",
            format: "string[0,32]",
            print_conv: None,
            value_conv: None,
        }),
        (92, TagInfo {
            name: "Sub-location",
            format: "string[0,32]",
            print_conv: None,
            value_conv: None,
        }),
        (95, TagInfo {
            name: "Province-State",
            format: "string[0,32]",
            print_conv: None,
            value_conv: None,
        }),
        (100, TagInfo {
            name: "Country-PrimaryLocationCode",
            format: "string[3]",
            print_conv: None,
            value_conv: None,
        }),
        (101, TagInfo {
            name: "Country-PrimaryLocationName",
            format: "string[0,64]",
            print_conv: None,
            value_conv: None,
        }),
        (103, TagInfo {
            name: "OriginalTransmissionReference",
            format: "string[0,32]",
            print_conv: None,
            value_conv: None,
        }),
        (105, TagInfo {
            name: "Headline",
            format: "string[0,256]",
            print_conv: None,
            value_conv: None,
        }),
        (110, TagInfo {
            name: "Credit",
            format: "string[0,32]",
            print_conv: None,
            value_conv: None,
        }),
        (115, TagInfo {
            name: "Source",
            format: "string[0,32]",
            print_conv: None,
            value_conv: None,
        }),
        (116, TagInfo {
            name: "CopyrightNotice",
            format: "string[0,128]",
            print_conv: None,
            value_conv: None,
        }),
        (118, TagInfo {
            name: "Contact",
            format: "string[0,128]",
            print_conv: None,
            value_conv: None,
        }),
        (120, TagInfo {
            name: "Caption-Abstract",
            format: "string[0,2000]",
            print_conv: None,
            value_conv: None,
        }),
        (121, TagInfo {
            name: "LocalCaption",
            format: "string[0,256]",
            print_conv: None,
            value_conv: None,
        }),
        (122, TagInfo {
            name: "Writer-Editor",
            format: "string[0,32]",
            print_conv: None,
            value_conv: None,
        }),
        (125, TagInfo {
            name: "RasterizedCaption",
            format: "undef[7360]",
            print_conv: None,
            value_conv: None,
        }),
        (130, TagInfo {
            name: "ImageType",
            format: "string[2]",
            print_conv: None,
            value_conv: None,
        }),
        (131, TagInfo {
            name: "ImageOrientation",
            format: "string[1]",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (135, TagInfo {
            name: "LanguageIdentifier",
            format: "string[2,3]",
            print_conv: None,
            value_conv: None,
        }),
        (150, TagInfo {
            name: "AudioType",
            format: "string[2]",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (151, TagInfo {
            name: "AudioSamplingRate",
            format: "digits[6]",
            print_conv: None,
            value_conv: None,
        }),
        (152, TagInfo {
            name: "AudioSamplingResolution",
            format: "digits[2]",
            print_conv: None,
            value_conv: None,
        }),
        (153, TagInfo {
            name: "AudioDuration",
            format: "digits[6]",
            print_conv: None,
            value_conv: None,
        }),
        (154, TagInfo {
            name: "AudioOutcue",
            format: "string[0,64]",
            print_conv: None,
            value_conv: None,
        }),
        (184, TagInfo {
            name: "JobID",
            format: "string[0,64]",
            print_conv: None,
            value_conv: None,
        }),
        (185, TagInfo {
            name: "MasterDocumentID",
            format: "string[0,256]",
            print_conv: None,
            value_conv: None,
        }),
        (186, TagInfo {
            name: "ShortDocumentID",
            format: "string[0,64]",
            print_conv: None,
            value_conv: None,
        }),
        (187, TagInfo {
            name: "UniqueDocumentID",
            format: "string[0,128]",
            print_conv: None,
            value_conv: None,
        }),
        (188, TagInfo {
            name: "OwnerID",
            format: "string[0,128]",
            print_conv: None,
            value_conv: None,
        }),
        (200, TagInfo {
            name: "ObjectPreviewFileFormat",
            format: "int16u",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (201, TagInfo {
            name: "ObjectPreviewFileVersion",
            format: "int16u",
            print_conv: None,
            value_conv: None,
        }),
        (202, TagInfo {
            name: "ObjectPreviewData",
            format: "undef[0,256000]",
            print_conv: None,
            value_conv: None,
        }),
        (221, TagInfo {
            name: "Prefs",
            format: "string[0,64]",
            print_conv: Some(PrintConv::Expression("\n            $val =~ s[\\s*(\\d+):\\s*(\\d+):\\s*(\\d+):\\s*(\\S*)]\n                     [Tagged:$1, ColorClass:$2, Rating:$3, FrameNum:$4];\n            return $val;\n        ".to_string())),
            value_conv: None,
        }),
        (225, TagInfo {
            name: "ClassifyState",
            format: "string[0,64]",
            print_conv: None,
            value_conv: None,
        }),
        (228, TagInfo {
            name: "SimilarityIndex",
            format: "string[0,32]",
            print_conv: None,
            value_conv: None,
        }),
        (230, TagInfo {
            name: "DocumentNotes",
            format: "string[0,1024]",
            print_conv: None,
            value_conv: None,
        }),
        (231, TagInfo {
            name: "DocumentHistory",
            format: "string[0,256]",
            print_conv: None,
            value_conv: Some(ValueConv::Expression("$val =~ s/\\0+/\\n/g; $val".to_string())),
        }),
        (232, TagInfo {
            name: "ExifCameraInfo",
            format: "string[0,4096]",
            print_conv: None,
            value_conv: None,
        }),
        (255, TagInfo {
            name: "CatalogSets",
            format: "string[0,256]",
            print_conv: None,
            value_conv: None,
        }),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = IPTC_APPLICATIONRECORD_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = IPTC_APPLICATIONRECORD_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
