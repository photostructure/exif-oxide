//! Generated composite tag definitions and registry
//!
//! This file is auto-generated by codegen/src/strategies/composite_tag.rs. Do not edit manually.
//!
//! This module provides:
//! - CompositeTagDef: Structure defining composite tag dependencies and calculation logic
//! - COMPOSITE_TAGS: Global registry of all composite tag definitions

use std::collections::HashMap;
use std::sync::LazyLock;

/// Definition of a composite tag with dependencies and calculation logic
///
/// Mirrors ExifTool's composite tag structure from AddCompositeTags() function.
/// See: third-party/exiftool/lib/Image/ExifTool.pm:5662-5720
#[derive(Debug, Clone)]
pub struct CompositeTagDef {
    /// Tag name (e.g., "GPSLatitude", "ImageSize")
    pub name: &'static str,

    /// Source module (e.g., "GPS", "Exif", "Canon")
    pub module: &'static str,

    /// Required tag dependencies that must exist
    pub require: &'static [&'static str],

    /// Optional tag dependencies that enhance calculation
    pub desire: &'static [&'static str],

    /// Tags that inhibit this composite if present
    pub inhibit: &'static [&'static str],

    /// ExifTool ValueConv expression for calculation
    pub value_conv: Option<&'static str>,

    /// ExifTool PrintConv expression for formatting
    pub print_conv: Option<&'static str>,

    /// Human-readable description
    pub description: Option<&'static str>,

    /// Group assignments by family number
    pub groups: &'static [(u8, &'static str)],
}

/// Aperture composite tag definition from Exif module
pub static COMPOSITE_EXIF_APERTURE: CompositeTagDef = CompositeTagDef {
    name: "Aperture",
    module: "Exif",
    require: &[],
    desire: &["FNumber", "ApertureValue"],
    inhibit: &[],
    value_conv: Some("$val[0] || $val[1]"),
    print_conv: Some("Image::ExifTool::Exif::PrintFNumber($val)"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Image")],
};

/// BlueBalance composite tag definition from Exif module
pub static COMPOSITE_EXIF_BLUEBALANCE: CompositeTagDef = CompositeTagDef {
    name: "BlueBalance",
    module: "Exif",
    require: &[],
    desire: &[
        "WB_RGGBLevels",
        "WB_RGBGLevels",
        "WBGreenLevel",
        "WB_RBGGLevels",
        "WB_GRBGLevels",
        "WB_GRGBLevels",
        "WB_GBRGLevels",
        "WB_RGBLevels",
        "WB_GRBLevels",
        "WB_RBLevels",
        "WBBlueLevel",
    ],
    inhibit: &[],
    value_conv: Some("Image::ExifTool::Exif::RedBlueBalance(1,@val)"),
    print_conv: Some("int($val * 1e6 + 0.5) * 1e-6"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// CFAPattern composite tag definition from Exif module
pub static COMPOSITE_EXIF_CFAPATTERN: CompositeTagDef = CompositeTagDef {
    name: "CFAPattern",
    module: "Exif",
    require: &[
        "CFARepeatPatternDim",
        "CFAPattern2",
    ],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\n            my @a = split / /, $val[0];\n            my @b = split / /, $val[1];\n            return '?' unless @a==2 and @b==$a[0]*$a[1];\n            return \"$a[0] $a[1] @b\";\n        "),
    print_conv: Some("Image::ExifTool::Exif::PrintCFAPattern($val)"),
    description: None,
    groups: &[
        (0, "Composite"),
        (1, "Composite"),
        (2, "Image"),
    ],
};

/// CircleOfConfusion composite tag definition from Exif module
pub static COMPOSITE_EXIF_CIRCLEOFCONFUSION: CompositeTagDef = CompositeTagDef {
    name: "CircleOfConfusion",
    module: "Exif",
    require: &["ScaleFactor35efl"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("sqrt(24*24+36*36) / ($val * 1440)"),
    print_conv: Some("sprintf(\"%.3f mm\",$val)"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// DOF composite tag definition from Exif module
/// Depth Of Field
pub static COMPOSITE_EXIF_DOF: CompositeTagDef = CompositeTagDef {
    name: "DOF",
    module: "Exif",
    require: &[
        "FocalLength",
        "Aperture",
        "CircleOfConfusion",
    ],
    desire: &[
        "FocusDistance",
        "SubjectDistance",
        "ObjectDistance",
        "ApproximateFocusDistance",
        "FocusDistanceLower",
        "FocusDistanceUpper",
    ],
    inhibit: &[],
    value_conv: Some("\n            ToFloat(@val);\n            my ($d, $f) = ($val[3], $val[0]);\n            if (defined $d) {\n                $d or $d = 1e10;    # (use large number for infinity)\n            } else {\n                $d = $val[4] || $val[5] || $val[6];\n                unless (defined $d) {\n                    return undef unless defined $val[7] and defined $val[8];\n                    $d = ($val[7] + $val[8]) / 2;\n                }\n            }\n            return 0 unless $f and $val[2];\n            my $t = $val[1] * $val[2] * ($d * 1000 - $f) / ($f * $f);\n            my @v = ($d / (1 + $t), $d / (1 - $t));\n            $v[1] < 0 and $v[1] = 0; # 0 means 'inf'\n            return join(' ',@v);\n        "),
    print_conv: Some(r#"
            $val =~ tr/,/./;    # in case locale is whacky
            my @v = split ' ', $val;
            $v[1] or return sprintf("inf (%.2f m - inf)", $v[0]);
            my $dof = $v[1] - $v[0];
            my $fmt = ($dof>0 and $dof<0.02) ? "%.3f" : "%.2f";
            return sprintf("$fmt m ($fmt - $fmt m)",$dof,$v[0],$v[1]);
        "#),
    description: Some("Depth Of Field"),
    groups: &[
        (0, "Composite"),
        (1, "Composite"),
        (2, "Image"),
    ],
};

/// DateTimeOriginal composite tag definition from Exif module
/// Date/Time Original
pub static COMPOSITE_EXIF_DATETIMEORIGINAL: CompositeTagDef = CompositeTagDef {
    name: "DateTimeOriginal",
    module: "Exif",
    require: &[],
    desire: &["DateTimeCreated", "DateCreated", "TimeCreated"],
    inhibit: &[],
    value_conv: Some(
        r#"
            return $val[0] if $val[0] and $val[0]=~/ /;
            return "$val[1] $val[2]";
        "#,
    ),
    print_conv: Some("$self->ConvertDateTime($val)"),
    description: Some("Date/Time Original"),
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Time")],
};

/// FOV composite tag definition from Exif module
/// Field Of View
pub static COMPOSITE_EXIF_FOV: CompositeTagDef = CompositeTagDef {
    name: "FOV",
    module: "Exif",
    require: &[
        "FocalLength",
        "ScaleFactor35efl",
    ],
    desire: &[
        "FocusDistance",
    ],
    inhibit: &[],
    value_conv: Some("\n            ToFloat(@val);\n            return undef unless $val[0] and $val[1];\n            my $corr = 1;\n            if ($val[2]) {\n                my $d = 1000 * $val[2] - $val[0];\n                $corr += $val[0]/$d if $d > 0;\n            }\n            my $fd2 = atan2(36, 2*$val[0]*$val[1]*$corr);\n            my @fov = ( $fd2 * 360 / 3.14159 );\n            if ($val[2] and $val[2] > 0 and $val[2] < 10000) {\n                push @fov, 2 * $val[2] * sin($fd2) / cos($fd2);\n            }\n            return join(' ', @fov);\n        "),
    print_conv: Some("\n            my @v = split(' ',$val);\n            my $str = sprintf(\"%.1f deg\", $v[0]);\n            $str .= sprintf(\" (%.2f m)\", $v[1]) if $v[1];\n            return $str;\n        "),
    description: Some("Field Of View"),
    groups: &[
        (0, "Composite"),
        (1, "Composite"),
        (2, "Image"),
    ],
};

/// FocalLength35efl composite tag definition from Exif module
/// Focal Length
pub static COMPOSITE_EXIF_FOCALLENGTH35EFL: CompositeTagDef = CompositeTagDef {
    name: "FocalLength35efl",
    module: "Exif",
    require: &[
        "FocalLength",
    ],
    desire: &[
        "ScaleFactor35efl",
    ],
    inhibit: &[],
    value_conv: Some("ToFloat(@val); ($val[0] || 0) * ($val[1] || 1)"),
    print_conv: Some("$val[1] ? sprintf(\"%.1f mm (35 mm equivalent: %.1f mm)\", $val[0], $val) : sprintf(\"%.1f mm\", $val)"),
    description: Some("Focal Length"),
    groups: &[
        (0, "Composite"),
        (1, "Composite"),
        (2, "Camera"),
    ],
};

/// GPSPosition composite tag definition from Exif module
pub static COMPOSITE_EXIF_GPSPOSITION: CompositeTagDef = CompositeTagDef {
    name: "GPSPosition",
    module: "Exif",
    require: &["GPSLatitude", "GPSLongitude"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("(length($val[0]) or length($val[1])) ? \"$val[0] $val[1]\" : undef"),
    print_conv: Some("\"$prt[0], $prt[1]\""),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// HyperfocalDistance composite tag definition from Exif module
pub static COMPOSITE_EXIF_HYPERFOCALDISTANCE: CompositeTagDef = CompositeTagDef {
    name: "HyperfocalDistance",
    module: "Exif",
    require: &[
        "FocalLength",
        "Aperture",
        "CircleOfConfusion",
    ],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\n            ToFloat(@val);\n            return 'inf' unless $val[1] and $val[2];\n            return $val[0] * $val[0] / ($val[1] * $val[2] * 1000);\n        "),
    print_conv: Some("sprintf(\"%.2f m\", $val)"),
    description: None,
    groups: &[
        (0, "Composite"),
        (1, "Composite"),
        (2, "Camera"),
    ],
};

/// ImageSize composite tag definition from Exif module
pub static COMPOSITE_EXIF_IMAGESIZE: CompositeTagDef = CompositeTagDef {
    name: "ImageSize",
    module: "Exif",
    require: &["ImageWidth", "ImageHeight"],
    desire: &["ExifImageWidth", "ExifImageHeight", "RawImageCroppedSize"],
    inhibit: &[],
    value_conv: Some(
        r#"
            return $val[4] if $val[4];
            return "$val[2] $val[3]" if $val[2] and $val[3] and
                    $$self{TIFF_TYPE} =~ /^(CR2|Canon 1D RAW|IIQ|EIP)$/;
            return "$val[0] $val[1]" if IsFloat($val[0]) and IsFloat($val[1]);
            return undef;
        "#,
    ),
    print_conv: Some(r"$val =~ tr/ /x/; $val"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Image")],
};

/// JpgFromRaw composite tag definition from Exif module
pub static COMPOSITE_EXIF_JPGFROMRAW: CompositeTagDef = CompositeTagDef {
    name: "JpgFromRaw",
    module: "Exif",
    require: &["JpgFromRawStart", "JpgFromRawLength"],
    desire: &[],
    inhibit: &[],
    value_conv: None,
    print_conv: None,
    description: None,
    groups: &[(0, "EXIF"), (1, "SubIFD"), (2, "Preview")],
};

/// LensID composite tag definition from Exif module
pub static COMPOSITE_EXIF_LENSID: CompositeTagDef = CompositeTagDef {
    name: "LensID",
    module: "Exif",
    require: &[
        "LensType",
    ],
    desire: &[
        "FocalLength",
        "LensType3",
        "LensFocalLength",
        "RFLensType",
        "MaxAperture",
        "MaxApertureValue",
        "MinFocalLength",
        "MaxFocalLength",
        "LensModel",
        "LensFocalRange",
        "LensSpec",
        "LensType2",
    ],
    inhibit: &[],
    value_conv: Some("$val"),
    print_conv: Some("\n            my $pcv;\n            # use LensType2 instead of LensType if available and valid (Sony E-mount lenses)\n            # (0x8000 or greater; 0 for several older/3rd-party E-mount lenses)\n            if (defined $val[9] and ($val[9] & 0x8000 or $val[9] == 0)) {\n                $val[0] = $val[9];\n                $prt[0] = $prt[9];\n                # Particularly GM lenses: often LensType2=0 but LensType3 is available and valid: use LensType3.\n                if ($val[9] == 0 and $val[10] & 0x8000) {\n                   $val[0] = $val[10];\n                   $prt[0] = $prt[10];\n                }\n                $pcv = $$self{TAG_INFO}{LensType2}{PrintConv};\n            }\n            # use Canon RFLensType if available\n            if ($val[12]) {\n                $val[0] = $val[12];\n                $prt[0] = $prt[12];\n                $pcv = $$self{TAG_INFO}{RFLensType}{PrintConv};\n            }\n            my $lens = Image::ExifTool::Exif::PrintLensID($self, $prt[0], $pcv, $prt[8], @val);\n            # check for use of lens converter (Pentax K-3)\n            if ($val[11] and $val[1] and $lens) {\n                my $conv = $val[1] / $val[11];\n                $lens .= sprintf(' + %.1fx converter', $conv) if $conv > 1.1;\n            }\n            return $lens;\n        "),
    description: None,
    groups: &[
        (0, "Composite"),
        (1, "Composite"),
        (2, "Camera"),
    ],
};

/// LensID-2 composite tag definition from Exif module
pub static COMPOSITE_EXIF_LENSID_2: CompositeTagDef = CompositeTagDef {
    name: "LensID-2",
    module: "Exif",
    require: &[],
    desire: &["LensModel", "Lens", "XMP-aux:LensID", "Make"],
    inhibit: &["Composite:LensID"],
    value_conv: Some(
        r"
            return $val[0] if defined $val[0] and $val[0] =~ /(mm|\d\/F)/;
            return $val[1];
        ",
    ),
    print_conv: Some(r"$_=$val; s/(\d)\/F/$1mm F/; s/mmF/mm F/; s/(\d) mm/${1}mm/; s/ - /-/; $_"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// LightValue composite tag definition from Exif module
pub static COMPOSITE_EXIF_LIGHTVALUE: CompositeTagDef = CompositeTagDef {
    name: "LightValue",
    module: "Exif",
    require: &["Aperture", "ShutterSpeed", "ISO"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("Image::ExifTool::Exif::CalculateLV($val[0],$val[1],$prt[2])"),
    print_conv: Some("sprintf(\"%.1f\",$val)"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Image")],
};

/// Megapixels composite tag definition from Exif module
pub static COMPOSITE_EXIF_MEGAPIXELS: CompositeTagDef = CompositeTagDef {
    name: "Megapixels",
    module: "Exif",
    require: &["ImageSize"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"my @d = ($val =~ /\d+/g); $d[0] * $d[1] / 1000000"),
    print_conv: Some("sprintf(\"%.*f\", ($val >= 1 ? 1 : ($val >= 0.001 ? 3 : 6)), $val)"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Image")],
};

/// OtherImage composite tag definition from Exif module
pub static COMPOSITE_EXIF_OTHERIMAGE: CompositeTagDef = CompositeTagDef {
    name: "OtherImage",
    module: "Exif",
    require: &["OtherImageStart", "OtherImageLength"],
    desire: &["OtherImageStart (1)", "OtherImageLength (1)"],
    inhibit: &[],
    value_conv: None,
    print_conv: None,
    description: None,
    groups: &[(0, "EXIF"), (1, "SubIFD"), (2, "Preview")],
};

/// PreviewImage composite tag definition from Exif module
pub static COMPOSITE_EXIF_PREVIEWIMAGE: CompositeTagDef = CompositeTagDef {
    name: "PreviewImage",
    module: "Exif",
    require: &["PreviewImageStart", "PreviewImageLength"],
    desire: &[
        "PreviewImageValid",
        "PreviewImageStart (1)",
        "PreviewImageLength (1)",
    ],
    inhibit: &[],
    value_conv: None,
    print_conv: None,
    description: None,
    groups: &[(0, "EXIF"), (1, "SubIFD"), (2, "Preview")],
};

/// PreviewImageSize composite tag definition from Exif module
pub static COMPOSITE_EXIF_PREVIEWIMAGESIZE: CompositeTagDef = CompositeTagDef {
    name: "PreviewImageSize",
    module: "Exif",
    require: &["PreviewImageWidth", "PreviewImageHeight"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\"$val[0]x$val[1]\""),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Image")],
};

/// PreviewJXL composite tag definition from Exif module
pub static COMPOSITE_EXIF_PREVIEWJXL: CompositeTagDef = CompositeTagDef {
    name: "PreviewJXL",
    module: "Exif",
    require: &["PreviewJXLStart", "PreviewJXLLength"],
    desire: &["PreviewJXLStart (1)", "PreviewJXLLength (1)"],
    inhibit: &[],
    value_conv: None,
    print_conv: None,
    description: None,
    groups: &[(0, "EXIF"), (1, "SubIFD"), (2, "Preview")],
};

/// RedBalance composite tag definition from Exif module
pub static COMPOSITE_EXIF_REDBALANCE: CompositeTagDef = CompositeTagDef {
    name: "RedBalance",
    module: "Exif",
    require: &[],
    desire: &[
        "WB_RGGBLevels",
        "WB_RGBGLevels",
        "WBGreenLevel",
        "WB_RBGGLevels",
        "WB_GRBGLevels",
        "WB_GRGBLevels",
        "WB_GBRGLevels",
        "WB_RGBLevels",
        "WB_GRBLevels",
        "WB_RBLevels",
        "WBRedLevel",
    ],
    inhibit: &[],
    value_conv: Some("Image::ExifTool::Exif::RedBlueBalance(0,@val)"),
    print_conv: Some("int($val * 1e6 + 0.5) * 1e-6"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// ScaleFactor35efl composite tag definition from Exif module
/// Scale Factor To 35 mm Equivalent
pub static COMPOSITE_EXIF_SCALEFACTOR35EFL: CompositeTagDef = CompositeTagDef {
    name: "ScaleFactor35efl",
    module: "Exif",
    require: &[],
    desire: &[
        "FocalLength",
        "FocalLengthIn35mmFormat",
        "ExifImageWidth",
        "ExifImageHeight",
        "CanonImageWidth",
        "CanonImageHeight",
        "ImageWidth",
        "ImageHeight",
        "Composite:DigitalZoom",
        "FocalPlaneDiagonal",
        "SensorSize",
        "FocalPlaneXSize",
        "FocalPlaneYSize",
        "FocalPlaneResolutionUnit",
        "FocalPlaneXResolution",
        "FocalPlaneYResolution",
    ],
    inhibit: &[],
    value_conv: Some("Image::ExifTool::Exif::CalcScaleFactor35efl($self, @val)"),
    print_conv: Some("sprintf(\"%.1f\", $val)"),
    description: Some("Scale Factor To 35 mm Equivalent"),
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// ShutterSpeed composite tag definition from Exif module
pub static COMPOSITE_EXIF_SHUTTERSPEED: CompositeTagDef = CompositeTagDef {
    name: "ShutterSpeed",
    module: "Exif",
    require: &[],
    desire: &["ExposureTime", "ShutterSpeedValue", "BulbDuration"],
    inhibit: &[],
    value_conv: Some("($val[2] and $val[2]>0) ? $val[2] : (defined($val[0]) ? $val[0] : $val[1])"),
    print_conv: Some("Image::ExifTool::Exif::PrintExposureTime($val)"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Image")],
};

/// SubSecCreateDate composite tag definition from Exif module
/// Create Date
pub static COMPOSITE_EXIF_SUBSECCREATEDATE: CompositeTagDef = CompositeTagDef {
    name: "SubSecCreateDate",
    module: "Exif",
    require: &["EXIF:CreateDate"],
    desire: &["SubSecTimeDigitized", "OffsetTimeDigitized"],
    inhibit: &[],
    value_conv: None,
    print_conv: Some("$self->ConvertDateTime($val)"),
    description: Some("Create Date"),
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Time")],
};

/// SubSecDateTimeOriginal composite tag definition from Exif module
/// Date/Time Original
pub static COMPOSITE_EXIF_SUBSECDATETIMEORIGINAL: CompositeTagDef = CompositeTagDef {
    name: "SubSecDateTimeOriginal",
    module: "Exif",
    require: &["EXIF:DateTimeOriginal"],
    desire: &["SubSecTimeOriginal", "OffsetTimeOriginal"],
    inhibit: &[],
    value_conv: None,
    print_conv: Some("$self->ConvertDateTime($val)"),
    description: Some("Date/Time Original"),
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Time")],
};

/// SubSecModifyDate composite tag definition from Exif module
/// Modify Date
pub static COMPOSITE_EXIF_SUBSECMODIFYDATE: CompositeTagDef = CompositeTagDef {
    name: "SubSecModifyDate",
    module: "Exif",
    require: &["EXIF:ModifyDate"],
    desire: &["SubSecTime", "OffsetTime"],
    inhibit: &[],
    value_conv: None,
    print_conv: Some("$self->ConvertDateTime($val)"),
    description: Some("Modify Date"),
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Time")],
};

/// ThumbnailImage composite tag definition from Exif module
pub static COMPOSITE_EXIF_THUMBNAILIMAGE: CompositeTagDef = CompositeTagDef {
    name: "ThumbnailImage",
    module: "Exif",
    require: &["ThumbnailOffset", "ThumbnailLength"],
    desire: &[],
    inhibit: &[],
    value_conv: None,
    print_conv: None,
    description: None,
    groups: &[(0, "EXIF"), (1, "IFD1"), (2, "Preview")],
};

/// ThumbnailTIFF composite tag definition from Exif module
pub static COMPOSITE_EXIF_THUMBNAILTIFF: CompositeTagDef = CompositeTagDef {
    name: "ThumbnailTIFF",
    module: "Exif",
    require: &[
        "SubfileType",
        "Compression",
        "ImageWidth",
        "ImageHeight",
        "BitsPerSample",
        "PhotometricInterpretation",
        "StripOffsets",
        "SamplesPerPixel",
        "RowsPerStrip",
        "StripByteCounts",
    ],
    desire: &["PlanarConfiguration", "Orientation"],
    inhibit: &[],
    value_conv: None,
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Preview")],
};

/// GPSAltitude composite tag definition from GPS module
pub static COMPOSITE_GPS_GPSALTITUDE: CompositeTagDef = CompositeTagDef {
    name: "GPSAltitude",
    module: "GPS",
    require: &[],
    desire: &[
        "GPS:GPSAltitude",
        "GPS:GPSAltitudeRef",
        "XMP:GPSAltitude",
        "XMP:GPSAltitudeRef",
    ],
    inhibit: &[],
    value_conv: Some("\n            foreach (0,2) {\n                next unless defined $val[$_] and IsFloat($val[$_]) and defined $val[$_+1];\n                return $val[$_+1] ? -abs($val[$_]) : $val[$_];\n            }\n            return undef;\n        "),
    print_conv: Some(r#"
            foreach (0,2) {
                next unless defined $val[$_] and IsFloat($val[$_]);
                next unless defined $prt[$_+1] and $prt[$_+1] =~ /Sea/;
                return((int($val[$_]*10)/10) . ' m ' . $prt[$_+1]);
            }
            $val = int($val * 10) / 10;
            return(($val =~ s/^-// ? "$val m Below" : "$val m Above") . " Sea Level");
        "#),
    description: None,
    groups: &[
        (0, "Composite"),
        (1, "Composite"),
        (2, "Location"),
    ],
};

/// GPSDateTime composite tag definition from GPS module
/// GPS Date/Time
pub static COMPOSITE_GPS_GPSDATETIME: CompositeTagDef = CompositeTagDef {
    name: "GPSDateTime",
    module: "GPS",
    require: &["GPS:GPSDateStamp", "GPS:GPSTimeStamp"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\"$val[0] $val[1]Z\""),
    print_conv: Some("$self->ConvertDateTime($val)"),
    description: Some("GPS Date/Time"),
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Time")],
};

/// GPSDestLatitude composite tag definition from GPS module
pub static COMPOSITE_GPS_GPSDESTLATITUDE: CompositeTagDef = CompositeTagDef {
    name: "GPSDestLatitude",
    module: "GPS",
    require: &["GPS:GPSDestLatitude", "GPS:GPSDestLatitudeRef"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"$val[1] =~ /^S/i ? -$val[0] : $val[0]"),
    print_conv: Some("Image::ExifTool::GPS::ToDMS($self, $val, 1, \"N\")"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// GPSDestLongitude composite tag definition from GPS module
pub static COMPOSITE_GPS_GPSDESTLONGITUDE: CompositeTagDef = CompositeTagDef {
    name: "GPSDestLongitude",
    module: "GPS",
    require: &["GPS:GPSDestLongitude", "GPS:GPSDestLongitudeRef"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"$val[1] =~ /^W/i ? -$val[0] : $val[0]"),
    print_conv: Some("Image::ExifTool::GPS::ToDMS($self, $val, 1, \"E\")"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// GPSLatitude composite tag definition from GPS module
pub static COMPOSITE_GPS_GPSLATITUDE: CompositeTagDef = CompositeTagDef {
    name: "GPSLatitude",
    module: "GPS",
    require: &["GPS:GPSLatitude", "GPS:GPSLatitudeRef"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"$val[1] =~ /^S/i ? -$val[0] : $val[0]"),
    print_conv: Some("Image::ExifTool::GPS::ToDMS($self, $val, 1, \"N\")"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// GPSLongitude composite tag definition from GPS module
pub static COMPOSITE_GPS_GPSLONGITUDE: CompositeTagDef = CompositeTagDef {
    name: "GPSLongitude",
    module: "GPS",
    require: &["GPS:GPSLongitude", "GPS:GPSLongitudeRef"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"$val[1] =~ /^W/i ? -$val[0] : $val[0]"),
    print_conv: Some("Image::ExifTool::GPS::ToDMS($self, $val, 1, \"E\")"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// DateTimeCreated composite tag definition from IPTC module
/// Date/Time Created
pub static COMPOSITE_IPTC_DATETIMECREATED: CompositeTagDef = CompositeTagDef {
    name: "DateTimeCreated",
    module: "IPTC",
    require: &["IPTC:DateCreated", "IPTC:TimeCreated"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\"$val[0] $val[1]\""),
    print_conv: Some("$self->ConvertDateTime($val)"),
    description: Some("Date/Time Created"),
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Time")],
};

/// DigitalCreationDateTime composite tag definition from IPTC module
/// Digital Creation Date/Time
pub static COMPOSITE_IPTC_DIGITALCREATIONDATETIME: CompositeTagDef = CompositeTagDef {
    name: "DigitalCreationDateTime",
    module: "IPTC",
    require: &["IPTC:DigitalCreationDate", "IPTC:DigitalCreationTime"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\"$val[0] $val[1]\""),
    print_conv: Some("$self->ConvertDateTime($val)"),
    description: Some("Digital Creation Date/Time"),
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Time")],
};

/// RunTimeSincePowerUp composite tag definition from Apple module
pub static COMPOSITE_APPLE_RUNTIMESINCEPOWERUP: CompositeTagDef = CompositeTagDef {
    name: "RunTimeSincePowerUp",
    module: "Apple",
    require: &["Apple:RunTimeValue", "Apple:RunTimeScale"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("$val[1] ? $val[0] / $val[1] : undef"),
    print_conv: Some("ConvertDuration($val)"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// ConditionalFEC composite tag definition from Canon module
/// Flash Exposure Compensation
pub static COMPOSITE_CANON_CONDITIONALFEC: CompositeTagDef = CompositeTagDef {
    name: "ConditionalFEC",
    module: "Canon",
    require: &["FlashExposureComp", "FlashBits"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("$val[0]"),
    print_conv: Some("$prt[0]"),
    description: Some("Flash Exposure Compensation"),
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// DigitalZoom composite tag definition from Canon module
pub static COMPOSITE_CANON_DIGITALZOOM: CompositeTagDef = CompositeTagDef {
    name: "DigitalZoom",
    module: "Canon",
    require: &[
        "Canon:ZoomSourceWidth",
        "Canon:ZoomTargetWidth",
        "Canon:DigitalZoom",
    ],
    desire: &[],
    inhibit: &[],
    value_conv: None,
    print_conv: Some("sprintf(\"%.2fx\",$val)"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// DriveMode composite tag definition from Canon module
pub static COMPOSITE_CANON_DRIVEMODE: CompositeTagDef = CompositeTagDef {
    name: "DriveMode",
    module: "Canon",
    require: &["ContinuousDrive", "SelfTimer"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("$val[0] ? 0 : ($val[1] ? 1 : 2)"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// FileNumber composite tag definition from Canon module
pub static COMPOSITE_CANON_FILENUMBER: CompositeTagDef = CompositeTagDef {
    name: "FileNumber",
    module: "Canon",
    require: &[
        "DirectoryIndex",
        "FileIndex",
    ],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\n            # fix the funny things that these numbers do when they wrap over 9999\n            # (it seems that FileIndex and DirectoryIndex actually store the\n            #  numbers from the previous image, so we need special logic\n            #  to handle the FileIndex wrap properly)\n            $val[1] == 10000 and $val[1] = 1, ++$val[0];\n            return sprintf(\"%.3d%.4d\",@val);\n        "),
    print_conv: Some(r"$_=$val;s/(\d+)(\d{4})/$1-$2/;$_"),
    description: None,
    groups: &[
        (0, "Composite"),
        (1, "Composite"),
        (2, "Image"),
    ],
};

/// FlashType composite tag definition from Canon module
pub static COMPOSITE_CANON_FLASHTYPE: CompositeTagDef = CompositeTagDef {
    name: "FlashType",
    module: "Canon",
    require: &["FlashBits"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("$val[0]&(1<<14)? 1 : 0"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// ISO composite tag definition from Canon module
pub static COMPOSITE_CANON_ISO: CompositeTagDef = CompositeTagDef {
    name: "ISO",
    module: "Canon",
    require: &[],
    desire: &["Canon:CameraISO", "Canon:BaseISO", "Canon:AutoISO"],
    inhibit: &[],
    value_conv: Some(
        r"
            return $val[0] if $val[0] and $val[0] =~ /^\d+$/;
            return undef unless $val[1] and $val[2];
            return $val[1] * $val[2] / 100;
        ",
    ),
    print_conv: Some("sprintf(\"%.0f\",$val)"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// Lens composite tag definition from Canon module
pub static COMPOSITE_CANON_LENS: CompositeTagDef = CompositeTagDef {
    name: "Lens",
    module: "Canon",
    require: &["Canon:MinFocalLength", "Canon:MaxFocalLength"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("$val[0]"),
    print_conv: Some("Image::ExifTool::Canon::PrintFocalRange(@val)"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// Lens35efl composite tag definition from Canon module
/// Lens
pub static COMPOSITE_CANON_LENS35EFL: CompositeTagDef = CompositeTagDef {
    name: "Lens35efl",
    module: "Canon",
    require: &[
        "Canon:MinFocalLength",
        "Canon:MaxFocalLength",
        "Lens",
    ],
    desire: &[
        "ScaleFactor35efl",
    ],
    inhibit: &[],
    value_conv: Some("$val[3] * ($val[2] ? $val[2] : 1)"),
    print_conv: Some("$prt[3] . ($val[2] ? sprintf(\" (35 mm equivalent: %s)\",Image::ExifTool::Canon::PrintFocalRange(@val)) : \"\")"),
    description: Some("Lens"),
    groups: &[
        (0, "Composite"),
        (1, "Composite"),
        (2, "Camera"),
    ],
};

/// OriginalDecisionData composite tag definition from Canon module
pub static COMPOSITE_CANON_ORIGINALDECISIONDATA: CompositeTagDef = CompositeTagDef {
    name: "OriginalDecisionData",
    module: "Canon",
    require: &["OriginalDecisionDataOffset"],
    desire: &[],
    inhibit: &[],
    value_conv: None,
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// RedEyeReduction composite tag definition from Canon module
pub static COMPOSITE_CANON_REDEYEREDUCTION: CompositeTagDef = CompositeTagDef {
    name: "RedEyeReduction",
    module: "Canon",
    require: &["CanonFlashMode", "FlashBits"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("($val[0]==3 or $val[0]==4 or $val[0]==6) ? 1 : 0"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// ShootingMode composite tag definition from Canon module
pub static COMPOSITE_CANON_SHOOTINGMODE: CompositeTagDef = CompositeTagDef {
    name: "ShootingMode",
    module: "Canon",
    require: &["CanonExposureMode", "EasyMode"],
    desire: &["BulbDuration"],
    inhibit: &[],
    value_conv: Some("$val[0] ? (($val[0] eq \"4\" and $val[2]) ? 7 : $val[0]) : $val[1] + 10"),
    print_conv: Some("$val eq \"7\" ? \"Bulb\" : ($val[0] ? $prt[0] : $prt[1])"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// ShutterCurtainHack composite tag definition from Canon module
/// Shutter Curtain Sync
pub static COMPOSITE_CANON_SHUTTERCURTAINHACK: CompositeTagDef = CompositeTagDef {
    name: "ShutterCurtainHack",
    module: "Canon",
    require: &["FlashBits"],
    desire: &["ShutterCurtainSync"],
    inhibit: &[],
    value_conv: Some("defined($val[0]) ? $val[0] : 0"),
    print_conv: None,
    description: Some("Shutter Curtain Sync"),
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// WB_RGGBLevels composite tag definition from Canon module
pub static COMPOSITE_CANON_WB_RGGBLEVELS: CompositeTagDef = CompositeTagDef {
    name: "WB_RGGBLevels",
    module: "Canon",
    require: &["Canon:WhiteBalance"],
    desire: &[
        "WB_RGGBLevelsAsShot",
        "WB_RGGBLevelsShade",
        "WB_RGGBLevelsKelvin",
        "WB_RGGBLevelsAuto",
        "WB_RGGBLevelsDaylight",
        "WB_RGGBLevelsCloudy",
        "WB_RGGBLevelsTungsten",
        "WB_RGGBLevelsFluorescent",
        "WB_RGGBLevelsFlash",
        "WB_RGGBLevelsCustom",
    ],
    inhibit: &[],
    value_conv: Some("$val[1] ? $val[1] : $val[($val[0] || 0) + 2]"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// DateCreated composite tag definition from Kodak module
pub static COMPOSITE_KODAK_DATECREATED: CompositeTagDef = CompositeTagDef {
    name: "DateCreated",
    module: "Kodak",
    require: &["Kodak:YearCreated", "Kodak:MonthDayCreated"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\"$val[0]:$val[1]\""),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Time")],
};

/// WB_RGBLevels composite tag definition from Kodak module
pub static COMPOSITE_KODAK_WB_RGBLEVELS: CompositeTagDef = CompositeTagDef {
    name: "WB_RGBLevels",
    module: "Kodak",
    require: &["KDC_IFD:WhiteBalance"],
    desire: &[
        "WB_RGBLevelsAuto",
        "WB_RGBLevelsFluorescent",
        "WB_RGBLevelsTungsten",
        "WB_RGBLevelsDaylight",
        "WB_RGBLevels4",
        "WB_RGBLevels5",
        "WB_RGBLevelsShade",
    ],
    inhibit: &[],
    value_conv: Some("$val[$val[0] + 1]"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// WB_RGBLevels2 composite tag definition from Kodak module
pub static COMPOSITE_KODAK_WB_RGBLEVELS2: CompositeTagDef = CompositeTagDef {
    name: "WB_RGBLevels2",
    module: "Kodak",
    require: &[
        "KodakIFD:WhiteBalance",
        "WB_RGBMul0",
        "WB_RGBMul1",
        "WB_RGBMul2",
        "WB_RGBMul3",
        "WB_RGBCoeffs0",
        "WB_RGBCoeffs1",
        "WB_RGBCoeffs2",
        "WB_RGBCoeffs3",
    ],
    desire: &["Kodak:WB_RGBLevels", "KodakIFD:ColorTemperature"],
    inhibit: &[],
    value_conv: Some("Image::ExifTool::Kodak::CalculateRGBLevels(@val)"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// AutoFocus composite tag definition from Nikon module
pub static COMPOSITE_NIKON_AUTOFOCUS: CompositeTagDef = CompositeTagDef {
    name: "AutoFocus",
    module: "Nikon",
    require: &["Nikon:FocusMode"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"($val[0] =~ /^Manual/i) ? 0 : 1"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// ContrastDetectAF composite tag definition from Nikon module
pub static COMPOSITE_NIKON_CONTRASTDETECTAF: CompositeTagDef = CompositeTagDef {
    name: "ContrastDetectAF",
    module: "Nikon",
    require: &["Nikon:FocusMode", "Nikon:AFDetectionMethod"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"(($val[0] !~ /^Manual/i) and ($val[1] == 1)) ? 1 : 0"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// LensID composite tag definition from Nikon module
pub static COMPOSITE_NIKON_LENSID: CompositeTagDef = CompositeTagDef {
    name: "LensID",
    module: "Nikon",
    require: &[
        "Nikon:LensIDNumber",
        "LensFStops",
        "MinFocalLength",
        "MaxFocalLength",
        "MaxApertureAtMinFocal",
        "MaxApertureAtMaxFocal",
        "MCUVersion",
        "Nikon:LensType",
    ],
    desire: &[],
    inhibit: &[],
    value_conv: Some("sprintf(\"%.2X\".\" %.2X\"x7, @raw)"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// LensSpec composite tag definition from Nikon module
pub static COMPOSITE_NIKON_LENSSPEC: CompositeTagDef = CompositeTagDef {
    name: "LensSpec",
    module: "Nikon",
    require: &["Nikon:Lens", "Nikon:LensType"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\"$val[0] $val[1]\""),
    print_conv: Some("\"$prt[0] $prt[1]\""),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// PhaseDetectAF composite tag definition from Nikon module
pub static COMPOSITE_NIKON_PHASEDETECTAF: CompositeTagDef = CompositeTagDef {
    name: "PhaseDetectAF",
    module: "Nikon",
    require: &["Nikon:FocusPointSchema", "Nikon:AFDetectionMethod"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("(($val[1]) == 0) ?  ($val[0]) : 0"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// ExtenderStatus composite tag definition from Olympus module
pub static COMPOSITE_OLYMPUS_EXTENDERSTATUS: CompositeTagDef = CompositeTagDef {
    name: "ExtenderStatus",
    module: "Olympus",
    require: &["Olympus:Extender", "Olympus:LensType", "MaxApertureValue"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("Image::ExifTool::Olympus::ExtenderStatus($val[0],$prt[1],$val[2])"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// LensType composite tag definition from Olympus module
pub static COMPOSITE_OLYMPUS_LENSTYPE: CompositeTagDef = CompositeTagDef {
    name: "LensType",
    module: "Olympus",
    require: &["LensTypeMake", "LensTypeModel"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\"$val[0] $val[1]\""),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// ZoomedPreviewImage composite tag definition from Olympus module
pub static COMPOSITE_OLYMPUS_ZOOMEDPREVIEWIMAGE: CompositeTagDef = CompositeTagDef {
    name: "ZoomedPreviewImage",
    module: "Olympus",
    require: &["ZoomedPreviewStart", "ZoomedPreviewLength"],
    desire: &[],
    inhibit: &[],
    value_conv: None,
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Preview")],
};

/// AdvancedSceneMode composite tag definition from Panasonic module
pub static COMPOSITE_PANASONIC_ADVANCEDSCENEMODE: CompositeTagDef = CompositeTagDef {
    name: "AdvancedSceneMode",
    module: "Panasonic",
    require: &["Model", "SceneMode", "AdvancedSceneType"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\"$val[0] $val[1] $val[2]\""),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// LensID composite tag definition from Ricoh module
pub static COMPOSITE_RICOH_LENSID: CompositeTagDef = CompositeTagDef {
    name: "LensID",
    module: "Ricoh",
    require: &["Ricoh:LensFirmware"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"$val=~s/\s*:.*//; $val"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// RicohPitch composite tag definition from Ricoh module
pub static COMPOSITE_RICOH_RICOHPITCH: CompositeTagDef = CompositeTagDef {
    name: "RicohPitch",
    module: "Ricoh",
    require: &["Ricoh:Accelerometer"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("my @v = split(\" \",$val); $v[1]"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// RicohRoll composite tag definition from Ricoh module
pub static COMPOSITE_RICOH_RICOHROLL: CompositeTagDef = CompositeTagDef {
    name: "RicohRoll",
    module: "Ricoh",
    require: &["Ricoh:Accelerometer"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("my @v = split(\" \",$val); $v[0] <= 180 ? $v[0] : $v[0] - 360"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// DepthMapTiff composite tag definition from Samsung module
pub static COMPOSITE_SAMSUNG_DEPTHMAPTIFF: CompositeTagDef = CompositeTagDef {
    name: "DepthMapTiff",
    module: "Samsung",
    require: &[
        "DepthMapData",
        "DepthMapWidth",
        "DepthMapHeight",
    ],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\n            return undef unless length ${$val[0]} == $val[1] * $val[2];\n            my $tiff = MakeTiffHeader($val[1],$val[2],1,8) . ${$val[0]};\n            return \\$tiff;\n        "),
    print_conv: None,
    description: None,
    groups: &[
        (0, "Composite"),
        (1, "Composite"),
        (2, "Image"),
    ],
};

/// SingleShotDepthMapTiff composite tag definition from Samsung module
pub static COMPOSITE_SAMSUNG_SINGLESHOTDEPTHMAPTIFF: CompositeTagDef = CompositeTagDef {
    name: "SingleShotDepthMapTiff",
    module: "Samsung",
    require: &[
        "SingleShotDepthMap",
        "SegWidth",
        "SegHeight",
    ],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\n            return undef unless length ${$val[0]} == $val[1] * $val[2];\n            my $tiff = MakeTiffHeader($val[1],$val[2],1,8) . ${$val[0]};\n            return \\$tiff;\n        "),
    print_conv: None,
    description: None,
    groups: &[
        (0, "Composite"),
        (1, "Composite"),
        (2, "Image"),
    ],
};

/// WB_RGGBLevels composite tag definition from Samsung module
pub static COMPOSITE_SAMSUNG_WB_RGGBLEVELS: CompositeTagDef = CompositeTagDef {
    name: "WB_RGGBLevels",
    module: "Samsung",
    require: &[
        "WB_RGGBLevelsUncorrected",
        "WB_RGGBLevelsBlack",
    ],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\n            my @a = split ' ', $val[0];\n            my @b = split ' ', $val[1];\n            $a[$_] -= $b[$_] foreach 0..$#a;\n            return \"@a\";\n        "),
    print_conv: None,
    description: None,
    groups: &[
        (0, "Composite"),
        (1, "Composite"),
        (2, "Image"),
    ],
};

/// FocusDistance composite tag definition from Sony module
pub static COMPOSITE_SONY_FOCUSDISTANCE: CompositeTagDef = CompositeTagDef {
    name: "FocusDistance",
    module: "Sony",
    require: &["Sony:FocusPosition", "FocalLength"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("$val >= 128 ? \"inf\" : $val * $val[1] / 1000"),
    print_conv: Some("$val eq \"inf\" ? $val : \"$val m\""),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// FocusDistance2 composite tag definition from Sony module
pub static COMPOSITE_SONY_FOCUSDISTANCE2: CompositeTagDef = CompositeTagDef {
    name: "FocusDistance2",
    module: "Sony",
    require: &[
        "Sony:FocusPosition2",
        "FocalLengthIn35mmFormat",
    ],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\n            return undef unless $val;\n            return 'inf' if $val >= 255;\n            return (2**($val/16-5) + 1) * $val[1] / 1000;\n        "),
    print_conv: Some("$val eq \"inf\" ? $val : sprintf(\"%.4g m\", $val)"),
    description: None,
    groups: &[
        (0, "Composite"),
        (1, "Composite"),
        (2, "Camera"),
    ],
};

/// GPSDateTime composite tag definition from Sony module
/// GPS Date/Time
pub static COMPOSITE_SONY_GPSDATETIME: CompositeTagDef = CompositeTagDef {
    name: "GPSDateTime",
    module: "Sony",
    require: &["Sony:GPSDateStamp", "Sony:GPSTimeStamp"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("\"$val[0] $val[1]Z\""),
    print_conv: Some("$self->ConvertDateTime($val)"),
    description: Some("GPS Date/Time"),
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Time")],
};

/// GPSLatitude composite tag definition from Sony module
pub static COMPOSITE_SONY_GPSLATITUDE: CompositeTagDef = CompositeTagDef {
    name: "GPSLatitude",
    module: "Sony",
    require: &["Sony:GPSLatitude", "Sony:GPSLatitudeRef"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"$val[1] =~ /^S/i ? -$val[0] : $val[0]"),
    print_conv: Some("Image::ExifTool::GPS::ToDMS($self, $val, 1, \"N\")"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// GPSLongitude composite tag definition from Sony module
pub static COMPOSITE_SONY_GPSLONGITUDE: CompositeTagDef = CompositeTagDef {
    name: "GPSLongitude",
    module: "Sony",
    require: &["Sony:GPSLongitude", "Sony:GPSLongitudeRef"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"$val[1] =~ /^W/i ? -$val[0] : $val[0]"),
    print_conv: Some("Image::ExifTool::GPS::ToDMS($self, $val, 1, \"E\")"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// HiddenData composite tag definition from Sony module
pub static COMPOSITE_SONY_HIDDENDATA: CompositeTagDef = CompositeTagDef {
    name: "HiddenData",
    module: "Sony",
    require: &["Sony:HiddenDataOffset", "Sony:HiddenDataLength"],
    desire: &[],
    inhibit: &[],
    value_conv: None,
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// Duration composite tag definition from Vorbis module
pub static COMPOSITE_VORBIS_DURATION: CompositeTagDef = CompositeTagDef {
    name: "Duration",
    module: "Vorbis",
    require: &["Vorbis:NominalBitrate", "FileSize"],
    desire: &[],
    inhibit: &[],
    value_conv: None,
    print_conv: Some("ConvertDuration($val) . \" (approx)\""),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Other")],
};

/// ImageHeight composite tag definition from PanasonicRaw module
pub static COMPOSITE_PANASONICRAW_IMAGEHEIGHT: CompositeTagDef = CompositeTagDef {
    name: "ImageHeight",
    module: "PanasonicRaw",
    require: &["IFD0:SensorTopBorder", "IFD0:SensorBottomBorder"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("$val[1] - $val[0]"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Other")],
};

/// ImageWidth composite tag definition from PanasonicRaw module
pub static COMPOSITE_PANASONICRAW_IMAGEWIDTH: CompositeTagDef = CompositeTagDef {
    name: "ImageWidth",
    module: "PanasonicRaw",
    require: &["IFD0:SensorLeftBorder", "IFD0:SensorRightBorder"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("$val[1] - $val[0]"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Other")],
};

/// AvgBitrate composite tag definition from QuickTime module
pub static COMPOSITE_QUICKTIME_AVGBITRATE: CompositeTagDef = CompositeTagDef {
    name: "AvgBitrate",
    module: "QuickTime",
    require: &["QuickTime::MediaDataSize", "QuickTime::Duration"],
    desire: &[],
    inhibit: &[],
    value_conv: None,
    print_conv: Some("ConvertBitrate($val)"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Video")],
};

/// CDDBDiscPlayTime composite tag definition from QuickTime module
pub static COMPOSITE_QUICKTIME_CDDBDISCPLAYTIME: CompositeTagDef = CompositeTagDef {
    name: "CDDBDiscPlayTime",
    module: "QuickTime",
    require: &["CDDB1Info"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"$val =~ /^..([a-z0-9]{4})/i ? hex($1) : undef"),
    print_conv: Some("ConvertDuration($val)"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Audio")],
};

/// CDDBDiscTracks composite tag definition from QuickTime module
pub static COMPOSITE_QUICKTIME_CDDBDISCTRACKS: CompositeTagDef = CompositeTagDef {
    name: "CDDBDiscTracks",
    module: "QuickTime",
    require: &["CDDB1Info"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"$val =~ /^.{6}([a-z0-9]{2})/i ? hex($1) : undef"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Audio")],
};

/// GPSAltitude composite tag definition from QuickTime module
pub static COMPOSITE_QUICKTIME_GPSALTITUDE: CompositeTagDef = CompositeTagDef {
    name: "GPSAltitude",
    module: "QuickTime",
    require: &["QuickTime:GPSCoordinates"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("my @c = split \" \", $val; defined $c[2] ? abs($c[2]) : undef"),
    print_conv: Some("\"$val m\""),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// GPSAltitude2 composite tag definition from QuickTime module
pub static COMPOSITE_QUICKTIME_GPSALTITUDE2: CompositeTagDef = CompositeTagDef {
    name: "GPSAltitude2",
    module: "QuickTime",
    require: &["QuickTime:LocationInformation"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"$val =~ /Alt=([-+.\d]+)/; abs($1)"),
    print_conv: Some("\"$val m\""),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// GPSAltitudeRef composite tag definition from QuickTime module
pub static COMPOSITE_QUICKTIME_GPSALTITUDEREF: CompositeTagDef = CompositeTagDef {
    name: "GPSAltitudeRef",
    module: "QuickTime",
    require: &["QuickTime:GPSCoordinates"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("my @c = split \" \", $val; defined $c[2] ? ($c[2] < 0 ? 1 : 0) : undef"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// GPSAltitudeRef2 composite tag definition from QuickTime module
pub static COMPOSITE_QUICKTIME_GPSALTITUDEREF2: CompositeTagDef = CompositeTagDef {
    name: "GPSAltitudeRef2",
    module: "QuickTime",
    require: &["QuickTime:LocationInformation"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"$val =~ /Alt=([-+.\d]+)/; $1 < 0 ? 1 : 0"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// GPSLatitude composite tag definition from QuickTime module
pub static COMPOSITE_QUICKTIME_GPSLATITUDE: CompositeTagDef = CompositeTagDef {
    name: "GPSLatitude",
    module: "QuickTime",
    require: &["QuickTime:GPSCoordinates"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("my @c = split \" \", $val; $c[0]"),
    print_conv: Some("Image::ExifTool::GPS::ToDMS($self, $val, 1, \"N\")"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// GPSLatitude2 composite tag definition from QuickTime module
pub static COMPOSITE_QUICKTIME_GPSLATITUDE2: CompositeTagDef = CompositeTagDef {
    name: "GPSLatitude2",
    module: "QuickTime",
    require: &["QuickTime:LocationInformation"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"$val =~ /Lat=([-+.\d]+)/; $1"),
    print_conv: Some("Image::ExifTool::GPS::ToDMS($self, $val, 1, \"N\")"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// GPSLongitude composite tag definition from QuickTime module
pub static COMPOSITE_QUICKTIME_GPSLONGITUDE: CompositeTagDef = CompositeTagDef {
    name: "GPSLongitude",
    module: "QuickTime",
    require: &["QuickTime:GPSCoordinates"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("my @c = split \" \", $val; $c[1]"),
    print_conv: Some("Image::ExifTool::GPS::ToDMS($self, $val, 1, \"E\")"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// GPSLongitude2 composite tag definition from QuickTime module
pub static COMPOSITE_QUICKTIME_GPSLONGITUDE2: CompositeTagDef = CompositeTagDef {
    name: "GPSLongitude2",
    module: "QuickTime",
    require: &["QuickTime:LocationInformation"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(r"$val =~ /Lon=([-+.\d]+)/; $1"),
    print_conv: Some("Image::ExifTool::GPS::ToDMS($self, $val, 1, \"E\")"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// Rotation composite tag definition from QuickTime module
pub static COMPOSITE_QUICKTIME_ROTATION: CompositeTagDef = CompositeTagDef {
    name: "Rotation",
    module: "QuickTime",
    require: &["QuickTime:MatrixStructure", "QuickTime:HandlerType"],
    desire: &[],
    inhibit: &[],
    value_conv: Some("Image::ExifTool::QuickTime::CalcRotation($self)"),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Video")],
};

/// Duration composite tag definition from RIFF module
pub static COMPOSITE_RIFF_DURATION: CompositeTagDef = CompositeTagDef {
    name: "Duration",
    module: "RIFF",
    require: &["RIFF:FrameRate", "RIFF:FrameCount"],
    desire: &["VideoFrameRate", "VideoFrameCount"],
    inhibit: &[],
    value_conv: None,
    print_conv: Some("ConvertDuration($val)"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Other")],
};

/// Duration2 composite tag definition from RIFF module
pub static COMPOSITE_RIFF_DURATION2: CompositeTagDef = CompositeTagDef {
    name: "Duration2",
    module: "RIFF",
    require: &["RIFF:AvgBytesPerSec"],
    desire: &["FileSize", "FrameCount", "VideoFrameCount"],
    inhibit: &[],
    value_conv: None,
    print_conv: Some("ConvertDuration($val)"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Other")],
};

/// IDCPreviewImage composite tag definition from SonyIDC module
pub static COMPOSITE_SONYIDC_IDCPREVIEWIMAGE: CompositeTagDef = CompositeTagDef {
    name: "IDCPreviewImage",
    module: "SonyIDC",
    require: &["IDCPreviewStart", "IDCPreviewLength"],
    desire: &[],
    inhibit: &[],
    value_conv: None,
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Preview")],
};

/// Flash composite tag definition from XMP module
pub static COMPOSITE_XMP_FLASH: CompositeTagDef = CompositeTagDef {
    name: "Flash",
    module: "XMP",
    require: &[],
    desire: &[
        "XMP:FlashFired",
        "XMP:FlashReturn",
        "XMP:FlashMode",
        "XMP:FlashFunction",
        "XMP:FlashRedEyeMode",
        "XMP:Flash",
    ],
    inhibit: &[],
    value_conv: Some("\n            if (ref $val[5] eq 'HASH') {\n                # copy structure fields into value array\n                my $i = 0;\n                $val[$i++] = $val[5]{$_} foreach qw(Fired Return Mode Function RedEyeMode);\n            }\n            return((($val[0] and lc($val[0]) eq 'true') ? 0x01 : 0) |\n                   (($val[1] || 0) << 1) |\n                   (($val[2] || 0) << 3) |\n                   (($val[3] and lc($val[3]) eq 'true') ? 0x20 : 0) |\n                   (($val[4] and lc($val[4]) eq 'true') ? 0x40 : 0));\n        "),
    print_conv: None,
    description: None,
    groups: &[
        (0, "Composite"),
        (1, "Composite"),
        (2, "Camera"),
    ],
};

/// GPSDestLatitudeRef composite tag definition from XMP module
pub static COMPOSITE_XMP_GPSDESTLATITUDEREF: CompositeTagDef = CompositeTagDef {
    name: "GPSDestLatitudeRef",
    module: "XMP",
    require: &["XMP-exif:GPSDestLatitude"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(
        r#"
            IsFloat($val[0]) and return $val[0] < 0 ? "S" : "N";
            $val[0] =~ /^.*([NS])/;
            return $1;
        "#,
    ),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// GPSDestLongitudeRef composite tag definition from XMP module
pub static COMPOSITE_XMP_GPSDESTLONGITUDEREF: CompositeTagDef = CompositeTagDef {
    name: "GPSDestLongitudeRef",
    module: "XMP",
    require: &["XMP-exif:GPSDestLongitude"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(
        r#"
            IsFloat($val[0]) and return $val[0] < 0 ? "W" : "E";
            $val[0] =~ /^.*([EW])/;
            return $1;
        "#,
    ),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// GPSLatitudeRef composite tag definition from XMP module
pub static COMPOSITE_XMP_GPSLATITUDEREF: CompositeTagDef = CompositeTagDef {
    name: "GPSLatitudeRef",
    module: "XMP",
    require: &["XMP-exif:GPSLatitude"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(
        r#"
            IsFloat($val[0]) and return $val[0] < 0 ? "S" : "N";
            $val[0] =~ /^.*([NS])/;
            return $1;
        "#,
    ),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// GPSLongitudeRef composite tag definition from XMP module
pub static COMPOSITE_XMP_GPSLONGITUDEREF: CompositeTagDef = CompositeTagDef {
    name: "GPSLongitudeRef",
    module: "XMP",
    require: &["XMP-exif:GPSLongitude"],
    desire: &[],
    inhibit: &[],
    value_conv: Some(
        r#"
            IsFloat($val[0]) and return $val[0] < 0 ? "W" : "E";
            $val[0] =~ /^.*([EW])/;
            return $1;
        "#,
    ),
    print_conv: None,
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Location")],
};

/// LensID composite tag definition from XMP module
pub static COMPOSITE_XMP_LENSID: CompositeTagDef = CompositeTagDef {
    name: "LensID",
    module: "XMP",
    require: &["XMP-aux:LensID", "Make"],
    desire: &["LensInfo", "FocalLength", "LensModel", "MaxApertureValue"],
    inhibit: &["Composite:LensID"],
    value_conv: Some("$val"),
    print_conv: Some("Image::ExifTool::XMP::PrintLensID($self, @val)"),
    description: None,
    groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera")],
};

/// Global registry of all composite tag definitions
///
/// Maps composite tag names to their definitions for runtime lookup.
/// Populated from all ExifTool modules with composite tables.
pub static COMPOSITE_TAGS: LazyLock<HashMap<&'static str, &'static CompositeTagDef>> =
    LazyLock::new(|| {
        HashMap::from([
            ("AdvancedSceneMode", &COMPOSITE_PANASONIC_ADVANCEDSCENEMODE),
            ("Aperture", &COMPOSITE_EXIF_APERTURE),
            ("AutoFocus", &COMPOSITE_NIKON_AUTOFOCUS),
            ("AvgBitrate", &COMPOSITE_QUICKTIME_AVGBITRATE),
            ("BlueBalance", &COMPOSITE_EXIF_BLUEBALANCE),
            ("CDDBDiscPlayTime", &COMPOSITE_QUICKTIME_CDDBDISCPLAYTIME),
            ("CDDBDiscTracks", &COMPOSITE_QUICKTIME_CDDBDISCTRACKS),
            ("CFAPattern", &COMPOSITE_EXIF_CFAPATTERN),
            ("CircleOfConfusion", &COMPOSITE_EXIF_CIRCLEOFCONFUSION),
            ("ConditionalFEC", &COMPOSITE_CANON_CONDITIONALFEC),
            ("ContrastDetectAF", &COMPOSITE_NIKON_CONTRASTDETECTAF),
            ("DOF", &COMPOSITE_EXIF_DOF),
            ("DateCreated", &COMPOSITE_KODAK_DATECREATED),
            ("DateTimeCreated", &COMPOSITE_IPTC_DATETIMECREATED),
            ("DateTimeOriginal", &COMPOSITE_EXIF_DATETIMEORIGINAL),
            ("DepthMapTiff", &COMPOSITE_SAMSUNG_DEPTHMAPTIFF),
            (
                "DigitalCreationDateTime",
                &COMPOSITE_IPTC_DIGITALCREATIONDATETIME,
            ),
            ("DigitalZoom", &COMPOSITE_CANON_DIGITALZOOM),
            ("DriveMode", &COMPOSITE_CANON_DRIVEMODE),
            ("Duration", &COMPOSITE_VORBIS_DURATION),
            ("Duration", &COMPOSITE_RIFF_DURATION),
            ("Duration2", &COMPOSITE_RIFF_DURATION2),
            ("ExtenderStatus", &COMPOSITE_OLYMPUS_EXTENDERSTATUS),
            ("FOV", &COMPOSITE_EXIF_FOV),
            ("FileNumber", &COMPOSITE_CANON_FILENUMBER),
            ("Flash", &COMPOSITE_XMP_FLASH),
            ("FlashType", &COMPOSITE_CANON_FLASHTYPE),
            ("FocalLength35efl", &COMPOSITE_EXIF_FOCALLENGTH35EFL),
            ("FocusDistance", &COMPOSITE_SONY_FOCUSDISTANCE),
            ("FocusDistance2", &COMPOSITE_SONY_FOCUSDISTANCE2),
            ("GPSAltitude", &COMPOSITE_GPS_GPSALTITUDE),
            ("GPSAltitude", &COMPOSITE_QUICKTIME_GPSALTITUDE),
            ("GPSAltitude2", &COMPOSITE_QUICKTIME_GPSALTITUDE2),
            ("GPSAltitudeRef", &COMPOSITE_QUICKTIME_GPSALTITUDEREF),
            ("GPSAltitudeRef2", &COMPOSITE_QUICKTIME_GPSALTITUDEREF2),
            ("GPSDateTime", &COMPOSITE_GPS_GPSDATETIME),
            ("GPSDateTime", &COMPOSITE_SONY_GPSDATETIME),
            ("GPSDestLatitude", &COMPOSITE_GPS_GPSDESTLATITUDE),
            ("GPSDestLatitudeRef", &COMPOSITE_XMP_GPSDESTLATITUDEREF),
            ("GPSDestLongitude", &COMPOSITE_GPS_GPSDESTLONGITUDE),
            ("GPSDestLongitudeRef", &COMPOSITE_XMP_GPSDESTLONGITUDEREF),
            ("GPSLatitude", &COMPOSITE_GPS_GPSLATITUDE),
            ("GPSLatitude", &COMPOSITE_SONY_GPSLATITUDE),
            ("GPSLatitude", &COMPOSITE_QUICKTIME_GPSLATITUDE),
            ("GPSLatitude2", &COMPOSITE_QUICKTIME_GPSLATITUDE2),
            ("GPSLatitudeRef", &COMPOSITE_XMP_GPSLATITUDEREF),
            ("GPSLongitude", &COMPOSITE_GPS_GPSLONGITUDE),
            ("GPSLongitude", &COMPOSITE_SONY_GPSLONGITUDE),
            ("GPSLongitude", &COMPOSITE_QUICKTIME_GPSLONGITUDE),
            ("GPSLongitude2", &COMPOSITE_QUICKTIME_GPSLONGITUDE2),
            ("GPSLongitudeRef", &COMPOSITE_XMP_GPSLONGITUDEREF),
            ("GPSPosition", &COMPOSITE_EXIF_GPSPOSITION),
            ("HiddenData", &COMPOSITE_SONY_HIDDENDATA),
            ("HyperfocalDistance", &COMPOSITE_EXIF_HYPERFOCALDISTANCE),
            ("IDCPreviewImage", &COMPOSITE_SONYIDC_IDCPREVIEWIMAGE),
            ("ISO", &COMPOSITE_CANON_ISO),
            ("ImageHeight", &COMPOSITE_PANASONICRAW_IMAGEHEIGHT),
            ("ImageSize", &COMPOSITE_EXIF_IMAGESIZE),
            ("ImageWidth", &COMPOSITE_PANASONICRAW_IMAGEWIDTH),
            ("JpgFromRaw", &COMPOSITE_EXIF_JPGFROMRAW),
            ("Lens", &COMPOSITE_CANON_LENS),
            ("Lens35efl", &COMPOSITE_CANON_LENS35EFL),
            ("LensID", &COMPOSITE_EXIF_LENSID),
            ("LensID", &COMPOSITE_NIKON_LENSID),
            ("LensID", &COMPOSITE_RICOH_LENSID),
            ("LensID", &COMPOSITE_XMP_LENSID),
            ("LensID-2", &COMPOSITE_EXIF_LENSID_2),
            ("LensSpec", &COMPOSITE_NIKON_LENSSPEC),
            ("LensType", &COMPOSITE_OLYMPUS_LENSTYPE),
            ("LightValue", &COMPOSITE_EXIF_LIGHTVALUE),
            ("Megapixels", &COMPOSITE_EXIF_MEGAPIXELS),
            (
                "OriginalDecisionData",
                &COMPOSITE_CANON_ORIGINALDECISIONDATA,
            ),
            ("OtherImage", &COMPOSITE_EXIF_OTHERIMAGE),
            ("PhaseDetectAF", &COMPOSITE_NIKON_PHASEDETECTAF),
            ("PreviewImage", &COMPOSITE_EXIF_PREVIEWIMAGE),
            ("PreviewImageSize", &COMPOSITE_EXIF_PREVIEWIMAGESIZE),
            ("PreviewJXL", &COMPOSITE_EXIF_PREVIEWJXL),
            ("RedBalance", &COMPOSITE_EXIF_REDBALANCE),
            ("RedEyeReduction", &COMPOSITE_CANON_REDEYEREDUCTION),
            ("RicohPitch", &COMPOSITE_RICOH_RICOHPITCH),
            ("RicohRoll", &COMPOSITE_RICOH_RICOHROLL),
            ("Rotation", &COMPOSITE_QUICKTIME_ROTATION),
            ("RunTimeSincePowerUp", &COMPOSITE_APPLE_RUNTIMESINCEPOWERUP),
            ("ScaleFactor35efl", &COMPOSITE_EXIF_SCALEFACTOR35EFL),
            ("ShootingMode", &COMPOSITE_CANON_SHOOTINGMODE),
            ("ShutterCurtainHack", &COMPOSITE_CANON_SHUTTERCURTAINHACK),
            ("ShutterSpeed", &COMPOSITE_EXIF_SHUTTERSPEED),
            (
                "SingleShotDepthMapTiff",
                &COMPOSITE_SAMSUNG_SINGLESHOTDEPTHMAPTIFF,
            ),
            ("SubSecCreateDate", &COMPOSITE_EXIF_SUBSECCREATEDATE),
            (
                "SubSecDateTimeOriginal",
                &COMPOSITE_EXIF_SUBSECDATETIMEORIGINAL,
            ),
            ("SubSecModifyDate", &COMPOSITE_EXIF_SUBSECMODIFYDATE),
            ("ThumbnailImage", &COMPOSITE_EXIF_THUMBNAILIMAGE),
            ("ThumbnailTIFF", &COMPOSITE_EXIF_THUMBNAILTIFF),
            ("WB_RGBLevels", &COMPOSITE_KODAK_WB_RGBLEVELS),
            ("WB_RGBLevels2", &COMPOSITE_KODAK_WB_RGBLEVELS2),
            ("WB_RGGBLevels", &COMPOSITE_CANON_WB_RGGBLEVELS),
            ("WB_RGGBLevels", &COMPOSITE_SAMSUNG_WB_RGGBLEVELS),
            ("ZoomedPreviewImage", &COMPOSITE_OLYMPUS_ZOOMEDPREVIEWIMAGE),
        ])
    });

/// Look up a composite tag definition by name
pub fn lookup_composite_tag(name: &str) -> Option<&'static CompositeTagDef> {
    COMPOSITE_TAGS.get(name).copied()
}

/// Get all composite tag names
pub fn all_composite_tag_names() -> Vec<&'static str> {
    COMPOSITE_TAGS.keys().copied().collect()
}

/// Total number of composite tags: 98
pub fn composite_tag_count() -> usize {
    COMPOSITE_TAGS.len()
}
