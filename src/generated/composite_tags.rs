//! Generated composite tag definitions
//!
//! This file is automatically generated by codegen/generate_rust.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

use lazy_static::lazy_static;
use std::collections::HashMap;

#[derive(Debug, Clone)]
pub struct CompositeTagDef {
    pub name: &'static str,
    pub table: &'static str,
    pub description: Option<&'static str>,
    pub require: &'static [(u8, &'static str)],
    pub desire: &'static [(u8, &'static str)],
    pub value_conv: Option<&'static str>,
    pub print_conv_ref: Option<&'static str>,
    pub groups: &'static [(u8, &'static str)],
    pub writable: bool,
    pub avoid: bool,
    pub priority: i32,
    pub notes: Option<&'static str>,
}

pub static COMPOSITE_TAGS: &[CompositeTagDef] = &[
    CompositeTagDef {
        name: "Aperture",
        table: "Main",
        description: None,
        require: &[],
        desire: &[(0, "FNumber"), (1, "ApertureValue"), ],
        value_conv: Some("$val[0] || $val[1]"),
        print_conv_ref: Some("composite_exif_aperture_print_conv"),
        groups: &[(1, "Composite"), (0, "Composite"), (2, "Image"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "BlueBalance",
        table: "Main",
        description: None,
        require: &[],
        desire: &[(6, "WB_RGBLevels"), (10, "WBGreenLevel"), (1, "WB_RGBGLevels"), (2, "WB_RBGGLevels"), (5, "WB_GBRGLevels"), (9, "WBBlueLevel"), (3, "WB_GRBGLevels"), (7, "WB_GRBLevels"), (8, "WB_RBLevels"), (0, "WB_RGGBLevels"), (4, "WB_GRGBLevels"), ],
        value_conv: Some("Image::ExifTool::Exif::RedBlueBalance(1,@val)"),
        print_conv_ref: Some("composite_exif_bluebalance_print_conv"),
        groups: &[(1, "Composite"), (2, "Camera"), (0, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "CFAPattern",
        table: "Main",
        description: None,
        require: &[(0, "CFARepeatPatternDim"), (1, "CFAPattern2"), ],
        desire: &[],
        value_conv: Some("\n            my @a = split / /, $val[0];\n            my @b = split / /, $val[1];\n            return '?' unless @a==2 and @b==$a[0]*$a[1];\n            return \"$a[0] $a[1] @b\";\n        "),
        print_conv_ref: Some("composite_exif_cfapattern_print_conv"),
        groups: &[(0, "Composite"), (1, "Composite"), (2, "Image"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "CircleOfConfusion",
        table: "Main",
        description: None,
        require: &[(0, "ScaleFactor35efl"), ],
        desire: &[],
        value_conv: Some("sqrt(24*24+36*36) / ($val * 1440)"),
        print_conv_ref: Some("composite_exif_circleofconfusion_print_conv"),
        groups: &[(1, "Composite"), (2, "Camera"), (0, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: Some("\n            calculated as D/1440, where D is the focal plane diagonal in mm.  This value\n            may be incorrect if the image has been resized\n        "),
    },
    CompositeTagDef {
        name: "DOF",
        table: "Main",
        description: Some("Depth Of Field"),
        require: &[(2, "CircleOfConfusion"), (1, "Aperture"), (0, "FocalLength"), ],
        desire: &[(8, "FocusDistanceUpper"), (7, "FocusDistanceLower"), (3, "FocusDistance"), (6, "ApproximateFocusDistance"), (5, "ObjectDistance"), (4, "SubjectDistance"), ],
        value_conv: Some("\n            ToFloat(@val);\n            my ($d, $f) = ($val[3], $val[0]);\n            if (defined $d) {\n                $d or $d = 1e10;    # (use large number for infinity)\n            } else {\n                $d = $val[4] || $val[5] || $val[6];\n                unless (defined $d) {\n                    return undef unless defined $val[7] and defined $val[8];\n                    $d = ($val[7] + $val[8]) / 2;\n                }\n            }\n            return 0 unless $f and $val[2];\n            my $t = $val[1] * $val[2] * ($d * 1000 - $f) / ($f * $f);\n            my @v = ($d / (1 + $t), $d / (1 - $t));\n            $v[1] < 0 and $v[1] = 0; # 0 means 'inf'\n            return join(' ',@v);\n        "),
        print_conv_ref: Some("composite_exif_dof_print_conv"),
        groups: &[(1, "Composite"), (0, "Composite"), (2, "Image"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: Some("this value may be incorrect if the image has been resized"),
    },
    CompositeTagDef {
        name: "DateTimeOriginal",
        table: "Main",
        description: Some("Date/Time Original"),
        require: &[],
        desire: &[(0, "DateTimeCreated"), (2, "TimeCreated"), (1, "DateCreated"), ],
        value_conv: Some("\n            return $val[0] if $val[0] and $val[0]=~/ /;\n            return \"$val[1] $val[2]\";\n        "),
        print_conv_ref: Some("composite_exif_datetimeoriginal_print_conv"),
        groups: &[(1, "Composite"), (0, "Composite"), (2, "Time"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "FOV",
        table: "Main",
        description: Some("Field Of View"),
        require: &[(1, "ScaleFactor35efl"), (0, "FocalLength"), ],
        desire: &[(2, "FocusDistance"), ],
        value_conv: Some("\n            ToFloat(@val);\n            return undef unless $val[0] and $val[1];\n            my $corr = 1;\n            if ($val[2]) {\n                my $d = 1000 * $val[2] - $val[0];\n                $corr += $val[0]/$d if $d > 0;\n            }\n            my $fd2 = atan2(36, 2*$val[0]*$val[1]*$corr);\n            my @fov = ( $fd2 * 360 / 3.14159 );\n            if ($val[2] and $val[2] > 0 and $val[2] < 10000) {\n                push @fov, 2 * $val[2] * sin($fd2) / cos($fd2);\n            }\n            return join(' ', @fov);\n        "),
        print_conv_ref: Some("composite_exif_fov_print_conv"),
        groups: &[(2, "Image"), (0, "Composite"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: Some("\n            calculated for the long image dimension.  This value may be incorrect for\n            fisheye lenses, or if the image has been resized\n        "),
    },
    CompositeTagDef {
        name: "FocalLength35efl",
        table: "Main",
        description: Some("Focal Length"),
        require: &[(0, "FocalLength"), ],
        desire: &[(1, "ScaleFactor35efl"), ],
        value_conv: Some("ToFloat(@val); ($val[0] || 0) * ($val[1] || 1)"),
        print_conv_ref: Some("composite_exif_focallength35efl_print_conv"),
        groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: Some("this value may be incorrect if the image has been resized"),
    },
    CompositeTagDef {
        name: "GPSPosition",
        table: "Main",
        description: None,
        require: &[(1, "GPSLongitude"), (0, "GPSLatitude"), ],
        desire: &[],
        value_conv: Some("(length($val[0]) or length($val[1])) ? \"$val[0] $val[1]\" : undef"),
        print_conv_ref: Some("composite_exif_gpsposition_print_conv"),
        groups: &[(2, "Location"), (0, "Composite"), (1, "Composite"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: Some("\n            when written, writes GPSLatitude, GPSLatitudeRef, GPSLongitude and\n            GPSLongitudeRef.  This tag may be written using the same coordinate\n            format as provided by Google Maps when right-clicking on a location\n        "),
    },
    CompositeTagDef {
        name: "HyperfocalDistance",
        table: "Main",
        description: None,
        require: &[(2, "CircleOfConfusion"), (0, "FocalLength"), (1, "Aperture"), ],
        desire: &[],
        value_conv: Some("\n            ToFloat(@val);\n            return 'inf' unless $val[1] and $val[2];\n            return $val[0] * $val[0] / ($val[1] * $val[2] * 1000);\n        "),
        print_conv_ref: Some("composite_exif_hyperfocaldistance_print_conv"),
        groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: Some("this value may be incorrect if the image has been resized"),
    },
    CompositeTagDef {
        name: "ImageSize",
        table: "Main",
        description: None,
        require: &[(1, "ImageHeight"), (0, "ImageWidth"), ],
        desire: &[(4, "RawImageCroppedSize"), (2, "ExifImageWidth"), (3, "ExifImageHeight"), ],
        value_conv: Some("\n            return $val[4] if $val[4];\n            return \"$val[2] $val[3]\" if $val[2] and $val[3] and\n                    $$self{TIFF_TYPE} =~ /^(CR2|Canon 1D RAW|IIQ|EIP)$/;\n            return \"$val[0] $val[1]\" if IsFloat($val[0]) and IsFloat($val[1]);\n            return undef;\n        "),
        print_conv_ref: Some("composite_exif_imagesize_print_conv"),
        groups: &[(0, "Composite"), (2, "Image"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "JpgFromRaw",
        table: "Main",
        description: None,
        require: &[(1, "JpgFromRawLength"), (0, "JpgFromRawStart"), ],
        desire: &[],
        value_conv: None,
        print_conv_ref: None,
        groups: &[(1, "SubIFD"), (0, "EXIF"), (2, "Preview"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: Some("\n            this tag is writable, and may be used to update existing embedded images,\n            but not create or delete them\n        "),
    },
    CompositeTagDef {
        name: "LensID",
        table: "Main",
        description: None,
        require: &[(0, "LensType"), ],
        desire: &[(10, "LensType3"), (7, "LensFocalRange"), (12, "RFLensType"), (9, "LensType2"), (5, "MaxFocalLength"), (3, "MaxApertureValue"), (4, "MinFocalLength"), (2, "MaxAperture"), (8, "LensSpec"), (6, "LensModel"), (1, "FocalLength"), (11, "LensFocalLength"), ],
        value_conv: Some("$val"),
        print_conv_ref: Some("composite_exif_lensid_print_conv"),
        groups: &[(1, "Composite"), (2, "Camera"), (0, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: Some("\n            attempt to identify the actual lens from all lenses with a given LensType.\n            Applies only to LensType values with a lookup table.  May be configured\n            by adding user-defined lenses\n        "),
    },
    CompositeTagDef {
        name: "LightValue",
        table: "Main",
        description: None,
        require: &[(0, "Aperture"), (2, "ISO"), (1, "ShutterSpeed"), ],
        desire: &[],
        value_conv: Some("Image::ExifTool::Exif::CalculateLV($val[0],$val[1],$prt[2])"),
        print_conv_ref: Some("composite_exif_lightvalue_print_conv"),
        groups: &[(2, "Image"), (0, "Composite"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: Some("\n            calculated LV = 2 * log2(Aperture) - log2(ShutterSpeed) - log2(ISO/100);\n            similar to exposure value but normalized to ISO 100\n        "),
    },
    CompositeTagDef {
        name: "Megapixels",
        table: "Main",
        description: None,
        require: &[(0, "ImageSize"), ],
        desire: &[],
        value_conv: Some("my @d = ($val =~ /\\d+/g); $d[0] * $d[1] / 1000000"),
        print_conv_ref: Some("composite_exif_megapixels_print_conv"),
        groups: &[(1, "Composite"), (2, "Image"), (0, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "OtherImage",
        table: "Main",
        description: None,
        require: &[(1, "OtherImageLength"), (0, "OtherImageStart"), ],
        desire: &[(2, "OtherImageStart (1)"), (3, "OtherImageLength (1)"), ],
        value_conv: None,
        print_conv_ref: None,
        groups: &[(1, "SubIFD"), (0, "EXIF"), (2, "Preview"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: Some("\n            this tag is writable, and may be used to update existing embedded images,\n            but not create or delete them\n        "),
    },
    CompositeTagDef {
        name: "PreviewImage",
        table: "Main",
        description: None,
        require: &[(0, "PreviewImageStart"), (1, "PreviewImageLength"), ],
        desire: &[(3, "PreviewImageStart (1)"), (4, "PreviewImageLength (1)"), (2, "PreviewImageValid"), ],
        value_conv: None,
        print_conv_ref: None,
        groups: &[(0, "EXIF"), (1, "SubIFD"), (2, "Preview"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: Some("\n            this tag is writable, and may be used to update existing embedded images,\n            but not create or delete them\n        "),
    },
    CompositeTagDef {
        name: "PreviewImageSize",
        table: "Main",
        description: None,
        require: &[(1, "PreviewImageHeight"), (0, "PreviewImageWidth"), ],
        desire: &[],
        value_conv: Some("\"$val[0]x$val[1]\""),
        print_conv_ref: None,
        groups: &[(2, "Image"), (1, "Composite"), (0, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "RedBalance",
        table: "Main",
        description: None,
        require: &[],
        desire: &[(5, "WB_GBRGLevels"), (7, "WB_GRBLevels"), (9, "WBRedLevel"), (8, "WB_RBLevels"), (0, "WB_RGGBLevels"), (3, "WB_GRBGLevels"), (1, "WB_RGBGLevels"), (4, "WB_GRGBLevels"), (6, "WB_RGBLevels"), (10, "WBGreenLevel"), (2, "WB_RBGGLevels"), ],
        value_conv: Some("Image::ExifTool::Exif::RedBlueBalance(0,@val)"),
        print_conv_ref: Some("composite_exif_redbalance_print_conv"),
        groups: &[(0, "Composite"), (2, "Camera"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "ScaleFactor35efl",
        table: "Main",
        description: Some("Scale Factor To 35 mm Equivalent"),
        require: &[],
        desire: &[(11, "ExifImageHeight"), (5, "FocalPlaneXSize"), (8, "FocalPlaneXResolution"), (9, "FocalPlaneYResolution"), (3, "FocalPlaneDiagonal"), (13, "CanonImageHeight"), (0, "FocalLength"), (4, "SensorSize"), (1, "FocalLengthIn35mmFormat"), (6, "FocalPlaneYSize"), (2, "Composite:DigitalZoom"), (7, "FocalPlaneResolutionUnit"), (14, "ImageWidth"), (10, "ExifImageWidth"), (12, "CanonImageWidth"), (15, "ImageHeight"), ],
        value_conv: Some("Image::ExifTool::Exif::CalcScaleFactor35efl($self, @val)"),
        print_conv_ref: Some("composite_exif_scalefactor35efl_print_conv"),
        groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: Some("\n            this value and any derived values may be incorrect if the image has been\n            resized\n        "),
    },
    CompositeTagDef {
        name: "ShutterSpeed",
        table: "Main",
        description: None,
        require: &[],
        desire: &[(0, "ExposureTime"), (2, "BulbDuration"), (1, "ShutterSpeedValue"), ],
        value_conv: Some("($val[2] and $val[2]>0) ? $val[2] : (defined($val[0]) ? $val[0] : $val[1])"),
        print_conv_ref: Some("composite_exif_shutterspeed_print_conv"),
        groups: &[(0, "Composite"), (2, "Image"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "SubSecCreateDate",
        table: "Main",
        description: Some("Create Date"),
        require: &[(0, "EXIF:CreateDate"), ],
        desire: &[(1, "SubSecTimeDigitized"), (2, "OffsetTimeDigitized"), ],
        value_conv: None,
        print_conv_ref: Some("composite_exif_subseccreatedate_print_conv"),
        groups: &[(0, "Composite"), (1, "Composite"), (2, "Time"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "SubSecDateTimeOriginal",
        table: "Main",
        description: Some("Date/Time Original"),
        require: &[(0, "EXIF:DateTimeOriginal"), ],
        desire: &[(1, "SubSecTimeOriginal"), (2, "OffsetTimeOriginal"), ],
        value_conv: None,
        print_conv_ref: Some("composite_exif_subsecdatetimeoriginal_print_conv"),
        groups: &[(1, "Composite"), (0, "Composite"), (2, "Time"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "SubSecModifyDate",
        table: "Main",
        description: Some("Modify Date"),
        require: &[(0, "EXIF:ModifyDate"), ],
        desire: &[(1, "SubSecTime"), (2, "OffsetTime"), ],
        value_conv: None,
        print_conv_ref: Some("composite_exif_subsecmodifydate_print_conv"),
        groups: &[(2, "Time"), (0, "Composite"), (1, "Composite"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "ThumbnailImage",
        table: "Main",
        description: None,
        require: &[(1, "ThumbnailLength"), (0, "ThumbnailOffset"), ],
        desire: &[],
        value_conv: None,
        print_conv_ref: None,
        groups: &[(0, "EXIF"), (1, "IFD1"), (2, "Preview"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: Some("\n            this tag is writable, and may be used to update existing thumbnails, but may\n            only create a thumbnail in IFD1 of certain types of files.  Note that for\n            this and other Composite embedded-image tags the family 0 and 1 groups match\n            those of the originating tags\n        "),
    },
    CompositeTagDef {
        name: "ThumbnailTIFF",
        table: "Main",
        description: None,
        require: &[(1, "Compression"), (3, "ImageHeight"), (9, "StripByteCounts"), (8, "RowsPerStrip"), (2, "ImageWidth"), (5, "PhotometricInterpretation"), (4, "BitsPerSample"), (6, "StripOffsets"), (7, "SamplesPerPixel"), (0, "SubfileType"), ],
        desire: &[(10, "PlanarConfiguration"), (11, "Orientation"), ],
        value_conv: None,
        print_conv_ref: None,
        groups: &[(1, "Composite"), (0, "Composite"), (2, "Preview"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "GPSAltitude",
        table: "Main",
        description: None,
        require: &[],
        desire: &[(2, "XMP:GPSAltitude"), (1, "GPS:GPSAltitudeRef"), (0, "GPS:GPSAltitude"), (3, "XMP:GPSAltitudeRef"), ],
        value_conv: Some("\n            foreach (0,2) {\n                next unless defined $val[$_] and IsFloat($val[$_]) and defined $val[$_+1];\n                return $val[$_+1] ? -abs($val[$_]) : $val[$_];\n            }\n            return undef;\n        "),
        print_conv_ref: Some("composite_gps_gpsaltitude_print_conv"),
        groups: &[(0, "Composite"), (2, "Location"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "GPSDateTime",
        table: "Main",
        description: Some("GPS Date/Time"),
        require: &[(0, "GPS:GPSDateStamp"), (1, "GPS:GPSTimeStamp"), ],
        desire: &[],
        value_conv: Some("\"$val[0] $val[1]Z\""),
        print_conv_ref: Some("composite_gps_gpsdatetime_print_conv"),
        groups: &[(1, "Composite"), (0, "Composite"), (2, "Time"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "GPSDestLatitude",
        table: "Main",
        description: None,
        require: &[(1, "GPS:GPSDestLatitudeRef"), (0, "GPS:GPSDestLatitude"), ],
        desire: &[],
        value_conv: Some("$val[1] =~ /^S/i ? -$val[0] : $val[0]"),
        print_conv_ref: Some("composite_gps_gpsdestlatitude_print_conv"),
        groups: &[(2, "Location"), (0, "Composite"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "GPSDestLongitude",
        table: "Main",
        description: None,
        require: &[(0, "GPS:GPSDestLongitude"), (1, "GPS:GPSDestLongitudeRef"), ],
        desire: &[],
        value_conv: Some("$val[1] =~ /^W/i ? -$val[0] : $val[0]"),
        print_conv_ref: Some("composite_gps_gpsdestlongitude_print_conv"),
        groups: &[(0, "Composite"), (2, "Location"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "GPSLatitude",
        table: "Main",
        description: None,
        require: &[(1, "GPS:GPSLatitudeRef"), (0, "GPS:GPSLatitude"), ],
        desire: &[],
        value_conv: Some("$val[1] =~ /^S/i ? -$val[0] : $val[0]"),
        print_conv_ref: Some("composite_gps_gpslatitude_print_conv"),
        groups: &[(0, "Composite"), (1, "Composite"), (2, "Location"), ],
        writable: true,
        avoid: true,
        priority: 1,
        notes: None,
    },
    CompositeTagDef {
        name: "GPSLongitude",
        table: "Main",
        description: None,
        require: &[(0, "GPS:GPSLongitude"), (1, "GPS:GPSLongitudeRef"), ],
        desire: &[],
        value_conv: Some("$val[1] =~ /^W/i ? -$val[0] : $val[0]"),
        print_conv_ref: Some("composite_gps_gpslongitude_print_conv"),
        groups: &[(1, "Composite"), (0, "Composite"), (2, "Location"), ],
        writable: true,
        avoid: true,
        priority: 1,
        notes: None,
    },
    CompositeTagDef {
        name: "Aperture",
        table: "EXIF",
        description: None,
        require: &[],
        desire: &[(0, "FNumber"), (1, "ApertureValue"), ],
        value_conv: Some("$val[0] || $val[1]"),
        print_conv_ref: Some("composite_aperture_print_conv"),
        groups: &[(2, "Image"), (1, "Composite"), (0, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "BlueBalance",
        table: "EXIF",
        description: None,
        require: &[],
        desire: &[(10, "WBGreenLevel"), (6, "WB_RGBLevels"), (8, "WB_RBLevels"), (1, "WB_RGBGLevels"), (4, "WB_GRGBLevels"), (2, "WB_RBGGLevels"), (3, "WB_GRBGLevels"), (5, "WB_GBRGLevels"), (0, "WB_RGGBLevels"), (7, "WB_GRBLevels"), (9, "WBBlueLevel"), ],
        value_conv: Some("Image::ExifTool::Exif::RedBlueBalance(1,@val)"),
        print_conv_ref: Some("composite_bluebalance_print_conv"),
        groups: &[(1, "Composite"), (2, "Camera"), (0, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "CFAPattern",
        table: "EXIF",
        description: None,
        require: &[(1, "CFAPattern2"), (0, "CFARepeatPatternDim"), ],
        desire: &[],
        value_conv: Some("\n            my @a = split / /, $val[0];\n            my @b = split / /, $val[1];\n            return '?' unless @a==2 and @b==$a[0]*$a[1];\n            return \"$a[0] $a[1] @b\";\n        "),
        print_conv_ref: Some("composite_cfapattern_print_conv"),
        groups: &[(2, "Image"), (0, "Composite"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "CircleOfConfusion",
        table: "EXIF",
        description: None,
        require: &[(0, "ScaleFactor35efl"), ],
        desire: &[],
        value_conv: Some("sqrt(24*24+36*36) / ($val * 1440)"),
        print_conv_ref: Some("composite_circleofconfusion_print_conv"),
        groups: &[(2, "Camera"), (1, "Composite"), (0, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: Some("\n            calculated as D/1440, where D is the focal plane diagonal in mm.  This value\n            may be incorrect if the image has been resized\n        "),
    },
    CompositeTagDef {
        name: "DateTimeOriginal",
        table: "EXIF",
        description: Some("Date/Time Original"),
        require: &[],
        desire: &[(1, "DateCreated"), (2, "TimeCreated"), (0, "DateTimeCreated"), ],
        value_conv: Some("\n            return $val[0] if $val[0] and $val[0]=~/ /;\n            return \"$val[1] $val[2]\";\n        "),
        print_conv_ref: Some("composite_datetimeoriginal_print_conv"),
        groups: &[(2, "Time"), (0, "Composite"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "FocalLength35efl",
        table: "EXIF",
        description: Some("Focal Length"),
        require: &[(0, "FocalLength"), ],
        desire: &[(1, "ScaleFactor35efl"), ],
        value_conv: Some("ToFloat(@val); ($val[0] || 0) * ($val[1] || 1)"),
        print_conv_ref: Some("composite_focallength35efl_print_conv"),
        groups: &[(2, "Camera"), (1, "Composite"), (0, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: Some("this value may be incorrect if the image has been resized"),
    },
    CompositeTagDef {
        name: "GPSPosition",
        table: "EXIF",
        description: None,
        require: &[(0, "GPSLatitude"), (1, "GPSLongitude"), ],
        desire: &[],
        value_conv: Some("(length($val[0]) or length($val[1])) ? \"$val[0] $val[1]\" : undef"),
        print_conv_ref: Some("composite_gpsposition_print_conv"),
        groups: &[(2, "Location"), (0, "Composite"), (1, "Composite"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: Some("\n            when written, writes GPSLatitude, GPSLatitudeRef, GPSLongitude and\n            GPSLongitudeRef.  This tag may be written using the same coordinate\n            format as provided by Google Maps when right-clicking on a location\n        "),
    },
    CompositeTagDef {
        name: "HyperfocalDistance",
        table: "EXIF",
        description: None,
        require: &[(0, "FocalLength"), (1, "Aperture"), (2, "CircleOfConfusion"), ],
        desire: &[],
        value_conv: Some("\n            ToFloat(@val);\n            return 'inf' unless $val[1] and $val[2];\n            return $val[0] * $val[0] / ($val[1] * $val[2] * 1000);\n        "),
        print_conv_ref: Some("composite_hyperfocaldistance_print_conv"),
        groups: &[(2, "Camera"), (0, "Composite"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: Some("this value may be incorrect if the image has been resized"),
    },
    CompositeTagDef {
        name: "ImageSize",
        table: "EXIF",
        description: None,
        require: &[(1, "ImageHeight"), (0, "ImageWidth"), ],
        desire: &[(2, "ExifImageWidth"), (4, "RawImageCroppedSize"), (3, "ExifImageHeight"), ],
        value_conv: Some("\n            return $val[4] if $val[4];\n            return \"$val[2] $val[3]\" if $val[2] and $val[3] and\n                    $$self{TIFF_TYPE} =~ /^(CR2|Canon 1D RAW|IIQ|EIP)$/;\n            return \"$val[0] $val[1]\" if IsFloat($val[0]) and IsFloat($val[1]);\n            return undef;\n        "),
        print_conv_ref: Some("composite_imagesize_print_conv"),
        groups: &[(2, "Image"), (0, "Composite"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "JpgFromRaw",
        table: "EXIF",
        description: None,
        require: &[(0, "JpgFromRawStart"), (1, "JpgFromRawLength"), ],
        desire: &[],
        value_conv: None,
        print_conv_ref: None,
        groups: &[(0, "EXIF"), (2, "Preview"), (1, "SubIFD"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: Some("\n            this tag is writable, and may be used to update existing embedded images,\n            but not create or delete them\n        "),
    },
    CompositeTagDef {
        name: "LensID",
        table: "EXIF",
        description: None,
        require: &[(0, "LensType"), ],
        desire: &[(2, "MaxAperture"), (11, "LensFocalLength"), (9, "LensType2"), (5, "MaxFocalLength"), (7, "LensFocalRange"), (10, "LensType3"), (3, "MaxApertureValue"), (4, "MinFocalLength"), (8, "LensSpec"), (1, "FocalLength"), (6, "LensModel"), (12, "RFLensType"), ],
        value_conv: Some("$val"),
        print_conv_ref: Some("composite_lensid_print_conv"),
        groups: &[(1, "Composite"), (2, "Camera"), (0, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: Some("\n            attempt to identify the actual lens from all lenses with a given LensType.\n            Applies only to LensType values with a lookup table.  May be configured\n            by adding user-defined lenses\n        "),
    },
    CompositeTagDef {
        name: "LightValue",
        table: "EXIF",
        description: None,
        require: &[(1, "ShutterSpeed"), (2, "ISO"), (0, "Aperture"), ],
        desire: &[],
        value_conv: Some("Image::ExifTool::Exif::CalculateLV($val[0],$val[1],$prt[2])"),
        print_conv_ref: Some("composite_lightvalue_print_conv"),
        groups: &[(2, "Image"), (0, "Composite"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: Some("\n            calculated LV = 2 * log2(Aperture) - log2(ShutterSpeed) - log2(ISO/100);\n            similar to exposure value but normalized to ISO 100\n        "),
    },
    CompositeTagDef {
        name: "Megapixels",
        table: "EXIF",
        description: None,
        require: &[(0, "ImageSize"), ],
        desire: &[],
        value_conv: Some("my @d = ($val =~ /\\d+/g); $d[0] * $d[1] / 1000000"),
        print_conv_ref: Some("composite_megapixels_print_conv"),
        groups: &[(2, "Image"), (0, "Composite"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "OtherImage",
        table: "EXIF",
        description: None,
        require: &[(1, "OtherImageLength"), (0, "OtherImageStart"), ],
        desire: &[(3, "OtherImageLength (1)"), (2, "OtherImageStart (1)"), ],
        value_conv: None,
        print_conv_ref: None,
        groups: &[(0, "EXIF"), (1, "SubIFD"), (2, "Preview"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: Some("\n            this tag is writable, and may be used to update existing embedded images,\n            but not create or delete them\n        "),
    },
    CompositeTagDef {
        name: "PreviewImage",
        table: "EXIF",
        description: None,
        require: &[(0, "PreviewImageStart"), (1, "PreviewImageLength"), ],
        desire: &[(4, "PreviewImageLength (1)"), (2, "PreviewImageValid"), (3, "PreviewImageStart (1)"), ],
        value_conv: None,
        print_conv_ref: None,
        groups: &[(2, "Preview"), (1, "SubIFD"), (0, "EXIF"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: Some("\n            this tag is writable, and may be used to update existing embedded images,\n            but not create or delete them\n        "),
    },
    CompositeTagDef {
        name: "PreviewImageSize",
        table: "EXIF",
        description: None,
        require: &[(0, "PreviewImageWidth"), (1, "PreviewImageHeight"), ],
        desire: &[],
        value_conv: Some("\"$val[0]x$val[1]\""),
        print_conv_ref: None,
        groups: &[(0, "Composite"), (1, "Composite"), (2, "Image"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "RedBalance",
        table: "EXIF",
        description: None,
        require: &[],
        desire: &[(3, "WB_GRBGLevels"), (7, "WB_GRBLevels"), (5, "WB_GBRGLevels"), (10, "WBGreenLevel"), (9, "WBRedLevel"), (6, "WB_RGBLevels"), (0, "WB_RGGBLevels"), (2, "WB_RBGGLevels"), (4, "WB_GRGBLevels"), (1, "WB_RGBGLevels"), (8, "WB_RBLevels"), ],
        value_conv: Some("Image::ExifTool::Exif::RedBlueBalance(0,@val)"),
        print_conv_ref: Some("composite_redbalance_print_conv"),
        groups: &[(0, "Composite"), (1, "Composite"), (2, "Camera"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "ScaleFactor35efl",
        table: "EXIF",
        description: Some("Scale Factor To 35 mm Equivalent"),
        require: &[],
        desire: &[(12, "CanonImageWidth"), (8, "FocalPlaneXResolution"), (5, "FocalPlaneXSize"), (9, "FocalPlaneYResolution"), (7, "FocalPlaneResolutionUnit"), (1, "FocalLengthIn35mmFormat"), (13, "CanonImageHeight"), (2, "Composite:DigitalZoom"), (15, "ImageHeight"), (11, "ExifImageHeight"), (10, "ExifImageWidth"), (6, "FocalPlaneYSize"), (3, "FocalPlaneDiagonal"), (14, "ImageWidth"), (4, "SensorSize"), (0, "FocalLength"), ],
        value_conv: Some("Image::ExifTool::Exif::CalcScaleFactor35efl($self, @val)"),
        print_conv_ref: Some("composite_scalefactor35efl_print_conv"),
        groups: &[(0, "Composite"), (2, "Camera"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: Some("\n            this value and any derived values may be incorrect if the image has been\n            resized\n        "),
    },
    CompositeTagDef {
        name: "ShutterSpeed",
        table: "EXIF",
        description: None,
        require: &[],
        desire: &[(0, "ExposureTime"), (1, "ShutterSpeedValue"), (2, "BulbDuration"), ],
        value_conv: Some("($val[2] and $val[2]>0) ? $val[2] : (defined($val[0]) ? $val[0] : $val[1])"),
        print_conv_ref: Some("composite_shutterspeed_print_conv"),
        groups: &[(1, "Composite"), (2, "Image"), (0, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "SubSecCreateDate",
        table: "EXIF",
        description: Some("Create Date"),
        require: &[(0, "EXIF:CreateDate"), ],
        desire: &[(2, "OffsetTimeDigitized"), (1, "SubSecTimeDigitized"), ],
        value_conv: None,
        print_conv_ref: Some("composite_subseccreatedate_print_conv"),
        groups: &[(2, "Time"), (1, "Composite"), (0, "Composite"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "SubSecDateTimeOriginal",
        table: "EXIF",
        description: Some("Date/Time Original"),
        require: &[(0, "EXIF:DateTimeOriginal"), ],
        desire: &[(2, "OffsetTimeOriginal"), (1, "SubSecTimeOriginal"), ],
        value_conv: None,
        print_conv_ref: Some("composite_subsecdatetimeoriginal_print_conv"),
        groups: &[(1, "Composite"), (2, "Time"), (0, "Composite"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "SubSecModifyDate",
        table: "EXIF",
        description: Some("Modify Date"),
        require: &[(0, "EXIF:ModifyDate"), ],
        desire: &[(2, "OffsetTime"), (1, "SubSecTime"), ],
        value_conv: None,
        print_conv_ref: Some("composite_subsecmodifydate_print_conv"),
        groups: &[(0, "Composite"), (1, "Composite"), (2, "Time"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "ThumbnailImage",
        table: "EXIF",
        description: None,
        require: &[(1, "ThumbnailLength"), (0, "ThumbnailOffset"), ],
        desire: &[],
        value_conv: None,
        print_conv_ref: None,
        groups: &[(2, "Preview"), (1, "IFD1"), (0, "EXIF"), ],
        writable: true,
        avoid: false,
        priority: 0,
        notes: Some("\n            this tag is writable, and may be used to update existing thumbnails, but may\n            only create a thumbnail in IFD1 of certain types of files.  Note that for\n            this and other Composite embedded-image tags the family 0 and 1 groups match\n            those of the originating tags\n        "),
    },
    CompositeTagDef {
        name: "ThumbnailTIFF",
        table: "EXIF",
        description: None,
        require: &[(2, "ImageWidth"), (9, "StripByteCounts"), (6, "StripOffsets"), (4, "BitsPerSample"), (7, "SamplesPerPixel"), (5, "PhotometricInterpretation"), (3, "ImageHeight"), (0, "SubfileType"), (1, "Compression"), (8, "RowsPerStrip"), ],
        desire: &[(10, "PlanarConfiguration"), (11, "Orientation"), ],
        value_conv: None,
        print_conv_ref: None,
        groups: &[(0, "Composite"), (2, "Preview"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "GPSAltitude",
        table: "GPS",
        description: None,
        require: &[],
        desire: &[(2, "XMP:GPSAltitude"), (1, "GPS:GPSAltitudeRef"), (0, "GPS:GPSAltitude"), (3, "XMP:GPSAltitudeRef"), ],
        value_conv: Some("\n            foreach (0,2) {\n                next unless defined $val[$_] and IsFloat($val[$_]) and defined $val[$_+1];\n                return $val[$_+1] ? -abs($val[$_]) : $val[$_];\n            }\n            return undef;\n        "),
        print_conv_ref: Some("composite_gpsaltitude_print_conv"),
        groups: &[(2, "Location"), (0, "Composite"), (1, "Composite"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "GPSDateTime",
        table: "GPS",
        description: Some("GPS Date/Time"),
        require: &[(1, "GPS:GPSTimeStamp"), (0, "GPS:GPSDateStamp"), ],
        desire: &[],
        value_conv: Some("\"$val[0] $val[1]Z\""),
        print_conv_ref: Some("composite_gpsdatetime_print_conv"),
        groups: &[(1, "Composite"), (0, "Composite"), (2, "Time"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "GPSDestLatitude",
        table: "GPS",
        description: None,
        require: &[(1, "GPS:GPSDestLatitudeRef"), (0, "GPS:GPSDestLatitude"), ],
        desire: &[],
        value_conv: Some("$val[1] =~ /^S/i ? -$val[0] : $val[0]"),
        print_conv_ref: Some("composite_gpsdestlatitude_print_conv"),
        groups: &[(0, "Composite"), (1, "Composite"), (2, "Location"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "GPSDestLongitude",
        table: "GPS",
        description: None,
        require: &[(0, "GPS:GPSDestLongitude"), (1, "GPS:GPSDestLongitudeRef"), ],
        desire: &[],
        value_conv: Some("$val[1] =~ /^W/i ? -$val[0] : $val[0]"),
        print_conv_ref: Some("composite_gpsdestlongitude_print_conv"),
        groups: &[(1, "Composite"), (0, "Composite"), (2, "Location"), ],
        writable: false,
        avoid: false,
        priority: 0,
        notes: None,
    },
    CompositeTagDef {
        name: "GPSLatitude",
        table: "GPS",
        description: None,
        require: &[(1, "GPS:GPSLatitudeRef"), (0, "GPS:GPSLatitude"), ],
        desire: &[],
        value_conv: Some("$val[1] =~ /^S/i ? -$val[0] : $val[0]"),
        print_conv_ref: Some("composite_gpslatitude_print_conv"),
        groups: &[(2, "Location"), (1, "Composite"), (0, "Composite"), ],
        writable: true,
        avoid: true,
        priority: 1,
        notes: None,
    },
    CompositeTagDef {
        name: "GPSLongitude",
        table: "GPS",
        description: None,
        require: &[(0, "GPS:GPSLongitude"), (1, "GPS:GPSLongitudeRef"), ],
        desire: &[],
        value_conv: Some("$val[1] =~ /^W/i ? -$val[0] : $val[0]"),
        print_conv_ref: Some("composite_gpslongitude_print_conv"),
        groups: &[(1, "Composite"), (0, "Composite"), (2, "Location"), ],
        writable: true,
        avoid: true,
        priority: 1,
        notes: None,
    },
];

lazy_static! {
    pub static ref COMPOSITE_TAG_BY_NAME: HashMap<&'static str, &'static CompositeTagDef> = {
        let mut map = HashMap::new();
        for tag in COMPOSITE_TAGS {
            map.insert(tag.name, tag);
        }
        map
    };
}
