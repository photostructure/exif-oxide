//! Modular tag kits with embedded PrintConv for Panasonic_pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.
//!
//! Generated from: Panasonic.pm table: Main
//!
#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

pub mod datetime;
pub mod interop;
pub mod other;

use crate::expressions::ExpressionEvaluator;
use crate::tiff_types::ByteOrder;
use crate::types::{Result, TagValue};
use std::collections::HashMap;
use std::sync::LazyLock;

#[derive(Debug, Clone)]
pub struct TagKitDef {
    pub id: u32,
    pub name: &'static str,
    pub format: &'static str,
    pub groups: HashMap<&'static str, &'static str>,
    pub writable: bool,
    pub notes: Option<&'static str>,
    pub print_conv: PrintConvType,
    pub value_conv: Option<&'static str>,
    pub subdirectory: Option<SubDirectoryType>,
}

#[derive(Debug, Clone)]
pub enum PrintConvType {
    None,
    Simple(&'static HashMap<String, &'static str>),
    Expression(&'static str),
    Manual(&'static str),
}

/// Type alias for subdirectory processor function
pub type SubDirectoryProcessor = fn(&[u8], ByteOrder) -> Result<Vec<(String, TagValue)>>;

#[derive(Debug, Clone)]
pub enum SubDirectoryType {
    Binary { processor: SubDirectoryProcessor },
}

/// All tag kits for Panasonic_pm
pub static PANASONIC_PM_TAG_KITS: LazyLock<HashMap<u32, TagKitDef>> = LazyLock::new(|| {
    let mut map = HashMap::new();

    // interop tags
    for (id, tag_def) in interop::get_interop_tags() {
        map.insert(id, tag_def);
    }

    // other tags
    for (id, tag_def) in other::get_other_tags() {
        map.insert(id, tag_def);
    }

    // datetime tags
    for (id, tag_def) in datetime::get_datetime_tags() {
        map.insert(id, tag_def);
    }

    map
});

// Helper functions for reading binary data
fn read_int16s_array(data: &[u8], byte_order: ByteOrder, count: usize) -> Result<Vec<i16>> {
    if data.len() < count * 2 {
        return Err(crate::types::ExifError::ParseError(
            "Insufficient data for int16s array".to_string(),
        ));
    }
    let mut values = Vec::with_capacity(count);
    for i in 0..count {
        let offset = i * 2;
        let value = match byte_order {
            ByteOrder::LittleEndian => i16::from_le_bytes([data[offset], data[offset + 1]]),
            ByteOrder::BigEndian => i16::from_be_bytes([data[offset], data[offset + 1]]),
        };
        values.push(value);
    }
    Ok(values)
}

fn read_int16u_array(data: &[u8], byte_order: ByteOrder, count: usize) -> Result<Vec<u16>> {
    if data.len() < count * 2 {
        return Err(crate::types::ExifError::ParseError(
            "Insufficient data for int16u array".to_string(),
        ));
    }
    let mut values = Vec::with_capacity(count);
    for i in 0..count {
        let offset = i * 2;
        let value = match byte_order {
            ByteOrder::LittleEndian => u16::from_le_bytes([data[offset], data[offset + 1]]),
            ByteOrder::BigEndian => u16::from_be_bytes([data[offset], data[offset + 1]]),
        };
        values.push(value);
    }
    Ok(values)
}

fn read_int16s(data: &[u8], byte_order: ByteOrder) -> Result<i16> {
    if data.len() < 2 {
        return Err(crate::types::ExifError::ParseError(
            "Insufficient data for int16s".to_string(),
        ));
    }
    Ok(match byte_order {
        ByteOrder::LittleEndian => i16::from_le_bytes([data[0], data[1]]),
        ByteOrder::BigEndian => i16::from_be_bytes([data[0], data[1]]),
    })
}

// Subdirectory processing functions
fn process_panasonic_timeinfo(
    data: &[u8],
    byte_order: ByteOrder,
) -> Result<Vec<(String, TagValue)>> {
    let mut tags = Vec::new();
    // PanasonicDateTime at offset 0
    if data.len() >= 16 {
        // TODO: Handle format undef
    }

    // TimeLapseShotNumber at offset 16
    if data.len() >= 36 {
        // TODO: Handle format int32u
    }

    Ok(tags)
}

fn process_panasonic_facerecinfo(
    data: &[u8],
    byte_order: ByteOrder,
) -> Result<Vec<(String, TagValue)>> {
    let mut tags = Vec::new();
    // FacesRecognized at offset 0
    if data.len() >= 2 {
        // TODO: Handle format int16u
    }

    // RecognizedFace3Name at offset 100
    if data.len() >= 240 {
        // TODO: Handle format string
    }

    // RecognizedFace3Position at offset 120
    if data.len() >= 248 {
        if let Ok(values) = read_int16u_array(&data[240..248], byte_order, 4) {
            let value_str = values
                .iter()
                .map(|v| v.to_string())
                .collect::<Vec<_>>()
                .join(" ");
            tags.push((
                "RecognizedFace3Position".to_string(),
                TagValue::String(value_str),
            ));
        }
    }

    // RecognizedFace3Age at offset 128
    if data.len() >= 296 {
        // TODO: Handle format string
    }

    // RecognizedFace1Position at offset 24
    if data.len() >= 56 {
        if let Ok(values) = read_int16u_array(&data[48..56], byte_order, 4) {
            let value_str = values
                .iter()
                .map(|v| v.to_string())
                .collect::<Vec<_>>()
                .join(" ");
            tags.push((
                "RecognizedFace1Position".to_string(),
                TagValue::String(value_str),
            ));
        }
    }

    // RecognizedFace1Age at offset 32
    if data.len() >= 104 {
        // TODO: Handle format string
    }

    // RecognizedFace1Name at offset 4
    if data.len() >= 48 {
        // TODO: Handle format string
    }

    // RecognizedFace2Name at offset 52
    if data.len() >= 144 {
        // TODO: Handle format string
    }

    // RecognizedFace2Position at offset 72
    if data.len() >= 152 {
        if let Ok(values) = read_int16u_array(&data[144..152], byte_order, 4) {
            let value_str = values
                .iter()
                .map(|v| v.to_string())
                .collect::<Vec<_>>()
                .join(" ");
            tags.push((
                "RecognizedFace2Position".to_string(),
                TagValue::String(value_str),
            ));
        }
    }

    // RecognizedFace2Age at offset 80
    if data.len() >= 200 {
        // TODO: Handle format string
    }

    Ok(tags)
}

fn process_panasonic_facedetinfo(
    data: &[u8],
    byte_order: ByteOrder,
) -> Result<Vec<(String, TagValue)>> {
    let mut tags = Vec::new();
    // NumFacePositions at offset 0
    if data.len() >= 2 {
        // TODO: Handle format int16u
    }

    // Face1Position at offset 1
    if data.len() >= 10 {
        if let Ok(values) = read_int16u_array(&data[2..10], byte_order, 4) {
            let value_str = values
                .iter()
                .map(|v| v.to_string())
                .collect::<Vec<_>>()
                .join(" ");
            tags.push(("Face1Position".to_string(), TagValue::String(value_str)));
        }
    }

    // Face4Position at offset 13
    if data.len() >= 34 {
        if let Ok(values) = read_int16u_array(&data[26..34], byte_order, 4) {
            let value_str = values
                .iter()
                .map(|v| v.to_string())
                .collect::<Vec<_>>()
                .join(" ");
            tags.push(("Face4Position".to_string(), TagValue::String(value_str)));
        }
    }

    // Face5Position at offset 17
    if data.len() >= 42 {
        if let Ok(values) = read_int16u_array(&data[34..42], byte_order, 4) {
            let value_str = values
                .iter()
                .map(|v| v.to_string())
                .collect::<Vec<_>>()
                .join(" ");
            tags.push(("Face5Position".to_string(), TagValue::String(value_str)));
        }
    }

    // Face2Position at offset 5
    if data.len() >= 18 {
        if let Ok(values) = read_int16u_array(&data[10..18], byte_order, 4) {
            let value_str = values
                .iter()
                .map(|v| v.to_string())
                .collect::<Vec<_>>()
                .join(" ");
            tags.push(("Face2Position".to_string(), TagValue::String(value_str)));
        }
    }

    // Face3Position at offset 9
    if data.len() >= 26 {
        if let Ok(values) = read_int16u_array(&data[18..26], byte_order, 4) {
            let value_str = values
                .iter()
                .map(|v| v.to_string())
                .collect::<Vec<_>>()
                .join(" ");
            tags.push(("Face3Position".to_string(), TagValue::String(value_str)));
        }
    }

    Ok(tags)
}

pub fn process_tag_0x2003_subdirectory(
    data: &[u8],
    byte_order: ByteOrder,
) -> Result<Vec<(String, TagValue)>> {
    use tracing::debug;
    let count = data.len() / 2;
    debug!(
        "process_tag_0x2003_subdirectory called with {} bytes, count={}",
        data.len(),
        count
    );

    match count {
        _ => Ok(vec![]), // Unknown variant
    }
}

pub fn process_tag_0x61_subdirectory(
    data: &[u8],
    byte_order: ByteOrder,
) -> Result<Vec<(String, TagValue)>> {
    use tracing::debug;
    let count = data.len() / 2;
    debug!(
        "process_tag_0x61_subdirectory called with {} bytes, count={}",
        data.len(),
        count
    );

    match count {
        _ => Ok(vec![]), // Unknown variant
    }
}

pub fn process_tag_0x4e_subdirectory(
    data: &[u8],
    byte_order: ByteOrder,
) -> Result<Vec<(String, TagValue)>> {
    use tracing::debug;
    let count = data.len() / 2;
    debug!(
        "process_tag_0x4e_subdirectory called with {} bytes, count={}",
        data.len(),
        count
    );

    match count {
        _ => Ok(vec![]), // Unknown variant
    }
}

pub fn process_tag_0xe00_subdirectory(
    data: &[u8],
    byte_order: ByteOrder,
) -> Result<Vec<(String, TagValue)>> {
    use tracing::debug;
    let count = data.len() / 2;
    debug!(
        "process_tag_0xe00_subdirectory called with {} bytes, count={}",
        data.len(),
        count
    );

    match count {
        _ => Ok(vec![]), // Unknown variant
    }
}

/// Apply PrintConv for a tag from this module
pub fn apply_print_conv(
    tag_id: u32,
    value: &TagValue,
    _evaluator: &mut ExpressionEvaluator,
    _errors: &mut Vec<String>,
    warnings: &mut Vec<String>,
) -> TagValue {
    if let Some(tag_kit) = PANASONIC_PM_TAG_KITS.get(&tag_id) {
        // Normal PrintConv processing only
        match &tag_kit.print_conv {
            PrintConvType::None => value.clone(),
            PrintConvType::Simple(lookup) => {
                // Convert value to string key for lookup
                let key = match value {
                    TagValue::U8(v) => v.to_string(),
                    TagValue::U16(v) => v.to_string(),
                    TagValue::U32(v) => v.to_string(),
                    TagValue::I16(v) => v.to_string(),
                    TagValue::I32(v) => v.to_string(),
                    TagValue::String(s) => s.clone(),
                    _ => return value.clone(),
                };

                if let Some(result) = lookup.get(&key) {
                    TagValue::String(result.to_string())
                } else {
                    TagValue::String(format!("Unknown ({})", value))
                }
            }
            PrintConvType::Expression(expr) => {
                // TODO: Implement expression evaluation
                warnings.push(format!(
                    "Expression PrintConv not yet implemented for tag {}: {}",
                    tag_kit.name, expr
                ));
                value.clone()
            }
            PrintConvType::Manual(func_name) => {
                // TODO: Look up in manual registry
                warnings.push(format!(
                    "Manual PrintConv '{}' not found for tag {}",
                    func_name, tag_kit.name
                ));
                value.clone()
            }
        }
    } else {
        // Tag not found in kit
        value.clone()
    }
}

/// Check if a tag has subdirectory processing
pub fn has_subdirectory(tag_id: u32) -> bool {
    if let Some(tag_kit) = PANASONIC_PM_TAG_KITS.get(&tag_id) {
        tag_kit.subdirectory.is_some()
    } else {
        false
    }
}

/// Process subdirectory tags and return multiple extracted tags
pub fn process_subdirectory(
    tag_id: u32,
    value: &TagValue,
    byte_order: ByteOrder,
) -> Result<HashMap<String, TagValue>> {
    use tracing::debug;
    let mut result = HashMap::new();

    debug!("process_subdirectory called for tag_id: 0x{:04x}", tag_id);

    if let Some(tag_kit) = PANASONIC_PM_TAG_KITS.get(&tag_id) {
        if let Some(SubDirectoryType::Binary { processor }) = &tag_kit.subdirectory {
            debug!("Found subdirectory processor for tag_id: 0x{:04x}", tag_id);
            let bytes = match value {
                TagValue::U16Array(arr) => {
                    debug!("Converting U16Array with {} elements to bytes", arr.len());
                    // Convert U16 array to bytes based on byte order
                    let mut bytes = Vec::with_capacity(arr.len() * 2);
                    for val in arr {
                        match byte_order {
                            ByteOrder::LittleEndian => bytes.extend_from_slice(&val.to_le_bytes()),
                            ByteOrder::BigEndian => bytes.extend_from_slice(&val.to_be_bytes()),
                        }
                    }
                    bytes
                }
                TagValue::U8Array(arr) => arr.clone(),
                _ => return Ok(result), // Not array data
            };

            debug!("Calling processor with {} bytes", bytes.len());
            // Process subdirectory and collect all extracted tags
            match processor(&bytes, byte_order) {
                Ok(extracted_tags) => {
                    debug!("Processor returned {} tags", extracted_tags.len());
                    for (name, value) in extracted_tags {
                        result.insert(name, value);
                    }
                }
                Err(e) => {
                    debug!("Processor error: {:?}", e);
                }
            }
        } else {
            debug!(
                "No subdirectory processor found for tag_id: 0x{:04x}",
                tag_id
            );
        }
    } else {
        debug!("Tag not found in TAG_KITS: 0x{:04x}", tag_id);
    }

    Ok(result)
}
