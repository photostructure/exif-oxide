//! Tag kits for other category from Panasonic.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]

use super::{PrintConvType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_6: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("2".to_string(), "Standard");
    map.insert("3".to_string(), "High");
    map.insert("4".to_string(), "Extended");
    map
});

static PRINT_CONV_7: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("2".to_string(), "Standard");
    map.insert("3".to_string(), "High");
    map
});

static PRINT_CONV_8: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_9: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Standard or Custom");
    map.insert("11".to_string(), "L. Monochrome");
    map.insert("12".to_string(), "Like709");
    map.insert("15".to_string(), "L. Monochrome D");
    map.insert("17".to_string(), "V-Log");
    map.insert("18".to_string(), "Cinelike D2");
    map.insert("2".to_string(), "Vivid");
    map.insert("3".to_string(), "Natural");
    map.insert("4".to_string(), "Monochrome");
    map.insert("5".to_string(), "Scenery");
    map.insert("6".to_string(), "Portrait");
    map.insert("8".to_string(), "Cinelike D");
    map.insert("9".to_string(), "Cinelike V");
    map
});

static PRINT_CONV_10: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_11: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Rotate CW");
    map.insert("2".to_string(), "Rotate 180");
    map.insert("3".to_string(), "Rotate CCW");
    map.insert("4".to_string(), "Tilt Upwards");
    map.insert("5".to_string(), "Tilt Downwards");
    map
});

static PRINT_CONV_12: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Left to Right");
    map.insert("2".to_string(), "Right to Left");
    map.insert("3".to_string(), "Top to Bottom");
    map.insert("4".to_string(), "Bottom to Top");
    map
});

static PRINT_CONV_13: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("100".to_string(), "1 EV");
    map.insert("200".to_string(), "2 EV");
    map.insert("300".to_string(), "3 EV");
    map.insert("32868".to_string(), "1 EV (Auto)");
    map.insert("32968".to_string(), "2 EV (Auto)");
    map.insert("33068".to_string(), "3 EV (Auto)");
    map
});

static PRINT_CONV_14: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Mechanical");
    map.insert("1".to_string(), "Electronic");
    map.insert("2".to_string(), "Hybrid");
    map
});

static PRINT_CONV_15: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0 0".to_string(), "Off");
    map.insert("0 1".to_string(), "Expressive");
    map.insert("0 1024".to_string(), "Dynamic Monochrome");
    map.insert("0 1048576".to_string(), "Sunshine");
    map.insert("0 134217728".to_string(), "Silky Monochrome");
    map.insert("0 16".to_string(), "High Dynamic");
    map.insert("0 16384".to_string(), "One Point Color");
    map.insert("0 2".to_string(), "Retro");
    map.insert("0 2048".to_string(), "Soft Focus");
    map.insert("0 2097152".to_string(), "Bleach Bypass");
    map.insert("0 256".to_string(), "Low Key");
    map.insert("0 32".to_string(), "Miniature Effect");
    map.insert("0 32768".to_string(), "Star Filter");
    map.insert("0 33554432".to_string(), "Monochrome");
    map.insert("0 4".to_string(), "High Key");
    map.insert("0 4096".to_string(), "Impressive Art");
    map.insert("0 4194304".to_string(), "Toy Pop");
    map.insert("0 512".to_string(), "Toy Effect");
    map.insert("0 524288".to_string(), "Old Days");
    map.insert("0 67108864".to_string(), "Rough Monochrome");
    map.insert("0 8".to_string(), "Sepia");
    map.insert("0 8192".to_string(), "Cross Process");
    map.insert("0 8388608".to_string(), "Fantasy");
    map
});

static PRINT_CONV_16: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_17: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Yellow");
    map.insert("2".to_string(), "Orange");
    map.insert("3".to_string(), "Red");
    map.insert("4".to_string(), "Green");
    map
});

static PRINT_CONV_18: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Off or 4K");
    map.insert("4".to_string(), "6K");
    map
});

static PRINT_CONV_19: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("1".to_string(), "Off");
    map.insert("2".to_string(), "On");
    map
});

static PRINT_CONV_20: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_21: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Off");
    map.insert("1032".to_string(), "Focus Stacking");
    map.insert("2064".to_string(), "6K Burst");
    map.insert("2080".to_string(), "6K Burst (Start/Stop)");
    map.insert("24".to_string(), "4K Burst");
    map.insert("264".to_string(), "Loop Recording");
    map.insert("4".to_string(), "Post Focus");
    map.insert("40".to_string(), "4K Burst (Start/Stop)");
    map.insert("4097".to_string(), "High Resolution Mode");
    map.insert("72".to_string(), "4K Pre-burst");
    map
});

static PRINT_CONV_22: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map
});

static PRINT_CONV_23: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_24: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0 0".to_string(), "Post Focus Auto Merging or None");
    map
});

static PRINT_CONV_25: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "4K or 6K");
    map
});

static PRINT_CONV_26: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Multi-aspect");
    map.insert("1".to_string(), "Standard");
    map
});

static PRINT_CONV_27: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("2".to_string(), "Standard");
    map.insert("3".to_string(), "High");
    map
});

static PRINT_CONV_28: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("1".to_string(), "Human Eye/Face/Body");
    map.insert("10".to_string(), "Train");
    map.insert("11".to_string(), "Train (main part priority)");
    map.insert("12".to_string(), "Airplane");
    map.insert("13".to_string(), "Airplane (nose priority)");
    map.insert("2".to_string(), "Animal");
    map.insert("3".to_string(), "Human Eye/Face");
    map.insert("4".to_string(), "Animal Body");
    map.insert("5".to_string(), "Animal Eye/Body");
    map.insert("6".to_string(), "Car");
    map.insert("7".to_string(), "Motorcycle");
    map.insert("8".to_string(), "Car (main part priority)");
    map.insert("9".to_string(), "Motorcycle (helmet priority)");
    map
});

static PRINT_CONV_29: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_30: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("10".to_string(), "Dual IS Panning");
    map.insert("11".to_string(), "Dual2 IS");
    map.insert("12".to_string(), "Dual2 IS Panning");
    map.insert("2".to_string(), "On, Optical");
    map.insert("3".to_string(), "Off");
    map.insert("4".to_string(), "On, Mode 2");
    map.insert("5".to_string(), "On, Optical Panning");
    map.insert("6".to_string(), "On, Body-only");
    map.insert("7".to_string(), "On, Body-only Panning");
    map.insert("9".to_string(), "Dual IS");
    map
});

static PRINT_CONV_31: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "On");
    map.insert("2".to_string(), "Off");
    map.insert("257".to_string(), "Tele-Macro");
    map.insert("513".to_string(), "Macro Zoom");
    map
});

static PRINT_CONV_32: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Normal");
    map.insert("10".to_string(), "Spot");
    map.insert("11".to_string(), "Manual");
    map.insert("12".to_string(), "Movie Preview");
    map.insert("13".to_string(), "Panning");
    map.insert("14".to_string(), "Simple");
    map.insert("15".to_string(), "Color Effects");
    map.insert("16".to_string(), "Self Portrait");
    map.insert("17".to_string(), "Economy");
    map.insert("18".to_string(), "Fireworks");
    map.insert("19".to_string(), "Party");
    map.insert("2".to_string(), "Portrait");
    map.insert("20".to_string(), "Snow");
    map.insert("21".to_string(), "Night Scenery");
    map.insert("22".to_string(), "Food");
    map.insert("23".to_string(), "Baby");
    map.insert("24".to_string(), "Soft Skin");
    map.insert("25".to_string(), "Candlelight");
    map.insert("26".to_string(), "Starry Night");
    map.insert("27".to_string(), "High Sensitivity");
    map.insert("28".to_string(), "Panorama Assist");
    map.insert("29".to_string(), "Underwater");
    map.insert("3".to_string(), "Scenery");
    map.insert("30".to_string(), "Beach");
    map.insert("31".to_string(), "Aerial Photo");
    map.insert("32".to_string(), "Sunset");
    map.insert("33".to_string(), "Pet");
    map.insert("34".to_string(), "Intelligent ISO");
    map.insert("35".to_string(), "Clipboard");
    map.insert("36".to_string(), "High Speed Continuous Shooting");
    map.insert("37".to_string(), "Intelligent Auto");
    map.insert("39".to_string(), "Multi-aspect");
    map.insert("4".to_string(), "Sports");
    map.insert("41".to_string(), "Transform");
    map.insert("42".to_string(), "Flash Burst");
    map.insert("43".to_string(), "Pin Hole");
    map.insert("44".to_string(), "Film Grain");
    map.insert("45".to_string(), "My Color");
    map.insert("46".to_string(), "Photo Frame");
    map.insert("48".to_string(), "Movie");
    map.insert("5".to_string(), "Night Portrait");
    map.insert("51".to_string(), "HDR");
    map.insert("52".to_string(), "Peripheral Defocus");
    map.insert("55".to_string(), "Handheld Night Shot");
    map.insert("57".to_string(), "3D");
    map.insert("59".to_string(), "Creative Control");
    map.insert("6".to_string(), "Program");
    map.insert("60".to_string(), "Intelligent Auto Plus");
    map.insert("62".to_string(), "Panorama");
    map.insert("63".to_string(), "Glass Through");
    map.insert("64".to_string(), "HDR");
    map.insert("66".to_string(), "Digital Filter");
    map.insert("67".to_string(), "Clear Portrait");
    map.insert("68".to_string(), "Silky Skin");
    map.insert("69".to_string(), "Backlit Softness");
    map.insert("7".to_string(), "Aperture Priority");
    map.insert("70".to_string(), "Clear in Backlight");
    map.insert("71".to_string(), "Relaxing Tone");
    map.insert("72".to_string(), "Sweet Child's Face");
    map.insert("73".to_string(), "Distinct Scenery");
    map.insert("74".to_string(), "Bright Blue Sky");
    map.insert("75".to_string(), "Romantic Sunset Glow");
    map.insert("76".to_string(), "Vivid Sunset Glow");
    map.insert("77".to_string(), "Glistening Water");
    map.insert("78".to_string(), "Clear Nightscape");
    map.insert("79".to_string(), "Cool Night Sky");
    map.insert("8".to_string(), "Shutter Priority");
    map.insert("80".to_string(), "Warm Glowing Nightscape");
    map.insert("81".to_string(), "Artistic Nightscape");
    map.insert("82".to_string(), "Glittering Illuminations");
    map.insert("83".to_string(), "Clear Night Portrait");
    map.insert("84".to_string(), "Soft Image of a Flower");
    map.insert("85".to_string(), "Appetizing Food");
    map.insert("86".to_string(), "Cute Dessert");
    map.insert("87".to_string(), "Freeze Animal Motion");
    map.insert("88".to_string(), "Clear Sports Shot");
    map.insert("89".to_string(), "Monochrome");
    map.insert("9".to_string(), "Macro");
    map.insert("90".to_string(), "Creative Control");
    map.insert("92".to_string(), "Handheld Night Shot");
    map
});

static PRINT_CONV_33: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Yes");
    map.insert("2".to_string(), "No");
    map.insert("3".to_string(), "Stereo");
    map
});

static PRINT_CONV_34: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Normal");
    map.insert("10".to_string(), "Spot");
    map.insert("11".to_string(), "Manual");
    map.insert("12".to_string(), "Movie Preview");
    map.insert("13".to_string(), "Panning");
    map.insert("14".to_string(), "Simple");
    map.insert("15".to_string(), "Color Effects");
    map.insert("16".to_string(), "Self Portrait");
    map.insert("17".to_string(), "Economy");
    map.insert("18".to_string(), "Fireworks");
    map.insert("19".to_string(), "Party");
    map.insert("2".to_string(), "Portrait");
    map.insert("20".to_string(), "Snow");
    map.insert("21".to_string(), "Night Scenery");
    map.insert("22".to_string(), "Food");
    map.insert("23".to_string(), "Baby");
    map.insert("24".to_string(), "Soft Skin");
    map.insert("25".to_string(), "Candlelight");
    map.insert("26".to_string(), "Starry Night");
    map.insert("27".to_string(), "High Sensitivity");
    map.insert("28".to_string(), "Panorama Assist");
    map.insert("29".to_string(), "Underwater");
    map.insert("3".to_string(), "Scenery");
    map.insert("30".to_string(), "Beach");
    map.insert("31".to_string(), "Aerial Photo");
    map.insert("32".to_string(), "Sunset");
    map.insert("33".to_string(), "Pet");
    map.insert("34".to_string(), "Intelligent ISO");
    map.insert("35".to_string(), "Clipboard");
    map.insert("36".to_string(), "High Speed Continuous Shooting");
    map.insert("37".to_string(), "Intelligent Auto");
    map.insert("39".to_string(), "Multi-aspect");
    map.insert("4".to_string(), "Sports");
    map.insert("41".to_string(), "Transform");
    map.insert("42".to_string(), "Flash Burst");
    map.insert("43".to_string(), "Pin Hole");
    map.insert("44".to_string(), "Film Grain");
    map.insert("45".to_string(), "My Color");
    map.insert("46".to_string(), "Photo Frame");
    map.insert("48".to_string(), "Movie");
    map.insert("5".to_string(), "Night Portrait");
    map.insert("51".to_string(), "HDR");
    map.insert("52".to_string(), "Peripheral Defocus");
    map.insert("55".to_string(), "Handheld Night Shot");
    map.insert("57".to_string(), "3D");
    map.insert("59".to_string(), "Creative Control");
    map.insert("6".to_string(), "Program");
    map.insert("60".to_string(), "Intelligent Auto Plus");
    map.insert("62".to_string(), "Panorama");
    map.insert("63".to_string(), "Glass Through");
    map.insert("64".to_string(), "HDR");
    map.insert("66".to_string(), "Digital Filter");
    map.insert("67".to_string(), "Clear Portrait");
    map.insert("68".to_string(), "Silky Skin");
    map.insert("69".to_string(), "Backlit Softness");
    map.insert("7".to_string(), "Aperture Priority");
    map.insert("70".to_string(), "Clear in Backlight");
    map.insert("71".to_string(), "Relaxing Tone");
    map.insert("72".to_string(), "Sweet Child's Face");
    map.insert("73".to_string(), "Distinct Scenery");
    map.insert("74".to_string(), "Bright Blue Sky");
    map.insert("75".to_string(), "Romantic Sunset Glow");
    map.insert("76".to_string(), "Vivid Sunset Glow");
    map.insert("77".to_string(), "Glistening Water");
    map.insert("78".to_string(), "Clear Nightscape");
    map.insert("79".to_string(), "Cool Night Sky");
    map.insert("8".to_string(), "Shutter Priority");
    map.insert("80".to_string(), "Warm Glowing Nightscape");
    map.insert("81".to_string(), "Artistic Nightscape");
    map.insert("82".to_string(), "Glittering Illuminations");
    map.insert("83".to_string(), "Clear Night Portrait");
    map.insert("84".to_string(), "Soft Image of a Flower");
    map.insert("85".to_string(), "Appetizing Food");
    map.insert("86".to_string(), "Cute Dessert");
    map.insert("87".to_string(), "Freeze Animal Motion");
    map.insert("88".to_string(), "Clear Sports Shot");
    map.insert("89".to_string(), "Monochrome");
    map.insert("9".to_string(), "Macro");
    map.insert("90".to_string(), "Creative Control");
    map.insert("92".to_string(), "Handheld Night Shot");
    map
});

static PRINT_CONV_35: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Disabled");
    map.insert("1".to_string(), "No");
    map.insert("2".to_string(), "Yes");
    map
});

static PRINT_CONV_36: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "No");
    map.insert("2".to_string(), "Yes");
    map
});

static PRINT_CONV_37: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Off");
    map.insert("2".to_string(), "On");
    map
});

static PRINT_CONV_38: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Off");
    map.insert("2".to_string(), "On");
    map
});

static PRINT_CONV_39: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1 1".to_string(), "Slim Low");
    map.insert("-3 2".to_string(), "Slim High");
    map.insert("0 0".to_string(), "Off");
    map.insert("1 1".to_string(), "Stretch Low");
    map.insert("3 2".to_string(), "Stretch High");
    map
});

static PRINT_CONV_40: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Off");
    map.insert("2".to_string(), "Warm");
    map.insert("3".to_string(), "Cool");
    map.insert("4".to_string(), "Black & White");
    map.insert("5".to_string(), "Sepia");
    map.insert("6".to_string(), "Happy");
    map.insert("8".to_string(), "Vivid");
    map
});

static PRINT_CONV_41: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("17".to_string(), "On (with flash)");
    map.insert("18".to_string(), "Aperture Bracketing");
    map.insert("2".to_string(), "Auto Exposure Bracketing (AEB)");
    map.insert("3".to_string(), "Focus Bracketing");
    map.insert("4".to_string(), "Unlimited");
    map.insert("8".to_string(), "White Balance Bracketing");
    map
});

static PRINT_CONV_42: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Standard");
    map.insert("1".to_string(), "Low (-1)");
    map.insert("2".to_string(), "High (+1)");
    map.insert("3".to_string(), "Lowest (-2)");
    map.insert("4".to_string(), "Highest (+2)");
    map.insert("5".to_string(), "+5");
    map.insert("6".to_string(), "+6");
    map.insert("65531".to_string(), "-5");
    map.insert("65532".to_string(), "-4");
    map.insert("65533".to_string(), "-3");
    map.insert("65534".to_string(), "-2");
    map.insert("65535".to_string(), "-1");
    map
});

static PRINT_CONV_43: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Horizontal (normal)");
    map.insert("3".to_string(), "Rotate 180");
    map.insert("6".to_string(), "Rotate 90 CW");
    map.insert("8".to_string(), "Rotate 270 CW");
    map
});

static PRINT_CONV_44: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Fired");
    map.insert("2".to_string(), "Enabled but Not Used");
    map.insert("3".to_string(), "Disabled but Required");
    map.insert("4".to_string(), "Disabled and Not Required");
    map
});

static PRINT_CONV_45: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Natural");
    map.insert("2".to_string(), "Vivid");
    map
});

static PRINT_CONV_46: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Standard");
    map.insert("2".to_string(), "Extended");
    map
});

static PRINT_CONV_47: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Off");
    map.insert("2".to_string(), "Wide");
    map.insert("3".to_string(), "Telephoto");
    map.insert("4".to_string(), "Macro");
    map
});

static PRINT_CONV_48: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Full");
    map.insert("2".to_string(), "Medium");
    map.insert("256".to_string(), "n/a");
    map.insert("3".to_string(), "Low");
    map.insert("4".to_string(), "Near Empty");
    map.insert("7".to_string(), "Near Full");
    map.insert("8".to_string(), "Medium Low");
    map
});

static PRINT_CONV_49: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Off");
    map.insert("2".to_string(), "On");
    map
});

static PRINT_CONV_50: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Off");
    map.insert("2".to_string(), "On");
    map
});

static PRINT_CONV_51: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("1".to_string(), "Standard (color)");
    map.insert("10".to_string(), "Nostalgic");
    map.insert("11".to_string(), "Vibrant");
    map.insert("2".to_string(), "Dynamic (color)");
    map.insert("3".to_string(), "Nature (color)");
    map.insert("4".to_string(), "Smooth (color)");
    map.insert("5".to_string(), "Standard (B&W)");
    map.insert("6".to_string(), "Dynamic (B&W)");
    map.insert("7".to_string(), "Smooth (B&W)");
    map
});

static PRINT_CONV_52: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a (Movie)");
    map.insert("2".to_string(), "High");
    map.insert("255".to_string(), "n/a (RAW only)");
    map.insert("3".to_string(), "Standard");
    map.insert("6".to_string(), "Very High");
    map
});

static PRINT_CONV_53: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No Bracket");
    map.insert("1".to_string(), "3 Images, Sequence 0/-/+");
    map.insert("2".to_string(), "3 Images, Sequence -/0/+");
    map.insert("3".to_string(), "5 Images, Sequence 0/-/+");
    map.insert("4".to_string(), "5 Images, Sequence -/0/+");
    map.insert("5".to_string(), "7 Images, Sequence 0/-/+");
    map.insert("6".to_string(), "7 Images, Sequence -/0/+");
    map
});

static PRINT_CONV_54: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("1".to_string(), "1st");
    map.insert("2".to_string(), "2nd");
    map
});

static PRINT_CONV_55: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Off");
    map.insert("2".to_string(), "On");
    map
});

static PRINT_CONV_56: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1 1".to_string(), "Slim Low");
    map.insert("-3 2".to_string(), "Slim High");
    map.insert("0 0".to_string(), "Off");
    map.insert("1 1".to_string(), "Stretch Low");
    map.insert("3 2".to_string(), "Stretch High");
    map
});

static PRINT_CONV_57: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Low");
    map.insert("2".to_string(), "Standard");
    map.insert("3".to_string(), "High");
    map
});

static PRINT_CONV_58: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes (flash required but disabled)");
    map
});

/// Get tag definitions for other category
pub fn get_other_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (101, TagKitDef {
            id: 101,
            name: "Title",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (102, TagKitDef {
            id: 102,
            name: "BabyName",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: Some("or pet name"),
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (103, TagKitDef {
            id: 103,
            name: "Location",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (105, TagKitDef {
            id: 105,
            name: "Country",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (107, TagKitDef {
            id: 107,
            name: "State",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (109, TagKitDef {
            id: 109,
            name: "City",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: Some("City/Town as stored by some models, or County/Township for others"),
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (111, TagKitDef {
            id: 111,
            name: "Landmark",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (112, TagKitDef {
            id: 112,
            name: "IntelligentResolution",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_6),
            value_conv: None,
        }),
        (118, TagKitDef {
            id: 118,
            name: "MergedImages",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("number of images in HDR or Live View Composite picture"),
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (119, TagKitDef {
            id: 119,
            name: "BurstSpeed",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("images per second"),
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (121, TagKitDef {
            id: 121,
            name: "IntelligentD-Range",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_7),
            value_conv: None,
        }),
        (124, TagKitDef {
            id: 124,
            name: "ClearRetouch",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_8),
            value_conv: None,
        }),
        (128, TagKitDef {
            id: 128,
            name: "City2",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: Some("City/Town/Village as stored by some models"),
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (134, TagKitDef {
            id: 134,
            name: "ManometerPressure",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f kPa\",$val)"),
            value_conv: Some("$val / 10"),
        }),
        (137, TagKitDef {
            id: 137,
            name: "PhotoStyle",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_9),
            value_conv: None,
        }),
        (138, TagKitDef {
            id: 138,
            name: "ShadingCompensation",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_10),
            value_conv: None,
        }),
        (139, TagKitDef {
            id: 139,
            name: "WBShiftIntelligentAuto",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("value is -9 for blue to +9 for amber.  Valid for Intelligent-Auto modes"),
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (140, TagKitDef {
            id: 140,
            name: "AccelerometerZ",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("positive is acceleration upwards"),
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (141, TagKitDef {
            id: 141,
            name: "AccelerometerX",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("positive is acceleration to the left"),
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (142, TagKitDef {
            id: 142,
            name: "AccelerometerY",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("positive is acceleration backwards"),
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (143, TagKitDef {
            id: 143,
            name: "CameraOrientation",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_11),
            value_conv: None,
        }),
        (144, TagKitDef {
            id: 144,
            name: "RollAngle",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("converted to degrees of clockwise camera rotation"),
            print_conv: PrintConvType::None,
            value_conv: Some("$val / 10"),
        }),
        (145, TagKitDef {
            id: 145,
            name: "PitchAngle",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("converted to degrees of upward camera tilt"),
            print_conv: PrintConvType::None,
            value_conv: Some("-$val / 10"),
        }),
        (146, TagKitDef {
            id: 146,
            name: "WBShiftCreativeControl",
            format: "int8s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("WB shift or style strength.  Valid for Creative-Control modes"),
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (147, TagKitDef {
            id: 147,
            name: "SweepPanoramaDirection",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_12),
            value_conv: None,
        }),
        (148, TagKitDef {
            id: 148,
            name: "SweepPanoramaFieldOfView",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (157, TagKitDef {
            id: 157,
            name: "InternalNDFilter",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (158, TagKitDef {
            id: 158,
            name: "HDR",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_13),
            value_conv: None,
        }),
        (159, TagKitDef {
            id: 159,
            name: "ShutterType",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_14),
            value_conv: None,
        }),
        (161, TagKitDef {
            id: 161,
            name: "FilterEffect",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_15),
            value_conv: None,
        }),
        (163, TagKitDef {
            id: 163,
            name: "ClearRetouchValue",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (167, TagKitDef {
            id: 167,
            name: "OutputLUT",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("2-column by 432-row binary lookup table of unsigned short values for\n            converting to 16-bit output (1st column) from 14 bits (2nd column) with\n            camera contrast"),
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (171, TagKitDef {
            id: 171,
            name: "TouchAE",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_16),
            value_conv: None,
        }),
        (172, TagKitDef {
            id: 172,
            name: "MonochromeFilterEffect",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_17),
            value_conv: None,
        }),
        (173, TagKitDef {
            id: 173,
            name: "HighlightShadow",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (179, TagKitDef {
            id: 179,
            name: "VideoBurstResolution",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_18),
            value_conv: None,
        }),
        (180, TagKitDef {
            id: 180,
            name: "MultiExposure",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_19),
            value_conv: None,
        }),
        (185, TagKitDef {
            id: 185,
            name: "RedEyeRemoval",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_20),
            value_conv: None,
        }),
        (187, TagKitDef {
            id: 187,
            name: "VideoBurstMode",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_21),
            value_conv: None,
        }),
        (188, TagKitDef {
            id: 188,
            name: "DiffractionCorrection",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_22),
            value_conv: None,
        }),
        (189, TagKitDef {
            id: 189,
            name: "FocusBracket",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("positive is further, negative is closer"),
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (190, TagKitDef {
            id: 190,
            name: "LongExposureNRUsed",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_23),
            value_conv: None,
        }),
        (191, TagKitDef {
            id: 191,
            name: "PostFocusMerging",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_24),
            value_conv: None,
        }),
        (193, TagKitDef {
            id: 193,
            name: "VideoPreburst",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_25),
            value_conv: None,
        }),
        (196, TagKitDef {
            id: 196,
            name: "LensTypeMake",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (197, TagKitDef {
            id: 197,
            name: "LensTypeModel",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$_=sprintf(\"%.4x\",$val); s/(..)(..)/$2 $1/; $_"),
        }),
        (202, TagKitDef {
            id: 202,
            name: "SensorType",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_26),
            value_conv: None,
        }),
        (209, TagKitDef {
            id: 209,
            name: "ISO",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (210, TagKitDef {
            id: 210,
            name: "MonochromeGrainEffect",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_27),
            value_conv: None,
        }),
        (214, TagKitDef {
            id: 214,
            name: "NoiseReductionStrength",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (222, TagKitDef {
            id: 222,
            name: "AFAreaSize",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("relative to size of image.  \"n/a\" for manual focus"),
            print_conv: PrintConvType::Expression("$val =~ /^4194303.999/ ? \"n/a\" : $val"),
            value_conv: None,
        }),
        (228, TagKitDef {
            id: 228,
            name: "LensTypeModel",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$_=sprintf(\"%.4x\",$val); s/(..)(..)/$2 $1/; $_"),
        }),
        (232, TagKitDef {
            id: 232,
            name: "MinimumISO",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (233, TagKitDef {
            id: 233,
            name: "AFSubjectDetection",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_28),
            value_conv: None,
        }),
        (238, TagKitDef {
            id: 238,
            name: "DynamicRangeBoost",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_29),
            value_conv: None,
        }),
        (26, TagKitDef {
            id: 26,
            name: "ImageStabilization",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_30),
            value_conv: None,
        }),
        (28, TagKitDef {
            id: 28,
            name: "MacroMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_31),
            value_conv: None,
        }),
        (31, TagKitDef {
            id: 31,
            name: "ShootingMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_32),
            value_conv: None,
        }),
        (32, TagKitDef {
            id: 32,
            name: "Audio",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_33),
            value_conv: None,
        }),
        (32768, TagKitDef {
            id: 32768,
            name: "MakerNoteVersion",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (32769, TagKitDef {
            id: 32769,
            name: "SceneMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_34),
            value_conv: None,
        }),
        (32770, TagKitDef {
            id: 32770,
            name: "HighlightWarning",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_35),
            value_conv: None,
        }),
        (32771, TagKitDef {
            id: 32771,
            name: "DarkFocusEnvironment",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_36),
            value_conv: None,
        }),
        (32772, TagKitDef {
            id: 32772,
            name: "WBRedLevel",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (32773, TagKitDef {
            id: 32773,
            name: "WBGreenLevel",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (32774, TagKitDef {
            id: 32774,
            name: "WBBlueLevel",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (32776, TagKitDef {
            id: 32776,
            name: "TextStamp",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_37),
            value_conv: None,
        }),
        (32777, TagKitDef {
            id: 32777,
            name: "TextStamp",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_38),
            value_conv: None,
        }),
        (32784, TagKitDef {
            id: 32784,
            name: "BabyAge",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: Some("or pet age"),
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: None,
        }),
        (32786, TagKitDef {
            id: 32786,
            name: "Transform",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("decoded as two 16-bit signed integers"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_39),
            value_conv: None,
        }),
        (33, TagKitDef {
            id: 33,
            name: "DataDump",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (35, TagKitDef {
            id: 35,
            name: "WhiteBalanceBias",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("$val / 3"),
        }),
        (3584, TagKitDef {
            id: 3584,
            name: "PrintIM",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (36, TagKitDef {
            id: 36,
            name: "FlashBias",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("$val / 3"),
        }),
        (37, TagKitDef {
            id: 37,
            name: "InternalSerialNumber",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("this number is unique, and contains the date of manufacture, but is not the\n            same as the number printed on the camera body"),
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: None,
        }),
        (38, TagKitDef {
            id: 38,
            name: "PanasonicExifVersion",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (39, TagKitDef {
            id: 39,
            name: "VideoFrameRate",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("only valid for older models"),
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
        }),
        (40, TagKitDef {
            id: 40,
            name: "ColorEffect",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_40),
            value_conv: None,
        }),
        (42, TagKitDef {
            id: 42,
            name: "BurstMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("decoding may be different for some models"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_41),
            value_conv: None,
        }),
        (43, TagKitDef {
            id: 43,
            name: "SequenceNumber",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (45, TagKitDef {
            id: 45,
            name: "NoiseReduction",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("the encoding for this value is not consistent between models"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_42),
            value_conv: None,
        }),
        (48, TagKitDef {
            id: 48,
            name: "Rotation",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_43),
            value_conv: None,
        }),
        (49, TagKitDef {
            id: 49,
            name: "AFAssistLamp",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_44),
            value_conv: None,
        }),
        (50, TagKitDef {
            id: 50,
            name: "ColorMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_45),
            value_conv: None,
        }),
        (51, TagKitDef {
            id: 51,
            name: "BabyAge",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: Some("or pet age"),
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: None,
        }),
        (52, TagKitDef {
            id: 52,
            name: "OpticalZoomMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_46),
            value_conv: None,
        }),
        (53, TagKitDef {
            id: 53,
            name: "ConversionLens",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_47),
            value_conv: None,
        }),
        (54, TagKitDef {
            id: 54,
            name: "TravelDay",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("$val == 65535 ? \"n/a\" : $val"),
            value_conv: None,
        }),
        (56, TagKitDef {
            id: 56,
            name: "BatteryLevel",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_48),
            value_conv: None,
        }),
        (57, TagKitDef {
            id: 57,
            name: "Contrast",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
        }),
        (59, TagKitDef {
            id: 59,
            name: "TextStamp",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_49),
            value_conv: None,
        }),
        (60, TagKitDef {
            id: 60,
            name: "ProgramISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
        }),
        (61, TagKitDef {
            id: 61,
            name: "AdvancedSceneType",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("used together with SceneMode to derive Composite AdvancedSceneMode"),
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (62, TagKitDef {
            id: 62,
            name: "TextStamp",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_50),
            value_conv: None,
        }),
        (63, TagKitDef {
            id: 63,
            name: "FacesDetected",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (64, TagKitDef {
            id: 64,
            name: "Saturation",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
        }),
        (65, TagKitDef {
            id: 65,
            name: "Sharpness",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
        }),
        (66, TagKitDef {
            id: 66,
            name: "FilmMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_51),
            value_conv: None,
        }),
        (67, TagKitDef {
            id: 67,
            name: "JPEGQuality",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_52),
            value_conv: None,
        }),
        (68, TagKitDef {
            id: 68,
            name: "ColorTempKelvin",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (69, TagKitDef {
            id: 69,
            name: "BracketSettings",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_53),
            value_conv: None,
        }),
        (70, TagKitDef {
            id: 70,
            name: "WBShiftAB",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("positive is a shift toward blue"),
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (71, TagKitDef {
            id: 71,
            name: "WBShiftGM",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("positive is a shift toward green"),
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (72, TagKitDef {
            id: 72,
            name: "FlashCurtain",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_54),
            value_conv: None,
        }),
        (73, TagKitDef {
            id: 73,
            name: "LongExposureNoiseReduction",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_55),
            value_conv: None,
        }),
        (75, TagKitDef {
            id: 75,
            name: "PanasonicImageWidth",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (76, TagKitDef {
            id: 76,
            name: "PanasonicImageHeight",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (77, TagKitDef {
            id: 77,
            name: "AFPointPosition",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("X Y coordinates of primary AF area center, in the range 0.0 to 1.0"),
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: None,
        }),
        (78, TagKitDef {
            id: 78,
            name: "FaceDetInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: None,
        }),
        (81, TagKitDef {
            id: 81,
            name: "LensType",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val=~s/ +$//; $val"),
        }),
        (82, TagKitDef {
            id: 82,
            name: "LensSerialNumber",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val=~s/ +$//; $val"),
        }),
        (83, TagKitDef {
            id: 83,
            name: "AccessoryType",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val=~s/ +$//; $val"),
        }),
        (84, TagKitDef {
            id: 84,
            name: "AccessorySerialNumber",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val=~s/ +$//; $val"),
        }),
        (89, TagKitDef {
            id: 89,
            name: "Transform",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("decoded as two 16-bit signed integers"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_56),
            value_conv: None,
        }),
        (93, TagKitDef {
            id: 93,
            name: "IntelligentExposure",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("not valid for some models"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_57),
            value_conv: None,
        }),
        (96, TagKitDef {
            id: 96,
            name: "LensFirmwareVersion",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: None,
        }),
        (97, TagKitDef {
            id: 97,
            name: "FaceRecInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
        (98, TagKitDef {
            id: 98,
            name: "FlashWarning",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_58),
            value_conv: None,
        }),
        (99, TagKitDef {
            id: 99,
            name: "RecognizedFaceFlags",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
        }),
    ]
}
