//! Tag kits for interop category from Panasonic.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_3: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "TIFF");
    map.insert("11".to_string(), "Full HD Movie");
    map.insert("12".to_string(), "4k Movie");
    map.insert("2".to_string(), "High");
    map.insert("3".to_string(), "Normal");
    map.insert("6".to_string(), "Very High");
    map.insert("7".to_string(), "RAW");
    map.insert("9".to_string(), "Motion Picture");
    map
});

static PRINT_CONV_4: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Auto");
    map.insert("10".to_string(), "Black & White");
    map.insert("11".to_string(), "Manual 2");
    map.insert("12".to_string(), "Shade");
    map.insert("13".to_string(), "Kelvin");
    map.insert("14".to_string(), "Manual 3");
    map.insert("15".to_string(), "Manual 4");
    map.insert("19".to_string(), "Auto (cool)");
    map.insert("2".to_string(), "Daylight");
    map.insert("3".to_string(), "Cloudy");
    map.insert("4".to_string(), "Incandescent");
    map.insert("5".to_string(), "Manual");
    map.insert("8".to_string(), "Flash");
    map
});

static PRINT_CONV_5: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Auto");
    map.insert("2".to_string(), "Manual");
    map.insert("4".to_string(), "Auto, Focus button");
    map.insert("5".to_string(), "Auto, Continuous");
    map.insert("6".to_string(), "AF-S");
    map.insert("7".to_string(), "AF-C");
    map.insert("8".to_string(), "AF-F");
    map
});

/// Get tag definitions for interop category
pub fn get_interop_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (1, TagKitDef {
            id: 1,
            name: "Face1Position",
            format: "int16u[4]",
            groups: HashMap::new(),
            writable: false,
            notes: Some("4 numbers: X/Y coordinates of the face center and width/height of face. \n            Coordinates are relative to an image twice the size of the thumbnail, or 320\n            pixels wide"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "Face2Position",
            format: "int16u[4]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "Face3Position",
            format: "int16u[4]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "RecognizedFace1Name",
            format: "string[20]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "FocalLength",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f mm\",$val)"),
            value_conv: Some("$val / 1000"),
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "ImageQuality",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("quality of the main image, which may be in a different file"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_3),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "FirmwareVersion",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("for some camera models such as the FZ30 this may be an internal production\n            reference number and not the actual firmware version"),
            print_conv: PrintConvType::Expression(r"$val=~tr/ /./; $val"),
            value_conv: Some("$val=~/[\\0-\\x2f]/ ? join(\" \",unpack(\"C*\",$val)) : $val"),
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "WhiteBalance",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_4),
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "FocusMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_5),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "Model",
            format: "string[16]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "SerialNumber",
            format: "string[8]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
    ]
}
