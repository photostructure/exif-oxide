//! Generated mime_types lookup table
//!
//! This file is automatically generated.
//! DO NOT EDIT MANUALLY - changes will be overwritten.
//!
//! Source: ExifTool ExifTool.pm %mimeType
//! Description: MIME type mappings for file types

use std::collections::HashMap;
use std::sync::LazyLock;

/// MIME type mappings for file types lookup table
/// Source: ExifTool ExifTool.pm %mimeType (24 entries)
pub static MIME_TYPES: LazyLock<HashMap<&'static str, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("3FR", "image/x-hasselblad-3fr");
    map.insert("7Z", "application/x-7z-compressed");
    map.insert("BZ2", "application/bzip2");
    map.insert("C2PA", "application/c2pa");
    map.insert("CR2", "image/x-canon-cr2");
    map.insert("CR3", "image/x-canon-cr3");
    map.insert("Canon 1D RAW", "image/x-raw");
    map.insert("DR4", "application/octet-stream");
    map.insert("DS2", "audio/x-ds2");
    map.insert("DVR-MS", "video/x-ms-dvr");
    map.insert("Font", "application/x-font-type1");
    map.insert("J2C", "image/x-j2c");
    map.insert("JP2", "image/jp2");
    map.insert("K25", "image/x-kodak-k25");
    map.insert("M2T", "video/mpeg");
    map.insert("M2TS", "video/m2ts");
    map.insert("MP3", "audio/mpeg");
    map.insert("MP4", "video/mp4");
    map.insert("R3D", "video/x-red-r3d");
    map.insert("RW2", "image/x-panasonic-rw2");
    map.insert("SR2", "image/x-sony-sr2");
    map.insert("Torrent", "application/x-bittorrent");
    map.insert("VCard", "text/vcard");
    map.insert("X3F", "image/x-sigma-x3f");
    map
});

/// Look up mime type mappings for file types value by key
pub fn lookup_mime_types(key: &str) -> Option<&'static str> {
    MIME_TYPES.get(key).copied()
}
