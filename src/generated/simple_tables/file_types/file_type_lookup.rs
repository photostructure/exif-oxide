//! Generated file_type_lookup file type lookup table
//!
//! This file is automatically generated.
//! DO NOT EDIT MANUALLY - changes will be overwritten.
//!
//! Source: ExifTool ExifTool.pm %fileTypeLookup
//! Description: Core file type detection lookup table

use std::collections::HashMap;
use std::sync::LazyLock;

#[derive(Debug, Clone)]
pub enum FileTypeEntry {
    /// Simple alias pointing to another file type
    Alias(String),
    /// Full file type definition
    Definition {
        formats: Vec<String>,
        description: String,
    },
}

/// Core file type detection lookup table file type lookup table
/// Source: ExifTool ExifTool.pm %fileTypeLookup (343 entries)
pub static FILE_TYPE_LOOKUP: LazyLock<HashMap<&'static str, FileTypeEntry>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert(
        "360",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "GoPro 360 video".to_string(),
        },
    );
    map.insert(
        "3FR",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Hasselblad RAW format".to_string(),
        },
    );
    map.insert(
        "3G2",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "3rd Gen. Partnership Project 2 audio/video".to_string(),
        },
    );
    map.insert(
        "3GP",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "3rd Gen. Partnership Project audio/video".to_string(),
        },
    );
    map.insert("3GP2", FileTypeEntry::Alias("3G2".to_string()));
    map.insert("3GPP", FileTypeEntry::Alias("3GP".to_string()));
    map.insert(
        "7Z",
        FileTypeEntry::Definition {
            formats: vec!["7Z"].into_iter().map(String::from).collect(),
            description: "7z archive".to_string(),
        },
    );
    map.insert(
        "A",
        FileTypeEntry::Definition {
            formats: vec!["EXE"].into_iter().map(String::from).collect(),
            description: "Static library".to_string(),
        },
    );
    map.insert(
        "AA",
        FileTypeEntry::Definition {
            formats: vec!["AA"].into_iter().map(String::from).collect(),
            description: "Audible Audiobook".to_string(),
        },
    );
    map.insert(
        "AAC",
        FileTypeEntry::Definition {
            formats: vec!["AAC"].into_iter().map(String::from).collect(),
            description: "Advanced Audio Coding".to_string(),
        },
    );
    map.insert(
        "AAE",
        FileTypeEntry::Definition {
            formats: vec!["PLIST"].into_iter().map(String::from).collect(),
            description: "Apple edit information".to_string(),
        },
    );
    map.insert(
        "AAX",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "Audible Enhanced Audiobook".to_string(),
        },
    );
    map.insert(
        "ACFM",
        FileTypeEntry::Definition {
            formats: vec!["Font"].into_iter().map(String::from).collect(),
            description: "Adobe Composite Font Metrics".to_string(),
        },
    );
    map.insert(
        "ACR",
        FileTypeEntry::Definition {
            formats: vec!["DICOM"].into_iter().map(String::from).collect(),
            description: "American College of Radiology ACR-NEMA".to_string(),
        },
    );
    map.insert(
        "AFM",
        FileTypeEntry::Definition {
            formats: vec!["Font"].into_iter().map(String::from).collect(),
            description: "Adobe Font Metrics".to_string(),
        },
    );
    map.insert(
        "AI",
        FileTypeEntry::Definition {
            formats: vec!["PDF", "PS"].into_iter().map(String::from).collect(),
            description: "Adobe Illustrator".to_string(),
        },
    );
    map.insert("AIF", FileTypeEntry::Alias("AIFF".to_string()));
    map.insert(
        "AIFC",
        FileTypeEntry::Definition {
            formats: vec!["AIFF"].into_iter().map(String::from).collect(),
            description: "Audio Interchange File Format Compressed".to_string(),
        },
    );
    map.insert(
        "AIFF",
        FileTypeEntry::Definition {
            formats: vec!["AIFF"].into_iter().map(String::from).collect(),
            description: "Audio Interchange File Format".to_string(),
        },
    );
    map.insert("AIT", FileTypeEntry::Alias("AI".to_string()));
    map.insert(
        "ALIAS",
        FileTypeEntry::Definition {
            formats: vec!["ALIAS"].into_iter().map(String::from).collect(),
            description: "MacOS file alias".to_string(),
        },
    );
    map.insert(
        "AMFM",
        FileTypeEntry::Definition {
            formats: vec!["Font"].into_iter().map(String::from).collect(),
            description: "Adobe Multiple Master Font Metrics".to_string(),
        },
    );
    map.insert(
        "APE",
        FileTypeEntry::Definition {
            formats: vec!["APE"].into_iter().map(String::from).collect(),
            description: "Monkey's Audio format".to_string(),
        },
    );
    map.insert(
        "APNG",
        FileTypeEntry::Definition {
            formats: vec!["PNG"].into_iter().map(String::from).collect(),
            description: "Animated Portable Network Graphics".to_string(),
        },
    );
    map.insert(
        "ARQ",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Sony Alpha Pixel-Shift RAW format".to_string(),
        },
    );
    map.insert(
        "ARW",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Sony Alpha RAW format".to_string(),
        },
    );
    map.insert(
        "ASF",
        FileTypeEntry::Definition {
            formats: vec!["ASF"].into_iter().map(String::from).collect(),
            description: "Microsoft Advanced Systems Format".to_string(),
        },
    );
    map.insert(
        "AVC",
        FileTypeEntry::Definition {
            formats: vec!["AVC"].into_iter().map(String::from).collect(),
            description: "Advanced Video Connection".to_string(),
        },
    );
    map.insert(
        "AVI",
        FileTypeEntry::Definition {
            formats: vec!["RIFF"].into_iter().map(String::from).collect(),
            description: "Audio Video Interleaved".to_string(),
        },
    );
    map.insert(
        "AVIF",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "AV1 Image File Format".to_string(),
        },
    );
    map.insert("AZW", FileTypeEntry::Alias("MOBI".to_string()));
    map.insert("AZW3", FileTypeEntry::Alias("MOBI".to_string()));
    map.insert(
        "BMP",
        FileTypeEntry::Definition {
            formats: vec!["BMP"].into_iter().map(String::from).collect(),
            description: "Windows Bitmap".to_string(),
        },
    );
    map.insert(
        "BPG",
        FileTypeEntry::Definition {
            formats: vec!["BPG"].into_iter().map(String::from).collect(),
            description: "Better Portable Graphics".to_string(),
        },
    );
    map.insert(
        "BTF",
        FileTypeEntry::Definition {
            formats: vec!["BTF"].into_iter().map(String::from).collect(),
            description: "Big Tagged Image File Format".to_string(),
        },
    );
    map.insert(
        "BZ2",
        FileTypeEntry::Definition {
            formats: vec!["BZ2"].into_iter().map(String::from).collect(),
            description: "BZIP2 archive".to_string(),
        },
    );
    map.insert(
        "C2PA",
        FileTypeEntry::Definition {
            formats: vec!["JUMBF"].into_iter().map(String::from).collect(),
            description: "Coalition for Content Provenance and Authenticity".to_string(),
        },
    );
    map.insert("CAP", FileTypeEntry::Alias("PCAP".to_string()));
    map.insert(
        "CHM",
        FileTypeEntry::Definition {
            formats: vec!["CHM"].into_iter().map(String::from).collect(),
            description: "Microsoft Compiled HTML format".to_string(),
        },
    );
    map.insert(
        "CIFF",
        FileTypeEntry::Definition {
            formats: vec!["CRW"].into_iter().map(String::from).collect(),
            description: "Camera Image File Format".to_string(),
        },
    );
    map.insert(
        "COS",
        FileTypeEntry::Definition {
            formats: vec!["COS"].into_iter().map(String::from).collect(),
            description: "Capture One Settings".to_string(),
        },
    );
    map.insert(
        "CR2",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Canon RAW 2 format".to_string(),
        },
    );
    map.insert(
        "CR3",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "Canon RAW 3 format".to_string(),
        },
    );
    map.insert(
        "CRM",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "Canon RAW Movie".to_string(),
        },
    );
    map.insert(
        "CRW",
        FileTypeEntry::Definition {
            formats: vec!["CRW"].into_iter().map(String::from).collect(),
            description: "Canon RAW format".to_string(),
        },
    );
    map.insert(
        "CS1",
        FileTypeEntry::Definition {
            formats: vec!["PSD"].into_iter().map(String::from).collect(),
            description: "Sinar CaptureShop 1-Shot RAW".to_string(),
        },
    );
    map.insert(
        "CSV",
        FileTypeEntry::Definition {
            formats: vec!["TXT"].into_iter().map(String::from).collect(),
            description: "Comma-Separated Values".to_string(),
        },
    );
    map.insert(
        "CUR",
        FileTypeEntry::Definition {
            formats: vec!["ICO"].into_iter().map(String::from).collect(),
            description: "Windows Cursor".to_string(),
        },
    );
    map.insert(
        "CZI",
        FileTypeEntry::Definition {
            formats: vec!["CZI"].into_iter().map(String::from).collect(),
            description: "Zeiss Integrated Software RAW".to_string(),
        },
    );
    map.insert("DC3", FileTypeEntry::Alias("DICM".to_string()));
    map.insert("DCM", FileTypeEntry::Alias("DICM".to_string()));
    map.insert(
        "DCP",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "DNG Camera Profile".to_string(),
        },
    );
    map.insert(
        "DCR",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Kodak Digital Camera RAW".to_string(),
        },
    );
    map.insert(
        "DCX",
        FileTypeEntry::Definition {
            formats: vec!["DCX"].into_iter().map(String::from).collect(),
            description: "Multi-page PC Paintbrush".to_string(),
        },
    );
    map.insert(
        "DEX",
        FileTypeEntry::Definition {
            formats: vec!["DEX"].into_iter().map(String::from).collect(),
            description: "Dalvik Executable format".to_string(),
        },
    );
    map.insert(
        "DFONT",
        FileTypeEntry::Definition {
            formats: vec!["Font"].into_iter().map(String::from).collect(),
            description: "Macintosh Data fork Font".to_string(),
        },
    );
    map.insert(
        "DIB",
        FileTypeEntry::Definition {
            formats: vec!["BMP"].into_iter().map(String::from).collect(),
            description: "Device Independent Bitmap".to_string(),
        },
    );
    map.insert("DIC", FileTypeEntry::Alias("DICM".to_string()));
    map.insert(
        "DICM",
        FileTypeEntry::Definition {
            formats: vec!["DICOM"].into_iter().map(String::from).collect(),
            description: "Digital Imaging and Communications in Medicine".to_string(),
        },
    );
    map.insert(
        "DIR",
        FileTypeEntry::Definition {
            formats: vec!["DIR"].into_iter().map(String::from).collect(),
            description: "Directory".to_string(),
        },
    );
    map.insert(
        "DIVX",
        FileTypeEntry::Definition {
            formats: vec!["ASF"].into_iter().map(String::from).collect(),
            description: "DivX media format".to_string(),
        },
    );
    map.insert("DJV", FileTypeEntry::Alias("DJVU".to_string()));
    map.insert(
        "DJVU",
        FileTypeEntry::Definition {
            formats: vec!["AIFF"].into_iter().map(String::from).collect(),
            description: "DjVu image".to_string(),
        },
    );
    map.insert(
        "DLL",
        FileTypeEntry::Definition {
            formats: vec!["EXE"].into_iter().map(String::from).collect(),
            description: "Windows Dynamic Link Library".to_string(),
        },
    );
    map.insert(
        "DNG",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Digital Negative".to_string(),
        },
    );
    map.insert(
        "DOC",
        FileTypeEntry::Definition {
            formats: vec!["FPX"].into_iter().map(String::from).collect(),
            description: "Microsoft Word Document".to_string(),
        },
    );
    map.insert(
        "DOCM",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Document Macro-enabled".to_string(),
        },
    );
    map.insert(
        "DOCX",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Document".to_string(),
        },
    );
    map.insert(
        "DOT",
        FileTypeEntry::Definition {
            formats: vec!["FPX"].into_iter().map(String::from).collect(),
            description: "Microsoft Word Template".to_string(),
        },
    );
    map.insert(
        "DOTM",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Document Template Macro-enabled".to_string(),
        },
    );
    map.insert(
        "DOTX",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Document Template".to_string(),
        },
    );
    map.insert(
        "DPX",
        FileTypeEntry::Definition {
            formats: vec!["DPX"].into_iter().map(String::from).collect(),
            description: "Digital Picture Exchange".to_string(),
        },
    );
    map.insert(
        "DR4",
        FileTypeEntry::Definition {
            formats: vec!["DR4"].into_iter().map(String::from).collect(),
            description: "Canon VRD version 4 Recipe".to_string(),
        },
    );
    map.insert(
        "DS2",
        FileTypeEntry::Definition {
            formats: vec!["DSS"].into_iter().map(String::from).collect(),
            description: "Digital Speech Standard 2".to_string(),
        },
    );
    map.insert(
        "DSS",
        FileTypeEntry::Definition {
            formats: vec!["DSS"].into_iter().map(String::from).collect(),
            description: "Digital Speech Standard".to_string(),
        },
    );
    map.insert(
        "DV",
        FileTypeEntry::Definition {
            formats: vec!["DV"].into_iter().map(String::from).collect(),
            description: "Digital Video".to_string(),
        },
    );
    map.insert(
        "DVB",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "Digital Video Broadcasting".to_string(),
        },
    );
    map.insert(
        "DVR-MS",
        FileTypeEntry::Definition {
            formats: vec!["ASF"].into_iter().map(String::from).collect(),
            description: "Microsoft Digital Video recording".to_string(),
        },
    );
    map.insert(
        "DWF",
        FileTypeEntry::Definition {
            formats: vec!["DWF"].into_iter().map(String::from).collect(),
            description: "Autodesk drawing (Design Web Format)".to_string(),
        },
    );
    map.insert(
        "DWG",
        FileTypeEntry::Definition {
            formats: vec!["DWG"].into_iter().map(String::from).collect(),
            description: "AutoCAD Drawing".to_string(),
        },
    );
    map.insert(
        "DXF",
        FileTypeEntry::Definition {
            formats: vec!["DXF"].into_iter().map(String::from).collect(),
            description: "AutoCAD Drawing Exchange Format".to_string(),
        },
    );
    map.insert(
        "DYLIB",
        FileTypeEntry::Definition {
            formats: vec!["EXE"].into_iter().map(String::from).collect(),
            description: "Mach-O Dynamic Link Library".to_string(),
        },
    );
    map.insert(
        "EIP",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Capture One Enhanced Image Package".to_string(),
        },
    );
    map.insert(
        "EPS",
        FileTypeEntry::Definition {
            formats: vec!["EPS"].into_iter().map(String::from).collect(),
            description: "Encapsulated PostScript Format".to_string(),
        },
    );
    map.insert("EPS2", FileTypeEntry::Alias("EPS".to_string()));
    map.insert("EPS3", FileTypeEntry::Alias("EPS".to_string()));
    map.insert("EPSF", FileTypeEntry::Alias("EPS".to_string()));
    map.insert(
        "EPUB",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Electronic Publication".to_string(),
        },
    );
    map.insert(
        "ERF",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Epson Raw Format".to_string(),
        },
    );
    map.insert(
        "EXE",
        FileTypeEntry::Definition {
            formats: vec!["EXE"].into_iter().map(String::from).collect(),
            description: "Windows executable file".to_string(),
        },
    );
    map.insert(
        "EXIF",
        FileTypeEntry::Definition {
            formats: vec!["EXIF"].into_iter().map(String::from).collect(),
            description: "Exchangable Image File Metadata".to_string(),
        },
    );
    map.insert(
        "EXR",
        FileTypeEntry::Definition {
            formats: vec!["EXR"].into_iter().map(String::from).collect(),
            description: "Open EXR".to_string(),
        },
    );
    map.insert(
        "EXV",
        FileTypeEntry::Definition {
            formats: vec!["EXV"].into_iter().map(String::from).collect(),
            description: "Exiv2 metadata".to_string(),
        },
    );
    map.insert(
        "F4A",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "Adobe Flash Player 9+ Audio".to_string(),
        },
    );
    map.insert(
        "F4B",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "Adobe Flash Player 9+ audio Book".to_string(),
        },
    );
    map.insert(
        "F4P",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "Adobe Flash Player 9+ Protected".to_string(),
        },
    );
    map.insert(
        "F4V",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "Adobe Flash Player 9+ Video".to_string(),
        },
    );
    map.insert(
        "FFF",
        FileTypeEntry::Definition {
            formats: vec!["TIFF", "FLIR"].into_iter().map(String::from).collect(),
            description: "Hasselblad Flexible File Format".to_string(),
        },
    );
    map.insert("FIT", FileTypeEntry::Alias("FITS".to_string()));
    map.insert(
        "FITS",
        FileTypeEntry::Definition {
            formats: vec!["FITS"].into_iter().map(String::from).collect(),
            description: "Flexible Image Transport System".to_string(),
        },
    );
    map.insert(
        "FLA",
        FileTypeEntry::Definition {
            formats: vec!["FPX"].into_iter().map(String::from).collect(),
            description: "Macromedia/Adobe Flash project".to_string(),
        },
    );
    map.insert(
        "FLAC",
        FileTypeEntry::Definition {
            formats: vec!["FLAC"].into_iter().map(String::from).collect(),
            description: "Free Lossless Audio Codec".to_string(),
        },
    );
    map.insert(
        "FLIF",
        FileTypeEntry::Definition {
            formats: vec!["FLIF"].into_iter().map(String::from).collect(),
            description: "Free Lossless Image Format".to_string(),
        },
    );
    map.insert(
        "FLIR",
        FileTypeEntry::Definition {
            formats: vec!["FLIR"].into_iter().map(String::from).collect(),
            description: "FLIR File Format".to_string(),
        },
    );
    map.insert(
        "FLV",
        FileTypeEntry::Definition {
            formats: vec!["FLV"].into_iter().map(String::from).collect(),
            description: "Flash Video".to_string(),
        },
    );
    map.insert(
        "FPF",
        FileTypeEntry::Definition {
            formats: vec!["FPF"].into_iter().map(String::from).collect(),
            description: "FLIR Public image Format".to_string(),
        },
    );
    map.insert(
        "FPX",
        FileTypeEntry::Definition {
            formats: vec!["FPX"].into_iter().map(String::from).collect(),
            description: "FlashPix".to_string(),
        },
    );
    map.insert(
        "GIF",
        FileTypeEntry::Definition {
            formats: vec!["GIF"].into_iter().map(String::from).collect(),
            description: "Compuserve Graphics Interchange Format".to_string(),
        },
    );
    map.insert(
        "GLV",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "Garmin Low-resolution Video".to_string(),
        },
    );
    map.insert(
        "GPR",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "General Purpose RAW".to_string(),
        },
    );
    map.insert("GZ", FileTypeEntry::Alias("GZIP".to_string()));
    map.insert(
        "GZIP",
        FileTypeEntry::Definition {
            formats: vec!["GZIP"].into_iter().map(String::from).collect(),
            description: "GNU ZIP compressed archive".to_string(),
        },
    );
    map.insert(
        "HDP",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Windows HD Photo".to_string(),
        },
    );
    map.insert(
        "HDR",
        FileTypeEntry::Definition {
            formats: vec!["HDR"].into_iter().map(String::from).collect(),
            description: "Radiance RGBE High Dynamic Range".to_string(),
        },
    );
    map.insert(
        "HEIC",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "High Efficiency Image Format still image".to_string(),
        },
    );
    map.insert(
        "HEIF",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "High Efficiency Image Format".to_string(),
        },
    );
    map.insert("HIF", FileTypeEntry::Alias("HEIF".to_string()));
    map.insert("HTM", FileTypeEntry::Alias("HTML".to_string()));
    map.insert(
        "HTML",
        FileTypeEntry::Definition {
            formats: vec!["HTML"].into_iter().map(String::from).collect(),
            description: "HyperText Markup Language".to_string(),
        },
    );
    map.insert("ICAL", FileTypeEntry::Alias("ICS".to_string()));
    map.insert(
        "ICC",
        FileTypeEntry::Definition {
            formats: vec!["ICC"].into_iter().map(String::from).collect(),
            description: "International Color Consortium".to_string(),
        },
    );
    map.insert("ICM", FileTypeEntry::Alias("ICC".to_string()));
    map.insert(
        "ICO",
        FileTypeEntry::Definition {
            formats: vec!["ICO"].into_iter().map(String::from).collect(),
            description: "Windows Icon".to_string(),
        },
    );
    map.insert(
        "ICS",
        FileTypeEntry::Definition {
            formats: vec!["VCard"].into_iter().map(String::from).collect(),
            description: "iCalendar Schedule".to_string(),
        },
    );
    map.insert(
        "IDML",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Adobe InDesign Markup Language".to_string(),
        },
    );
    map.insert(
        "IIQ",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Phase One Intelligent Image Quality RAW".to_string(),
        },
    );
    map.insert(
        "IND",
        FileTypeEntry::Definition {
            formats: vec!["IND"].into_iter().map(String::from).collect(),
            description: "Adobe InDesign".to_string(),
        },
    );
    map.insert(
        "INDD",
        FileTypeEntry::Definition {
            formats: vec!["IND"].into_iter().map(String::from).collect(),
            description: "Adobe InDesign Document".to_string(),
        },
    );
    map.insert(
        "INDT",
        FileTypeEntry::Definition {
            formats: vec!["IND"].into_iter().map(String::from).collect(),
            description: "Adobe InDesign Template".to_string(),
        },
    );
    map.insert(
        "INSP",
        FileTypeEntry::Definition {
            formats: vec!["JPEG"].into_iter().map(String::from).collect(),
            description: "Insta360 Picture".to_string(),
        },
    );
    map.insert(
        "INSV",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "Insta360 Video".to_string(),
        },
    );
    map.insert(
        "INX",
        FileTypeEntry::Definition {
            formats: vec!["XMP"].into_iter().map(String::from).collect(),
            description: "Adobe InDesign Interchange".to_string(),
        },
    );
    map.insert(
        "ISO",
        FileTypeEntry::Definition {
            formats: vec!["ISO"].into_iter().map(String::from).collect(),
            description: "ISO 9660 disk image".to_string(),
        },
    );
    map.insert(
        "ITC",
        FileTypeEntry::Definition {
            formats: vec!["ITC"].into_iter().map(String::from).collect(),
            description: "iTunes Cover Flow".to_string(),
        },
    );
    map.insert(
        "J2C",
        FileTypeEntry::Definition {
            formats: vec!["JP2"].into_iter().map(String::from).collect(),
            description: "JPEG 2000 codestream".to_string(),
        },
    );
    map.insert("J2K", FileTypeEntry::Alias("J2C".to_string()));
    map.insert(
        "JNG",
        FileTypeEntry::Definition {
            formats: vec!["PNG"].into_iter().map(String::from).collect(),
            description: "JPG Network Graphics".to_string(),
        },
    );
    map.insert(
        "JP2",
        FileTypeEntry::Definition {
            formats: vec!["JP2"].into_iter().map(String::from).collect(),
            description: "JPEG 2000 file".to_string(),
        },
    );
    map.insert("JPC", FileTypeEntry::Alias("J2C".to_string()));
    map.insert("JPE", FileTypeEntry::Alias("JPEG".to_string()));
    map.insert(
        "JPEG",
        FileTypeEntry::Definition {
            formats: vec!["JPEG"].into_iter().map(String::from).collect(),
            description: "Joint Photographic Experts Group".to_string(),
        },
    );
    map.insert("JPF", FileTypeEntry::Alias("JP2".to_string()));
    map.insert("JPG", FileTypeEntry::Alias("JPEG".to_string()));
    map.insert(
        "JPH",
        FileTypeEntry::Definition {
            formats: vec!["JP2"].into_iter().map(String::from).collect(),
            description: "High-throughput JPEG 2000".to_string(),
        },
    );
    map.insert(
        "JPM",
        FileTypeEntry::Definition {
            formats: vec!["JP2"].into_iter().map(String::from).collect(),
            description: "JPEG 2000 compound image".to_string(),
        },
    );
    map.insert(
        "JPS",
        FileTypeEntry::Definition {
            formats: vec!["JPEG"].into_iter().map(String::from).collect(),
            description: "JPEG Stereo image".to_string(),
        },
    );
    map.insert(
        "JPX",
        FileTypeEntry::Definition {
            formats: vec!["JP2"].into_iter().map(String::from).collect(),
            description: "JPEG 2000 with extensions".to_string(),
        },
    );
    map.insert(
        "JSON",
        FileTypeEntry::Definition {
            formats: vec!["JSON"].into_iter().map(String::from).collect(),
            description: "JavaScript Object Notation".to_string(),
        },
    );
    map.insert(
        "JUMBF",
        FileTypeEntry::Definition {
            formats: vec!["JUMBF"].into_iter().map(String::from).collect(),
            description: "JPEG Universal Metadata Box Format".to_string(),
        },
    );
    map.insert(
        "JXL",
        FileTypeEntry::Definition {
            formats: vec!["JXL"].into_iter().map(String::from).collect(),
            description: "JPEG XL".to_string(),
        },
    );
    map.insert(
        "JXR",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "JPEG XR".to_string(),
        },
    );
    map.insert(
        "K25",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Kodak DC25 RAW".to_string(),
        },
    );
    map.insert(
        "KDC",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Kodak Digital Camera RAW".to_string(),
        },
    );
    map.insert(
        "KEY",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Apple Keynote presentation".to_string(),
        },
    );
    map.insert(
        "KTH",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Apple Keynote Theme".to_string(),
        },
    );
    map.insert(
        "LA",
        FileTypeEntry::Definition {
            formats: vec!["RIFF"].into_iter().map(String::from).collect(),
            description: "Lossless Audio".to_string(),
        },
    );
    map.insert(
        "LFP",
        FileTypeEntry::Definition {
            formats: vec!["LFP"].into_iter().map(String::from).collect(),
            description: "Lytro Light Field Picture".to_string(),
        },
    );
    map.insert("LFR", FileTypeEntry::Alias("LFP".to_string()));
    map.insert(
        "LIF",
        FileTypeEntry::Definition {
            formats: vec!["LIF"].into_iter().map(String::from).collect(),
            description: "Leica Image File".to_string(),
        },
    );
    map.insert(
        "LNK",
        FileTypeEntry::Definition {
            formats: vec!["LNK"].into_iter().map(String::from).collect(),
            description: "Windows shortcut".to_string(),
        },
    );
    map.insert(
        "LRI",
        FileTypeEntry::Definition {
            formats: vec!["LRI"].into_iter().map(String::from).collect(),
            description: "Light RAW".to_string(),
        },
    );
    map.insert(
        "LRV",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "Low-Resolution Video".to_string(),
        },
    );
    map.insert("M2T", FileTypeEntry::Alias("M2TS".to_string()));
    map.insert(
        "M2TS",
        FileTypeEntry::Definition {
            formats: vec!["M2TS"].into_iter().map(String::from).collect(),
            description: "MPEG-2 Transport Stream".to_string(),
        },
    );
    map.insert(
        "M2V",
        FileTypeEntry::Definition {
            formats: vec!["MPEG"].into_iter().map(String::from).collect(),
            description: "MPEG-2 Video".to_string(),
        },
    );
    map.insert(
        "M4A",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "MPEG-4 Audio".to_string(),
        },
    );
    map.insert(
        "M4B",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "MPEG-4 audio Book".to_string(),
        },
    );
    map.insert(
        "M4P",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "MPEG-4 Protected".to_string(),
        },
    );
    map.insert(
        "M4V",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "MPEG-4 Video".to_string(),
        },
    );
    map.insert(
        "MACOS",
        FileTypeEntry::Definition {
            formats: vec!["MacOS"].into_iter().map(String::from).collect(),
            description: "MacOS ._ sidecar file".to_string(),
        },
    );
    map.insert(
        "MAX",
        FileTypeEntry::Definition {
            formats: vec!["FPX"].into_iter().map(String::from).collect(),
            description: "3D Studio MAX".to_string(),
        },
    );
    map.insert(
        "MEF",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Mamiya (RAW) Electronic Format".to_string(),
        },
    );
    map.insert(
        "MIE",
        FileTypeEntry::Definition {
            formats: vec!["MIE"].into_iter().map(String::from).collect(),
            description: "Meta Information Encapsulation format".to_string(),
        },
    );
    map.insert("MIF", FileTypeEntry::Alias("MIFF".to_string()));
    map.insert(
        "MIFF",
        FileTypeEntry::Definition {
            formats: vec!["MIFF"].into_iter().map(String::from).collect(),
            description: "Magick Image File Format".to_string(),
        },
    );
    map.insert(
        "MKA",
        FileTypeEntry::Definition {
            formats: vec!["MKV"].into_iter().map(String::from).collect(),
            description: "Matroska Audio".to_string(),
        },
    );
    map.insert(
        "MKS",
        FileTypeEntry::Definition {
            formats: vec!["MKV"].into_iter().map(String::from).collect(),
            description: "Matroska Subtitle".to_string(),
        },
    );
    map.insert(
        "MKV",
        FileTypeEntry::Definition {
            formats: vec!["MKV"].into_iter().map(String::from).collect(),
            description: "Matroska Video".to_string(),
        },
    );
    map.insert(
        "MNG",
        FileTypeEntry::Definition {
            formats: vec!["PNG"].into_iter().map(String::from).collect(),
            description: "Multiple-image Network Graphics".to_string(),
        },
    );
    map.insert(
        "MOBI",
        FileTypeEntry::Definition {
            formats: vec!["PDB"].into_iter().map(String::from).collect(),
            description: "Mobipocket electronic book".to_string(),
        },
    );
    map.insert(
        "MODD",
        FileTypeEntry::Definition {
            formats: vec!["PLIST"].into_iter().map(String::from).collect(),
            description: "Sony Picture Motion metadata".to_string(),
        },
    );
    map.insert(
        "MOI",
        FileTypeEntry::Definition {
            formats: vec!["MOI"].into_iter().map(String::from).collect(),
            description: "MOD Information file".to_string(),
        },
    );
    map.insert(
        "MOS",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Creo Leaf Mosaic".to_string(),
        },
    );
    map.insert(
        "MOV",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "Apple QuickTime movie".to_string(),
        },
    );
    map.insert(
        "MP3",
        FileTypeEntry::Definition {
            formats: vec!["MP3"].into_iter().map(String::from).collect(),
            description: "MPEG-1 Layer 3 audio".to_string(),
        },
    );
    map.insert(
        "MP4",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "MPEG-4 video".to_string(),
        },
    );
    map.insert(
        "MPC",
        FileTypeEntry::Definition {
            formats: vec!["MPC"].into_iter().map(String::from).collect(),
            description: "Musepack Audio".to_string(),
        },
    );
    map.insert(
        "MPEG",
        FileTypeEntry::Definition {
            formats: vec!["MPEG"].into_iter().map(String::from).collect(),
            description: "MPEG-1 or MPEG-2 audio/video".to_string(),
        },
    );
    map.insert("MPG", FileTypeEntry::Alias("MPEG".to_string()));
    map.insert(
        "MPO",
        FileTypeEntry::Definition {
            formats: vec!["JPEG"].into_iter().map(String::from).collect(),
            description: "Extended Multi-Picture format".to_string(),
        },
    );
    map.insert(
        "MQV",
        FileTypeEntry::Definition {
            formats: vec!["MOV"].into_iter().map(String::from).collect(),
            description: "Sony Mobile Quicktime Video".to_string(),
        },
    );
    map.insert(
        "MRC",
        FileTypeEntry::Definition {
            formats: vec!["MRC"].into_iter().map(String::from).collect(),
            description: "Medical Research Council image".to_string(),
        },
    );
    map.insert(
        "MRW",
        FileTypeEntry::Definition {
            formats: vec!["MRW"].into_iter().map(String::from).collect(),
            description: "Minolta RAW format".to_string(),
        },
    );
    map.insert("MTS", FileTypeEntry::Alias("M2TS".to_string()));
    map.insert(
        "MXF",
        FileTypeEntry::Definition {
            formats: vec!["MXF"].into_iter().map(String::from).collect(),
            description: "Material Exchange Format".to_string(),
        },
    );
    map.insert(
        "NEF",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Nikon (RAW) Electronic Format".to_string(),
        },
    );
    map.insert("NEWER", FileTypeEntry::Alias("COS".to_string()));
    map.insert(
        "NKA",
        FileTypeEntry::Definition {
            formats: vec!["NKA"].into_iter().map(String::from).collect(),
            description: "Nikon NX Studio Adjustments".to_string(),
        },
    );
    map.insert(
        "NKSC",
        FileTypeEntry::Definition {
            formats: vec!["XMP"].into_iter().map(String::from).collect(),
            description: "Nikon Sidecar".to_string(),
        },
    );
    map.insert(
        "NMBTEMPLATE",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Apple Numbers Template".to_string(),
        },
    );
    map.insert(
        "NRW",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Nikon RAW (2)".to_string(),
        },
    );
    map.insert(
        "NUMBERS",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Apple Numbers spreadsheet".to_string(),
        },
    );
    map.insert(
        "NXD",
        FileTypeEntry::Definition {
            formats: vec!["XMP"].into_iter().map(String::from).collect(),
            description: "Nikon NX-D Settings".to_string(),
        },
    );
    map.insert(
        "O",
        FileTypeEntry::Definition {
            formats: vec!["EXE"].into_iter().map(String::from).collect(),
            description: "Relocatable Object".to_string(),
        },
    );
    map.insert(
        "ODB",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Open Document Database".to_string(),
        },
    );
    map.insert(
        "ODC",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Open Document Chart".to_string(),
        },
    );
    map.insert(
        "ODF",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Open Document Formula".to_string(),
        },
    );
    map.insert(
        "ODG",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Open Document Graphics".to_string(),
        },
    );
    map.insert(
        "ODI",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Open Document Image".to_string(),
        },
    );
    map.insert(
        "ODP",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Open Document Presentation".to_string(),
        },
    );
    map.insert(
        "ODS",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Open Document Spreadsheet".to_string(),
        },
    );
    map.insert(
        "ODT",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Open Document Text file".to_string(),
        },
    );
    map.insert(
        "OFR",
        FileTypeEntry::Definition {
            formats: vec!["RIFF"].into_iter().map(String::from).collect(),
            description: "OptimFROG audio".to_string(),
        },
    );
    map.insert(
        "OGG",
        FileTypeEntry::Definition {
            formats: vec!["OGG"].into_iter().map(String::from).collect(),
            description: "Ogg Vorbis audio file".to_string(),
        },
    );
    map.insert(
        "OGV",
        FileTypeEntry::Definition {
            formats: vec!["OGG"].into_iter().map(String::from).collect(),
            description: "Ogg Video file".to_string(),
        },
    );
    map.insert(
        "ONP",
        FileTypeEntry::Definition {
            formats: vec!["JSON"].into_iter().map(String::from).collect(),
            description: "ON1 Presets".to_string(),
        },
    );
    map.insert(
        "OPUS",
        FileTypeEntry::Definition {
            formats: vec!["OGG"].into_iter().map(String::from).collect(),
            description: "Ogg Opus audio file".to_string(),
        },
    );
    map.insert(
        "ORF",
        FileTypeEntry::Definition {
            formats: vec!["ORF"].into_iter().map(String::from).collect(),
            description: "Olympus RAW format".to_string(),
        },
    );
    map.insert("ORI", FileTypeEntry::Alias("ORF".to_string()));
    map.insert(
        "OTF",
        FileTypeEntry::Definition {
            formats: vec!["Font"].into_iter().map(String::from).collect(),
            description: "Open Type Font".to_string(),
        },
    );
    map.insert(
        "PAC",
        FileTypeEntry::Definition {
            formats: vec!["RIFF"].into_iter().map(String::from).collect(),
            description: "Lossless Predictive Audio Compression".to_string(),
        },
    );
    map.insert(
        "PAGES",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Apple Pages document".to_string(),
        },
    );
    map.insert(
        "PBM",
        FileTypeEntry::Definition {
            formats: vec!["PPM"].into_iter().map(String::from).collect(),
            description: "Portable BitMap".to_string(),
        },
    );
    map.insert(
        "PCAP",
        FileTypeEntry::Definition {
            formats: vec!["PCAP"].into_iter().map(String::from).collect(),
            description: "Packet Capture".to_string(),
        },
    );
    map.insert(
        "PCAPNG",
        FileTypeEntry::Definition {
            formats: vec!["PCAP"].into_iter().map(String::from).collect(),
            description: "Packet Capture Next Generation".to_string(),
        },
    );
    map.insert(
        "PCD",
        FileTypeEntry::Definition {
            formats: vec!["PCD"].into_iter().map(String::from).collect(),
            description: "Kodak Photo CD Image Pac".to_string(),
        },
    );
    map.insert("PCT", FileTypeEntry::Alias("PICT".to_string()));
    map.insert(
        "PCX",
        FileTypeEntry::Definition {
            formats: vec!["PCX"].into_iter().map(String::from).collect(),
            description: "PC Paintbrush".to_string(),
        },
    );
    map.insert(
        "PDB",
        FileTypeEntry::Definition {
            formats: vec!["PDB"].into_iter().map(String::from).collect(),
            description: "Palm Database".to_string(),
        },
    );
    map.insert(
        "PDF",
        FileTypeEntry::Definition {
            formats: vec!["PDF"].into_iter().map(String::from).collect(),
            description: "Adobe Portable Document Format".to_string(),
        },
    );
    map.insert(
        "PEF",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Pentax (RAW) Electronic Format".to_string(),
        },
    );
    map.insert(
        "PFA",
        FileTypeEntry::Definition {
            formats: vec!["Font"].into_iter().map(String::from).collect(),
            description: "PostScript Font ASCII".to_string(),
        },
    );
    map.insert(
        "PFB",
        FileTypeEntry::Definition {
            formats: vec!["Font"].into_iter().map(String::from).collect(),
            description: "PostScript Font Binary".to_string(),
        },
    );
    map.insert(
        "PFM",
        FileTypeEntry::Definition {
            formats: vec!["Font", "PFM2"].into_iter().map(String::from).collect(),
            description: "Printer Font Metrics".to_string(),
        },
    );
    map.insert(
        "PGF",
        FileTypeEntry::Definition {
            formats: vec!["PGF"].into_iter().map(String::from).collect(),
            description: "Progressive Graphics File".to_string(),
        },
    );
    map.insert(
        "PGM",
        FileTypeEntry::Definition {
            formats: vec!["PPM"].into_iter().map(String::from).collect(),
            description: "Portable Gray Map".to_string(),
        },
    );
    map.insert(
        "PHP",
        FileTypeEntry::Definition {
            formats: vec!["PHP"].into_iter().map(String::from).collect(),
            description: "PHP Hypertext Preprocessor".to_string(),
        },
    );
    map.insert("PHP3", FileTypeEntry::Alias("PHP".to_string()));
    map.insert("PHP4", FileTypeEntry::Alias("PHP".to_string()));
    map.insert("PHP5", FileTypeEntry::Alias("PHP".to_string()));
    map.insert("PHPS", FileTypeEntry::Alias("PHP".to_string()));
    map.insert("PHTML", FileTypeEntry::Alias("PHP".to_string()));
    map.insert(
        "PICT",
        FileTypeEntry::Definition {
            formats: vec!["PICT"].into_iter().map(String::from).collect(),
            description: "Apple PICTure".to_string(),
        },
    );
    map.insert(
        "PLIST",
        FileTypeEntry::Definition {
            formats: vec!["PLIST"].into_iter().map(String::from).collect(),
            description: "Apple Property List".to_string(),
        },
    );
    map.insert(
        "PMP",
        FileTypeEntry::Definition {
            formats: vec!["PMP"].into_iter().map(String::from).collect(),
            description: "Sony DSC-F1 Cyber-Shot PMP".to_string(),
        },
    );
    map.insert(
        "PNG",
        FileTypeEntry::Definition {
            formats: vec!["PNG"].into_iter().map(String::from).collect(),
            description: "Portable Network Graphics".to_string(),
        },
    );
    map.insert(
        "POT",
        FileTypeEntry::Definition {
            formats: vec!["FPX"].into_iter().map(String::from).collect(),
            description: "Microsoft PowerPoint Template".to_string(),
        },
    );
    map.insert(
        "POTM",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Presentation Template Macro-enabled".to_string(),
        },
    );
    map.insert(
        "POTX",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Presentation Template".to_string(),
        },
    );
    map.insert(
        "PPAM",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Presentation Addin Macro-enabled".to_string(),
        },
    );
    map.insert(
        "PPAX",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Presentation Addin".to_string(),
        },
    );
    map.insert(
        "PPM",
        FileTypeEntry::Definition {
            formats: vec!["PPM"].into_iter().map(String::from).collect(),
            description: "Portable Pixel Map".to_string(),
        },
    );
    map.insert(
        "PPS",
        FileTypeEntry::Definition {
            formats: vec!["FPX"].into_iter().map(String::from).collect(),
            description: "Microsoft PowerPoint Slideshow".to_string(),
        },
    );
    map.insert(
        "PPSM",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Presentation Slideshow Macro-enabled".to_string(),
        },
    );
    map.insert(
        "PPSX",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Presentation Slideshow".to_string(),
        },
    );
    map.insert(
        "PPT",
        FileTypeEntry::Definition {
            formats: vec!["FPX"].into_iter().map(String::from).collect(),
            description: "Microsoft PowerPoint Presentation".to_string(),
        },
    );
    map.insert(
        "PPTM",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Presentation Macro-enabled".to_string(),
        },
    );
    map.insert(
        "PPTX",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Presentation".to_string(),
        },
    );
    map.insert(
        "PRC",
        FileTypeEntry::Definition {
            formats: vec!["PDB"].into_iter().map(String::from).collect(),
            description: "Palm Database".to_string(),
        },
    );
    map.insert(
        "PS",
        FileTypeEntry::Definition {
            formats: vec!["PS"].into_iter().map(String::from).collect(),
            description: "PostScript".to_string(),
        },
    );
    map.insert("PS2", FileTypeEntry::Alias("PS".to_string()));
    map.insert("PS3", FileTypeEntry::Alias("PS".to_string()));
    map.insert(
        "PSB",
        FileTypeEntry::Definition {
            formats: vec!["PSD"].into_iter().map(String::from).collect(),
            description: "Photoshop Large Document".to_string(),
        },
    );
    map.insert(
        "PSD",
        FileTypeEntry::Definition {
            formats: vec!["PSD"].into_iter().map(String::from).collect(),
            description: "Photoshop Document".to_string(),
        },
    );
    map.insert(
        "PSDT",
        FileTypeEntry::Definition {
            formats: vec!["PSD"].into_iter().map(String::from).collect(),
            description: "Photoshop Document Template".to_string(),
        },
    );
    map.insert(
        "PSP",
        FileTypeEntry::Definition {
            formats: vec!["PSP"].into_iter().map(String::from).collect(),
            description: "Paint Shop Pro".to_string(),
        },
    );
    map.insert("PSPFRAME", FileTypeEntry::Alias("PSP".to_string()));
    map.insert("PSPIMAGE", FileTypeEntry::Alias("PSP".to_string()));
    map.insert("PSPSHAPE", FileTypeEntry::Alias("PSP".to_string()));
    map.insert("PSPTUBE", FileTypeEntry::Alias("PSP".to_string()));
    map.insert("QIF", FileTypeEntry::Alias("QTIF".to_string()));
    map.insert("QT", FileTypeEntry::Alias("MOV".to_string()));
    map.insert("QTI", FileTypeEntry::Alias("QTIF".to_string()));
    map.insert(
        "QTIF",
        FileTypeEntry::Definition {
            formats: vec!["QTIF"].into_iter().map(String::from).collect(),
            description: "QuickTime Image File".to_string(),
        },
    );
    map.insert(
        "R3D",
        FileTypeEntry::Definition {
            formats: vec!["R3D"].into_iter().map(String::from).collect(),
            description: "Redcode RAW Video".to_string(),
        },
    );
    map.insert(
        "RA",
        FileTypeEntry::Definition {
            formats: vec!["Real"].into_iter().map(String::from).collect(),
            description: "Real Audio".to_string(),
        },
    );
    map.insert(
        "RAF",
        FileTypeEntry::Definition {
            formats: vec!["RAF"].into_iter().map(String::from).collect(),
            description: "FujiFilm RAW Format".to_string(),
        },
    );
    map.insert(
        "RAM",
        FileTypeEntry::Definition {
            formats: vec!["Real"].into_iter().map(String::from).collect(),
            description: "Real Audio Metafile".to_string(),
        },
    );
    map.insert(
        "RAR",
        FileTypeEntry::Definition {
            formats: vec!["RAR"].into_iter().map(String::from).collect(),
            description: "RAR Archive".to_string(),
        },
    );
    map.insert(
        "RAW",
        FileTypeEntry::Definition {
            formats: vec!["RAW", "TIFF"].into_iter().map(String::from).collect(),
            description: "Kyocera Contax N Digital RAW or Panasonic RAW".to_string(),
        },
    );
    map.insert("RIF", FileTypeEntry::Alias("RIFF".to_string()));
    map.insert(
        "RIFF",
        FileTypeEntry::Definition {
            formats: vec!["RIFF"].into_iter().map(String::from).collect(),
            description: "Resource Interchange File Format".to_string(),
        },
    );
    map.insert(
        "RM",
        FileTypeEntry::Definition {
            formats: vec!["Real"].into_iter().map(String::from).collect(),
            description: "Real Media".to_string(),
        },
    );
    map.insert(
        "RMVB",
        FileTypeEntry::Definition {
            formats: vec!["Real"].into_iter().map(String::from).collect(),
            description: "Real Media Variable Bitrate".to_string(),
        },
    );
    map.insert(
        "RPM",
        FileTypeEntry::Definition {
            formats: vec!["Real"].into_iter().map(String::from).collect(),
            description: "Real Media Plug-in Metafile".to_string(),
        },
    );
    map.insert(
        "RSRC",
        FileTypeEntry::Definition {
            formats: vec!["RSRC"].into_iter().map(String::from).collect(),
            description: "Mac OS Resource".to_string(),
        },
    );
    map.insert(
        "RTF",
        FileTypeEntry::Definition {
            formats: vec!["RTF"].into_iter().map(String::from).collect(),
            description: "Rich Text Format".to_string(),
        },
    );
    map.insert(
        "RV",
        FileTypeEntry::Definition {
            formats: vec!["Real"].into_iter().map(String::from).collect(),
            description: "Real Video".to_string(),
        },
    );
    map.insert(
        "RW2",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Panasonic RAW 2".to_string(),
        },
    );
    map.insert(
        "RWL",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Leica RAW".to_string(),
        },
    );
    map.insert(
        "RWZ",
        FileTypeEntry::Definition {
            formats: vec!["RWZ"].into_iter().map(String::from).collect(),
            description: "Rawzor compressed image".to_string(),
        },
    );
    map.insert(
        "SEQ",
        FileTypeEntry::Definition {
            formats: vec!["FLIR"].into_iter().map(String::from).collect(),
            description: "FLIR image Sequence".to_string(),
        },
    );
    map.insert(
        "SKETCH",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "Sketch design file".to_string(),
        },
    );
    map.insert(
        "SO",
        FileTypeEntry::Definition {
            formats: vec!["EXE"].into_iter().map(String::from).collect(),
            description: "Shared Object file".to_string(),
        },
    );
    map.insert(
        "SR2",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Sony RAW Format 2".to_string(),
        },
    );
    map.insert(
        "SRF",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Sony RAW Format".to_string(),
        },
    );
    map.insert(
        "SRW",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Samsung RAW format".to_string(),
        },
    );
    map.insert(
        "SVG",
        FileTypeEntry::Definition {
            formats: vec!["XMP"].into_iter().map(String::from).collect(),
            description: "Scalable Vector Graphics".to_string(),
        },
    );
    map.insert(
        "SWF",
        FileTypeEntry::Definition {
            formats: vec!["SWF"].into_iter().map(String::from).collect(),
            description: "Shockwave Flash".to_string(),
        },
    );
    map.insert(
        "TAR",
        FileTypeEntry::Definition {
            formats: vec!["TAR"].into_iter().map(String::from).collect(),
            description: "TAR archive".to_string(),
        },
    );
    map.insert(
        "THM",
        FileTypeEntry::Definition {
            formats: vec!["JPEG"].into_iter().map(String::from).collect(),
            description: "Thumbnail".to_string(),
        },
    );
    map.insert(
        "THMX",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Theme".to_string(),
        },
    );
    map.insert("TIF", FileTypeEntry::Alias("TIFF".to_string()));
    map.insert(
        "TIFF",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Tagged Image File Format".to_string(),
        },
    );
    map.insert(
        "TORRENT",
        FileTypeEntry::Definition {
            formats: vec!["Torrent"].into_iter().map(String::from).collect(),
            description: "BitTorrent description file".to_string(),
        },
    );
    map.insert("TS", FileTypeEntry::Alias("M2TS".to_string()));
    map.insert(
        "TTC",
        FileTypeEntry::Definition {
            formats: vec!["Font"].into_iter().map(String::from).collect(),
            description: "True Type Font Collection".to_string(),
        },
    );
    map.insert(
        "TTF",
        FileTypeEntry::Definition {
            formats: vec!["Font"].into_iter().map(String::from).collect(),
            description: "True Type Font".to_string(),
        },
    );
    map.insert("TUB", FileTypeEntry::Alias("PSP".to_string()));
    map.insert(
        "TXT",
        FileTypeEntry::Definition {
            formats: vec!["TXT"].into_iter().map(String::from).collect(),
            description: "Text file".to_string(),
        },
    );
    map.insert(
        "VCARD",
        FileTypeEntry::Definition {
            formats: vec!["VCard"].into_iter().map(String::from).collect(),
            description: "Virtual Card".to_string(),
        },
    );
    map.insert("VCF", FileTypeEntry::Alias("VCARD".to_string()));
    map.insert(
        "VNT",
        FileTypeEntry::Definition {
            formats: vec!["FPX", "VCard"].into_iter().map(String::from).collect(),
            description: "Scene7 Vignette or V-Note text file".to_string(),
        },
    );
    map.insert(
        "VOB",
        FileTypeEntry::Definition {
            formats: vec!["MPEG"].into_iter().map(String::from).collect(),
            description: "Video Object".to_string(),
        },
    );
    map.insert(
        "VRD",
        FileTypeEntry::Definition {
            formats: vec!["VRD"].into_iter().map(String::from).collect(),
            description: "Canon VRD Recipe Data".to_string(),
        },
    );
    map.insert(
        "VSD",
        FileTypeEntry::Definition {
            formats: vec!["FPX"].into_iter().map(String::from).collect(),
            description: "Microsoft Visio Drawing".to_string(),
        },
    );
    map.insert(
        "WAV",
        FileTypeEntry::Definition {
            formats: vec!["RIFF"].into_iter().map(String::from).collect(),
            description: "WAVeform (Windows digital audio)".to_string(),
        },
    );
    map.insert(
        "WDP",
        FileTypeEntry::Definition {
            formats: vec!["TIFF"].into_iter().map(String::from).collect(),
            description: "Windows Media Photo".to_string(),
        },
    );
    map.insert(
        "WEBM",
        FileTypeEntry::Definition {
            formats: vec!["MKV"].into_iter().map(String::from).collect(),
            description: "Google Web Movie".to_string(),
        },
    );
    map.insert(
        "WEBP",
        FileTypeEntry::Definition {
            formats: vec!["RIFF"].into_iter().map(String::from).collect(),
            description: "Google Web Picture".to_string(),
        },
    );
    map.insert(
        "WMA",
        FileTypeEntry::Definition {
            formats: vec!["ASF"].into_iter().map(String::from).collect(),
            description: "Windows Media Audio".to_string(),
        },
    );
    map.insert(
        "WMF",
        FileTypeEntry::Definition {
            formats: vec!["WMF"].into_iter().map(String::from).collect(),
            description: "Windows Metafile Format".to_string(),
        },
    );
    map.insert(
        "WMV",
        FileTypeEntry::Definition {
            formats: vec!["ASF"].into_iter().map(String::from).collect(),
            description: "Windows Media Video".to_string(),
        },
    );
    map.insert(
        "WOFF",
        FileTypeEntry::Definition {
            formats: vec!["Font"].into_iter().map(String::from).collect(),
            description: "Web Open Font Format".to_string(),
        },
    );
    map.insert(
        "WOFF2",
        FileTypeEntry::Definition {
            formats: vec!["Font"].into_iter().map(String::from).collect(),
            description: "Web Open Font Format 2".to_string(),
        },
    );
    map.insert(
        "WPG",
        FileTypeEntry::Definition {
            formats: vec!["WPG"].into_iter().map(String::from).collect(),
            description: "WordPerfect Graphics".to_string(),
        },
    );
    map.insert(
        "WTV",
        FileTypeEntry::Definition {
            formats: vec!["WTV"].into_iter().map(String::from).collect(),
            description: "Windows recorded TV show".to_string(),
        },
    );
    map.insert(
        "WV",
        FileTypeEntry::Definition {
            formats: vec!["RIFF"].into_iter().map(String::from).collect(),
            description: "WavePack lossless audio".to_string(),
        },
    );
    map.insert(
        "X3F",
        FileTypeEntry::Definition {
            formats: vec!["X3F"].into_iter().map(String::from).collect(),
            description: "Sigma RAW format".to_string(),
        },
    );
    map.insert(
        "XCF",
        FileTypeEntry::Definition {
            formats: vec!["XCF"].into_iter().map(String::from).collect(),
            description: "GIMP native image format".to_string(),
        },
    );
    map.insert(
        "XHTML",
        FileTypeEntry::Definition {
            formats: vec!["HTML"].into_iter().map(String::from).collect(),
            description: "Extensible HyperText Markup Language".to_string(),
        },
    );
    map.insert(
        "XISF",
        FileTypeEntry::Definition {
            formats: vec!["XISF"].into_iter().map(String::from).collect(),
            description: "Extensible Image Serialization Format".to_string(),
        },
    );
    map.insert(
        "XLA",
        FileTypeEntry::Definition {
            formats: vec!["FPX"].into_iter().map(String::from).collect(),
            description: "Microsoft Excel Add-in".to_string(),
        },
    );
    map.insert(
        "XLAM",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Spreadsheet Add-in Macro-enabled".to_string(),
        },
    );
    map.insert(
        "XLS",
        FileTypeEntry::Definition {
            formats: vec!["FPX"].into_iter().map(String::from).collect(),
            description: "Microsoft Excel Spreadsheet".to_string(),
        },
    );
    map.insert(
        "XLSB",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Spreadsheet Binary".to_string(),
        },
    );
    map.insert(
        "XLSM",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Spreadsheet Macro-enabled".to_string(),
        },
    );
    map.insert(
        "XLSX",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Spreadsheet".to_string(),
        },
    );
    map.insert(
        "XLT",
        FileTypeEntry::Definition {
            formats: vec!["FPX"].into_iter().map(String::from).collect(),
            description: "Microsoft Excel Template".to_string(),
        },
    );
    map.insert(
        "XLTM",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Spreadsheet Template Macro-enabled".to_string(),
        },
    );
    map.insert(
        "XLTX",
        FileTypeEntry::Definition {
            formats: vec!["ZIP", "FPX"].into_iter().map(String::from).collect(),
            description: "Office Open XML Spreadsheet Template".to_string(),
        },
    );
    map.insert(
        "XMP",
        FileTypeEntry::Definition {
            formats: vec!["XMP"].into_iter().map(String::from).collect(),
            description: "Extensible Metadata Platform".to_string(),
        },
    );
    map.insert(
        "ZIP",
        FileTypeEntry::Definition {
            formats: vec!["ZIP"].into_iter().map(String::from).collect(),
            description: "ZIP archive".to_string(),
        },
    );
    map
});

/// Look up file type by extension
pub fn lookup_file_type_lookup(ext: &str) -> Option<&'static FileTypeEntry> {
    let ext_upper = ext.to_uppercase();
    FILE_TYPE_LOOKUP.get(ext_upper.as_str())
}

/// Resolve file type aliases to their final definition
pub fn resolve_file_type(ext: &str) -> Option<(Vec<&'static str>, &'static str)> {
    let ext_upper = ext.to_uppercase();
    let mut current_ext = ext_upper.as_str();
    let mut seen = std::collections::HashSet::new();

    loop {
        match FILE_TYPE_LOOKUP.get(current_ext) {
            Some(FileTypeEntry::Alias(target)) => {
                if !seen.insert(current_ext) {
                    return None; // Circular reference
                }
                current_ext = target;
            }
            Some(FileTypeEntry::Definition {
                description,
                formats,
            }) => {
                return Some((
                    formats.iter().map(|s| s.as_str()).collect(),
                    description.as_str(),
                ));
            }
            None => return None,
        }
    }
}

/// Get the primary format (first format) for a file type
pub fn get_primary_format(ext: &str) -> Option<String> {
    resolve_file_type(ext).map(|(formats, _)| formats[0].to_string())
}

/// Check if a file type supports a specific format
pub fn supports_format(ext: &str, format: &str) -> bool {
    if let Some((formats, _)) = resolve_file_type(ext) {
        formats.contains(&format)
    } else {
        false
    }
}

/// Get all extensions that support a given format
pub fn extensions_for_format(format: &str) -> Vec<String> {
    let mut extensions = Vec::new();

    for (ext, entry) in FILE_TYPE_LOOKUP.iter() {
        match entry {
            FileTypeEntry::Definition { formats, .. } => {
                if formats.iter().any(|f| f == format) {
                    extensions.push(ext.to_string());
                }
            }
            FileTypeEntry::Alias(target) => {
                // Resolve alias and check
                if let Some((formats, _)) = resolve_file_type(target) {
                    if formats.contains(&format) {
                        extensions.push(ext.to_string());
                    }
                }
            }
        }
    }

    extensions
}
