//! Tag kits for interop category from Samsung.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_2: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("12288".to_string(), "HXM Video Camera");
    map.insert("3145728".to_string(), "SMX Video Camera");
    map.insert("4096".to_string(), "Compact Digital Camera");
    map.insert("73728".to_string(), "Cell Phone");
    map.insert("8192".to_string(), "High-end NX Camera");
    map
});

static PRINT_CONV_3: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("100667446".to_string(), "EX1");
    map.insert("117445404".to_string(), "VLUU SH100, SH100");
    map.insert("16781340".to_string(), "NX10");
    map.insert("16781862".to_string(), "HMX-S15BP");
    map.insert("16781875".to_string(), "HMX-Q10");
    map.insert("16781876".to_string(), "HMX-H304");
    map.insert("16782092".to_string(), "NX100");
    map.insert("16782119".to_string(), "NX11");
    map.insert(
        "24121419".to_string(),
        "ES65, ES67 / VLUU ES65, ES67 / SL50",
    );
    map.insert(
        "24121422".to_string(),
        "ES70, ES71 / VLUU ES70, ES71 / SL600",
    );
    map.insert("24121426".to_string(), "ES73 / VLUU ES73 / SL605");
    map.insert(
        "24121429".to_string(),
        "ES25, ES27 / VLUU ES25, ES27 / SL45",
    );
    map.insert("24122112".to_string(), "ES28 / VLUU ES28");
    map.insert("24122115".to_string(), "ES74,ES75,ES78 / VLUU ES75,ES78");
    map.insert("33558598".to_string(), "PL150 / VLUU PL150 / TL210 / PL151");
    map.insert("33558600".to_string(), "PL100 / TL205 / VLUU PL100 / PL101");
    map.insert("33559313".to_string(), "PL120,PL121 / VLUU PL120,PL121");
    map.insert("33559317".to_string(), "PL170,PL171 / VLUUPL170,PL171");
    map.insert("33559326".to_string(), "PL210, PL211 / VLUU PL210, PL211");
    map.insert("40899351".to_string(), "PL20,PL21 / VLUU PL20,PL21");
    map.insert("44040219".to_string(), "WP10 / VLUU WP10 / AQ100");
    map.insert("50331648".to_string(), "Various Models (0x3000000)");
    map.insert("60817432".to_string(), "Various Models (0x3a00018)");
    map.insert("655519746".to_string(), "SMX-C20N");
    map.insert(
        "67112991".to_string(),
        "ST1000 / ST1100 / VLUU ST1000 / CL65",
    );
    map.insert("67112994".to_string(), "ST550 / VLUU ST550 / TL225");
    map.insert("67112997".to_string(), "Various Models (0x4001025)");
    map.insert("67113022".to_string(), "VLUU ST5500, ST5500, CL80");
    map.insert("67113025".to_string(), "VLUU ST5000, ST5000, TL240");
    map.insert("67113027".to_string(), "ST70 / VLUU ST70 / ST71");
    map.insert("67113738".to_string(), "Various Models (0x400130a)");
    map.insert("67113742".to_string(), "ST90,ST91 / VLUU ST90,ST91");
    map.insert("67113747".to_string(), "VLUU ST95, ST95");
    map.insert("77594645".to_string(), "VLUU ST60");
    map.insert("77599579".to_string(), "ST30, ST65 / VLUU ST65 / ST67");
    map.insert("83886080".to_string(), "Various Models (0x5000000)");
    map.insert("83890232".to_string(), "Various Models (0x5001038)");
    map.insert("83890234".to_string(), "WB650 / VLUU WB650 / WB660");
    map.insert("83890236".to_string(), "WB600 / VLUU WB600 / WB610");
    map.insert(
        "83891006".to_string(),
        "WB150 / WB150F / WB152 / WB152F / WB151",
    );
    map.insert("94371855".to_string(), "WB5000 / HZ25W");
    map.insert("94371870".to_string(), "WB5500 / VLUU WB5500 / HZ50W");
    map
});

/// Get tag definitions for interop category
pub fn get_interop_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (
            8,
            TagKitDef {
                id: 8,
                name: "DualShotDummy",
                format: "undef[64]",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            2,
            TagKitDef {
                id: 2,
                name: "PreviewImageStart",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            3,
            TagKitDef {
                id: 3,
                name: "PreviewImageLength",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            1,
            TagKitDef {
                id: 1,
                name: "PitchAngle",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: Some("upward tilt of rear camera in degrees"),
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            2,
            TagKitDef {
                id: 2,
                name: "RollAngle",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: Some("clockwise rotation of rear camera in degrees"),
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            2,
            TagKitDef {
                id: 2,
                name: "PictureWizardSaturation",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: Some("$val - 4"),
                subdirectory: None,
            },
        ),
        (
            3,
            TagKitDef {
                id: 3,
                name: "PictureWizardSharpness",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: Some("$val - 4"),
                subdirectory: None,
            },
        ),
        (
            4,
            TagKitDef {
                id: 4,
                name: "PictureWizardContrast",
                format: "unknown",
                groups: HashMap::new(),
                writable: false,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: Some("$val - 4"),
                subdirectory: None,
            },
        ),
        (
            1,
            TagKitDef {
                id: 1,
                name: "MakerNoteVersion",
                format: "undef",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            2,
            TagKitDef {
                id: 2,
                name: "DeviceType",
                format: "int32u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_2),
                value_conv: None,
                subdirectory: None,
            },
        ),
        (
            3,
            TagKitDef {
                id: 3,
                name: "SamsungModelID",
                format: "int32u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_3),
                value_conv: None,
                subdirectory: None,
            },
        ),
    ]
}
