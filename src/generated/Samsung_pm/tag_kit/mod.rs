//! Modular tag kits with embedded PrintConv for Samsung_pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.
//!
//! Generated from: Samsung.pm table: APP5
//!
#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

pub mod core;
pub mod datetime;
pub mod document;
pub mod interop;
pub mod other;
pub mod thumbnail;

use crate::expressions::ExpressionEvaluator;
use crate::tiff_types::ByteOrder;
use crate::types::{Result, TagValue};
use std::collections::HashMap;
use std::sync::LazyLock;

#[derive(Debug, Clone)]
pub struct TagKitDef {
    pub id: u32,
    pub name: &'static str,
    pub format: &'static str,
    pub groups: HashMap<&'static str, &'static str>,
    pub writable: bool,
    pub notes: Option<&'static str>,
    pub print_conv: PrintConvType,
    pub value_conv: Option<&'static str>,
    pub subdirectory: Option<SubDirectoryType>,
}

#[derive(Debug, Clone)]
pub enum PrintConvType {
    None,
    Simple(&'static HashMap<String, &'static str>),
    Expression(&'static str),
    Manual(&'static str),
}

/// Type alias for subdirectory processor function
pub type SubDirectoryProcessor =
    fn(&[u8], ByteOrder, Option<&str>) -> Result<Vec<(String, TagValue)>>;

#[derive(Debug, Clone)]
pub enum SubDirectoryType {
    Binary { processor: SubDirectoryProcessor },
}

/// All tag kits for Samsung_pm
pub static SAMSUNG_PM_TAG_KITS: LazyLock<HashMap<u32, TagKitDef>> = LazyLock::new(|| {
    let mut map: HashMap<u32, TagKitDef> = HashMap::new();

    // core tags
    for (id, tag_def) in core::get_core_tags() {
        // Priority insertion: preserve existing entries with subdirectory processors
        match map.get(&id) {
            Some(existing) if existing.subdirectory.is_some() => {
                // Keep existing tag if it has a subdirectory processor
                if tag_def.subdirectory.is_none() {
                    // Skip this tag - existing one is more important
                    continue;
                }
            }
            _ => {}
        }
        map.insert(id, tag_def);
    }

    // datetime tags
    for (id, tag_def) in datetime::get_datetime_tags() {
        // Priority insertion: preserve existing entries with subdirectory processors
        match map.get(&id) {
            Some(existing) if existing.subdirectory.is_some() => {
                // Keep existing tag if it has a subdirectory processor
                if tag_def.subdirectory.is_none() {
                    // Skip this tag - existing one is more important
                    continue;
                }
            }
            _ => {}
        }
        map.insert(id, tag_def);
    }

    // document tags
    for (id, tag_def) in document::get_document_tags() {
        // Priority insertion: preserve existing entries with subdirectory processors
        match map.get(&id) {
            Some(existing) if existing.subdirectory.is_some() => {
                // Keep existing tag if it has a subdirectory processor
                if tag_def.subdirectory.is_none() {
                    // Skip this tag - existing one is more important
                    continue;
                }
            }
            _ => {}
        }
        map.insert(id, tag_def);
    }

    // interop tags
    for (id, tag_def) in interop::get_interop_tags() {
        // Priority insertion: preserve existing entries with subdirectory processors
        match map.get(&id) {
            Some(existing) if existing.subdirectory.is_some() => {
                // Keep existing tag if it has a subdirectory processor
                if tag_def.subdirectory.is_none() {
                    // Skip this tag - existing one is more important
                    continue;
                }
            }
            _ => {}
        }
        map.insert(id, tag_def);
    }

    // other tags
    for (id, tag_def) in other::get_other_tags() {
        // Priority insertion: preserve existing entries with subdirectory processors
        match map.get(&id) {
            Some(existing) if existing.subdirectory.is_some() => {
                // Keep existing tag if it has a subdirectory processor
                if tag_def.subdirectory.is_none() {
                    // Skip this tag - existing one is more important
                    continue;
                }
            }
            _ => {}
        }
        map.insert(id, tag_def);
    }

    // thumbnail tags
    for (id, tag_def) in thumbnail::get_thumbnail_tags() {
        // Priority insertion: preserve existing entries with subdirectory processors
        match map.get(&id) {
            Some(existing) if existing.subdirectory.is_some() => {
                // Keep existing tag if it has a subdirectory processor
                if tag_def.subdirectory.is_none() {
                    // Skip this tag - existing one is more important
                    continue;
                }
            }
            _ => {}
        }
        map.insert(id, tag_def);
    }

    map
});

// Helper functions for reading binary data
fn model_matches(model: &str, pattern: &str) -> bool {
    // ExifTool regexes are already in a compatible format
    // Just need to ensure proper escaping was preserved

    match regex::Regex::new(pattern) {
        Ok(re) => re.is_match(model),
        Err(e) => {
            tracing::warn!("Failed to compile model regex '{}': {}", pattern, e);
            false
        }
    }
}

fn format_matches(format: &str, pattern: &str) -> bool {
    if let Ok(re) = regex::Regex::new(pattern) {
        re.is_match(format)
    } else {
        tracing::warn!("Failed to compile format regex: {}", pattern);
        false
    }
}

fn read_int16s_array(data: &[u8], byte_order: ByteOrder, count: usize) -> Result<Vec<i16>> {
    if data.len() < count * 2 {
        return Err(crate::types::ExifError::ParseError(
            "Insufficient data for int16s array".to_string(),
        ));
    }
    let mut values = Vec::with_capacity(count);
    for i in 0..count {
        let offset = i * 2;
        let value = match byte_order {
            ByteOrder::LittleEndian => i16::from_le_bytes([data[offset], data[offset + 1]]),
            ByteOrder::BigEndian => i16::from_be_bytes([data[offset], data[offset + 1]]),
        };
        values.push(value);
    }
    Ok(values)
}

fn read_int16u_array(data: &[u8], byte_order: ByteOrder, count: usize) -> Result<Vec<u16>> {
    if data.len() < count * 2 {
        return Err(crate::types::ExifError::ParseError(
            "Insufficient data for int16u array".to_string(),
        ));
    }
    let mut values = Vec::with_capacity(count);
    for i in 0..count {
        let offset = i * 2;
        let value = match byte_order {
            ByteOrder::LittleEndian => u16::from_le_bytes([data[offset], data[offset + 1]]),
            ByteOrder::BigEndian => u16::from_be_bytes([data[offset], data[offset + 1]]),
        };
        values.push(value);
    }
    Ok(values)
}

fn read_int16s(data: &[u8], byte_order: ByteOrder) -> Result<i16> {
    if data.len() < 2 {
        return Err(crate::types::ExifError::ParseError(
            "Insufficient data for int16s".to_string(),
        ));
    }
    Ok(match byte_order {
        ByteOrder::LittleEndian => i16::from_le_bytes([data[0], data[1]]),
        ByteOrder::BigEndian => i16::from_be_bytes([data[0], data[1]]),
    })
}

// Subdirectory processing functions
fn process_samsung_dualshotextra(
    data: &[u8],
    byte_order: ByteOrder,
) -> Result<Vec<(String, TagValue)>> {
    let mut tags = Vec::new();
    // DepthMapWidth at offset 16

    // DepthMapHeight at offset 17

    // DualShotDummy at offset 8
    if data.len() >= 160 {
        // TODO: Handle format undef
    }

    Ok(tags)
}

fn process_samsung_singleshotmeta(
    data: &[u8],
    byte_order: ByteOrder,
) -> Result<Vec<(String, TagValue)>> {
    let mut tags = Vec::new();
    // TagbeautyColorLevel at offset beautyColorLevel

    // TagbeautyRetouchLevel at offset beautyRetouchLevel

    // TagblurStrength at offset blurStrength

    // TagbokehShape at offset bokehShape

    // TagcolorpopStrength at offset colorpopStrength

    // TagdepthHWHeight at offset depthHWHeight

    // TagdepthHWWidth at offset depthHWWidth

    // TagdepthSWHeight at offset depthSWHeight

    // TagdepthSWWidth at offset depthSWWidth

    // TagdeviceOrientation at offset deviceOrientation

    // TageffectStrength at offset effectStrength

    // TageffectType at offset effectType

    // TagflipStatus at offset flipStatus

    // TaginputHeight at offset inputHeight

    // TaginputWidth at offset inputWidth

    // TagisArtBokeh at offset isArtBokeh

    // TaglensFacing at offset lensFacing

    // TagmonoStrength at offset monoStrength

    // TagobjectOrientation at offset objectOrientation

    // TagoutputHeight at offset outputHeight

    // TagoutputWidth at offset outputWidth

    // TagperfMode at offset perfMode

    // TagsegHeight at offset segHeight

    // TagsegWidth at offset segWidth

    // TagsidelightStrength at offset sidelightStrength

    // TagspinStrength at offset spinStrength

    // TagvintageStrength at offset vintageStrength

    // TagzoomStrength at offset zoomStrength

    Ok(tags)
}

fn process_samsung_ifd(data: &[u8], byte_order: ByteOrder) -> Result<Vec<(String, TagValue)>> {
    let mut tags = Vec::new();
    Ok(tags)
}

fn process_samsung_orientationinfo(
    data: &[u8],
    byte_order: ByteOrder,
) -> Result<Vec<(String, TagValue)>> {
    let mut tags = Vec::new();
    // YawAngle at offset 0

    // PitchAngle at offset 1

    // RollAngle at offset 2

    Ok(tags)
}

fn process_samsung_picturewizard(
    data: &[u8],
    byte_order: ByteOrder,
) -> Result<Vec<(String, TagValue)>> {
    let mut tags = Vec::new();
    // PictureWizardMode at offset 0

    // PictureWizardSaturation at offset 2

    // PictureWizardSharpness at offset 3

    // PictureWizardContrast at offset 4

    Ok(tags)
}

fn process_samsung_thumbnail(
    data: &[u8],
    byte_order: ByteOrder,
) -> Result<Vec<(String, TagValue)>> {
    let mut tags = Vec::new();
    // ThumbnailOffset at offset 4

    Ok(tags)
}

// Functions for tables not extracted by tag kit
fn process_samsung_svss(data: &[u8], _byte_order: ByteOrder) -> Result<Vec<(String, TagValue)>> {
    // TODO: Implement when this table is extracted
    tracing::debug!("Stub function called for {}", data.len());
    Ok(vec![])
}

pub fn process_tag_0x0_subdirectory(
    data: &[u8],
    byte_order: ByteOrder,
    model: Option<&str>,
) -> Result<Vec<(String, TagValue)>> {
    use crate::expressions::ExpressionEvaluator;
    use crate::processor_registry::ProcessorContext;
    use tracing::debug;
    let count = data.len() / 2;
    debug!(
        "process_tag_0x0_subdirectory called with {} bytes, count={}",
        data.len(),
        count
    );

    Ok(vec![])
}

pub fn process_tag_0xb_subdirectory(
    data: &[u8],
    byte_order: ByteOrder,
    model: Option<&str>,
) -> Result<Vec<(String, TagValue)>> {
    use crate::expressions::ExpressionEvaluator;
    use crate::processor_registry::ProcessorContext;
    use tracing::debug;
    let count = data.len() / 2;
    debug!(
        "process_tag_0xb_subdirectory called with {} bytes, count={}",
        data.len(),
        count
    );

    // Runtime condition not yet supported: $$valPt =~ /^[^\\0]\\0\\0\\0/
    // Would dispatch to: Image::ExifTool::Samsung::IFD
    Ok(vec![])
}

pub fn process_tag_0x11_subdirectory(
    data: &[u8],
    byte_order: ByteOrder,
    model: Option<&str>,
) -> Result<Vec<(String, TagValue)>> {
    use crate::expressions::ExpressionEvaluator;
    use crate::processor_registry::ProcessorContext;
    use tracing::debug;
    let count = data.len() / 2;
    debug!(
        "process_tag_0x11_subdirectory called with {} bytes, count={}",
        data.len(),
        count
    );

    // Single unconditional subdirectory
    process_samsung_orientationinfo(data, byte_order)
}

pub fn process_tag_0x21_subdirectory(
    data: &[u8],
    byte_order: ByteOrder,
    model: Option<&str>,
) -> Result<Vec<(String, TagValue)>> {
    use crate::expressions::ExpressionEvaluator;
    use crate::processor_registry::ProcessorContext;
    use tracing::debug;
    let count = data.len() / 2;
    debug!(
        "process_tag_0x21_subdirectory called with {} bytes, count={}",
        data.len(),
        count
    );

    // Single unconditional subdirectory
    process_samsung_picturewizard(data, byte_order)
}

pub fn process_tag_0x35_subdirectory(
    data: &[u8],
    byte_order: ByteOrder,
    model: Option<&str>,
) -> Result<Vec<(String, TagValue)>> {
    use crate::expressions::ExpressionEvaluator;
    use crate::processor_registry::ProcessorContext;
    use tracing::debug;
    let count = data.len() / 2;
    debug!(
        "process_tag_0x35_subdirectory called with {} bytes, count={}",
        data.len(),
        count
    );

    // Runtime condition not yet supported: $$self{TIFF_TYPE} eq \"SRW\" and $$self{Model} ne \"EK-GN120\"
    // Would dispatch to: Image::ExifTool::Nikon::PreviewIFD
    // Runtime condition not yet supported: $$self{TIFF_TYPE} eq \"SRW\"
    // Would dispatch to: Image::ExifTool::Nikon::PreviewIFD
    Ok(vec![])
}

pub fn process_tag_0xf4_subdirectory(
    data: &[u8],
    byte_order: ByteOrder,
    model: Option<&str>,
) -> Result<Vec<(String, TagValue)>> {
    use crate::expressions::ExpressionEvaluator;
    use crate::processor_registry::ProcessorContext;
    use tracing::debug;
    let count = data.len() / 2;
    debug!(
        "process_tag_0xf4_subdirectory called with {} bytes, count={}",
        data.len(),
        count
    );

    // Runtime condition not yet supported: $$self{SamsungMP4}
    // Would dispatch to: Image::ExifTool::Samsung::Thumbnail
    Ok(vec![])
}

/// Apply PrintConv for a tag from this module
pub fn apply_print_conv(
    tag_id: u32,
    value: &TagValue,
    _evaluator: &mut ExpressionEvaluator,
    _errors: &mut Vec<String>,
    warnings: &mut Vec<String>,
) -> TagValue {
    match tag_id {
        46 => crate::implementations::print_conv::exposuretime_print_conv(value),
        40984 => crate::implementations::print_conv::exposuretime_print_conv(value),
        _ => {
            // Fall back to shared handling
            if let Some(tag_kit) = SAMSUNG_PM_TAG_KITS.get(&tag_id) {
                crate::implementations::generic::apply_fallback_print_conv(
                    tag_id,
                    &tag_kit.name,
                    "Samsung",
                    value,
                    crate::to_print_conv_ref!(&tag_kit.print_conv),
                )
            } else {
                value.clone()
            }
        }
    }
}

/// Apply ValueConv for a tag from this module
pub fn apply_value_conv(
    tag_id: u32,
    value: &TagValue,
    _errors: &mut Vec<String>,
) -> Result<TagValue> {
    match tag_id {
        0 => {
            if let Some(tag_kit) = SAMSUNG_PM_TAG_KITS.get(&tag_id) {
                if let Some(expr) = tag_kit.value_conv {
                    Ok(crate::implementations::missing::missing_value_conv(
                        tag_id,
                        &tag_kit.name,
                        "Samsung",
                        expr,
                        value,
                    ))
                } else {
                    Ok(value.clone())
                }
            } else {
                Ok(value.clone())
            }
        }
        46 => crate::implementations::value_conv::reciprocal_10_value_conv(value),
        48 => {
            if let Some(tag_kit) = SAMSUNG_PM_TAG_KITS.get(&tag_id) {
                if let Some(expr) = tag_kit.value_conv {
                    Ok(crate::implementations::missing::missing_value_conv(
                        tag_id,
                        &tag_kit.name,
                        "Samsung",
                        expr,
                        value,
                    ))
                } else {
                    Ok(value.clone())
                }
            } else {
                Ok(value.clone())
            }
        }
        40984 => {
            if let Some(tag_kit) = SAMSUNG_PM_TAG_KITS.get(&tag_id) {
                if let Some(expr) = tag_kit.value_conv {
                    Ok(crate::implementations::missing::missing_value_conv(
                        tag_id,
                        &tag_kit.name,
                        "Samsung",
                        expr,
                        value,
                    ))
                } else {
                    Ok(value.clone())
                }
            } else {
                Ok(value.clone())
            }
        }
        40985 => {
            if let Some(tag_kit) = SAMSUNG_PM_TAG_KITS.get(&tag_id) {
                if let Some(expr) = tag_kit.value_conv {
                    Ok(crate::implementations::missing::missing_value_conv(
                        tag_id,
                        &tag_kit.name,
                        "Samsung",
                        expr,
                        value,
                    ))
                } else {
                    Ok(value.clone())
                }
            } else {
                Ok(value.clone())
            }
        }
        2 => {
            // Compiled arithmetic: $val - 4
            match value.as_f64() {
                Some(val) => Ok(TagValue::F64(val - 4.0_f64)),
                None => Ok(value.clone()),
            }
        }
        3 => {
            // Compiled arithmetic: $val - 4
            match value.as_f64() {
                Some(val) => Ok(TagValue::F64(val - 4.0_f64)),
                None => Ok(value.clone()),
            }
        }
        4 => {
            // Compiled arithmetic: $val - 4
            match value.as_f64() {
                Some(val) => Ok(TagValue::F64(val - 4.0_f64)),
                None => Ok(value.clone()),
            }
        }
        40986 => {
            // Compiled arithmetic: $val / 10
            match value.as_f64() {
                Some(val) => Ok(TagValue::F64(val / 10.0_f64)),
                None => Ok(value.clone()),
            }
        }
        _ => {
            // Fall back to missing handler for unknown expressions
            if let Some(tag_kit) = SAMSUNG_PM_TAG_KITS.get(&tag_id) {
                if let Some(expr) = tag_kit.value_conv {
                    Ok(crate::implementations::missing::missing_value_conv(
                        tag_id,
                        &tag_kit.name,
                        "Samsung",
                        expr,
                        value,
                    ))
                } else {
                    Ok(value.clone())
                }
            } else {
                Ok(value.clone())
            }
        }
    }
}

/// Check if a tag has subdirectory processing
pub fn has_subdirectory(tag_id: u32) -> bool {
    if let Some(tag_kit) = SAMSUNG_PM_TAG_KITS.get(&tag_id) {
        tag_kit.subdirectory.is_some()
    } else {
        false
    }
}

/// Process subdirectory tags and return multiple extracted tags
pub fn process_subdirectory(
    tag_id: u32,
    value: &TagValue,
    byte_order: ByteOrder,
    model: Option<&str>,
) -> Result<HashMap<String, TagValue>> {
    use tracing::debug;
    let mut result = HashMap::new();

    debug!("process_subdirectory called for tag_id: 0x{:04x}", tag_id);

    if let Some(tag_kit) = SAMSUNG_PM_TAG_KITS.get(&tag_id) {
        if let Some(SubDirectoryType::Binary { processor }) = &tag_kit.subdirectory {
            debug!("Found subdirectory processor for tag_id: 0x{:04x}", tag_id);
            let bytes = match value {
                TagValue::U16Array(arr) => {
                    debug!("Converting U16Array with {} elements to bytes", arr.len());
                    // Convert U16 array to bytes based on byte order
                    let mut bytes = Vec::with_capacity(arr.len() * 2);
                    for val in arr {
                        match byte_order {
                            ByteOrder::LittleEndian => bytes.extend_from_slice(&val.to_le_bytes()),
                            ByteOrder::BigEndian => bytes.extend_from_slice(&val.to_be_bytes()),
                        }
                    }
                    bytes
                }
                TagValue::U8Array(arr) => arr.clone(),
                _ => return Ok(result), // Not array data
            };

            debug!("Calling processor with {} bytes", bytes.len());
            // Process subdirectory and collect all extracted tags
            match processor(&bytes, byte_order, model) {
                Ok(extracted_tags) => {
                    debug!("Processor returned {} tags", extracted_tags.len());
                    for (name, value) in extracted_tags {
                        result.insert(name, value);
                    }
                }
                Err(e) => {
                    debug!("Processor error: {:?}", e);
                }
            }
        } else {
            debug!(
                "No subdirectory processor found for tag_id: 0x{:04x}",
                tag_id
            );
        }
    } else {
        debug!("Tag not found in TAG_KITS: 0x{:04x}", tag_id);
    }

    Ok(result)
}
