//! Generated tag table definitions from Samsung::Type2
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{
    exposuretime_print_conv, fnumber_print_conv, gpsaltitude_print_conv, lensinfo_print_conv,
    print_fraction,
};
use crate::implementations::value_conv::{
    exif_date_value_conv, gps_coordinate_value_conv, gpstimestamp_value_conv,
    reciprocal_10_value_conv, reference_long_string_value_conv,
    reference_very_long_string_value_conv,
};

/// Tag definitions for Samsung::Type2 table
pub static SAMSUNG_TYPE2_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            1,
            TagInfo {
                name: "MakerNoteVersion",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2,
            TagInfo {
                name: "DeviceType",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            3,
            TagInfo {
                name: "SamsungModelID",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            17,
            TagInfo {
                name: "OrientationInfo",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            33,
            TagInfo {
                name: "PictureWizard",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            48,
            TagInfo {
                name: "LocalLocationName",
                format: "undef",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "$val=~s/\\0\\0.*//; $val=~s/\\0 */\\n/g; $val".to_string(),
                )),
            },
        ),
        (
            49,
            TagInfo {
                name: "LocationName",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            64,
            TagInfo {
                name: "RawDataByteOrder",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            65,
            TagInfo {
                name: "WhiteBalanceSetup",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            67,
            TagInfo {
                name: "CameraTemperature",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val =~ /\\d/ ? \"$val C\" : $val".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            80,
            TagInfo {
                name: "RawDataCFAPattern",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            256,
            TagInfo {
                name: "FaceDetect",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            288,
            TagInfo {
                name: "FaceRecognition",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            291,
            TagInfo {
                name: "FaceName",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40961,
            TagInfo {
                name: "FirmwareName",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40962,
            TagInfo {
                name: "SerialNumber",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40963,
            TagInfo {
                name: "LensType",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40964,
            TagInfo {
                name: "LensFirmware",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40965,
            TagInfo {
                name: "InternalLensSerialNumber",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40976,
            TagInfo {
                name: "SensorAreas",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40977,
            TagInfo {
                name: "ColorSpace",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            40978,
            TagInfo {
                name: "SmartRange",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            40979,
            TagInfo {
                name: "ExposureCompensation",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40980,
            TagInfo {
                name: "ISO",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40984,
            TagInfo {
                name: "ExposureTime",
                format: "unknown",
                print_conv: Some(PrintConv::Function(exposuretime_print_conv)),
                value_conv: Some(ValueConv::Expression("$val=~s/ .*//; $val".to_string())),
            },
        ),
        (
            40985,
            TagInfo {
                name: "FNumber",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression("$val=~s/ .*//; $val".to_string())),
            },
        ),
        (
            40986,
            TagInfo {
                name: "FocalLengthIn35mmFormat",
                format: "int32u",
                print_conv: Some(PrintConv::Expression("\"$val mm\"".to_string())),
                value_conv: Some(ValueConv::Expression("$val / 10".to_string())),
            },
        ),
        (
            40992,
            TagInfo {
                name: "EncryptionKey",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40993,
            TagInfo {
                name: "WB_RGGBLevelsUncorrected",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40994,
            TagInfo {
                name: "WB_RGGBLevelsAuto",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40995,
            TagInfo {
                name: "WB_RGGBLevelsIlluminator1",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40996,
            TagInfo {
                name: "WB_RGGBLevelsIlluminator2",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40997,
            TagInfo {
                name: "HighlightLinearityLimit",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41000,
            TagInfo {
                name: "WB_RGGBLevelsBlack",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41008,
            TagInfo {
                name: "ColorMatrix",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41009,
            TagInfo {
                name: "ColorMatrixSRGB",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41010,
            TagInfo {
                name: "ColorMatrixAdobeRGB",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41011,
            TagInfo {
                name: "CbCrMatrixDefault",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41012,
            TagInfo {
                name: "CbCrMatrix",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41013,
            TagInfo {
                name: "CbCrGainDefault",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41014,
            TagInfo {
                name: "CbCrGain",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41024,
            TagInfo {
                name: "ToneCurveSRGBDefault",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41025,
            TagInfo {
                name: "ToneCurveAdobeRGBDefault",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41026,
            TagInfo {
                name: "ToneCurveSRGB",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41027,
            TagInfo {
                name: "ToneCurveAdobeRGB",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41032,
            TagInfo {
                name: "RawData",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41040,
            TagInfo {
                name: "Distortion",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41041,
            TagInfo {
                name: "ChromaticAberration",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41042,
            TagInfo {
                name: "Vignetting",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41043,
            TagInfo {
                name: "VignettingCorrection",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41044,
            TagInfo {
                name: "VignettingSetting",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41045,
            TagInfo {
                name: "Samsung_Type2_0xa055",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41046,
            TagInfo {
                name: "Samsung_Type2_0xa056",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            41047,
            TagInfo {
                name: "Samsung_Type2_0xa057",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SAMSUNG_TYPE2_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SAMSUNG_TYPE2_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
