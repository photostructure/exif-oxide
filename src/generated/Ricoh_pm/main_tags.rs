//! Generated tag table definitions from Ricoh::Main
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

/// Tag definitions for Ricoh::Main table
pub static RICOH_MAIN_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            1,
            TagInfo {
                name: "MakerNoteType",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2,
            TagInfo {
                name: "FirmwareVersion",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val=~/^Rev(\\d+)$/ ? sprintf(\"%.2f\",$1/100) : $val".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            3584,
            TagInfo {
                name: "PrintIM",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4096,
            TagInfo {
                name: "RecordingFormat",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4098,
            TagInfo {
                name: "DriveMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4100,
            TagInfo {
                name: "WhiteBalanceFineTune",
                format: "int16s",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4102,
            TagInfo {
                name: "FocusMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4103,
            TagInfo {
                name: "AutoBracketing",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4105,
            TagInfo {
                name: "MacroMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4106,
            TagInfo {
                name: "FlashMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4107,
            TagInfo {
                name: "FlashExposureComp",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val ? sprintf(\"%+.1f\",$val) : 0".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            4108,
            TagInfo {
                name: "ManualFlashOutput",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4109,
            TagInfo {
                name: "FullPressSnap",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4110,
            TagInfo {
                name: "DynamicRangeExpansion",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4111,
            TagInfo {
                name: "NoiseReduction",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4112,
            TagInfo {
                name: "ImageEffects",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4113,
            TagInfo {
                name: "Vignetting",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4114,
            TagInfo {
                name: "Contrast",
                format: "int32s",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4115,
            TagInfo {
                name: "Saturation",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4116,
            TagInfo {
                name: "Sharpness",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4117,
            TagInfo {
                name: "ToningEffect",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4118,
            TagInfo {
                name: "HueAdjust",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4119,
            TagInfo {
                name: "WideAdapter",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4120,
            TagInfo {
                name: "CropMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4121,
            TagInfo {
                name: "NDFilter",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4122,
            TagInfo {
                name: "WBBracketShotNumber",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4608,
            TagInfo {
                name: "AFStatus",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4609,
            TagInfo {
                name: "AFAreaXPosition1",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4610,
            TagInfo {
                name: "AFAreaYPosition1",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4611,
            TagInfo {
                name: "AFAreaXPosition",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4612,
            TagInfo {
                name: "AFAreaYPosition",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4613,
            TagInfo {
                name: "AFAreaMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4871,
            TagInfo {
                name: "ColorTempKelvin",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4872,
            TagInfo {
                name: "ColorTemperature",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            5376,
            TagInfo {
                name: "FocalLength",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1f mm\",$val)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            5633,
            TagInfo {
                name: "SensorWidth",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            5634,
            TagInfo {
                name: "SensorHeight",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            5635,
            TagInfo {
                name: "CroppedImageWidth",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            5636,
            TagInfo {
                name: "CroppedImageHeight",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            16385,
            TagInfo {
                name: "ThetaSubdir",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = RICOH_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = RICOH_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
