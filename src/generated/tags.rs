//! Generated EXIF tag definitions
//!
//! This file is automatically generated by codegen/generate_rust.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

use lazy_static::lazy_static;
use std::collections::HashMap;

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum TagFormat {
    U8,
    U16,
    U32,
    I8,
    I16,
    I32,
    RationalU,
    RationalS,
    String,
    Undef,
    Float,
    Double,
}

#[derive(Debug, Clone)]
pub struct TagDef {
    pub id: u32,
    pub name: &'static str,
    pub format: TagFormat,
    pub groups: &'static [&'static str],
    pub writable: bool,
    pub description: Option<&'static str>,
    pub print_conv_ref: Option<&'static str>,
    pub value_conv_ref: Option<&'static str>,
    pub notes: Option<&'static str>,
}

pub static EXIF_MAIN_TAGS: &[TagDef] = &[
    TagDef {
        id: 0x100,
        name: "ImageWidth",
        format: TagFormat::U32,
        groups: &["EXIF", "IFD1"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x101,
        name: "ImageHeight",
        format: TagFormat::U32,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: Some("called ImageLength by the EXIF spec."),
    },
    TagDef {
        id: 0x102,
        name: "BitsPerSample",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x10e,
        name: "ImageDescription",
        format: TagFormat::String,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x10f,
        name: "Make",
        format: TagFormat::String,
        groups: &["Camera", "EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x110,
        name: "Model",
        format: TagFormat::String,
        groups: &["Camera", "EXIF"],
        writable: true,
        description: Some("Camera Model Name"),
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x112,
        name: "Orientation",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("orientation_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x11a,
        name: "XResolution",
        format: TagFormat::RationalU,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x11b,
        name: "YResolution",
        format: TagFormat::RationalU,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x128,
        name: "ResolutionUnit",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("resolutionunit_print_conv"),
        value_conv_ref: None,
        notes: Some("the value 1 is not standard EXIF"),
    },
    TagDef {
        id: 0x8298,
        name: "Copyright",
        format: TagFormat::String,
        groups: &["Author", "EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: Some("\n            may contain copyright notices for photographer and editor, separated by a\n            newline.  As per the EXIF specification, the newline is replaced by a null\n            byte when writing to file, but this may be avoided by disabling the print\n            conversion\n        "),
    },
    TagDef {
        id: 0x829a,
        name: "ExposureTime",
        format: TagFormat::RationalU,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("exposuretime_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x829d,
        name: "FNumber",
        format: TagFormat::RationalU,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("fnumber_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x8769,
        name: "ExifOffset",
        format: TagFormat::Undef,
        groups: &["EXIF", "ExifIFD"],
        writable: false,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x8822,
        name: "ExposureProgram",
        format: TagFormat::U16,
        groups: &["Camera", "EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("exposureprogram_print_conv"),
        value_conv_ref: None,
        notes: Some("the value of 9 is not standard EXIF, but is used by some Canon models"),
    },
    TagDef {
        id: 0x8825,
        name: "GPSInfo",
        format: TagFormat::Undef,
        groups: &["EXIF", "GPS"],
        writable: false,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x9003,
        name: "DateTimeOriginal",
        format: TagFormat::String,
        groups: &["EXIF", "Time"],
        writable: true,
        description: Some("Date/Time Original"),
        print_conv_ref: Some("datetimeoriginal_print_conv"),
        value_conv_ref: None,
        notes: Some("date/time when original image was taken"),
    },
    TagDef {
        id: 0x9004,
        name: "CreateDate",
        format: TagFormat::String,
        groups: &["EXIF", "Time"],
        writable: true,
        description: None,
        print_conv_ref: Some("createdate_print_conv"),
        value_conv_ref: None,
        notes: Some("called DateTimeDigitized by the EXIF spec."),
    },
    TagDef {
        id: 0x9207,
        name: "MeteringMode",
        format: TagFormat::U16,
        groups: &["Camera", "EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("meteringmode_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x9209,
        name: "Flash",
        format: TagFormat::U16,
        groups: &["Camera", "EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("flash_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x920a,
        name: "FocalLength",
        format: TagFormat::RationalU,
        groups: &["Camera", "EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("focallength_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0xa001,
        name: "ColorSpace",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("colorspace_print_conv"),
        value_conv_ref: None,
        notes: Some("\n            the value of 0x2 is not standard EXIF.  Instead, an Adobe RGB image is\n            indicated by \"Uncalibrated\" with an InteropIndex of \"R03\".  The values\n            0xfffd and 0xfffe are also non-standard, and are used by some Sony cameras\n        "),
    },
    TagDef {
        id: 0xa002,
        name: "ExifImageWidth",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: Some("called PixelXDimension by the EXIF spec."),
    },
    TagDef {
        id: 0xa003,
        name: "ExifImageHeight",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: Some("called PixelYDimension by the EXIF spec."),
    },
    TagDef {
        id: 0xa403,
        name: "WhiteBalance",
        format: TagFormat::U16,
        groups: &["Camera", "EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("whitebalance_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x212,
        name: "YCbCrSubSampling",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("ycbcrsubsampling_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x213,
        name: "YCbCrPositioning",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("ycbcrpositioning_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0xfe4e,
        name: "WhiteBalance",
        format: TagFormat::String,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: Some("whitebalance_value_conv"),
        notes: None,
    },
    TagDef {
        id: 0x0,
        name: "GPSVersionID",
        format: TagFormat::U8,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpsversionid_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x1,
        name: "GPSLatitudeRef",
        format: TagFormat::String,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpslatituderef_print_conv"),
        value_conv_ref: None,
        notes: Some("\n            tags 0x0001-0x0006 used for camera location according to MWG 2.0. ExifTool\n            will also accept a number when writing GPSLatitudeRef, positive for north\n            latitudes or negative for south, or a string containing N, North, S or South\n        "),
    },
    TagDef {
        id: 0xa,
        name: "GPSMeasureMode",
        format: TagFormat::String,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpsmeasuremode_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0xb,
        name: "GPSDOP",
        format: TagFormat::RationalU,
        groups: &["GPS"],
        writable: true,
        description: Some("GPS Dilution Of Precision"),
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0xc,
        name: "GPSSpeedRef",
        format: TagFormat::String,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpsspeedref_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0xd,
        name: "GPSSpeed",
        format: TagFormat::RationalU,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0xe,
        name: "GPSTrackRef",
        format: TagFormat::String,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpstrackref_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0xf,
        name: "GPSTrack",
        format: TagFormat::RationalU,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x10,
        name: "GPSImgDirectionRef",
        format: TagFormat::String,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpsimgdirectionref_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x11,
        name: "GPSImgDirection",
        format: TagFormat::RationalU,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x12,
        name: "GPSMapDatum",
        format: TagFormat::String,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x13,
        name: "GPSDestLatitudeRef",
        format: TagFormat::String,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpsdestlatituderef_print_conv"),
        value_conv_ref: None,
        notes: Some("tags 0x0013-0x001a used for subject location according to MWG 2.0"),
    },
    TagDef {
        id: 0x2,
        name: "GPSLatitude",
        format: TagFormat::RationalU,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpslatitude_print_conv"),
        value_conv_ref: Some("gpslatitude_value_conv"),
        notes: None,
    },
    TagDef {
        id: 0x14,
        name: "GPSDestLatitude",
        format: TagFormat::RationalU,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpsdestlatitude_print_conv"),
        value_conv_ref: Some("gpsdestlatitude_value_conv"),
        notes: None,
    },
    TagDef {
        id: 0x15,
        name: "GPSDestLongitudeRef",
        format: TagFormat::String,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpsdestlongituderef_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x16,
        name: "GPSDestLongitude",
        format: TagFormat::RationalU,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpsdestlongitude_print_conv"),
        value_conv_ref: Some("gpsdestlongitude_value_conv"),
        notes: None,
    },
    TagDef {
        id: 0x17,
        name: "GPSDestBearingRef",
        format: TagFormat::String,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpsdestbearingref_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x18,
        name: "GPSDestBearing",
        format: TagFormat::RationalU,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x19,
        name: "GPSDestDistanceRef",
        format: TagFormat::String,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpsdestdistanceref_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x1a,
        name: "GPSDestDistance",
        format: TagFormat::RationalU,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x1b,
        name: "GPSProcessingMethod",
        format: TagFormat::Undef,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: Some("values of \"GPS\", \"CELLID\", \"WLAN\" or \"MANUAL\" by the EXIF spec."),
    },
    TagDef {
        id: 0x1c,
        name: "GPSAreaInformation",
        format: TagFormat::Undef,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x1d,
        name: "GPSDateStamp",
        format: TagFormat::String,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: Some("gpsdatestamp_value_conv"),
        notes: Some("\n            when writing, time is stripped off if present, after adjusting date/time to\n            UTC if time includes a timezone.  Format is YYYY:mm:dd\n        "),
    },
    TagDef {
        id: 0x3,
        name: "GPSLongitudeRef",
        format: TagFormat::String,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpslongituderef_print_conv"),
        value_conv_ref: None,
        notes: Some("\n            ExifTool will also accept a number when writing this tag, positive for east\n            longitudes or negative for west, or a string containing E, East, W or West\n        "),
    },
    TagDef {
        id: 0x1e,
        name: "GPSDifferential",
        format: TagFormat::U16,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpsdifferential_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x1f,
        name: "GPSHPositioningError",
        format: TagFormat::RationalU,
        groups: &["GPS"],
        writable: true,
        description: Some("GPS Horizontal Positioning Error"),
        print_conv_ref: Some("gpshpositioningerror_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x4,
        name: "GPSLongitude",
        format: TagFormat::RationalU,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpslongitude_print_conv"),
        value_conv_ref: Some("gpslongitude_value_conv"),
        notes: None,
    },
    TagDef {
        id: 0x5,
        name: "GPSAltitudeRef",
        format: TagFormat::U8,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpsaltituderef_print_conv"),
        value_conv_ref: None,
        notes: Some("\n            ExifTool will also accept number when writing this tag, with negative\n            numbers indicating below sea level\n        "),
    },
    TagDef {
        id: 0x6,
        name: "GPSAltitude",
        format: TagFormat::RationalU,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpsaltitude_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x7,
        name: "GPSTimeStamp",
        format: TagFormat::RationalU,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpstimestamp_print_conv"),
        value_conv_ref: Some("gpstimestamp_value_conv"),
        notes: Some("\n            UTC time of GPS fix.  When writing, date is stripped off if present, and\n            time is adjusted to UTC if it includes a timezone\n        "),
    },
    TagDef {
        id: 0x8,
        name: "GPSSatellites",
        format: TagFormat::String,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x9,
        name: "GPSStatus",
        format: TagFormat::String,
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpsstatus_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
];

lazy_static! {
    pub static ref TAG_BY_ID: HashMap<u32, &'static TagDef> = {
        let mut map = HashMap::new();
        for tag in EXIF_MAIN_TAGS {
            map.insert(tag.id, tag);
        }
        map
    };
}

lazy_static! {
    pub static ref TAG_BY_NAME: HashMap<&'static str, &'static TagDef> = {
        let mut map = HashMap::new();
        for tag in EXIF_MAIN_TAGS {
            map.insert(tag.name, tag);
        }
        map
    };
}
