//! Generated EXIF tag definitions
//!
//! This file is automatically generated by codegen/generate_rust.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

use lazy_static::lazy_static;
use std::collections::HashMap;

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum TagFormat {
    U8,
    U16,
    U32,
    I8,
    I16,
    I32,
    RationalU,
    RationalS,
    String,
    Undef,
    Float,
    Double,
}

#[derive(Debug, Clone)]
pub struct TagDef {
    pub id: u32,
    pub name: &'static str,
    pub format: TagFormat,
    pub groups: &'static [&'static str],
    pub writable: bool,
    pub description: Option<&'static str>,
    pub print_conv_ref: Option<&'static str>,
    pub value_conv_ref: Option<&'static str>,
    pub notes: Option<&'static str>,
}

pub static EXIF_MAIN_TAGS: &[TagDef] = &[
    TagDef {
        id: 0x100,
        name: "ImageWidth",
        format: TagFormat::U32,
        groups: &["EXIF", "IFD1"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x101,
        name: "ImageHeight",
        format: TagFormat::U32,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: Some("called ImageLength by the EXIF spec."),
    },
    TagDef {
        id: 0x102,
        name: "BitsPerSample",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x10e,
        name: "ImageDescription",
        format: TagFormat::String,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x10f,
        name: "Make",
        format: TagFormat::String,
        groups: &["Camera", "EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x110,
        name: "Model",
        format: TagFormat::String,
        groups: &["Camera", "EXIF"],
        writable: true,
        description: Some("Camera Model Name"),
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x112,
        name: "Orientation",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("orientation_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x11a,
        name: "XResolution",
        format: TagFormat::RationalU,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x11b,
        name: "YResolution",
        format: TagFormat::RationalU,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x128,
        name: "ResolutionUnit",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("resolutionunit_print_conv"),
        value_conv_ref: None,
        notes: Some("the value 1 is not standard EXIF"),
    },
    TagDef {
        id: 0x8298,
        name: "Copyright",
        format: TagFormat::String,
        groups: &["Author", "EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: Some("\n            may contain copyright notices for photographer and editor, separated by a\n            newline.  As per the EXIF specification, the newline is replaced by a null\n            byte when writing to file, but this may be avoided by disabling the print\n            conversion\n        "),
    },
    TagDef {
        id: 0x829a,
        name: "ExposureTime",
        format: TagFormat::RationalU,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("exposuretime_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x829d,
        name: "FNumber",
        format: TagFormat::RationalU,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("fnumber_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    // TODO: This tag was manually added instead of proper codegen - fix in enhanced codegen
    TagDef {
        id: 0x8822,
        name: "ExposureProgram",
        format: TagFormat::U16,
        groups: &["Camera", "EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("exposureprogram_print_conv"),
        value_conv_ref: None,
        notes: Some("the value of 9 is not standard EXIF, but is used by some Canon models"),
    },
    TagDef {
        id: 0x9003,
        name: "DateTimeOriginal",
        format: TagFormat::String,
        groups: &["EXIF", "Time"],
        writable: true,
        description: Some("Date/Time Original"),
        print_conv_ref: Some("datetimeoriginal_print_conv"),
        value_conv_ref: None,
        notes: Some("date/time when original image was taken"),
    },
    TagDef {
        id: 0x9004,
        name: "CreateDate",
        format: TagFormat::String,
        groups: &["EXIF", "Time"],
        writable: true,
        description: None,
        print_conv_ref: Some("createdate_print_conv"),
        value_conv_ref: None,
        notes: Some("called DateTimeDigitized by the EXIF spec."),
    },
    TagDef {
        id: 0x9207,
        name: "MeteringMode",
        format: TagFormat::U16,
        groups: &["Camera", "EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("meteringmode_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    // TODO: This tag was manually added instead of proper codegen - fix in enhanced codegen
    TagDef {
        id: 0x9209,
        name: "Flash",
        format: TagFormat::U16,
        groups: &["Camera", "EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("flash_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x920a,
        name: "FocalLength",
        format: TagFormat::RationalU,
        groups: &["Camera", "EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("focallength_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0xa001,
        name: "ColorSpace",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("colorspace_print_conv"),
        value_conv_ref: None,
        notes: Some("\n            the value of 0x2 is not standard EXIF.  Instead, an Adobe RGB image is\n            indicated by \"Uncalibrated\" with an InteropIndex of \"R03\".  The values\n            0xfffd and 0xfffe are also non-standard, and are used by some Sony cameras\n        "),
    },
    TagDef {
        id: 0xa002,
        name: "ExifImageWidth",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: Some("called PixelXDimension by the EXIF spec."),
    },
    TagDef {
        id: 0xa003,
        name: "ExifImageHeight",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: Some("called PixelYDimension by the EXIF spec."),
    },
    TagDef {
        id: 0xa403,
        name: "WhiteBalance",
        format: TagFormat::U16,
        groups: &["Camera", "EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("whitebalance_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x212,
        name: "YCbCrSubSampling",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("ycbcrsubsampling_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x213,
        name: "YCbCrPositioning",
        format: TagFormat::U16,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: Some("ycbcrpositioning_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0xfe4e,
        name: "WhiteBalance",
        format: TagFormat::String,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: Some("whitebalance_value_conv"),
        notes: None,
    },
    // SubDirectory pointer tags - manually added for Milestone 6
    // ExifTool: These exist in main EXIF table and point to subdirectories
    TagDef {
        id: 0x8769,
        name: "ExifOffset",
        format: TagFormat::U32,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x8825,
        name: "GPSInfo",
        format: TagFormat::U32,
        groups: &["EXIF"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
];

// GPS tag table - manually added for Milestone 6
// ExifTool: lib/Image/ExifTool/GPS.pm %Image::ExifTool::GPS::Main
// Note: These format types match the actual EXIF data, not TagFormat enum values
// TODO: Generate GPS table from ExifTool instead of manual static definitions (future codegen enhancement)
pub static GPS_TAGS: &[TagDef] = &[
    TagDef {
        id: 0x0000,
        name: "GPSVersionID",
        format: TagFormat::U8, // BYTE array in EXIF: 4 bytes
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x0001,
        name: "GPSLatitudeRef",
        format: TagFormat::String, // ASCII string: "N" or "S"
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpslatituderef_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x0002,
        name: "GPSLatitude",
        format: TagFormat::RationalU, // 3 RATIONAL values: degrees/1, minutes/1, seconds/100
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x0003,
        name: "GPSLongitudeRef",
        format: TagFormat::String, // ASCII string: "E" or "W"
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpslongituderef_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x0004,
        name: "GPSLongitude",
        format: TagFormat::RationalU, // 3 RATIONAL values: degrees/1, minutes/1, seconds/100
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x0005,
        name: "GPSAltitudeRef",
        format: TagFormat::U8, // BYTE: 0 = above sea level, 1 = below sea level
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: Some("gpsaltituderef_print_conv"),
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x0006,
        name: "GPSAltitude",
        format: TagFormat::RationalU, // Single RATIONAL value in meters
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x0007,
        name: "GPSTimeStamp",
        format: TagFormat::RationalU, // 3 RATIONAL values: hours/1, minutes/1, seconds/1
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
    TagDef {
        id: 0x0012,
        name: "GPSMapDatum",
        format: TagFormat::String, // ASCII string: "WGS84"
        groups: &["GPS"],
        writable: true,
        description: None,
        print_conv_ref: None,
        value_conv_ref: None,
        notes: None,
    },
];

lazy_static! {
    pub static ref TAG_BY_ID: HashMap<u32, &'static TagDef> = {
        let mut map = HashMap::new();
        for tag in EXIF_MAIN_TAGS {
            map.insert(tag.id, tag);
        }
        map
    };
}

lazy_static! {
    pub static ref GPS_TAG_BY_ID: HashMap<u32, &'static TagDef> = {
        let mut map = HashMap::new();
        for tag in GPS_TAGS {
            map.insert(tag.id, tag);
        }
        map
    };
}

lazy_static! {
    pub static ref TAG_BY_NAME: HashMap<&'static str, &'static TagDef> = {
        let mut map = HashMap::new();
        for tag in EXIF_MAIN_TAGS {
            map.insert(tag.name, tag);
        }
        map
    };
}
