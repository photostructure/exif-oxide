//! Tag kits for core category from Exif.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

use super::{PrintConvType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_58: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Full-resolution image");
    map.insert("1".to_string(), "Reduced-resolution image");
    map.insert("16".to_string(), "Enhanced image data");
    map.insert("2".to_string(), "Single page of multi-page image");
    map.insert(
        "3".to_string(),
        "Single page of multi-page reduced-resolution image",
    );
    map.insert("4".to_string(), "Transparency mask");
    map.insert("4294967295".to_string(), "invalid");
    map.insert(
        "5".to_string(),
        "Transparency mask of reduced-resolution image",
    );
    map.insert("6".to_string(), "Transparency mask of multi-page image");
    map.insert("65537".to_string(), "Alternate reduced-resolution image");
    map.insert("65540".to_string(), "Semantic Mask");
    map.insert(
        "7".to_string(),
        "Transparency mask of reduced-resolution multi-page image",
    );
    map.insert("8".to_string(), "Depth map");
    map.insert("9".to_string(), "Depth map of reduced-resolution image");
    map
});

static PRINT_CONV_59: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Full-resolution image");
    map.insert("2".to_string(), "Reduced-resolution image");
    map.insert("3".to_string(), "Single page of multi-page image");
    map
});

static PRINT_CONV_60: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Uncompressed");
    map.insert("10".to_string(), "JBIG Color");
    map.insert("2".to_string(), "CCITT 1D");
    map.insert("262".to_string(), "Kodak 262");
    map.insert("3".to_string(), "T4/Group 3 Fax");
    map.insert("32766".to_string(), "Next");
    map.insert("32767".to_string(), "Sony ARW Compressed");
    map.insert("32769".to_string(), "Packed RAW");
    map.insert("32770".to_string(), "Samsung SRW Compressed");
    map.insert("32771".to_string(), "CCIRLEW");
    map.insert("32772".to_string(), "Samsung SRW Compressed 2");
    map.insert("32773".to_string(), "PackBits");
    map.insert("32809".to_string(), "Thunderscan");
    map.insert("32867".to_string(), "Kodak KDC Compressed");
    map.insert("32895".to_string(), "IT8CTPAD");
    map.insert("32896".to_string(), "IT8LW");
    map.insert("32897".to_string(), "IT8MP");
    map.insert("32898".to_string(), "IT8BL");
    map.insert("32908".to_string(), "PixarFilm");
    map.insert("32909".to_string(), "PixarLog");
    map.insert("32946".to_string(), "Deflate");
    map.insert("32947".to_string(), "DCS");
    map.insert("33003".to_string(), "Aperio JPEG 2000 YCbCr");
    map.insert("33005".to_string(), "Aperio JPEG 2000 RGB");
    map.insert("34661".to_string(), "JBIG");
    map.insert("34676".to_string(), "SGILog");
    map.insert("34677".to_string(), "SGILog24");
    map.insert("34712".to_string(), "JPEG 2000");
    map.insert("34713".to_string(), "Nikon NEF Compressed");
    map.insert("34715".to_string(), "JBIG2 TIFF FX");
    map.insert(
        "34718".to_string(),
        "Microsoft Document Imaging (MDI) Binary Level Codec",
    );
    map.insert(
        "34719".to_string(),
        "Microsoft Document Imaging (MDI) Progressive Transform Codec",
    );
    map.insert(
        "34720".to_string(),
        "Microsoft Document Imaging (MDI) Vector",
    );
    map.insert("34887".to_string(), "ESRI Lerc");
    map.insert("34892".to_string(), "Lossy JPEG");
    map.insert("34925".to_string(), "LZMA2");
    map.insert("34926".to_string(), "Zstd (old)");
    map.insert("34927".to_string(), "WebP (old)");
    map.insert("34933".to_string(), "PNG");
    map.insert("34934".to_string(), "JPEG XR");
    map.insert("4".to_string(), "T6/Group 4 Fax");
    map.insert("5".to_string(), "LZW");
    map.insert("50000".to_string(), "Zstd");
    map.insert("50001".to_string(), "WebP");
    map.insert("50002".to_string(), "JPEG XL (old)");
    map.insert("52546".to_string(), "JPEG XL");
    map.insert("6".to_string(), "JPEG (old-style)");
    map.insert("65000".to_string(), "Kodak DCR Compressed");
    map.insert("65535".to_string(), "Pentax PEF Compressed");
    map.insert("7".to_string(), "JPEG");
    map.insert("8".to_string(), "Adobe Deflate");
    map.insert("9".to_string(), "JBIG B&W");
    map.insert("99".to_string(), "JPEG");
    map
});

static PRINT_CONV_61: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "WhiteIsZero");
    map.insert("1".to_string(), "BlackIsZero");
    map.insert("10".to_string(), "ITULab");
    map.insert("2".to_string(), "RGB");
    map.insert("3".to_string(), "RGB Palette");
    map.insert("32803".to_string(), "Color Filter Array");
    map.insert("32844".to_string(), "Pixar LogL");
    map.insert("32845".to_string(), "Pixar LogLuv");
    map.insert("32892".to_string(), "Sequential Color Filter");
    map.insert("34892".to_string(), "Linear Raw");
    map.insert("4".to_string(), "Transparency Mask");
    map.insert("5".to_string(), "CMYK");
    map.insert("51177".to_string(), "Depth Map");
    map.insert("52527".to_string(), "Semantic Mask");
    map.insert("6".to_string(), "YCbCr");
    map.insert("8".to_string(), "CIELab");
    map.insert("9".to_string(), "ICCLab");
    map
});

static PRINT_CONV_62: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "No dithering or halftoning");
    map.insert("2".to_string(), "Ordered dither or halftone");
    map.insert("3".to_string(), "Randomized dither");
    map
});

static PRINT_CONV_63: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Normal");
    map.insert("2".to_string(), "Reversed");
    map
});

static PRINT_CONV_64: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Horizontal (normal)");
    map.insert("2".to_string(), "Mirror horizontal");
    map.insert("3".to_string(), "Rotate 180");
    map.insert("4".to_string(), "Mirror vertical");
    map.insert("5".to_string(), "Mirror horizontal and rotate 270 CW");
    map.insert("6".to_string(), "Rotate 90 CW");
    map.insert("7".to_string(), "Mirror horizontal and rotate 90 CW");
    map.insert("8".to_string(), "Rotate 270 CW");
    map
});

static PRINT_CONV_65: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Chunky");
    map.insert("2".to_string(), "Planar");
    map
});

static PRINT_CONV_66: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "None");
    map.insert("2".to_string(), "inches");
    map.insert("3".to_string(), "cm");
    map
});

/// Get tag definitions for core category
pub fn get_core_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (
            254,
            TagKitDef {
                id: 254,
                name: "SubfileType",
                format: "int32u",
                groups: HashMap::new(),
                writable: true,
                notes: Some("called NewSubfileType by the TIFF specification"),
                print_conv: PrintConvType::Simple(&PRINT_CONV_58),
                value_conv: None,
            },
        ),
        (
            255,
            TagKitDef {
                id: 255,
                name: "OldSubfileType",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: Some("called SubfileType by the TIFF specification"),
                print_conv: PrintConvType::Simple(&PRINT_CONV_59),
                value_conv: None,
            },
        ),
        (
            256,
            TagKitDef {
                id: 256,
                name: "ImageWidth",
                format: "int32u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
            },
        ),
        (
            257,
            TagKitDef {
                id: 257,
                name: "ImageHeight",
                format: "int32u",
                groups: HashMap::new(),
                writable: true,
                notes: Some("called ImageLength by the EXIF spec."),
                print_conv: PrintConvType::None,
                value_conv: None,
            },
        ),
        (
            258,
            TagKitDef {
                id: 258,
                name: "BitsPerSample",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
            },
        ),
        (
            259,
            TagKitDef {
                id: 259,
                name: "Compression",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_60),
                value_conv: None,
            },
        ),
        (
            262,
            TagKitDef {
                id: 262,
                name: "PhotometricInterpretation",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_61),
                value_conv: None,
            },
        ),
        (
            263,
            TagKitDef {
                id: 263,
                name: "Thresholding",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_62),
                value_conv: None,
            },
        ),
        (
            264,
            TagKitDef {
                id: 264,
                name: "CellWidth",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
            },
        ),
        (
            265,
            TagKitDef {
                id: 265,
                name: "CellLength",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
            },
        ),
        (
            266,
            TagKitDef {
                id: 266,
                name: "FillOrder",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_63),
                value_conv: None,
            },
        ),
        (
            274,
            TagKitDef {
                id: 274,
                name: "Orientation",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_64),
                value_conv: None,
            },
        ),
        (
            277,
            TagKitDef {
                id: 277,
                name: "SamplesPerPixel",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
            },
        ),
        (
            278,
            TagKitDef {
                id: 278,
                name: "RowsPerStrip",
                format: "int32u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
            },
        ),
        (
            280,
            TagKitDef {
                id: 280,
                name: "MinSampleValue",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
            },
        ),
        (
            281,
            TagKitDef {
                id: 281,
                name: "MaxSampleValue",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
            },
        ),
        (
            282,
            TagKitDef {
                id: 282,
                name: "XResolution",
                format: "rational64u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
            },
        ),
        (
            283,
            TagKitDef {
                id: 283,
                name: "YResolution",
                format: "rational64u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
            },
        ),
        (
            284,
            TagKitDef {
                id: 284,
                name: "PlanarConfiguration",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::Simple(&PRINT_CONV_65),
                value_conv: None,
            },
        ),
        (
            296,
            TagKitDef {
                id: 296,
                name: "ResolutionUnit",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: Some("the value 1 is not standard EXIF"),
                print_conv: PrintConvType::Simple(&PRINT_CONV_66),
                value_conv: None,
            },
        ),
        (
            297,
            TagKitDef {
                id: 297,
                name: "PageNumber",
                format: "int16u",
                groups: HashMap::new(),
                writable: true,
                notes: None,
                print_conv: PrintConvType::None,
                value_conv: None,
            },
        ),
    ]
}
