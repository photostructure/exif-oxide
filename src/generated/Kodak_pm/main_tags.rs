//! Generated tag table definitions from Kodak::Main
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_5b::ast_value_5b2c41e400f339d0;
use crate::generated::functions::hash_b3::ast_value_b3b6ac1021ca87a1;
use crate::generated::functions::hash_b9::ast_print_b93bf01b5173ce30;
use crate::generated::functions::hash_c6::ast_print_c60ce4347d672501;
use crate::generated::functions::hash_d2::ast_value_d257a2f28a742d8d;
use crate::generated::functions::hash_d3::ast_print_d3695e9544e1c996;
use crate::generated::functions::hash_e2::ast_print_e2ddf072b19d8074;
use crate::generated::functions::hash_ee::ast_value_ee9b0901d11400f9;
use crate::generated::functions::hash_ef::ast_value_ef515e3e00781660;

/// Tag definitions for Kodak::Main table
pub static KODAK_MAIN_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "KodakModel",
                format: "string[8]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            9,
            TagInfo {
                name: "Quality",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            10,
            TagInfo {
                name: "BurstMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            12,
            TagInfo {
                name: "KodakImageWidth",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            14,
            TagInfo {
                name: "KodakImageHeight",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            16,
            TagInfo {
                name: "YearCreated",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            18,
            TagInfo {
                name: "MonthDayCreated",
                format: "int8u[2]",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_ef515e3e00781660)),
            },
        ),
        (
            20,
            TagInfo {
                name: "TimeCreated",
                format: "int8u[4]",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_b3b6ac1021ca87a1)),
            },
        ),
        (
            24,
            TagInfo {
                name: "BurstMode2",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            27,
            TagInfo {
                name: "ShutterMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            28,
            TagInfo {
                name: "MeteringMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            30,
            TagInfo {
                name: "FNumber",
                format: "int16u",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_ee9b0901d11400f9)),
            },
        ),
        (
            32,
            TagInfo {
                name: "ExposureTime",
                format: "int32u",
                print_conv: Some(PrintConv::Function(ast_print_c60ce4347d672501)),
                value_conv: Some(ValueConv::Function(ast_value_d257a2f28a742d8d)),
            },
        ),
        (
            36,
            TagInfo {
                name: "ExposureCompensation",
                format: "int16s",
                print_conv: Some(PrintConv::Function(ast_print_b93bf01b5173ce30)),
                value_conv: Some(ValueConv::Function(ast_value_5b2c41e400f339d0)),
            },
        ),
        (
            38,
            TagInfo {
                name: "VariousModes",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            40,
            TagInfo {
                name: "Distance1",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            44,
            TagInfo {
                name: "Distance2",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            48,
            TagInfo {
                name: "Distance3",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            52,
            TagInfo {
                name: "Distance4",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            56,
            TagInfo {
                name: "FocusMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            58,
            TagInfo {
                name: "VariousModes2",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            60,
            TagInfo {
                name: "PanoramaMode",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            62,
            TagInfo {
                name: "SubjectDistance",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            64,
            TagInfo {
                name: "WhiteBalance",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            92,
            TagInfo {
                name: "FlashMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            93,
            TagInfo {
                name: "FlashFired",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            94,
            TagInfo {
                name: "ISOSetting",
                format: "int16u",
                print_conv: Some(PrintConv::Function(ast_print_d3695e9544e1c996)),
                value_conv: None,
            },
        ),
        (
            96,
            TagInfo {
                name: "ISO",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            98,
            TagInfo {
                name: "TotalZoom",
                format: "int16u",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_ee9b0901d11400f9)),
            },
        ),
        (
            100,
            TagInfo {
                name: "DateTimeStamp",
                format: "int16u",
                print_conv: Some(PrintConv::Function(ast_print_e2ddf072b19d8074)),
                value_conv: None,
            },
        ),
        (
            102,
            TagInfo {
                name: "ColorMode",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            104,
            TagInfo {
                name: "DigitalZoom",
                format: "int16u",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_ee9b0901d11400f9)),
            },
        ),
        (
            107,
            TagInfo {
                name: "Sharpness",
                format: "int8s",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = KODAK_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value, None),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = KODAK_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value, None),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
