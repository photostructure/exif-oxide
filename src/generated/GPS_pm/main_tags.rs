//! Generated tag table definitions from GPS::Main
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{
    exposuretime_print_conv, fnumber_print_conv, lensinfo_print_conv, print_fraction,
};
use crate::implementations::value_conv::{
    reference_long_string_value_conv, reference_very_long_string_value_conv,
};

/// Tag definitions for GPS::Main table
pub static GPS_MAIN_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "GPSVersionID",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("$val =~ tr/ /./; $val".to_string())),
                value_conv: None,
            },
        ),
        (
            1,
            TagInfo {
                name: "GPSLatitudeRef",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            2,
            TagInfo {
                name: "GPSLatitude",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "Image::ExifTool::GPS::ToDMS($self, $val, 1)".to_string(),
                )),
                value_conv: Some(ValueConv::Function(gps_coordinate_value_conv)),
            },
        ),
        (
            3,
            TagInfo {
                name: "GPSLongitudeRef",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4,
            TagInfo {
                name: "GPSLongitude",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "Image::ExifTool::GPS::ToDMS($self, $val, 1)".to_string(),
                )),
                value_conv: Some(ValueConv::Function(gps_coordinate_value_conv)),
            },
        ),
        (
            5,
            TagInfo {
                name: "GPSAltitudeRef",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            6,
            TagInfo {
                name: "GPSAltitude",
                format: "unknown",
                print_conv: Some(PrintConv::Function(gpsaltitude_print_conv)),
                value_conv: None,
            },
        ),
        (
            7,
            TagInfo {
                name: "GPSTimeStamp",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "Image::ExifTool::GPS::PrintTimeStamp($val)".to_string(),
                )),
                value_conv: Some(ValueConv::Function(gpstimestamp_value_conv)),
            },
        ),
        (
            8,
            TagInfo {
                name: "GPSSatellites",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            9,
            TagInfo {
                name: "GPSStatus",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            10,
            TagInfo {
                name: "GPSMeasureMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            11,
            TagInfo {
                name: "GPSDOP",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            12,
            TagInfo {
                name: "GPSSpeedRef",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            13,
            TagInfo {
                name: "GPSSpeed",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            14,
            TagInfo {
                name: "GPSTrackRef",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            15,
            TagInfo {
                name: "GPSTrack",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            16,
            TagInfo {
                name: "GPSImgDirectionRef",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            17,
            TagInfo {
                name: "GPSImgDirection",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            18,
            TagInfo {
                name: "GPSMapDatum",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            19,
            TagInfo {
                name: "GPSDestLatitudeRef",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            20,
            TagInfo {
                name: "GPSDestLatitude",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "Image::ExifTool::GPS::ToDMS($self, $val, 1)".to_string(),
                )),
                value_conv: Some(ValueConv::Function(gps_coordinate_value_conv)),
            },
        ),
        (
            21,
            TagInfo {
                name: "GPSDestLongitudeRef",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            22,
            TagInfo {
                name: "GPSDestLongitude",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "Image::ExifTool::GPS::ToDMS($self, $val, 1)".to_string(),
                )),
                value_conv: Some(ValueConv::Function(gps_coordinate_value_conv)),
            },
        ),
        (
            23,
            TagInfo {
                name: "GPSDestBearingRef",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            24,
            TagInfo {
                name: "GPSDestBearing",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            25,
            TagInfo {
                name: "GPSDestDistanceRef",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            26,
            TagInfo {
                name: "GPSDestDistance",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            27,
            TagInfo {
                name: "GPSProcessingMethod",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            28,
            TagInfo {
                name: "GPSAreaInformation",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29,
            TagInfo {
                name: "GPSDateStamp",
                format: "undef",
                print_conv: None,
                value_conv: Some(ValueConv::Function(exif_date_value_conv)),
            },
        ),
        (
            30,
            TagInfo {
                name: "GPSDifferential",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            31,
            TagInfo {
                name: "GPSHPositioningError",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("\"$val m\"".to_string())),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = GPS_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = GPS_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
