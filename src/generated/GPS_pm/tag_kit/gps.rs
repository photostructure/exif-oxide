//! Tag kits for gps category from GPS.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_0: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("2".to_string(), "2-Dimensional Measurement");
    map.insert("3".to_string(), "3-Dimensional Measurement");
    map
});

static PRINT_CONV_1: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("K".to_string(), "km/h");
    map.insert("M".to_string(), "mph");
    map.insert("N".to_string(), "knots");
    map
});

static PRINT_CONV_2: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("M".to_string(), "Magnetic North");
    map.insert("T".to_string(), "True North");
    map
});

static PRINT_CONV_3: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("M".to_string(), "Magnetic North");
    map.insert("T".to_string(), "True North");
    map
});

static PRINT_CONV_4: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("M".to_string(), "Magnetic North");
    map.insert("T".to_string(), "True North");
    map
});

static PRINT_CONV_5: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("K".to_string(), "Kilometers");
    map.insert("M".to_string(), "Miles");
    map.insert("N".to_string(), "Nautical Miles");
    map
});

static PRINT_CONV_6: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No Correction");
    map.insert("1".to_string(), "Differential Corrected");
    map
});

static PRINT_CONV_7: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("A".to_string(), "Measurement Active");
    map.insert("V".to_string(), "Measurement Void");
    map
});

/// Get tag definitions for gps category
pub fn get_gps_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (0, TagKitDef {
            id: 0,
            name: "GPSVersionID",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("$val =~ tr/ /./; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "GPSLatitudeRef",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: Some("tags 0x0001-0x0006 used for camera location according to MWG 2.0. ExifTool\n            will also accept a number when writing GPSLatitudeRef, positive for north\n            latitudes or negative for south, or a string containing N, North, S or South"),
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "GPSMeasureMode",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_0),
            value_conv: None,
            subdirectory: None,
        }),
        (11, TagKitDef {
            id: 11,
            name: "GPSDOP",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "GPSSpeedRef",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_1),
            value_conv: None,
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "GPSSpeed",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "GPSTrackRef",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_2),
            value_conv: None,
            subdirectory: None,
        }),
        (15, TagKitDef {
            id: 15,
            name: "GPSTrack",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (16, TagKitDef {
            id: 16,
            name: "GPSImgDirectionRef",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_3),
            value_conv: None,
            subdirectory: None,
        }),
        (17, TagKitDef {
            id: 17,
            name: "GPSImgDirection",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (18, TagKitDef {
            id: 18,
            name: "GPSMapDatum",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (19, TagKitDef {
            id: 19,
            name: "GPSDestLatitudeRef",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: Some("tags 0x0013-0x001a used for subject location according to MWG 2.0"),
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "GPSLatitude",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::GPS::ToDMS($self, $val, 1)"),
            value_conv: Some("Image::ExifTool::GPS::ToDegrees($val)"),
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "GPSDestLatitude",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::GPS::ToDMS($self, $val, 1)"),
            value_conv: Some("Image::ExifTool::GPS::ToDegrees($val)"),
            subdirectory: None,
        }),
        (21, TagKitDef {
            id: 21,
            name: "GPSDestLongitudeRef",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (22, TagKitDef {
            id: 22,
            name: "GPSDestLongitude",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::GPS::ToDMS($self, $val, 1)"),
            value_conv: Some("Image::ExifTool::GPS::ToDegrees($val)"),
            subdirectory: None,
        }),
        (23, TagKitDef {
            id: 23,
            name: "GPSDestBearingRef",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_4),
            value_conv: None,
            subdirectory: None,
        }),
        (24, TagKitDef {
            id: 24,
            name: "GPSDestBearing",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (25, TagKitDef {
            id: 25,
            name: "GPSDestDistanceRef",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_5),
            value_conv: None,
            subdirectory: None,
        }),
        (26, TagKitDef {
            id: 26,
            name: "GPSDestDistance",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (27, TagKitDef {
            id: 27,
            name: "GPSProcessingMethod",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("values of \"GPS\", \"CELLID\", \"WLAN\" or \"MANUAL\" by the EXIF spec."),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (28, TagKitDef {
            id: 28,
            name: "GPSAreaInformation",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (29, TagKitDef {
            id: 29,
            name: "GPSDateStamp",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("when writing, time is stripped off if present, after adjusting date/time to\n            UTC if time includes a timezone.  Format is YYYY:mm:dd"),
            print_conv: PrintConvType::None,
            value_conv: Some("Image::ExifTool::Exif::ExifDate($val)"),
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "GPSLongitudeRef",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: Some("ExifTool will also accept a number when writing this tag, positive for east\n            longitudes or negative for west, or a string containing E, East, W or West"),
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (30, TagKitDef {
            id: 30,
            name: "GPSDifferential",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_6),
            value_conv: None,
            subdirectory: None,
        }),
        (31, TagKitDef {
            id: 31,
            name: "GPSHPositioningError",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val m\""),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "GPSLongitude",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::GPS::ToDMS($self, $val, 1)"),
            value_conv: Some("Image::ExifTool::GPS::ToDegrees($val)"),
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "GPSAltitudeRef",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("ExifTool will also accept number when writing this tag, with negative\n            numbers indicating below sea level"),
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "GPSAltitude",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("$val =~ /^(inf|undef)$/ ? $val : \"$val m\""),
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "GPSTimeStamp",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("UTC time of GPS fix.  When writing, date is stripped off if present, and\n            time is adjusted to UTC if it includes a timezone"),
            print_conv: PrintConvType::Expression("Image::ExifTool::GPS::PrintTimeStamp($val)"),
            value_conv: Some("Image::ExifTool::GPS::ConvertTimeStamp($val)"),
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "GPSSatellites",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "GPSStatus",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_7),
            value_conv: None,
            subdirectory: None,
        }),
    ]
}
