//! Generated tag table definitions from Sony::SR2SubIFD
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_ba::ast_print_ba030bb348470426;

/// Tag definitions for Sony::SR2SubIFD table
pub static SONY_SR2SUBIFD_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            29440,
            TagInfo {
                name: "BlackLevel",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29442,
            TagInfo {
                name: "WB_GRBGLevelsAuto",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29443,
            TagInfo {
                name: "WB_GRBGLevels",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29456,
            TagInfo {
                name: "BlackLevel",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29458,
            TagInfo {
                name: "WB_RGGBLevelsAuto",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29459,
            TagInfo {
                name: "WB_RGGBLevels",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29824,
            TagInfo {
                name: "WB_RGBLevelsDaylight",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29825,
            TagInfo {
                name: "WB_RGBLevelsCloudy",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29826,
            TagInfo {
                name: "WB_RGBLevelsTungsten",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29827,
            TagInfo {
                name: "WB_RGBLevelsFlash",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29828,
            TagInfo {
                name: "WB_RGBLevels4500K",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29830,
            TagInfo {
                name: "WB_RGBLevelsFluorescent",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29858,
            TagInfo {
                name: "MaxFocalLength",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_ba030bb348470426)),
                value_conv: None,
            },
        ),
        (
            29859,
            TagInfo {
                name: "MinFocalLength",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_ba030bb348470426)),
                value_conv: None,
            },
        ),
        (
            29888,
            TagInfo {
                name: "SR2DataIFD",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30752,
            TagInfo {
                name: "WB_RGBLevelsDaylight",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30753,
            TagInfo {
                name: "WB_RGBLevelsCloudy",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30754,
            TagInfo {
                name: "WB_RGBLevelsTungsten",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30755,
            TagInfo {
                name: "WB_RGBLevelsFlash",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30756,
            TagInfo {
                name: "WB_RGBLevels4500K",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30757,
            TagInfo {
                name: "WB_RGBLevelsShade",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30758,
            TagInfo {
                name: "WB_RGBLevelsFluorescent",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30759,
            TagInfo {
                name: "WB_RGBLevelsFluorescentP1",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30760,
            TagInfo {
                name: "WB_RGBLevelsFluorescentP2",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30761,
            TagInfo {
                name: "WB_RGBLevelsFluorescentM1",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30762,
            TagInfo {
                name: "WB_RGBLevels8500K",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30763,
            TagInfo {
                name: "WB_RGBLevels6000K",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30764,
            TagInfo {
                name: "WB_RGBLevels3200K",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30765,
            TagInfo {
                name: "WB_RGBLevels2500K",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            30847,
            TagInfo {
                name: "WhiteLevel",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_SR2SUBIFD_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_SR2SUBIFD_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
