//! Generated tag table definitions from Sony::FaceInfoA
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

/// Tag definitions for Sony::FaceInfoA table
pub static SONY_FACEINFOA_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            2,
            TagInfo {
                name: "FaceTest2",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            3,
            TagInfo {
                name: "FacesDetected",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Expression("$val > 8 ? 0 : $val".to_string())),
            },
        ),
        (
            8,
            TagInfo {
                name: "FaceTest8",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            11,
            TagInfo {
                name: "PotentialFace1Position",
                format: "int16u[4]",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "my @v=split(\" \",$val); $_*=15 foreach @v; \"$v[1] $v[0] $v[3] $v[2]\""
                        .to_string(),
                )),
            },
        ),
        (
            21,
            TagInfo {
                name: "PotentialFace2Position",
                format: "int16u[4]",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "my @v=split(\" \",$val); $_*=15 foreach @v; \"$v[1] $v[0] $v[3] $v[2]\""
                        .to_string(),
                )),
            },
        ),
        (
            31,
            TagInfo {
                name: "PotentialFace3Position",
                format: "int16u[4]",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "my @v=split(\" \",$val); $_*=15 foreach @v; \"$v[1] $v[0] $v[3] $v[2]\""
                        .to_string(),
                )),
            },
        ),
        (
            41,
            TagInfo {
                name: "PotentialFace4Position",
                format: "int16u[4]",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "my @v=split(\" \",$val); $_*=15 foreach @v; \"$v[1] $v[0] $v[3] $v[2]\""
                        .to_string(),
                )),
            },
        ),
        (
            51,
            TagInfo {
                name: "PotentialFace5Position",
                format: "int16u[4]",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "my @v=split(\" \",$val); $_*=15 foreach @v; \"$v[1] $v[0] $v[3] $v[2]\""
                        .to_string(),
                )),
            },
        ),
        (
            61,
            TagInfo {
                name: "PotentialFace6Position",
                format: "int16u[4]",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "my @v=split(\" \",$val); $_*=15 foreach @v; \"$v[1] $v[0] $v[3] $v[2]\""
                        .to_string(),
                )),
            },
        ),
        (
            71,
            TagInfo {
                name: "PotentialFace7Position",
                format: "int16u[4]",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "my @v=split(\" \",$val); $_*=15 foreach @v; \"$v[1] $v[0] $v[3] $v[2]\""
                        .to_string(),
                )),
            },
        ),
        (
            81,
            TagInfo {
                name: "PotentialFace8Position",
                format: "int16u[4]",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "my @v=split(\" \",$val); $_*=15 foreach @v; \"$v[1] $v[0] $v[3] $v[2]\""
                        .to_string(),
                )),
            },
        ),
        (
            91,
            TagInfo {
                name: "Face1Position",
                format: "int16u[4]",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "my @v=split(\" \",$val); $_*=15 foreach @v; \"$v[1] $v[0] $v[3] $v[2]\""
                        .to_string(),
                )),
            },
        ),
        (
            101,
            TagInfo {
                name: "Face2Position",
                format: "int16u[4]",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "my @v=split(\" \",$val); $_*=15 foreach @v; \"$v[1] $v[0] $v[3] $v[2]\""
                        .to_string(),
                )),
            },
        ),
        (
            111,
            TagInfo {
                name: "Face3Position",
                format: "int16u[4]",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "my @v=split(\" \",$val); $_*=15 foreach @v; \"$v[1] $v[0] $v[3] $v[2]\""
                        .to_string(),
                )),
            },
        ),
        (
            121,
            TagInfo {
                name: "Face4Position",
                format: "int16u[4]",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "my @v=split(\" \",$val); $_*=15 foreach @v; \"$v[1] $v[0] $v[3] $v[2]\""
                        .to_string(),
                )),
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_FACEINFOA_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_FACEINFOA_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
