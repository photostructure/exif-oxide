//! Generated tag table definitions from Sony::Tag2010i
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_1a::ast_print_1ade125dab246be4;
use crate::generated::functions::hash_1f::ast_value_1f3cbbb3d7cfc943;
use crate::generated::functions::hash_28::ast_value_28edfda19b0d16dd;
use crate::generated::functions::hash_30::ast_print_30c6ff66128b242c;
use crate::generated::functions::hash_3c::ast_value_3ca782d06a4e1676;
use crate::generated::functions::hash_45::ast_print_45145cdaaff93e23;
use crate::generated::functions::hash_74::ast_value_743e189656f40f03;
use crate::generated::functions::hash_b7::ast_print_b75f5f46a9f320cf;
use crate::generated::functions::hash_be::ast_value_be410aac07f2b930;

/// Tag definitions for Sony::Tag2010i table
pub static SONY_TAG2010I_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            4,
            TagInfo {
                name: "ReleaseMode2",
                format: "int32u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            78,
            TagInfo {
                name: "DynamicRangeOptimizer",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            516,
            TagInfo {
                name: "ReleaseMode3",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            520,
            TagInfo {
                name: "ReleaseMode2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            528,
            TagInfo {
                name: "SelfTimer",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            529,
            TagInfo {
                name: "FlashMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            535,
            TagInfo {
                name: "StopsAboveBaseISO",
                format: "int16u",
                print_conv: Some(PrintConv::Function(ast_print_45145cdaaff93e23)),
                value_conv: Some(ValueConv::Function(ast_value_743e189656f40f03)),
            },
        ),
        (
            537,
            TagInfo {
                name: "BrightnessValue",
                format: "int16u",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_be410aac07f2b930)),
            },
        ),
        (
            539,
            TagInfo {
                name: "DynamicRangeOptimizer",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            543,
            TagInfo {
                name: "HDRSetting",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            547,
            TagInfo {
                name: "ExposureCompensation",
                format: "int16s",
                print_conv: Some(PrintConv::Function(ast_print_b75f5f46a9f320cf)),
                value_conv: Some(ValueConv::Function(ast_value_1f3cbbb3d7cfc943)),
            },
        ),
        (
            567,
            TagInfo {
                name: "PictureProfile",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            568,
            TagInfo {
                name: "PictureProfile",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            572,
            TagInfo {
                name: "PictureEffect2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            583,
            TagInfo {
                name: "Quality2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            587,
            TagInfo {
                name: "MeteringMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            588,
            TagInfo {
                name: "ExposureProgram",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            594,
            TagInfo {
                name: "WB_RGBLevels",
                format: "int16u[3]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            778,
            TagInfo {
                name: "FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Function(ast_print_30c6ff66128b242c)),
                value_conv: Some(ValueConv::Function(ast_value_28edfda19b0d16dd)),
            },
        ),
        (
            780,
            TagInfo {
                name: "MinFocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Function(ast_print_30c6ff66128b242c)),
                value_conv: Some(ValueConv::Function(ast_value_28edfda19b0d16dd)),
            },
        ),
        (
            782,
            TagInfo {
                name: "MaxFocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Function(ast_print_30c6ff66128b242c)),
                value_conv: Some(ValueConv::Function(ast_value_28edfda19b0d16dd)),
            },
        ),
        (
            800,
            TagInfo {
                name: "SonyISO",
                format: "int16u",
                print_conv: Some(PrintConv::Function(ast_print_1ade125dab246be4)),
                value_conv: Some(ValueConv::Function(ast_value_3ca782d06a4e1676)),
            },
        ),
        (
            877,
            TagInfo {
                name: "MeterInfo",
                format: "undef[1620]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            6096,
            TagInfo {
                name: "DistortionCorrParams",
                format: "int16s[16]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            6129,
            TagInfo {
                name: "LensFormat",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            6130,
            TagInfo {
                name: "LensMount",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            6131,
            TagInfo {
                name: "LensType2",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            6134,
            TagInfo {
                name: "LensType",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            6136,
            TagInfo {
                name: "DistortionCorrParamsPresent",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            6137,
            TagInfo {
                name: "DistortionCorrParamsNumber",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            6284,
            TagInfo {
                name: "AspectRatio",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_TAG2010I_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value, None),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_TAG2010I_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value, None),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
