//! Generated tag table definitions from Sony::Tag2010i
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{
    exposuretime_print_conv, fnumber_print_conv, gpsaltitude_print_conv, lensinfo_print_conv,
    print_fraction,
};
use crate::implementations::value_conv::{
    exif_date_value_conv, gps_coordinate_value_conv, gpstimestamp_value_conv,
    reciprocal_10_value_conv, reference_long_string_value_conv,
    reference_very_long_string_value_conv,
};

/// Tag definitions for Sony::Tag2010i table
pub static SONY_TAG2010I_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            4,
            TagInfo {
                name: "ReleaseMode2",
                format: "int32u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            78,
            TagInfo {
                name: "DynamicRangeOptimizer",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            516,
            TagInfo {
                name: "ReleaseMode3",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            520,
            TagInfo {
                name: "ReleaseMode2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            528,
            TagInfo {
                name: "SelfTimer",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            529,
            TagInfo {
                name: "FlashMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            535,
            TagInfo {
                name: "StopsAboveBaseISO",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "$val ? sprintf(\"%.1f\",$val) : $val".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("16 - $val/256".to_string())),
            },
        ),
        (
            537,
            TagInfo {
                name: "BrightnessValue",
                format: "int16u",
                print_conv: None,
                value_conv: Some(ValueConv::Expression("$val/256 - 56.6".to_string())),
            },
        ),
        (
            539,
            TagInfo {
                name: "DynamicRangeOptimizer",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            543,
            TagInfo {
                name: "HDRSetting",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            547,
            TagInfo {
                name: "ExposureCompensation",
                format: "int16s",
                print_conv: Some(PrintConv::Expression(
                    "$val ? sprintf(\"%+.1f\",$val) : 0".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("-$val/256".to_string())),
            },
        ),
        (
            567,
            TagInfo {
                name: "PictureProfile",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            568,
            TagInfo {
                name: "PictureProfile",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            572,
            TagInfo {
                name: "PictureEffect2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            583,
            TagInfo {
                name: "Quality2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            587,
            TagInfo {
                name: "MeteringMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            588,
            TagInfo {
                name: "ExposureProgram",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            594,
            TagInfo {
                name: "WB_RGBLevels",
                format: "int16u[3]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            778,
            TagInfo {
                name: "FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1f mm\",$val)".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("$val / 10".to_string())),
            },
        ),
        (
            780,
            TagInfo {
                name: "MinFocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1f mm\",$val)".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("$val / 10".to_string())),
            },
        ),
        (
            782,
            TagInfo {
                name: "MaxFocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1f mm\",$val)".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("$val / 10".to_string())),
            },
        ),
        (
            800,
            TagInfo {
                name: "SonyISO",
                format: "int16u",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.0f\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression(
                    "100 * 2**(16 - $val/256)".to_string(),
                )),
            },
        ),
        (
            877,
            TagInfo {
                name: "MeterInfo",
                format: "undef[1620]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            6096,
            TagInfo {
                name: "DistortionCorrParams",
                format: "int16s[16]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            6129,
            TagInfo {
                name: "LensFormat",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            6130,
            TagInfo {
                name: "LensMount",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            6131,
            TagInfo {
                name: "LensType2",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            6134,
            TagInfo {
                name: "LensType",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            6136,
            TagInfo {
                name: "DistortionCorrParamsPresent",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            6137,
            TagInfo {
                name: "DistortionCorrParamsNumber",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            6284,
            TagInfo {
                name: "AspectRatio",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_TAG2010I_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_TAG2010I_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
