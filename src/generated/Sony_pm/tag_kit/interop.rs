//! Tag kits for interop category from Sony.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_31: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Wide");
    map.insert("1".to_string(), "Spot");
    map.insert("2".to_string(), "Local");
    map.insert("3".to_string(), "Zone");
    map
});

static PRINT_CONV_32: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "15-point");
    map.insert("2".to_string(), "19-point");
    map.insert("3".to_string(), "79-point");
    map
});

static PRINT_CONV_33: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Manual");
    map.insert("2".to_string(), "AF-S");
    map.insert("3".to_string(), "AF-C");
    map.insert("4".to_string(), "AF-A");
    map.insert("6".to_string(), "DMF");
    map
});

static PRINT_CONV_34: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Upper-left");
    map.insert("1".to_string(), "Left");
    map.insert("10".to_string(), "Center (vertical)");
    map.insert("11".to_string(), "Bottom (vertical)");
    map.insert("12".to_string(), "Far Right");
    map.insert("13".to_string(), "Upper-right");
    map.insert("14".to_string(), "Right");
    map.insert("15".to_string(), "Lower-right");
    map.insert("16".to_string(), "Upper-middle");
    map.insert("17".to_string(), "Lower-middle");
    map.insert("2".to_string(), "Lower-left");
    map.insert("3".to_string(), "Far Left");
    map.insert("4".to_string(), "Top (horizontal)");
    map.insert("5".to_string(), "Near Right");
    map.insert("6".to_string(), "Center (horizontal)");
    map.insert("7".to_string(), "Near Left");
    map.insert("8".to_string(), "Bottom (horizontal)");
    map.insert("9".to_string(), "Top (vertical)");
    map
});

static PRINT_CONV_35: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Upper Far Left");
    map.insert("1".to_string(), "Upper-left (horizontal)");
    map.insert("10".to_string(), "Top (horizontal)");
    map.insert("11".to_string(), "Near Right");
    map.insert("12".to_string(), "Center (horizontal)");
    map.insert("13".to_string(), "Near Left");
    map.insert("14".to_string(), "Bottom (horizontal)");
    map.insert("15".to_string(), "Top (vertical)");
    map.insert("16".to_string(), "Upper-middle");
    map.insert("17".to_string(), "Center (vertical)");
    map.insert("18".to_string(), "Lower-middle");
    map.insert("19".to_string(), "Bottom (vertical)");
    map.insert("2".to_string(), "Far Left (horizontal)");
    map.insert("20".to_string(), "Upper Far Right");
    map.insert("21".to_string(), "Upper-right (horizontal)");
    map.insert("22".to_string(), "Far Right (horizontal)");
    map.insert("23".to_string(), "Right (horizontal)");
    map.insert("24".to_string(), "Lower Far Right");
    map.insert("25".to_string(), "Lower-right (horizontal)");
    map.insert("26".to_string(), "Far Right (vertical)");
    map.insert("27".to_string(), "Upper-right (vertical)");
    map.insert("28".to_string(), "Right (vertical)");
    map.insert("29".to_string(), "Lower-right (vertical)");
    map.insert("3".to_string(), "Left (horizontal)");
    map.insert("4".to_string(), "Lower Far Left");
    map.insert("5".to_string(), "Lower-left (horizontal)");
    map.insert("6".to_string(), "Upper-left (vertical)");
    map.insert("7".to_string(), "Left (vertical)");
    map.insert("8".to_string(), "Lower-left (vertical)");
    map.insert("9".to_string(), "Far Left (vertical)");
    map
});

static PRINT_CONV_36: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Upper-left");
    map.insert("1".to_string(), "Left");
    map.insert("10".to_string(), "Center (vertical)");
    map.insert("11".to_string(), "Bottom (vertical)");
    map.insert("12".to_string(), "Far Right");
    map.insert("13".to_string(), "Upper-right");
    map.insert("14".to_string(), "Right");
    map.insert("15".to_string(), "Lower-right");
    map.insert("16".to_string(), "Upper-middle");
    map.insert("17".to_string(), "Lower-middle");
    map.insert("2".to_string(), "Lower-left");
    map.insert("255".to_string(), "(none)");
    map.insert("3".to_string(), "Far Left");
    map.insert("4".to_string(), "Top (horizontal)");
    map.insert("5".to_string(), "Near Right");
    map.insert("6".to_string(), "Center (horizontal)");
    map.insert("7".to_string(), "Near Left");
    map.insert("8".to_string(), "Bottom (horizontal)");
    map.insert("9".to_string(), "Top (vertical)");
    map
});

static PRINT_CONV_37: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Upper Far Left");
    map.insert("1".to_string(), "Upper-left (horizontal)");
    map.insert("10".to_string(), "Top (horizontal)");
    map.insert("11".to_string(), "Near Right");
    map.insert("12".to_string(), "Center (horizontal)");
    map.insert("13".to_string(), "Near Left");
    map.insert("14".to_string(), "Bottom (horizontal)");
    map.insert("15".to_string(), "Top (vertical)");
    map.insert("16".to_string(), "Upper-middle");
    map.insert("17".to_string(), "Center (vertical)");
    map.insert("18".to_string(), "Lower-middle");
    map.insert("19".to_string(), "Bottom (vertical)");
    map.insert("2".to_string(), "Far Left (horizontal)");
    map.insert("20".to_string(), "Upper Far Right");
    map.insert("21".to_string(), "Upper-right (horizontal)");
    map.insert("22".to_string(), "Far Right (horizontal)");
    map.insert("23".to_string(), "Right (horizontal)");
    map.insert("24".to_string(), "Lower Far Right");
    map.insert("25".to_string(), "Lower-right (horizontal)");
    map.insert("255".to_string(), "(none)");
    map.insert("26".to_string(), "Far Right (vertical)");
    map.insert("27".to_string(), "Upper-right (vertical)");
    map.insert("28".to_string(), "Right (vertical)");
    map.insert("29".to_string(), "Lower-right (vertical)");
    map.insert("3".to_string(), "Left (horizontal)");
    map.insert("4".to_string(), "Lower Far Left");
    map.insert("5".to_string(), "Lower-left (horizontal)");
    map.insert("6".to_string(), "Upper-left (vertical)");
    map.insert("7".to_string(), "Left (vertical)");
    map.insert("8".to_string(), "Lower-left (vertical)");
    map.insert("9".to_string(), "Far Left (vertical)");
    map
});

static PRINT_CONV_38: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Upper-left");
    map.insert("1".to_string(), "Left");
    map.insert("10".to_string(), "Center (vertical)");
    map.insert("11".to_string(), "Bottom (vertical)");
    map.insert("12".to_string(), "Far Right");
    map.insert("13".to_string(), "Upper-right");
    map.insert("14".to_string(), "Right");
    map.insert("15".to_string(), "Lower-right");
    map.insert("16".to_string(), "Upper-middle");
    map.insert("17".to_string(), "Lower-middle");
    map.insert("2".to_string(), "Lower-left");
    map.insert("3".to_string(), "Far Left");
    map.insert("30".to_string(), "(out of focus)");
    map.insert("4".to_string(), "Top (horizontal)");
    map.insert("5".to_string(), "Near Right");
    map.insert("6".to_string(), "Center (horizontal)");
    map.insert("7".to_string(), "Near Left");
    map.insert("8".to_string(), "Bottom (horizontal)");
    map.insert("9".to_string(), "Top (vertical)");
    map
});

static PRINT_CONV_39: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Upper Far Left");
    map.insert("1".to_string(), "Upper-left (horizontal)");
    map.insert("10".to_string(), "Top (horizontal)");
    map.insert("11".to_string(), "Near Right");
    map.insert("12".to_string(), "Center (horizontal)");
    map.insert("13".to_string(), "Near Left");
    map.insert("14".to_string(), "Bottom (horizontal)");
    map.insert("15".to_string(), "Top (vertical)");
    map.insert("16".to_string(), "Upper-middle");
    map.insert("17".to_string(), "Center (vertical)");
    map.insert("18".to_string(), "Lower-middle");
    map.insert("19".to_string(), "Bottom (vertical)");
    map.insert("2".to_string(), "Far Left (horizontal)");
    map.insert("20".to_string(), "Upper Far Right");
    map.insert("21".to_string(), "Upper-right (horizontal)");
    map.insert("22".to_string(), "Far Right (horizontal)");
    map.insert("23".to_string(), "Right (horizontal)");
    map.insert("24".to_string(), "Lower Far Right");
    map.insert("25".to_string(), "Lower-right (horizontal)");
    map.insert("26".to_string(), "Far Right (vertical)");
    map.insert("27".to_string(), "Upper-right (vertical)");
    map.insert("28".to_string(), "Right (vertical)");
    map.insert("29".to_string(), "Lower-right (vertical)");
    map.insert("3".to_string(), "Left (horizontal)");
    map.insert("30".to_string(), "(out of focus)");
    map.insert("4".to_string(), "Lower Far Left");
    map.insert("5".to_string(), "Lower-left (horizontal)");
    map.insert("6".to_string(), "Upper-left (vertical)");
    map.insert("7".to_string(), "Left (vertical)");
    map.insert("8".to_string(), "Lower-left (vertical)");
    map.insert("9".to_string(), "Far Left (vertical)");
    map
});

static PRINT_CONV_40: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_41: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Single Frame");
    map.insert("10".to_string(), "Remote Commander");
    map.insert("11".to_string(), "Mirror Lock-up");
    map.insert("18".to_string(), "Continuous Low");
    map.insert("2".to_string(), "Continuous High");
    map.insert("24".to_string(), "White Balance Bracketing Low");
    map.insert("25".to_string(), "D-Range Optimizer Bracketing Low");
    map.insert("4".to_string(), "Self-timer 10 sec");
    map.insert("40".to_string(), "White Balance Bracketing High");
    map.insert("41".to_string(), "D-Range Optimizer Bracketing High");
    map.insert("5".to_string(), "Self-timer 2 sec, Mirror Lock-up");
    map.insert("6".to_string(), "Single-frame Bracketing");
    map.insert("7".to_string(), "Continuous Bracketing");
    map
});

static PRINT_CONV_42: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("16".to_string(), "Cloudy");
    map.insert("17".to_string(), "Shade");
    map.insert("18".to_string(), "Color Temperature/Color Filter");
    map.insert("2".to_string(), "Auto");
    map.insert("32".to_string(), "Custom 1");
    map.insert("33".to_string(), "Custom 2");
    map.insert("34".to_string(), "Custom 3");
    map.insert("4".to_string(), "Daylight");
    map.insert("5".to_string(), "Fluorescent");
    map.insert("6".to_string(), "Tungsten");
    map.insert("7".to_string(), "Flash");
    map
});

static PRINT_CONV_43: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_44: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("16".to_string(), "Cloudy");
    map.insert("17".to_string(), "Shade");
    map.insert("18".to_string(), "Color Temperature/Color Filter");
    map.insert("2".to_string(), "Auto");
    map.insert("32".to_string(), "Custom 1");
    map.insert("33".to_string(), "Custom 2");
    map.insert("34".to_string(), "Custom 3");
    map.insert("4".to_string(), "Daylight");
    map.insert("5".to_string(), "Fluorescent");
    map.insert("6".to_string(), "Tungsten");
    map.insert("7".to_string(), "Flash");
    map
});

static PRINT_CONV_45: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("4".to_string(), "3:2");
    map.insert("8".to_string(), "16:9");
    map
});

static PRINT_CONV_46: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("113".to_string(), "Continuous Bracketing 0.3 EV");
    map.insert("117".to_string(), "Continuous Bracketing 0.7 EV");
    map.insert("145".to_string(), "White Balance Bracketing Low");
    map.insert("146".to_string(), "White Balance Bracketing High");
    map.insert("16".to_string(), "Single Frame");
    map.insert("192".to_string(), "Remote Commander");
    map.insert("33".to_string(), "Continuous High");
    map.insert("34".to_string(), "Continuous Low");
    map.insert("48".to_string(), "Speed Priority Continuous");
    map.insert("81".to_string(), "Self-timer 10 sec");
    map.insert("82".to_string(), "Self-timer 2 sec, Mirror Lock-up");
    map
});

static PRINT_CONV_47: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Program AE");
    map.insert("128".to_string(), "Toy Camera");
    map.insert("129".to_string(), "Pop Color");
    map.insert("130".to_string(), "Posterization");
    map.insert("131".to_string(), "Posterization B/W");
    map.insert("132".to_string(), "Retro Photo");
    map.insert("133".to_string(), "High-key");
    map.insert("134".to_string(), "Partial Color Red");
    map.insert("135".to_string(), "Partial Color Green");
    map.insert("136".to_string(), "Partial Color Blue");
    map.insert("137".to_string(), "Partial Color Yellow");
    map.insert("138".to_string(), "High Contrast Monochrome");
    map.insert("16".to_string(), "Auto");
    map.insert("17".to_string(), "Auto (no flash)");
    map.insert("18".to_string(), "Auto+");
    map.insert("2".to_string(), "Aperture-priority AE");
    map.insert("3".to_string(), "Shutter speed priority AE");
    map.insert("4".to_string(), "Manual");
    map.insert("49".to_string(), "Portrait");
    map.insert("5".to_string(), "Cont. Priority AE");
    map.insert("50".to_string(), "Landscape");
    map.insert("51".to_string(), "Macro");
    map.insert("52".to_string(), "Sports");
    map.insert("53".to_string(), "Sunset");
    map.insert("54".to_string(), "Night view");
    map.insert("55".to_string(), "Night view/portrait");
    map.insert("56".to_string(), "Handheld Night Shot");
    map.insert("57".to_string(), "3D Sweep Panorama");
    map.insert("64".to_string(), "Auto 2");
    map.insert("65".to_string(), "Auto 2 (no flash)");
    map.insert("80".to_string(), "Sweep Panorama");
    map.insert("96".to_string(), "Anti Motion Blur");
    map
});

static PRINT_CONV_48: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("17".to_string(), "AF-S");
    map.insert("18".to_string(), "AF-C");
    map.insert("19".to_string(), "AF-A");
    map.insert("32".to_string(), "Manual");
    map.insert("48".to_string(), "DMF");
    map
});

static PRINT_CONV_49: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Multi-segment");
    map.insert("2".to_string(), "Center-weighted average");
    map.insert("3".to_string(), "Spot");
    map
});

static PRINT_CONV_50: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("21".to_string(), "Large (3:2)");
    map.insert("22".to_string(), "Medium (3:2)");
    map.insert("23".to_string(), "Small (3:2)");
    map.insert("25".to_string(), "Large (16:9)");
    map.insert("26".to_string(), "Medium (16:9)");
    map.insert("27".to_string(), "Small (16:9)");
    map
});

static PRINT_CONV_51: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("191".to_string(), "On (191)");
    map.insert("207".to_string(), "On (207)");
    map.insert("210".to_string(), "On (210)");
    map.insert("213".to_string(), "On");
    map.insert("246".to_string(), "Off");
    map
});

static PRINT_CONV_52: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_53: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("113".to_string(), "Continuous Bracketing 0.3 EV");
    map.insert("117".to_string(), "Continuous Bracketing 0.7 EV");
    map.insert("145".to_string(), "White Balance Bracketing Low");
    map.insert("146".to_string(), "White Balance Bracketing High");
    map.insert("16".to_string(), "Single Frame");
    map.insert("192".to_string(), "Remote Commander");
    map.insert("33".to_string(), "Continuous High");
    map.insert("34".to_string(), "Continuous Low");
    map.insert("48".to_string(), "Speed Priority Continuous");
    map.insert("81".to_string(), "Self-timer 10 sec");
    map.insert("82".to_string(), "Self-timer 2 sec, Mirror Lock-up");
    map
});

static PRINT_CONV_54: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Program AE");
    map.insert("128".to_string(), "Toy Camera");
    map.insert("129".to_string(), "Pop Color");
    map.insert("130".to_string(), "Posterization");
    map.insert("131".to_string(), "Posterization B/W");
    map.insert("132".to_string(), "Retro Photo");
    map.insert("133".to_string(), "High-key");
    map.insert("134".to_string(), "Partial Color Red");
    map.insert("135".to_string(), "Partial Color Green");
    map.insert("136".to_string(), "Partial Color Blue");
    map.insert("137".to_string(), "Partial Color Yellow");
    map.insert("138".to_string(), "High Contrast Monochrome");
    map.insert("16".to_string(), "Auto");
    map.insert("17".to_string(), "Auto (no flash)");
    map.insert("18".to_string(), "Auto+");
    map.insert("2".to_string(), "Aperture-priority AE");
    map.insert("3".to_string(), "Shutter speed priority AE");
    map.insert("4".to_string(), "Manual");
    map.insert("49".to_string(), "Portrait");
    map.insert("5".to_string(), "Cont. Priority AE");
    map.insert("50".to_string(), "Landscape");
    map.insert("51".to_string(), "Macro");
    map.insert("52".to_string(), "Sports");
    map.insert("53".to_string(), "Sunset");
    map.insert("54".to_string(), "Night view");
    map.insert("55".to_string(), "Night view/portrait");
    map.insert("56".to_string(), "Handheld Night Shot");
    map.insert("57".to_string(), "3D Sweep Panorama");
    map.insert("64".to_string(), "Auto 2");
    map.insert("65".to_string(), "Auto 2 (no flash)");
    map.insert("80".to_string(), "Sweep Panorama");
    map.insert("96".to_string(), "Anti Motion Blur");
    map
});

static PRINT_CONV_55: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Multi-segment");
    map.insert("2".to_string(), "Center-weighted average");
    map.insert("3".to_string(), "Spot");
    map
});

static PRINT_CONV_56: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Off");
    map.insert("16".to_string(), "On (Auto)");
    map.insert("17".to_string(), "On (Manual)");
    map
});

static PRINT_CONV_57: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "sRGB");
    map.insert("2".to_string(), "Adobe RGB");
    map
});

static PRINT_CONV_58: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("16".to_string(), "Standard");
    map.insert("160".to_string(), "Sunset");
    map.insert("32".to_string(), "Vivid");
    map.insert("64".to_string(), "Portrait");
    map.insert("80".to_string(), "Landscape");
    map.insert("96".to_string(), "B&W");
    map
});

static PRINT_CONV_59: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Left or Up");
    map.insert("1".to_string(), "Right or Down");
    map
});

static PRINT_CONV_60: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("2".to_string(), "Bracketing");
    map.insert("4".to_string(), "Continuous - Burst");
    map.insert("5".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("6".to_string(), "Normal - Self-timer");
    map.insert("9".to_string(), "Single Burst Shooting");
    map
});

static PRINT_CONV_61: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_62: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Autoflash");
    map.insert("1".to_string(), "Fill-flash");
    map.insert("2".to_string(), "Flash Off");
    map.insert("3".to_string(), "Slow Sync");
    map.insert("4".to_string(), "Rear Sync");
    map.insert("6".to_string(), "Wireless");
    map
});

static PRINT_CONV_63: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("3".to_string(), "Lv1");
    map.insert("4".to_string(), "Lv2");
    map.insert("5".to_string(), "Lv3");
    map.insert("6".to_string(), "Lv4");
    map.insert("7".to_string(), "Lv5");
    map.insert("8".to_string(), "n/a");
    map
});

static PRINT_CONV_64: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "HDR Auto");
    map.insert("11".to_string(), "HDR 5 EV");
    map.insert("13".to_string(), "HDR 6 EV");
    map.insert("3".to_string(), "HDR 1 EV");
    map.insert("5".to_string(), "HDR 2 EV");
    map.insert("7".to_string(), "HDR 3 EV");
    map.insert("9".to_string(), "HDR 4 EV");
    map
});

static PRINT_CONV_65: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Toy Camera");
    map.insert("10".to_string(), "Rich-tone Monochrome");
    map.insert("11".to_string(), "Miniature");
    map.insert("12".to_string(), "Water Color");
    map.insert("13".to_string(), "Illustration");
    map.insert("2".to_string(), "Pop Color");
    map.insert("3".to_string(), "Posterization");
    map.insert("4".to_string(), "Retro Photo");
    map.insert("5".to_string(), "Soft High Key");
    map.insert("6".to_string(), "Partial Color");
    map.insert("7".to_string(), "High Contrast Monochrome");
    map.insert("8".to_string(), "Soft Focus");
    map.insert("9".to_string(), "HDR Painting");
    map
});

static PRINT_CONV_66: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "JPEG");
    map.insert("1".to_string(), "RAW");
    map.insert("2".to_string(), "RAW + JPEG");
    map
});

static PRINT_CONV_67: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Multi-segment");
    map.insert("2".to_string(), "Center-weighted average");
    map.insert("3".to_string(), "Spot");
    map.insert("4".to_string(), "Average");
    map.insert("5".to_string(), "Highlight");
    map
});

static PRINT_CONV_68: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Program AE");
    map.insert("1".to_string(), "Aperture-priority AE");
    map.insert("10".to_string(), "Twilight");
    map.insert("11".to_string(), "Twilight Portrait");
    map.insert("12".to_string(), "Sunset");
    map.insert("14".to_string(), "Action (High speed)");
    map.insert("16".to_string(), "Sports");
    map.insert("17".to_string(), "Handheld Night Shot");
    map.insert("18".to_string(), "Anti Motion Blur");
    map.insert("19".to_string(), "High Sensitivity");
    map.insert("2".to_string(), "Shutter speed priority AE");
    map.insert("21".to_string(), "Beach");
    map.insert("22".to_string(), "Snow");
    map.insert("23".to_string(), "Fireworks");
    map.insert("26".to_string(), "Underwater");
    map.insert("27".to_string(), "Gourmet");
    map.insert("28".to_string(), "Pet");
    map.insert("29".to_string(), "Macro");
    map.insert("3".to_string(), "Manual");
    map.insert("30".to_string(), "Backlight Correction HDR");
    map.insert("33".to_string(), "Sweep Panorama");
    map.insert("36".to_string(), "Background Defocus");
    map.insert("37".to_string(), "Soft Skin");
    map.insert("4".to_string(), "Auto");
    map.insert("42".to_string(), "3D Image");
    map.insert("43".to_string(), "Cont. Priority AE");
    map.insert("45".to_string(), "Document");
    map.insert("46".to_string(), "Party");
    map.insert("5".to_string(), "iAuto");
    map.insert("6".to_string(), "Superior Auto");
    map.insert("7".to_string(), "iAuto+");
    map.insert("8".to_string(), "Portrait");
    map.insert("9".to_string(), "Landscape");
    map
});

static PRINT_CONV_69: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("2".to_string(), "Bracketing");
    map.insert("4".to_string(), "Continuous - Burst");
    map.insert("5".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("6".to_string(), "Normal - Self-timer");
    map.insert("9".to_string(), "Single Burst Shooting");
    map
});

static PRINT_CONV_70: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_71: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Autoflash");
    map.insert("1".to_string(), "Fill-flash");
    map.insert("2".to_string(), "Flash Off");
    map.insert("3".to_string(), "Slow Sync");
    map.insert("4".to_string(), "Rear Sync");
    map.insert("6".to_string(), "Wireless");
    map
});

static PRINT_CONV_72: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("3".to_string(), "Lv1");
    map.insert("4".to_string(), "Lv2");
    map.insert("5".to_string(), "Lv3");
    map.insert("6".to_string(), "Lv4");
    map.insert("7".to_string(), "Lv5");
    map.insert("8".to_string(), "n/a");
    map
});

static PRINT_CONV_73: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "HDR Auto");
    map.insert("11".to_string(), "HDR 5 EV");
    map.insert("13".to_string(), "HDR 6 EV");
    map.insert("3".to_string(), "HDR 1 EV");
    map.insert("5".to_string(), "HDR 2 EV");
    map.insert("7".to_string(), "HDR 3 EV");
    map.insert("9".to_string(), "HDR 4 EV");
    map
});

static PRINT_CONV_74: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Toy Camera");
    map.insert("10".to_string(), "Rich-tone Monochrome");
    map.insert("11".to_string(), "Miniature");
    map.insert("12".to_string(), "Water Color");
    map.insert("13".to_string(), "Illustration");
    map.insert("2".to_string(), "Pop Color");
    map.insert("3".to_string(), "Posterization");
    map.insert("4".to_string(), "Retro Photo");
    map.insert("5".to_string(), "Soft High Key");
    map.insert("6".to_string(), "Partial Color");
    map.insert("7".to_string(), "High Contrast Monochrome");
    map.insert("8".to_string(), "Soft Focus");
    map.insert("9".to_string(), "HDR Painting");
    map
});

static PRINT_CONV_75: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "JPEG");
    map.insert("1".to_string(), "RAW");
    map.insert("2".to_string(), "RAW + JPEG");
    map
});

static PRINT_CONV_76: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Multi-segment");
    map.insert("2".to_string(), "Center-weighted average");
    map.insert("3".to_string(), "Spot");
    map.insert("4".to_string(), "Average");
    map.insert("5".to_string(), "Highlight");
    map
});

static PRINT_CONV_77: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Program AE");
    map.insert("1".to_string(), "Aperture-priority AE");
    map.insert("10".to_string(), "Twilight");
    map.insert("11".to_string(), "Twilight Portrait");
    map.insert("12".to_string(), "Sunset");
    map.insert("14".to_string(), "Action (High speed)");
    map.insert("16".to_string(), "Sports");
    map.insert("17".to_string(), "Handheld Night Shot");
    map.insert("18".to_string(), "Anti Motion Blur");
    map.insert("19".to_string(), "High Sensitivity");
    map.insert("2".to_string(), "Shutter speed priority AE");
    map.insert("21".to_string(), "Beach");
    map.insert("22".to_string(), "Snow");
    map.insert("23".to_string(), "Fireworks");
    map.insert("26".to_string(), "Underwater");
    map.insert("27".to_string(), "Gourmet");
    map.insert("28".to_string(), "Pet");
    map.insert("29".to_string(), "Macro");
    map.insert("3".to_string(), "Manual");
    map.insert("30".to_string(), "Backlight Correction HDR");
    map.insert("33".to_string(), "Sweep Panorama");
    map.insert("36".to_string(), "Background Defocus");
    map.insert("37".to_string(), "Soft Skin");
    map.insert("4".to_string(), "Auto");
    map.insert("42".to_string(), "3D Image");
    map.insert("43".to_string(), "Cont. Priority AE");
    map.insert("45".to_string(), "Document");
    map.insert("46".to_string(), "Party");
    map.insert("5".to_string(), "iAuto");
    map.insert("6".to_string(), "Superior Auto");
    map.insert("7".to_string(), "iAuto+");
    map.insert("8".to_string(), "Portrait");
    map.insert("9".to_string(), "Landscape");
    map
});

static PRINT_CONV_78: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_79: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("2".to_string(), "Bracketing");
    map.insert("4".to_string(), "Continuous - Burst");
    map.insert("5".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("6".to_string(), "Normal - Self-timer");
    map.insert("9".to_string(), "Single Burst Shooting");
    map
});

static PRINT_CONV_80: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_81: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Autoflash");
    map.insert("1".to_string(), "Fill-flash");
    map.insert("2".to_string(), "Flash Off");
    map.insert("3".to_string(), "Slow Sync");
    map.insert("4".to_string(), "Rear Sync");
    map.insert("6".to_string(), "Wireless");
    map
});

static PRINT_CONV_82: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("3".to_string(), "Lv1");
    map.insert("4".to_string(), "Lv2");
    map.insert("5".to_string(), "Lv3");
    map.insert("6".to_string(), "Lv4");
    map.insert("7".to_string(), "Lv5");
    map.insert("8".to_string(), "n/a");
    map
});

static PRINT_CONV_83: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "HDR Auto");
    map.insert("11".to_string(), "HDR 5 EV");
    map.insert("13".to_string(), "HDR 6 EV");
    map.insert("3".to_string(), "HDR 1 EV");
    map.insert("5".to_string(), "HDR 2 EV");
    map.insert("7".to_string(), "HDR 3 EV");
    map.insert("9".to_string(), "HDR 4 EV");
    map
});

static PRINT_CONV_84: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Toy Camera");
    map.insert("10".to_string(), "Rich-tone Monochrome");
    map.insert("11".to_string(), "Miniature");
    map.insert("12".to_string(), "Water Color");
    map.insert("13".to_string(), "Illustration");
    map.insert("2".to_string(), "Pop Color");
    map.insert("3".to_string(), "Posterization");
    map.insert("4".to_string(), "Retro Photo");
    map.insert("5".to_string(), "Soft High Key");
    map.insert("6".to_string(), "Partial Color");
    map.insert("7".to_string(), "High Contrast Monochrome");
    map.insert("8".to_string(), "Soft Focus");
    map.insert("9".to_string(), "HDR Painting");
    map
});

static PRINT_CONV_85: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "JPEG");
    map.insert("1".to_string(), "RAW");
    map.insert("2".to_string(), "RAW + JPEG");
    map
});

static PRINT_CONV_86: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Multi-segment");
    map.insert("2".to_string(), "Center-weighted average");
    map.insert("3".to_string(), "Spot");
    map.insert("4".to_string(), "Average");
    map.insert("5".to_string(), "Highlight");
    map
});

static PRINT_CONV_87: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Program AE");
    map.insert("1".to_string(), "Aperture-priority AE");
    map.insert("10".to_string(), "Twilight");
    map.insert("11".to_string(), "Twilight Portrait");
    map.insert("12".to_string(), "Sunset");
    map.insert("14".to_string(), "Action (High speed)");
    map.insert("16".to_string(), "Sports");
    map.insert("17".to_string(), "Handheld Night Shot");
    map.insert("18".to_string(), "Anti Motion Blur");
    map.insert("19".to_string(), "High Sensitivity");
    map.insert("2".to_string(), "Shutter speed priority AE");
    map.insert("21".to_string(), "Beach");
    map.insert("22".to_string(), "Snow");
    map.insert("23".to_string(), "Fireworks");
    map.insert("26".to_string(), "Underwater");
    map.insert("27".to_string(), "Gourmet");
    map.insert("28".to_string(), "Pet");
    map.insert("29".to_string(), "Macro");
    map.insert("3".to_string(), "Manual");
    map.insert("30".to_string(), "Backlight Correction HDR");
    map.insert("33".to_string(), "Sweep Panorama");
    map.insert("36".to_string(), "Background Defocus");
    map.insert("37".to_string(), "Soft Skin");
    map.insert("4".to_string(), "Auto");
    map.insert("42".to_string(), "3D Image");
    map.insert("43".to_string(), "Cont. Priority AE");
    map.insert("45".to_string(), "Document");
    map.insert("46".to_string(), "Party");
    map.insert("5".to_string(), "iAuto");
    map.insert("6".to_string(), "Superior Auto");
    map.insert("7".to_string(), "iAuto+");
    map.insert("8".to_string(), "Portrait");
    map.insert("9".to_string(), "Landscape");
    map
});

static PRINT_CONV_88: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_89: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("2".to_string(), "Bracketing");
    map.insert("4".to_string(), "Continuous - Burst");
    map.insert("5".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("6".to_string(), "Normal - Self-timer");
    map.insert("9".to_string(), "Single Burst Shooting");
    map
});

static PRINT_CONV_90: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_91: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Autoflash");
    map.insert("1".to_string(), "Fill-flash");
    map.insert("2".to_string(), "Flash Off");
    map.insert("3".to_string(), "Slow Sync");
    map.insert("4".to_string(), "Rear Sync");
    map.insert("6".to_string(), "Wireless");
    map
});

static PRINT_CONV_92: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("3".to_string(), "Lv1");
    map.insert("4".to_string(), "Lv2");
    map.insert("5".to_string(), "Lv3");
    map.insert("6".to_string(), "Lv4");
    map.insert("7".to_string(), "Lv5");
    map.insert("8".to_string(), "n/a");
    map
});

static PRINT_CONV_93: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "HDR Auto");
    map.insert("11".to_string(), "HDR 5 EV");
    map.insert("13".to_string(), "HDR 6 EV");
    map.insert("3".to_string(), "HDR 1 EV");
    map.insert("5".to_string(), "HDR 2 EV");
    map.insert("7".to_string(), "HDR 3 EV");
    map.insert("9".to_string(), "HDR 4 EV");
    map
});

static PRINT_CONV_94: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Toy Camera");
    map.insert("10".to_string(), "Rich-tone Monochrome");
    map.insert("11".to_string(), "Miniature");
    map.insert("12".to_string(), "Water Color");
    map.insert("13".to_string(), "Illustration");
    map.insert("2".to_string(), "Pop Color");
    map.insert("3".to_string(), "Posterization");
    map.insert("4".to_string(), "Retro Photo");
    map.insert("5".to_string(), "Soft High Key");
    map.insert("6".to_string(), "Partial Color");
    map.insert("7".to_string(), "High Contrast Monochrome");
    map.insert("8".to_string(), "Soft Focus");
    map.insert("9".to_string(), "HDR Painting");
    map
});

static PRINT_CONV_95: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Multi-segment");
    map.insert("2".to_string(), "Center-weighted average");
    map.insert("3".to_string(), "Spot");
    map.insert("4".to_string(), "Average");
    map.insert("5".to_string(), "Highlight");
    map
});

static PRINT_CONV_96: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Program AE");
    map.insert("1".to_string(), "Aperture-priority AE");
    map.insert("10".to_string(), "Twilight");
    map.insert("11".to_string(), "Twilight Portrait");
    map.insert("12".to_string(), "Sunset");
    map.insert("14".to_string(), "Action (High speed)");
    map.insert("16".to_string(), "Sports");
    map.insert("17".to_string(), "Handheld Night Shot");
    map.insert("18".to_string(), "Anti Motion Blur");
    map.insert("19".to_string(), "High Sensitivity");
    map.insert("2".to_string(), "Shutter speed priority AE");
    map.insert("21".to_string(), "Beach");
    map.insert("22".to_string(), "Snow");
    map.insert("23".to_string(), "Fireworks");
    map.insert("26".to_string(), "Underwater");
    map.insert("27".to_string(), "Gourmet");
    map.insert("28".to_string(), "Pet");
    map.insert("29".to_string(), "Macro");
    map.insert("3".to_string(), "Manual");
    map.insert("30".to_string(), "Backlight Correction HDR");
    map.insert("33".to_string(), "Sweep Panorama");
    map.insert("36".to_string(), "Background Defocus");
    map.insert("37".to_string(), "Soft Skin");
    map.insert("4".to_string(), "Auto");
    map.insert("42".to_string(), "3D Image");
    map.insert("43".to_string(), "Cont. Priority AE");
    map.insert("45".to_string(), "Document");
    map.insert("46".to_string(), "Party");
    map.insert("5".to_string(), "iAuto");
    map.insert("6".to_string(), "Superior Auto");
    map.insert("7".to_string(), "iAuto+");
    map.insert("8".to_string(), "Portrait");
    map.insert("9".to_string(), "Landscape");
    map
});

static PRINT_CONV_97: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_98: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("2".to_string(), "Bracketing");
    map.insert("4".to_string(), "Continuous - Burst");
    map.insert("5".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("6".to_string(), "Normal - Self-timer");
    map.insert("9".to_string(), "Single Burst Shooting");
    map
});

static PRINT_CONV_99: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_100: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Autoflash");
    map.insert("1".to_string(), "Fill-flash");
    map.insert("2".to_string(), "Flash Off");
    map.insert("3".to_string(), "Slow Sync");
    map.insert("4".to_string(), "Rear Sync");
    map.insert("6".to_string(), "Wireless");
    map
});

static PRINT_CONV_101: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("3".to_string(), "Lv1");
    map.insert("4".to_string(), "Lv2");
    map.insert("5".to_string(), "Lv3");
    map.insert("6".to_string(), "Lv4");
    map.insert("7".to_string(), "Lv5");
    map.insert("8".to_string(), "n/a");
    map
});

static PRINT_CONV_102: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "HDR Auto");
    map.insert("11".to_string(), "HDR 5 EV");
    map.insert("13".to_string(), "HDR 6 EV");
    map.insert("3".to_string(), "HDR 1 EV");
    map.insert("5".to_string(), "HDR 2 EV");
    map.insert("7".to_string(), "HDR 3 EV");
    map.insert("9".to_string(), "HDR 4 EV");
    map
});

static PRINT_CONV_103: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Toy Camera");
    map.insert("10".to_string(), "Rich-tone Monochrome");
    map.insert("11".to_string(), "Miniature");
    map.insert("12".to_string(), "Water Color");
    map.insert("13".to_string(), "Illustration");
    map.insert("2".to_string(), "Pop Color");
    map.insert("3".to_string(), "Posterization");
    map.insert("4".to_string(), "Retro Photo");
    map.insert("5".to_string(), "Soft High Key");
    map.insert("6".to_string(), "Partial Color");
    map.insert("7".to_string(), "High Contrast Monochrome");
    map.insert("8".to_string(), "Soft Focus");
    map.insert("9".to_string(), "HDR Painting");
    map
});

static PRINT_CONV_104: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "JPEG");
    map.insert("1".to_string(), "RAW");
    map.insert("2".to_string(), "RAW + JPEG");
    map
});

static PRINT_CONV_105: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Multi-segment");
    map.insert("2".to_string(), "Center-weighted average");
    map.insert("3".to_string(), "Spot");
    map.insert("4".to_string(), "Average");
    map.insert("5".to_string(), "Highlight");
    map
});

static PRINT_CONV_106: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Program AE");
    map.insert("1".to_string(), "Aperture-priority AE");
    map.insert("10".to_string(), "Twilight");
    map.insert("11".to_string(), "Twilight Portrait");
    map.insert("12".to_string(), "Sunset");
    map.insert("14".to_string(), "Action (High speed)");
    map.insert("16".to_string(), "Sports");
    map.insert("17".to_string(), "Handheld Night Shot");
    map.insert("18".to_string(), "Anti Motion Blur");
    map.insert("19".to_string(), "High Sensitivity");
    map.insert("2".to_string(), "Shutter speed priority AE");
    map.insert("21".to_string(), "Beach");
    map.insert("22".to_string(), "Snow");
    map.insert("23".to_string(), "Fireworks");
    map.insert("26".to_string(), "Underwater");
    map.insert("27".to_string(), "Gourmet");
    map.insert("28".to_string(), "Pet");
    map.insert("29".to_string(), "Macro");
    map.insert("3".to_string(), "Manual");
    map.insert("30".to_string(), "Backlight Correction HDR");
    map.insert("33".to_string(), "Sweep Panorama");
    map.insert("36".to_string(), "Background Defocus");
    map.insert("37".to_string(), "Soft Skin");
    map.insert("4".to_string(), "Auto");
    map.insert("42".to_string(), "3D Image");
    map.insert("43".to_string(), "Cont. Priority AE");
    map.insert("45".to_string(), "Document");
    map.insert("46".to_string(), "Party");
    map.insert("5".to_string(), "iAuto");
    map.insert("6".to_string(), "Superior Auto");
    map.insert("7".to_string(), "iAuto+");
    map.insert("8".to_string(), "Portrait");
    map.insert("9".to_string(), "Landscape");
    map
});

static PRINT_CONV_107: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_108: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_109: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("2".to_string(), "Bracketing");
    map.insert("4".to_string(), "Continuous - Burst");
    map.insert("5".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("6".to_string(), "Normal - Self-timer");
    map.insert("9".to_string(), "Single Burst Shooting");
    map
});

static PRINT_CONV_110: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_111: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Autoflash");
    map.insert("1".to_string(), "Fill-flash");
    map.insert("2".to_string(), "Flash Off");
    map.insert("3".to_string(), "Slow Sync");
    map.insert("4".to_string(), "Rear Sync");
    map.insert("6".to_string(), "Wireless");
    map
});

static PRINT_CONV_112: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("3".to_string(), "Lv1");
    map.insert("4".to_string(), "Lv2");
    map.insert("5".to_string(), "Lv3");
    map.insert("6".to_string(), "Lv4");
    map.insert("7".to_string(), "Lv5");
    map.insert("8".to_string(), "n/a");
    map
});

static PRINT_CONV_113: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "HDR Auto");
    map.insert("11".to_string(), "HDR 5 EV");
    map.insert("13".to_string(), "HDR 6 EV");
    map.insert("3".to_string(), "HDR 1 EV");
    map.insert("5".to_string(), "HDR 2 EV");
    map.insert("7".to_string(), "HDR 3 EV");
    map.insert("9".to_string(), "HDR 4 EV");
    map
});

static PRINT_CONV_114: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Toy Camera");
    map.insert("10".to_string(), "Rich-tone Monochrome");
    map.insert("11".to_string(), "Miniature");
    map.insert("12".to_string(), "Water Color");
    map.insert("13".to_string(), "Illustration");
    map.insert("2".to_string(), "Pop Color");
    map.insert("3".to_string(), "Posterization");
    map.insert("4".to_string(), "Retro Photo");
    map.insert("5".to_string(), "Soft High Key");
    map.insert("6".to_string(), "Partial Color");
    map.insert("7".to_string(), "High Contrast Monochrome");
    map.insert("8".to_string(), "Soft Focus");
    map.insert("9".to_string(), "HDR Painting");
    map
});

static PRINT_CONV_115: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "JPEG");
    map.insert("1".to_string(), "RAW");
    map.insert("2".to_string(), "RAW + JPEG");
    map
});

static PRINT_CONV_116: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Multi-segment");
    map.insert("2".to_string(), "Center-weighted average");
    map.insert("3".to_string(), "Spot");
    map.insert("4".to_string(), "Average");
    map.insert("5".to_string(), "Highlight");
    map
});

static PRINT_CONV_117: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Program AE");
    map.insert("1".to_string(), "Aperture-priority AE");
    map.insert("10".to_string(), "Twilight");
    map.insert("11".to_string(), "Twilight Portrait");
    map.insert("12".to_string(), "Sunset");
    map.insert("14".to_string(), "Action (High speed)");
    map.insert("16".to_string(), "Sports");
    map.insert("17".to_string(), "Handheld Night Shot");
    map.insert("18".to_string(), "Anti Motion Blur");
    map.insert("19".to_string(), "High Sensitivity");
    map.insert("2".to_string(), "Shutter speed priority AE");
    map.insert("21".to_string(), "Beach");
    map.insert("22".to_string(), "Snow");
    map.insert("23".to_string(), "Fireworks");
    map.insert("26".to_string(), "Underwater");
    map.insert("27".to_string(), "Gourmet");
    map.insert("28".to_string(), "Pet");
    map.insert("29".to_string(), "Macro");
    map.insert("3".to_string(), "Manual");
    map.insert("30".to_string(), "Backlight Correction HDR");
    map.insert("33".to_string(), "Sweep Panorama");
    map.insert("36".to_string(), "Background Defocus");
    map.insert("37".to_string(), "Soft Skin");
    map.insert("4".to_string(), "Auto");
    map.insert("42".to_string(), "3D Image");
    map.insert("43".to_string(), "Cont. Priority AE");
    map.insert("45".to_string(), "Document");
    map.insert("46".to_string(), "Party");
    map.insert("5".to_string(), "iAuto");
    map.insert("6".to_string(), "Superior Auto");
    map.insert("7".to_string(), "iAuto+");
    map.insert("8".to_string(), "Portrait");
    map.insert("9".to_string(), "Landscape");
    map
});

static PRINT_CONV_118: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_119: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_120: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_121: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0");
    map.insert("115".to_string(), "8");
    map.insert("168".to_string(), "6");
    map.insert("241".to_string(), "7");
    map.insert("33".to_string(), "5");
    map.insert("57".to_string(), "2");
    map.insert("77".to_string(), "4");
    map.insert("93".to_string(), "3");
    map.insert("98".to_string(), "1");
    map
});

static PRINT_CONV_122: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_123: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "(none)");
    map.insert("2147483647".to_string(), "(all)");
    map.insert("262143".to_string(), "(all LA-EA4)");
    map.insert("30721".to_string(), "Center Zone");
    map.insert("394688".to_string(), "Left Zone");
    map.insert("4294967295".to_string(), "n/a");
    map.insert("98844".to_string(), "Right Zone");
    map
});

static PRINT_CONV_124: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Unknown");
    map.insert("1".to_string(), "A-mount (1)");
    map.insert("4".to_string(), "E-mount");
    map.insert("5".to_string(), "A-mount (5)");
    map
});

static PRINT_CONV_125: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Unknown E-mount lens or other lens");
    map.insert("0.1".to_string(), "Sigma 19mm F2.8 [EX] DN");
    map.insert("0.10".to_string(), "Zeiss Touit 50mm F2.8 Macro");
    map.insert("0.11".to_string(), "Zeiss Loxia 50mm F2");
    map.insert("0.12".to_string(), "Zeiss Loxia 35mm F2");
    map.insert("0.13".to_string(), "Viltrox 85mm F1.8");
    map.insert("0.2".to_string(), "Sigma 30mm F2.8 [EX] DN");
    map.insert("0.3".to_string(), "Sigma 60mm F2.8 DN");
    map.insert("0.4".to_string(), "Sony E 18-200mm F3.5-6.3 OSS LE");
    map.insert("0.5".to_string(), "Tamron 18-200mm F3.5-6.3 Di III VC");
    map.insert("0.6".to_string(), "Tokina FiRIN 20mm F2 FE AF");
    map.insert("0.7".to_string(), "Tokina FiRIN 20mm F2 FE MF");
    map.insert("0.8".to_string(), "Zeiss Touit 12mm F2.8");
    map.insert("0.9".to_string(), "Zeiss Touit 32mm F1.8");
    map.insert("1".to_string(), "Sony LA-EA1 or Sigma MC-11 Adapter");
    map.insert("13".to_string(), "Samyang AF 35-150mm F2-2.8");
    map.insert("184".to_string(), "Metabones Canon EF Speed Booster Ultra");
    map.insert("2".to_string(), "Sony LA-EA2 Adapter");
    map.insert("20".to_string(), "Samyang AF 35mm F1.4 P FE");
    map.insert("21".to_string(), "Samyang AF 14-24mm F2.8");
    map.insert(
        "234".to_string(),
        "Metabones Canon EF Smart Adapter Mark IV",
    );
    map.insert("239".to_string(), "Metabones Canon EF Speed Booster");
    map.insert("24593".to_string(), "LA-EA4r MonsterAdapter");
    map.insert("3".to_string(), "Sony LA-EA3 Adapter");
    map.insert("32784".to_string(), "Sony E 16mm F2.8");
    map.insert("32785".to_string(), "Sony E 18-55mm F3.5-5.6 OSS");
    map.insert("32786".to_string(), "Sony E 55-210mm F4.5-6.3 OSS");
    map.insert("32787".to_string(), "Sony E 18-200mm F3.5-6.3 OSS");
    map.insert("32788".to_string(), "Sony E 30mm F3.5 Macro");
    map.insert(
        "32789".to_string(),
        "Sony E 24mm F1.8 ZA or Samyang AF 50mm F1.4",
    );
    map.insert("32789.1".to_string(), "Samyang AF 50mm F1.4");
    map.insert(
        "32790".to_string(),
        "Sony E 50mm F1.8 OSS or Samyang AF 14mm F2.8",
    );
    map.insert("32790.1".to_string(), "Samyang AF 14mm F2.8");
    map.insert("32791".to_string(), "Sony E 16-70mm F4 ZA OSS");
    map.insert("32792".to_string(), "Sony E 10-18mm F4 OSS");
    map.insert("32793".to_string(), "Sony E PZ 16-50mm F3.5-5.6 OSS");
    map.insert("32794".to_string(), "Sony FE 35mm F2.8 ZA or Samyang Lens");
    map.insert("32794.1".to_string(), "Samyang AF 24mm F2.8");
    map.insert("32794.2".to_string(), "Samyang AF 35mm F2.8");
    map.insert("32795".to_string(), "Sony FE 24-70mm F4 ZA OSS");
    map.insert(
        "32796".to_string(),
        "Sony FE 85mm F1.8 or Viltrox PFU RBMH 85mm F1.8",
    );
    map.insert("32796.1".to_string(), "Viltrox PFU RBMH 85mm F1.8");
    map.insert("32797".to_string(), "Sony E 18-200mm F3.5-6.3 OSS LE");
    map.insert("32798".to_string(), "Sony E 20mm F2.8");
    map.insert("32799".to_string(), "Sony E 35mm F1.8 OSS");
    map.insert("32800".to_string(), "Sony E PZ 18-105mm F4 G OSS");
    map.insert("32801".to_string(), "Sony FE 12-24mm F4 G");
    map.insert("32802".to_string(), "Sony FE 90mm F2.8 Macro G OSS");
    map.insert("32803".to_string(), "Sony E 18-50mm F4-5.6");
    map.insert("32804".to_string(), "Sony FE 24mm F1.4 GM");
    map.insert("32805".to_string(), "Sony FE 24-105mm F4 G OSS");
    map.insert("32807".to_string(), "Sony E PZ 18-200mm F3.5-6.3 OSS");
    map.insert("32808".to_string(), "Sony FE 55mm F1.8 ZA");
    map.insert("32810".to_string(), "Sony FE 70-200mm F4 G OSS");
    map.insert("32811".to_string(), "Sony FE 16-35mm F4 ZA OSS");
    map.insert("32812".to_string(), "Sony FE 50mm F2.8 Macro");
    map.insert("32813".to_string(), "Sony FE 28-70mm F3.5-5.6 OSS");
    map.insert("32814".to_string(), "Sony FE 35mm F1.4 ZA");
    map.insert("32815".to_string(), "Sony FE 24-240mm F3.5-6.3 OSS");
    map.insert("32816".to_string(), "Sony FE 28mm F2");
    map.insert("32817".to_string(), "Sony FE PZ 28-135mm F4 G OSS");
    map.insert("32819".to_string(), "Sony FE 100mm F2.8 STF GM OSS");
    map.insert("32820".to_string(), "Sony E PZ 18-110mm F4 G OSS");
    map.insert("32821".to_string(), "Sony FE 24-70mm F2.8 GM");
    map.insert("32822".to_string(), "Sony FE 50mm F1.4 ZA");
    map.insert(
        "32823".to_string(),
        "Sony FE 85mm F1.4 GM or Samyang AF 85mm F1.4",
    );
    map.insert("32823.1".to_string(), "Samyang AF 85mm F1.4");
    map.insert("32824".to_string(), "Sony FE 50mm F1.8");
    map.insert(
        "32826".to_string(),
        "Sony FE 21mm F2.8 (SEL28F20 + SEL075UWC)",
    );
    map.insert(
        "32827".to_string(),
        "Sony FE 16mm F3.5 Fisheye (SEL28F20 + SEL057FEC)",
    );
    map.insert("32828".to_string(), "Sony FE 70-300mm F4.5-5.6 G OSS");
    map.insert("32829".to_string(), "Sony FE 100-400mm F4.5-5.6 GM OSS");
    map.insert("32830".to_string(), "Sony FE 70-200mm F2.8 GM OSS");
    map.insert("32831".to_string(), "Sony FE 16-35mm F2.8 GM");
    map.insert("32848".to_string(), "Sony FE 400mm F2.8 GM OSS");
    map.insert("32849".to_string(), "Sony E 18-135mm F3.5-5.6 OSS");
    map.insert("32850".to_string(), "Sony FE 135mm F1.8 GM");
    map.insert("32851".to_string(), "Sony FE 200-600mm F5.6-6.3 G OSS");
    map.insert("32852".to_string(), "Sony FE 600mm F4 GM OSS");
    map.insert("32853".to_string(), "Sony E 16-55mm F2.8 G");
    map.insert("32854".to_string(), "Sony E 70-350mm F4.5-6.3 G OSS");
    map.insert("32855".to_string(), "Sony FE C 16-35mm T3.1 G");
    map.insert("32858".to_string(), "Sony FE 35mm F1.8");
    map.insert("32859".to_string(), "Sony FE 20mm F1.8 G");
    map.insert("32860".to_string(), "Sony FE 12-24mm F2.8 GM");
    map.insert("32862".to_string(), "Sony FE 50mm F1.2 GM");
    map.insert("32863".to_string(), "Sony FE 14mm F1.8 GM");
    map.insert("32864".to_string(), "Sony FE 28-60mm F4-5.6");
    map.insert("32865".to_string(), "Sony FE 35mm F1.4 GM");
    map.insert("32866".to_string(), "Sony FE 24mm F2.8 G");
    map.insert("32867".to_string(), "Sony FE 40mm F2.5 G");
    map.insert("32868".to_string(), "Sony FE 50mm F2.5 G");
    map.insert("32871".to_string(), "Sony FE PZ 16-35mm F4 G");
    map.insert("32873".to_string(), "Sony E PZ 10-20mm F4 G");
    map.insert("32874".to_string(), "Sony FE 70-200mm F2.8 GM OSS II");
    map.insert("32875".to_string(), "Sony FE 24-70mm F2.8 GM II");
    map.insert("32876".to_string(), "Sony E 11mm F1.8");
    map.insert("32877".to_string(), "Sony E 15mm F1.4 G");
    map.insert("32878".to_string(), "Sony FE 20-70mm F4 G");
    map.insert("32879".to_string(), "Sony FE 50mm F1.4 GM");
    map.insert("32880".to_string(), "Sony FE 16mm F1.8 G");
    map.insert("32881".to_string(), "Sony FE 24-50mm F2.8 G");
    map.insert("32882".to_string(), "Sony FE 16-25mm F2.8 G");
    map.insert("32884".to_string(), "Sony FE 70-200mm F4 Macro G OSS II");
    map.insert("32885".to_string(), "Sony FE 16-35mm F2.8 GM II");
    map.insert("32886".to_string(), "Sony FE 300mm F2.8 GM OSS");
    map.insert("32887".to_string(), "Sony E PZ 16-50mm F3.5-5.6 OSS II");
    map.insert("32888".to_string(), "Sony FE 85mm F1.4 GM II");
    map.insert("32889".to_string(), "Sony FE 28-70mm F2 GM");
    map.insert("32890".to_string(), "Sony FE 400-800mm F6.3-8 G OSS");
    map.insert("32891".to_string(), "Sony FE 50-150mm F2 GM");
    map.insert(
        "33072".to_string(),
        "Sony FE 70-200mm F2.8 GM OSS + 1.4X Teleconverter",
    );
    map.insert(
        "33073".to_string(),
        "Sony FE 70-200mm F2.8 GM OSS + 2X Teleconverter",
    );
    map.insert(
        "33076".to_string(),
        "Sony FE 100mm F2.8 STF GM OSS (macro mode)",
    );
    map.insert(
        "33077".to_string(),
        "Sony FE 100-400mm F4.5-5.6 GM OSS + 1.4X Teleconverter",
    );
    map.insert(
        "33078".to_string(),
        "Sony FE 100-400mm F4.5-5.6 GM OSS + 2X Teleconverter",
    );
    map.insert(
        "33079".to_string(),
        "Sony FE 400mm F2.8 GM OSS + 1.4X Teleconverter",
    );
    map.insert(
        "33080".to_string(),
        "Sony FE 400mm F2.8 GM OSS + 2X Teleconverter",
    );
    map.insert(
        "33081".to_string(),
        "Sony FE 200-600mm F5.6-6.3 G OSS + 1.4X Teleconverter",
    );
    map.insert(
        "33082".to_string(),
        "Sony FE 200-600mm F5.6-6.3 G OSS + 2X Teleconverter",
    );
    map.insert(
        "33083".to_string(),
        "Sony FE 600mm F4 GM OSS + 1.4X Teleconverter",
    );
    map.insert(
        "33084".to_string(),
        "Sony FE 600mm F4 GM OSS + 2X Teleconverter",
    );
    map.insert(
        "33085".to_string(),
        "Sony FE 70-200mm F2.8 GM OSS II + 1.4X Teleconverter",
    );
    map.insert(
        "33086".to_string(),
        "Sony FE 70-200mm F2.8 GM OSS II + 2X Teleconverter",
    );
    map.insert(
        "33087".to_string(),
        "Sony FE 70-200mm F4 Macro G OSS II + 1.4X Teleconverter",
    );
    map.insert(
        "33088".to_string(),
        "Sony FE 70-200mm F4 Macro G OSS II + 2X Teleconverter",
    );
    map.insert(
        "33089".to_string(),
        "Sony FE 300mm F2.8 GM OSS + 1.4X Teleconverter",
    );
    map.insert(
        "33090".to_string(),
        "Sony FE 300mm F2.8 GM OSS + 2X Teleconverter",
    );
    map.insert(
        "33091".to_string(),
        "Sony FE 400-800mm F6.3-8 G OSS + 1.4X Teleconverter",
    );
    map.insert(
        "33092".to_string(),
        "Sony FE 400-800mm F6.3-8 G OSS + 2X Teleconverter",
    );
    map.insert("44".to_string(), "Metabones Canon EF Smart Adapter");
    map.insert(
        "49201".to_string(),
        "Zeiss Touit 12mm F2.8 or other Touit lens",
    );
    map.insert("49201.1".to_string(), "Zeiss Touit 32mm F1.8");
    map.insert("49201.2".to_string(), "Zeiss Touit 50mm F2.8");
    map.insert("49202".to_string(), "Zeiss Touit 32mm F1.8");
    map.insert("49203".to_string(), "Zeiss Touit 50mm F2.8 Macro");
    map.insert("49216".to_string(), "Zeiss Batis 25mm F2");
    map.insert("49217".to_string(), "Zeiss Batis 85mm F1.8");
    map.insert("49218".to_string(), "Zeiss Batis 18mm F2.8");
    map.insert("49219".to_string(), "Zeiss Batis 135mm F2.8");
    map.insert("49220".to_string(), "Zeiss Batis 40mm F2 CF");
    map.insert("49232".to_string(), "Zeiss Loxia 50mm F2");
    map.insert("49233".to_string(), "Zeiss Loxia 35mm F2");
    map.insert("49234".to_string(), "Zeiss Loxia 21mm F2.8");
    map.insert("49235".to_string(), "Zeiss Loxia 85mm F2.4");
    map.insert("49236".to_string(), "Zeiss Loxia 25mm F2.4");
    map.insert("49456".to_string(), "Tamron E 18-200mm F3.5-6.3 Di III VC");
    map.insert("49457".to_string(), "Tamron 28-75mm F2.8 Di III RXD");
    map.insert("49458".to_string(), "Tamron 17-28mm F2.8 Di III RXD");
    map.insert("49459".to_string(), "Tamron 35mm F2.8 Di III OSD M1:2");
    map.insert("49460".to_string(), "Tamron 24mm F2.8 Di III OSD M1:2");
    map.insert("49461".to_string(), "Tamron 20mm F2.8 Di III OSD M1:2");
    map.insert("49462".to_string(), "Tamron 70-180mm F2.8 Di III VXD");
    map.insert("49463".to_string(), "Tamron 28-200mm F2.8-5.6 Di III RXD");
    map.insert("49464".to_string(), "Tamron 70-300mm F4.5-6.3 Di III RXD");
    map.insert("49465".to_string(), "Tamron 17-70mm F2.8 Di III-A VC RXD");
    map.insert("49466".to_string(), "Tamron 150-500mm F5-6.7 Di III VC VXD");
    map.insert("49467".to_string(), "Tamron 11-20mm F2.8 Di III-A RXD");
    map.insert(
        "49468".to_string(),
        "Tamron 18-300mm F3.5-6.3 Di III-A VC VXD",
    );
    map.insert("49469".to_string(), "Tamron 35-150mm F2-F2.8 Di III VXD");
    map.insert("49470".to_string(), "Tamron 28-75mm F2.8 Di III VXD G2");
    map.insert(
        "49471".to_string(),
        "Tamron 50-400mm F4.5-6.3 Di III VC VXD",
    );
    map.insert("49472".to_string(), "Tamron 20-40mm F2.8 Di III VXD");
    map.insert(
        "49473".to_string(),
        "Tamron 17-50mm F4 Di III VXD or Tokina or Viltrox lens",
    );
    map.insert("49473.1".to_string(), "Tokina atx-m 85mm F1.8 FE");
    map.insert("49473.2".to_string(), "Viltrox 23mm F1.4 E");
    map.insert("49473.3".to_string(), "Viltrox 56mm F1.4 E");
    map.insert("49473.4".to_string(), "Viltrox 85mm F1.8 II FE");
    map.insert(
        "49474".to_string(),
        "Tamron 70-180mm F2.8 Di III VXD G2 or Viltrox lens",
    );
    map.insert("49474.1".to_string(), "Viltrox 13mm F1.4 E");
    map.insert("49474.10".to_string(), "Viltrox 20mm F2.8 FE");
    map.insert("49474.2".to_string(), "Viltrox 16mm F1.8 FE");
    map.insert("49474.3".to_string(), "Viltrox 23mm F1.4 E");
    map.insert("49474.4".to_string(), "Viltrox 24mm F1.8 FE");
    map.insert("49474.5".to_string(), "Viltrox 28mm F1.8 FE");
    map.insert("49474.6".to_string(), "Viltrox 33mm F1.4 E");
    map.insert("49474.7".to_string(), "Viltrox 35mm F1.8 FE");
    map.insert("49474.8".to_string(), "Viltrox 50mm F1.8 FE");
    map.insert("49474.9".to_string(), "Viltrox 75mm F1.2 E");
    map.insert(
        "49475".to_string(),
        "Tamron 50-300mm F4.5-6.3 Di III VC VXD",
    );
    map.insert("49476".to_string(), "Tamron 28-300mm F4-7.1 Di III VC VXD");
    map.insert("49477".to_string(), "Tamron 90mm F2.8 Di III Macro VXD");
    map.insert("49712".to_string(), "Tokina FiRIN 20mm F2 FE AF");
    map.insert("49713".to_string(), "Tokina FiRIN 100mm F2.8 FE MACRO");
    map.insert("49714".to_string(), "Tokina atx-m 11-18mm F2.8 E");
    map.insert("50480".to_string(), "Sigma 30mm F1.4 DC DN | C");
    map.insert("50481".to_string(), "Sigma 50mm F1.4 DG HSM | A");
    map.insert(
        "50482".to_string(),
        "Sigma 18-300mm F3.5-6.3 DC MACRO OS HSM | C + MC-11",
    );
    map.insert("50483".to_string(), "Sigma 18-35mm F1.8 DC HSM | A + MC-11");
    map.insert("50484".to_string(), "Sigma 24-35mm F2 DG HSM | A + MC-11");
    map.insert("50485".to_string(), "Sigma 24mm F1.4 DG HSM | A + MC-11");
    map.insert(
        "50486".to_string(),
        "Sigma 150-600mm F5-6.3 DG OS HSM | C + MC-11",
    );
    map.insert("50487".to_string(), "Sigma 20mm F1.4 DG HSM | A + MC-11");
    map.insert("50488".to_string(), "Sigma 35mm F1.4 DG HSM | A");
    map.insert(
        "50489".to_string(),
        "Sigma 150-600mm F5-6.3 DG OS HSM | S + MC-11",
    );
    map.insert(
        "50490".to_string(),
        "Sigma 120-300mm F2.8 DG OS HSM | S + MC-11",
    );
    map.insert(
        "50492".to_string(),
        "Sigma 24-105mm F4 DG OS HSM | A + MC-11",
    );
    map.insert(
        "50493".to_string(),
        "Sigma 17-70mm F2.8-4 DC MACRO OS HSM | C + MC-11",
    );
    map.insert(
        "50495".to_string(),
        "Sigma 50-100mm F1.8 DC HSM | A + MC-11",
    );
    map.insert("50499".to_string(), "Sigma 85mm F1.4 DG HSM | A");
    map.insert(
        "50501".to_string(),
        "Sigma 100-400mm F5-6.3 DG OS HSM | C + MC-11",
    );
    map.insert("50503".to_string(), "Sigma 16mm F1.4 DC DN | C");
    map.insert("50507".to_string(), "Sigma 105mm F1.4 DG HSM | A");
    map.insert("50508".to_string(), "Sigma 56mm F1.4 DC DN | C");
    map.insert(
        "50512".to_string(),
        "Sigma 70-200mm F2.8 DG OS HSM | S + MC-11",
    );
    map.insert("50513".to_string(), "Sigma 70mm F2.8 DG MACRO | A");
    map.insert("50514".to_string(), "Sigma 45mm F2.8 DG DN | C");
    map.insert("50515".to_string(), "Sigma 35mm F1.2 DG DN | A");
    map.insert("50516".to_string(), "Sigma 14-24mm F2.8 DG DN | A");
    map.insert("50517".to_string(), "Sigma 24-70mm F2.8 DG DN | A");
    map.insert("50518".to_string(), "Sigma 100-400mm F5-6.3 DG DN OS | C");
    map.insert("50521".to_string(), "Sigma 85mm F1.4 DG DN | A");
    map.insert("50522".to_string(), "Sigma 105mm F2.8 DG DN MACRO | A");
    map.insert("50523".to_string(), "Sigma 65mm F2 DG DN | C");
    map.insert("50524".to_string(), "Sigma 35mm F2 DG DN | C");
    map.insert("50525".to_string(), "Sigma 24mm F3.5 DG DN | C");
    map.insert("50526".to_string(), "Sigma 28-70mm F2.8 DG DN | C");
    map.insert("50527".to_string(), "Sigma 150-600mm F5-6.3 DG DN OS | S");
    map.insert("50528".to_string(), "Sigma 35mm F1.4 DG DN | A");
    map.insert("50529".to_string(), "Sigma 90mm F2.8 DG DN | C");
    map.insert("50530".to_string(), "Sigma 24mm F2 DG DN | C");
    map.insert("50531".to_string(), "Sigma 18-50mm F2.8 DC DN | C");
    map.insert("50532".to_string(), "Sigma 20mm F2 DG DN | C");
    map.insert("50533".to_string(), "Sigma 16-28mm F2.8 DG DN | C");
    map.insert("50534".to_string(), "Sigma 20mm F1.4 DG DN | A");
    map.insert("50535".to_string(), "Sigma 24mm F1.4 DG DN | A");
    map.insert("50536".to_string(), "Sigma 60-600mm F4.5-6.3 DG DN OS | S");
    map.insert("50537".to_string(), "Sigma 50mm F2 DG DN | C");
    map.insert("50538".to_string(), "Sigma 17mm F4 DG DN | C");
    map.insert("50539".to_string(), "Sigma 50mm F1.4 DG DN | A");
    map.insert("50540".to_string(), "Sigma 14mm F1.4 DG DN | A");
    map.insert("50543".to_string(), "Sigma 70-200mm F2.8 DG DN OS | S");
    map.insert("50544".to_string(), "Sigma 23mm F1.4 DC DN | C");
    map.insert("50545".to_string(), "Sigma 24-70mm F2.8 DG DN II | A");
    map.insert("50546".to_string(), "Sigma 500mm F5.6 DG DN OS | S");
    map.insert("50547".to_string(), "Sigma 10-18mm F2.8 DC DN | C");
    map.insert(
        "50548".to_string(),
        "Sigma 15mm F1.4 DG DN DIAGONAL FISHEYE | A",
    );
    map.insert("50549".to_string(), "Sigma 50mm F1.2 DG DN | A");
    map.insert("50550".to_string(), "Sigma 28-105mm F2.8 DG DN | A");
    map.insert("50551".to_string(), "Sigma 28-45mm F1.8 DG DN | A");
    map.insert("50553".to_string(), "Sigma 300-600mm F4 DG OS | S");
    map.insert(
        "50992".to_string(),
        "Voigtlander SUPER WIDE-HELIAR 15mm F4.5 III",
    );
    map.insert(
        "50993".to_string(),
        "Voigtlander HELIAR-HYPER WIDE 10mm F5.6",
    );
    map.insert(
        "50994".to_string(),
        "Voigtlander ULTRA WIDE-HELIAR 12mm F5.6 III",
    );
    map.insert(
        "50995".to_string(),
        "Voigtlander MACRO APO-LANTHAR 65mm F2 Aspherical",
    );
    map.insert(
        "50996".to_string(),
        "Voigtlander NOKTON 40mm F1.2 Aspherical",
    );
    map.insert("50997".to_string(), "Voigtlander NOKTON classic 35mm F1.4");
    map.insert(
        "50998".to_string(),
        "Voigtlander MACRO APO-LANTHAR 110mm F2.5",
    );
    map.insert(
        "50999".to_string(),
        "Voigtlander COLOR-SKOPAR 21mm F3.5 Aspherical",
    );
    map.insert(
        "51000".to_string(),
        "Voigtlander NOKTON 50mm F1.2 Aspherical",
    );
    map.insert(
        "51001".to_string(),
        "Voigtlander NOKTON 21mm F1.4 Aspherical",
    );
    map.insert(
        "51002".to_string(),
        "Voigtlander APO-LANTHAR 50mm F2 Aspherical",
    );
    map.insert(
        "51003".to_string(),
        "Voigtlander NOKTON 35mm F1.2 Aspherical SE",
    );
    map.insert(
        "51006".to_string(),
        "Voigtlander APO-LANTHAR 35mm F2 Aspherical",
    );
    map.insert("51007".to_string(), "Voigtlander NOKTON 50mm F1 Aspherical");
    map.insert(
        "51008".to_string(),
        "Voigtlander NOKTON 75mm F1.5 Aspherical",
    );
    map.insert(
        "51009".to_string(),
        "Voigtlander NOKTON 28mm F1.5 Aspherical",
    );
    map.insert("51072".to_string(), "ZEISS Otus ML 50mm F1.4");
    map.insert("51073".to_string(), "ZEISS Otus ML 85mm F1.4");
    map.insert("51504".to_string(), "Samyang AF 50mm F1.4");
    map.insert(
        "51505".to_string(),
        "Samyang AF 14mm F2.8 or Samyang AF 35mm F2.8",
    );
    map.insert("51505.1".to_string(), "Samyang AF 35mm F2.8");
    map.insert("51507".to_string(), "Samyang AF 35mm F1.4");
    map.insert("51508".to_string(), "Samyang AF 45mm F1.8");
    map.insert(
        "51510".to_string(),
        "Samyang AF 18mm F2.8 or Samyang AF 35mm F1.8",
    );
    map.insert("51510.1".to_string(), "Samyang AF 35mm F1.8");
    map.insert("51512".to_string(), "Samyang AF 75mm F1.8");
    map.insert("51513".to_string(), "Samyang AF 35mm F1.8");
    map.insert("51514".to_string(), "Samyang AF 24mm F1.8");
    map.insert("51515".to_string(), "Samyang AF 12mm F2.0");
    map.insert("51516".to_string(), "Samyang AF 24-70mm F2.8");
    map.insert("51517".to_string(), "Samyang AF 50mm F1.4 II");
    map.insert("51518".to_string(), "Samyang AF 135mm F1.8");
    map.insert("6".to_string(), "Sony LA-EA4 Adapter");
    map.insert("61569".to_string(), "LAOWA FFII 10mm F2.8 C&D Dreamer");
    map.insert("61761".to_string(), "Viltrox 28mm F4.5 FE");
    map.insert("7".to_string(), "Sony LA-EA5 Adapter");
    map.insert(
        "78".to_string(),
        "Metabones Canon EF Smart Adapter Mark III or Other Adapter",
    );
    map
});

/// Get tag definitions for interop category
pub fn get_interop_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (10, TagKitDef {
            id: 10,
            name: "AFAreaMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_31),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "AFType",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_32),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "AFStatusActiveSensor",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "FocusMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("ILCA models only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_33),
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "AFPoint",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("models with 15-point AF"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_34),
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "AFPoint",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("models with 19-point AF"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_35),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "AFPointInFocus",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("models with 15-point AF"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_36),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "AFPointInFocus",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("models with 19-point AF"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_37),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "AFPointAtShutterRelease",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("models with 15-point AF"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_38),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "AFPointAtShutterRelease",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("models with 19-point AF"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_39),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "AFStatusNearRight",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "AFStatusLeft",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "AFStatusLower-left",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "AFStatusFarLeft",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "AFStatusTopHorizontal",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "AFStatusLower-leftHorizontal",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "AFStatusUpper-leftHorizontal",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "AFStatusFarLeftHorizontal",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "AFStatusLeftHorizontal",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "AFStatusLowerFarLeft",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "AFStatus_05_G4",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "AFStatus_01_C4",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "AFStatus_02_D4",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "AFStatus_03_E4",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "AFStatus_04_F4",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "FNumber",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::Exif::PrintFNumber($val)"),
            value_conv: Some("sony_fnumber_value_conv"),
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "HighSpeedSync",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_40),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "ExposureCompensationSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\",$val) : 0"),
            value_conv: Some("($val - 128) / 24"),
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "DriveMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_41),
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "WhiteBalanceSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_42),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "WhiteBalanceFineTune",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val > 128 ? $val - 256 : $val"),
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "ColorTemperatureSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val K\""),
            value_conv: Some("$val * 100"),
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "ColorCompensationFilterSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("negative is green, positive is magenta"),
            print_conv: PrintConvType::Expression("$val > 0 ? \"+$val\" : $val"),
            value_conv: Some("$val > 128 ? $val - 256 : $val"),
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "FNumber",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::Exif::PrintFNumber($val)"),
            value_conv: Some("sony_fnumber_value_conv"),
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "HighSpeedSync",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_43),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "ExposureCompensationSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\",$val) : 0"),
            value_conv: Some("($val - 128) / 24"),
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "WhiteBalanceSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_44),
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "WhiteBalanceFineTune",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val > 128 ? $val - 256 : $val"),
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "ColorTemperatureSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val K\""),
            value_conv: Some("$val * 100"),
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "ColorCompensationFilterSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("negative is green, positive is magenta"),
            print_conv: PrintConvType::Expression("$val > 0 ? \"+$val\" : $val"),
            value_conv: Some("$val > 128 ? $val - 256 : $val"),
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "CustomWB_RGBLevels",
            format: "int16u[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "ApertureSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("used only in M and A exposure modes"),
            print_conv: PrintConvType::Expression("Image::ExifTool::Exif::PrintFNumber($val)"),
            value_conv: Some("sony_fnumber_value_conv"),
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "AspectRatio",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_45),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "ISOSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: Some("($val and $val < 254) ? exp(($val/8-6)*log(2))*100 : $val"),
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "ExposureCompensationSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\",$val) : 0"),
            value_conv: Some("($val - 128) / 24"),
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "DriveModeSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_46),
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "ExposureProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_47),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "FocusModeSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_48),
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "MeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_49),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "SonyImageSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_50),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "BatteryTemperature",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f C\",$val)"),
            value_conv: Some("($val - 32) / 1.8"),
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "ImageStabilization2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_51),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "BatteryUnknown",
            format: "undef[4]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "BatteryVoltage",
            format: "undef[4]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.2f V\",$val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "BatteryLevel",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val%\""),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "BatteryTemperature",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f C\",$val)"),
            value_conv: Some("($val - 32) / 1.8"),
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "BatteryLevel",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val%\""),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "BatteryVoltage1",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.2f V\",$val)"),
            value_conv: Some("$val / 128"),
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "BatteryVoltage2",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.2f V\",$val)"),
            value_conv: Some("$val / 128"),
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "Face1Position",
            format: "int16u[4]",
            groups: HashMap::new(),
            writable: false,
            notes: Some("re-ordered and scaled to return the top, left, height and width of detected\n            face, with coordinates relative to the full-sized unrotated image and\n            increasing Y downwards"),
            print_conv: PrintConvType::None,
            value_conv: Some("my @v=split(\" \",$val); $_*=15 foreach @v; \"$v[1] $v[0] $v[3] $v[2]\""),
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "Face2Position",
            format: "int16u[4]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("my @v=split(\" \",$val); $_*=15 foreach @v; \"$v[1] $v[0] $v[3] $v[2]\""),
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "FaceTest2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "FacesDetected",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val > 8 ? 0 : $val"),
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "FaceTest8",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4368, TagKitDef {
            id: 4368,
            name: "TiffMeteringImage",
            format: "undef[9600]",
            groups: HashMap::new(),
            writable: false,
            notes: Some("13-bit RBGG (?) 40x30 pixels, presumably metering info, extracted as a\n            16-bit TIFF image;"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "HiddenDataLength",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "ISOAutoMin",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "ISOAutoMax",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4096, TagKitDef {
            id: 4096,
            name: "MultiBurstMode",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("MultiBurst tags valid only for models with this feature, like the F88"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_52),
            value_conv: None,
            subdirectory: None,
        }),
        (4097, TagKitDef {
            id: 4097,
            name: "MultiBurstImageWidth",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4098, TagKitDef {
            id: 4098,
            name: "MultiBurstImageHeight",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4099, TagKitDef {
            id: 4099,
            name: "Panorama",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x1003_subdirectory }),
        }),
        (1, TagKitDef {
            id: 1,
            name: "MoreSettings",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x1_subdirectory }),
        }),
        (2, TagKitDef {
            id: 2,
            name: "FaceInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x2_subdirectory }),
        }),
        (2, TagKitDef {
            id: 2,
            name: "FaceInfoA",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x2_subdirectory }),
        }),
        (1, TagKitDef {
            id: 1,
            name: "DriveMode2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_53),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "SharpnessSetting",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val > 0 ? \"+$val\" : $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "ExposureProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_54),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "MeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_55),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "DynamicRangeOptimizerSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_56),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "ColorSpace",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_57),
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "CreativeStyleSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_58),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "ContrastSetting",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val > 0 ? \"+$val\" : $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "SaturationSetting",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val > 0 ? \"+$val\" : $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "JpgFromRawStart",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("OK, not really a RAW file, but this mechanism is used to allow extraction of\n            the JPEG image from a PMP file"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "PanoramaDirection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_59),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "DataKey",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("key to decrypt the rest of the file from the end of the maker notes"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "SRFDataOffset",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "RawDataOffset",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "RawDataLength",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "FaceInfoOffset",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4392, TagKitDef {
            id: 4392,
            name: "ReleaseMode3",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_60),
            value_conv: None,
            subdirectory: None,
        }),
        (4396, TagKitDef {
            id: 4396,
            name: "ReleaseMode2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_61),
            value_conv: None,
            subdirectory: None,
        }),
        (4408, TagKitDef {
            id: 4408,
            name: "FlashMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_62),
            value_conv: None,
            subdirectory: None,
        }),
        (4414, TagKitDef {
            id: 4414,
            name: "StopsAboveBaseISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%.1f\",$val) : $val"),
            value_conv: Some("16 - $val/256"),
            subdirectory: None,
        }),
        (4416, TagKitDef {
            id: 4416,
            name: "BrightnessValue",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val/256 - 56.6"),
            subdirectory: None,
        }),
        (4420, TagKitDef {
            id: 4420,
            name: "DynamicRangeOptimizer",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_63),
            value_conv: None,
            subdirectory: None,
        }),
        (4424, TagKitDef {
            id: 4424,
            name: "HDRSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_64),
            value_conv: None,
            subdirectory: None,
        }),
        (4428, TagKitDef {
            id: 4428,
            name: "ExposureCompensation",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\",$val) : 0"),
            value_conv: Some("-$val/256"),
            subdirectory: None,
        }),
        (4446, TagKitDef {
            id: 4446,
            name: "PictureProfile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4447, TagKitDef {
            id: 4447,
            name: "PictureProfile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4451, TagKitDef {
            id: 4451,
            name: "PictureEffect2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_65),
            value_conv: None,
            subdirectory: None,
        }),
        (4464, TagKitDef {
            id: 4464,
            name: "Quality2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_66),
            value_conv: None,
            subdirectory: None,
        }),
        (4468, TagKitDef {
            id: 4468,
            name: "MeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_67),
            value_conv: None,
            subdirectory: None,
        }),
        (4469, TagKitDef {
            id: 4469,
            name: "ExposureProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_68),
            value_conv: None,
            subdirectory: None,
        }),
        (4476, TagKitDef {
            id: 4476,
            name: "WB_RGBLevels",
            format: "int16u[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "SequenceFileNumber",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("file number in burst sequence"),
            print_conv: PrintConvType::None,
            value_conv: Some("$val + 1"),
            subdirectory: None,
        }),
        (4392, TagKitDef {
            id: 4392,
            name: "ReleaseMode3",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_69),
            value_conv: None,
            subdirectory: None,
        }),
        (4396, TagKitDef {
            id: 4396,
            name: "ReleaseMode2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_70),
            value_conv: None,
            subdirectory: None,
        }),
        (4408, TagKitDef {
            id: 4408,
            name: "FlashMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_71),
            value_conv: None,
            subdirectory: None,
        }),
        (4414, TagKitDef {
            id: 4414,
            name: "StopsAboveBaseISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%.1f\",$val) : $val"),
            value_conv: Some("16 - $val/256"),
            subdirectory: None,
        }),
        (4416, TagKitDef {
            id: 4416,
            name: "BrightnessValue",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val/256 - 56.6"),
            subdirectory: None,
        }),
        (4420, TagKitDef {
            id: 4420,
            name: "DynamicRangeOptimizer",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_72),
            value_conv: None,
            subdirectory: None,
        }),
        (4424, TagKitDef {
            id: 4424,
            name: "HDRSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_73),
            value_conv: None,
            subdirectory: None,
        }),
        (4428, TagKitDef {
            id: 4428,
            name: "ExposureCompensation",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\",$val) : 0"),
            value_conv: Some("-$val/256"),
            subdirectory: None,
        }),
        (4450, TagKitDef {
            id: 4450,
            name: "PictureProfile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4451, TagKitDef {
            id: 4451,
            name: "PictureProfile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4455, TagKitDef {
            id: 4455,
            name: "PictureEffect2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_74),
            value_conv: None,
            subdirectory: None,
        }),
        (4468, TagKitDef {
            id: 4468,
            name: "Quality2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_75),
            value_conv: None,
            subdirectory: None,
        }),
        (4472, TagKitDef {
            id: 4472,
            name: "MeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_76),
            value_conv: None,
            subdirectory: None,
        }),
        (4473, TagKitDef {
            id: 4473,
            name: "ExposureProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_77),
            value_conv: None,
            subdirectory: None,
        }),
        (4480, TagKitDef {
            id: 4480,
            name: "WB_RGBLevels",
            format: "int16u[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4632, TagKitDef {
            id: 4632,
            name: "SonyISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("100 * 2**(16 - $val/256)"),
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "ReleaseMode2",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_78),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "SequenceFileNumber",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("file number in burst sequence"),
            print_conv: PrintConvType::None,
            value_conv: Some("$val + 1"),
            subdirectory: None,
        }),
        (4356, TagKitDef {
            id: 4356,
            name: "ReleaseMode3",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_79),
            value_conv: None,
            subdirectory: None,
        }),
        (4360, TagKitDef {
            id: 4360,
            name: "ReleaseMode2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_80),
            value_conv: None,
            subdirectory: None,
        }),
        (4372, TagKitDef {
            id: 4372,
            name: "FlashMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_81),
            value_conv: None,
            subdirectory: None,
        }),
        (4378, TagKitDef {
            id: 4378,
            name: "StopsAboveBaseISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%.1f\",$val) : $val"),
            value_conv: Some("16 - $val/256"),
            subdirectory: None,
        }),
        (4380, TagKitDef {
            id: 4380,
            name: "BrightnessValue",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val/256 - 56.6"),
            subdirectory: None,
        }),
        (4384, TagKitDef {
            id: 4384,
            name: "DynamicRangeOptimizer",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_82),
            value_conv: None,
            subdirectory: None,
        }),
        (4388, TagKitDef {
            id: 4388,
            name: "HDRSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_83),
            value_conv: None,
            subdirectory: None,
        }),
        (4392, TagKitDef {
            id: 4392,
            name: "ExposureCompensation",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\",$val) : 0"),
            value_conv: Some("-$val/256"),
            subdirectory: None,
        }),
        (4414, TagKitDef {
            id: 4414,
            name: "PictureProfile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4415, TagKitDef {
            id: 4415,
            name: "PictureProfile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4419, TagKitDef {
            id: 4419,
            name: "PictureEffect2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_84),
            value_conv: None,
            subdirectory: None,
        }),
        (4432, TagKitDef {
            id: 4432,
            name: "Quality2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_85),
            value_conv: None,
            subdirectory: None,
        }),
        (4436, TagKitDef {
            id: 4436,
            name: "MeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_86),
            value_conv: None,
            subdirectory: None,
        }),
        (4437, TagKitDef {
            id: 4437,
            name: "ExposureProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_87),
            value_conv: None,
            subdirectory: None,
        }),
        (4444, TagKitDef {
            id: 4444,
            name: "WB_RGBLevels",
            format: "int16u[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4596, TagKitDef {
            id: 4596,
            name: "SonyISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("100 * 2**(16 - $val/256)"),
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "ReleaseMode2",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_88),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "SequenceFileNumber",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("file number in burst sequence"),
            print_conv: PrintConvType::None,
            value_conv: Some("$val + 1"),
            subdirectory: None,
        }),
        (4480, TagKitDef {
            id: 4480,
            name: "ReleaseMode3",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_89),
            value_conv: None,
            subdirectory: None,
        }),
        (4484, TagKitDef {
            id: 4484,
            name: "ReleaseMode2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_90),
            value_conv: None,
            subdirectory: None,
        }),
        (4496, TagKitDef {
            id: 4496,
            name: "FlashMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_91),
            value_conv: None,
            subdirectory: None,
        }),
        (4502, TagKitDef {
            id: 4502,
            name: "StopsAboveBaseISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%.1f\",$val) : $val"),
            value_conv: Some("16 - $val/256"),
            subdirectory: None,
        }),
        (4504, TagKitDef {
            id: 4504,
            name: "BrightnessValue",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val/256 - 56.6"),
            subdirectory: None,
        }),
        (4508, TagKitDef {
            id: 4508,
            name: "DynamicRangeOptimizer",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_92),
            value_conv: None,
            subdirectory: None,
        }),
        (4512, TagKitDef {
            id: 4512,
            name: "HDRSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_93),
            value_conv: None,
            subdirectory: None,
        }),
        (4538, TagKitDef {
            id: 4538,
            name: "PictureProfile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4539, TagKitDef {
            id: 4539,
            name: "PictureProfile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4543, TagKitDef {
            id: 4543,
            name: "PictureEffect2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_94),
            value_conv: None,
            subdirectory: None,
        }),
        (4560, TagKitDef {
            id: 4560,
            name: "MeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_95),
            value_conv: None,
            subdirectory: None,
        }),
        (4561, TagKitDef {
            id: 4561,
            name: "ExposureProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_96),
            value_conv: None,
            subdirectory: None,
        }),
        (4568, TagKitDef {
            id: 4568,
            name: "WB_RGBLevels",
            format: "int16u[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4720, TagKitDef {
            id: 4720,
            name: "SonyISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("100 * 2**(16 - $val/256)"),
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "ReleaseMode2",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_97),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "SequenceFileNumber",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("file number in burst sequence"),
            print_conv: PrintConvType::None,
            value_conv: Some("$val + 1"),
            subdirectory: None,
        }),
        (4444, TagKitDef {
            id: 4444,
            name: "ReleaseMode3",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_98),
            value_conv: None,
            subdirectory: None,
        }),
        (4448, TagKitDef {
            id: 4448,
            name: "ReleaseMode2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_99),
            value_conv: None,
            subdirectory: None,
        }),
        (4460, TagKitDef {
            id: 4460,
            name: "FlashMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_100),
            value_conv: None,
            subdirectory: None,
        }),
        (4466, TagKitDef {
            id: 4466,
            name: "StopsAboveBaseISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%.1f\",$val) : $val"),
            value_conv: Some("16 - $val/256"),
            subdirectory: None,
        }),
        (4468, TagKitDef {
            id: 4468,
            name: "BrightnessValue",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val/256 - 56.6"),
            subdirectory: None,
        }),
        (4472, TagKitDef {
            id: 4472,
            name: "DynamicRangeOptimizer",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_101),
            value_conv: None,
            subdirectory: None,
        }),
        (4476, TagKitDef {
            id: 4476,
            name: "HDRSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_102),
            value_conv: None,
            subdirectory: None,
        }),
        (4480, TagKitDef {
            id: 4480,
            name: "ExposureCompensation",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\",$val) : 0"),
            value_conv: Some("-$val/256"),
            subdirectory: None,
        }),
        (4502, TagKitDef {
            id: 4502,
            name: "PictureProfile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4503, TagKitDef {
            id: 4503,
            name: "PictureProfile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4507, TagKitDef {
            id: 4507,
            name: "PictureEffect2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_103),
            value_conv: None,
            subdirectory: None,
        }),
        (4520, TagKitDef {
            id: 4520,
            name: "Quality2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_104),
            value_conv: None,
            subdirectory: None,
        }),
        (4524, TagKitDef {
            id: 4524,
            name: "MeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_105),
            value_conv: None,
            subdirectory: None,
        }),
        (4525, TagKitDef {
            id: 4525,
            name: "ExposureProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_106),
            value_conv: None,
            subdirectory: None,
        }),
        (4532, TagKitDef {
            id: 4532,
            name: "WB_RGBLevels",
            format: "int16u[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4692, TagKitDef {
            id: 4692,
            name: "SonyISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("100 * 2**(16 - $val/256)"),
            subdirectory: None,
        }),
        (4696, TagKitDef {
            id: 4696,
            name: "SonyISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("100 * 2**(16 - $val/256)"),
            subdirectory: None,
        }),
        (4728, TagKitDef {
            id: 4728,
            name: "FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f mm\",$val)"),
            value_conv: Some("$val / 10"),
            subdirectory: None,
        }),
        (4730, TagKitDef {
            id: 4730,
            name: "MinFocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f mm\",$val)"),
            value_conv: Some("$val / 10"),
            subdirectory: None,
        }),
        (4732, TagKitDef {
            id: 4732,
            name: "MaxFocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f mm\",$val)"),
            value_conv: Some("$val / 10"),
            subdirectory: None,
        }),
        (4736, TagKitDef {
            id: 4736,
            name: "SonyISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("100 * 2**(16 - $val/256)"),
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "ReleaseMode2",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_107),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "ReleaseMode2",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_108),
            value_conv: None,
            subdirectory: None,
        }),
        (4116, TagKitDef {
            id: 4116,
            name: "ReleaseMode3",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_109),
            value_conv: None,
            subdirectory: None,
        }),
        (4120, TagKitDef {
            id: 4120,
            name: "ReleaseMode2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_110),
            value_conv: None,
            subdirectory: None,
        }),
        (4132, TagKitDef {
            id: 4132,
            name: "FlashMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_111),
            value_conv: None,
            subdirectory: None,
        }),
        (4138, TagKitDef {
            id: 4138,
            name: "StopsAboveBaseISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%.1f\",$val) : $val"),
            value_conv: Some("16 - $val/256"),
            subdirectory: None,
        }),
        (4140, TagKitDef {
            id: 4140,
            name: "BrightnessValue",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val/256 - 56.6"),
            subdirectory: None,
        }),
        (4144, TagKitDef {
            id: 4144,
            name: "DynamicRangeOptimizer",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_112),
            value_conv: None,
            subdirectory: None,
        }),
        (4148, TagKitDef {
            id: 4148,
            name: "HDRSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_113),
            value_conv: None,
            subdirectory: None,
        }),
        (4152, TagKitDef {
            id: 4152,
            name: "ExposureCompensation",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\",$val) : 0"),
            value_conv: Some("-$val/256"),
            subdirectory: None,
        }),
        (4174, TagKitDef {
            id: 4174,
            name: "PictureProfile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4175, TagKitDef {
            id: 4175,
            name: "PictureProfile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (4179, TagKitDef {
            id: 4179,
            name: "PictureEffect2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_114),
            value_conv: None,
            subdirectory: None,
        }),
        (4192, TagKitDef {
            id: 4192,
            name: "Quality2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_115),
            value_conv: None,
            subdirectory: None,
        }),
        (4196, TagKitDef {
            id: 4196,
            name: "MeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_116),
            value_conv: None,
            subdirectory: None,
        }),
        (4197, TagKitDef {
            id: 4197,
            name: "ExposureProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_117),
            value_conv: None,
            subdirectory: None,
        }),
        (4204, TagKitDef {
            id: 4204,
            name: "WB_RGBLevels",
            format: "int16u[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4404, TagKitDef {
            id: 4404,
            name: "FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f mm\",$val)"),
            value_conv: Some("$val / 10"),
            subdirectory: None,
        }),
        (4406, TagKitDef {
            id: 4406,
            name: "MinFocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f mm\",$val)"),
            value_conv: Some("$val / 10"),
            subdirectory: None,
        }),
        (4408, TagKitDef {
            id: 4408,
            name: "MaxFocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f mm\",$val)"),
            value_conv: Some("$val / 10"),
            subdirectory: None,
        }),
        (4412, TagKitDef {
            id: 4412,
            name: "SonyISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("100 * 2**(16 - $val/256)"),
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "ReleaseMode2",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_118),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "ReleaseMode2",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_119),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "ReleaseMode2",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_120),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "FocalPlaneAFPointsUsed",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "FocalPlaneAFPointLocation2",
            format: "int16u[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "FocalPlaneAFPointArea",
            format: "int16u[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "FocalPlaneAFPointLocation1",
            format: "int16u[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "FacesDetected",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_121),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "SonyMinAperture",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("2 ** (($val/8 - 1.06) / 2)"),
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "SonyMinAperture",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("2 ** (($val/8 - 1.06) / 2)"),
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "ShutterCount",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("total number of mechanical shutter actuations"),
            print_conv: PrintConvType::Expression("sprintf(\"%6d\",$val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "SequenceImageNumber",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("number of images captured in burst sequence"),
            print_conv: PrintConvType::None,
            value_conv: Some("$val + 1"),
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "SequenceImageNumber",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("number of images captured in burst sequence"),
            print_conv: PrintConvType::None,
            value_conv: Some("$val + 1"),
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "ShotNumberSincePowerUp",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("valid only for some models"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "ReleaseMode2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_122),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "TempTest1",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "AmbientTemperature",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val C\""),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "TempTest2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "CameraTemperature",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val C\""),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "StopsAboveBaseISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%.1f\",$val) : $val"),
            value_conv: Some("16 - $val/256"),
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "SonyISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("100 * 2**(16 - $val/256)"),
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "BaseISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("100 * 2**(16 - $val/256)"),
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "BatteryTemperature",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f C\",$val)"),
            value_conv: Some("($val - 32) / 1.8"),
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "BatteryLevelGrip1",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val%\""),
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "BatteryLevel",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val%\""),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "BatteryLevelGrip2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val%\""),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "Battery2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "BatteryStatus1",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "BatteryLevel",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val%\""),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "BatteryStatus2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "BatteryLevel2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val%\""),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "AFPointsSelected",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_123),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "LensMount2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_124),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "LensType3",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_125),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "SonyISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("100 * 2**(16 - $val/256)"),
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "StopsAboveBaseISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%.1f\",$val) : $val"),
            value_conv: Some("16 - $val/256"),
            subdirectory: None,
        }),
    ]
}
