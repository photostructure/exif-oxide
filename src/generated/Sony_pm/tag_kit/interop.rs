//! Tag kits for interop category from Sony.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_3: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_4: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("4".to_string(), "3:2");
    map.insert("8".to_string(), "16:9");
    map
});

static PRINT_CONV_5: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("113".to_string(), "Continuous Bracketing 0.3 EV");
    map.insert("117".to_string(), "Continuous Bracketing 0.7 EV");
    map.insert("145".to_string(), "White Balance Bracketing Low");
    map.insert("146".to_string(), "White Balance Bracketing High");
    map.insert("16".to_string(), "Single Frame");
    map.insert("192".to_string(), "Remote Commander");
    map.insert("33".to_string(), "Continuous High");
    map.insert("34".to_string(), "Continuous Low");
    map.insert("48".to_string(), "Speed Priority Continuous");
    map.insert("81".to_string(), "Self-timer 10 sec");
    map.insert("82".to_string(), "Self-timer 2 sec, Mirror Lock-up");
    map
});

static PRINT_CONV_6: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Program AE");
    map.insert("128".to_string(), "Toy Camera");
    map.insert("129".to_string(), "Pop Color");
    map.insert("130".to_string(), "Posterization");
    map.insert("131".to_string(), "Posterization B/W");
    map.insert("132".to_string(), "Retro Photo");
    map.insert("133".to_string(), "High-key");
    map.insert("134".to_string(), "Partial Color Red");
    map.insert("135".to_string(), "Partial Color Green");
    map.insert("136".to_string(), "Partial Color Blue");
    map.insert("137".to_string(), "Partial Color Yellow");
    map.insert("138".to_string(), "High Contrast Monochrome");
    map.insert("16".to_string(), "Auto");
    map.insert("17".to_string(), "Auto (no flash)");
    map.insert("18".to_string(), "Auto+");
    map.insert("2".to_string(), "Aperture-priority AE");
    map.insert("3".to_string(), "Shutter speed priority AE");
    map.insert("4".to_string(), "Manual");
    map.insert("49".to_string(), "Portrait");
    map.insert("5".to_string(), "Cont. Priority AE");
    map.insert("50".to_string(), "Landscape");
    map.insert("51".to_string(), "Macro");
    map.insert("52".to_string(), "Sports");
    map.insert("53".to_string(), "Sunset");
    map.insert("54".to_string(), "Night view");
    map.insert("55".to_string(), "Night view/portrait");
    map.insert("56".to_string(), "Handheld Night Shot");
    map.insert("57".to_string(), "3D Sweep Panorama");
    map.insert("64".to_string(), "Auto 2");
    map.insert("65".to_string(), "Auto 2 (no flash)");
    map.insert("80".to_string(), "Sweep Panorama");
    map.insert("96".to_string(), "Anti Motion Blur");
    map
});

static PRINT_CONV_7: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("17".to_string(), "AF-S");
    map.insert("18".to_string(), "AF-C");
    map.insert("19".to_string(), "AF-A");
    map.insert("32".to_string(), "Manual");
    map.insert("48".to_string(), "DMF");
    map
});

static PRINT_CONV_8: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Multi-segment");
    map.insert("2".to_string(), "Center-weighted average");
    map.insert("3".to_string(), "Spot");
    map
});

static PRINT_CONV_9: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("21".to_string(), "Large (3:2)");
    map.insert("22".to_string(), "Medium (3:2)");
    map.insert("23".to_string(), "Small (3:2)");
    map.insert("25".to_string(), "Large (16:9)");
    map.insert("26".to_string(), "Medium (16:9)");
    map.insert("27".to_string(), "Small (16:9)");
    map
});

static PRINT_CONV_10: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_11: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Single Frame");
    map.insert("10".to_string(), "Remote Commander");
    map.insert("11".to_string(), "Mirror Lock-up");
    map.insert("18".to_string(), "Continuous Low");
    map.insert("2".to_string(), "Continuous High");
    map.insert("24".to_string(), "White Balance Bracketing Low");
    map.insert("25".to_string(), "D-Range Optimizer Bracketing Low");
    map.insert("4".to_string(), "Self-timer 10 sec");
    map.insert("40".to_string(), "White Balance Bracketing High");
    map.insert("41".to_string(), "D-Range Optimizer Bracketing High");
    map.insert("5".to_string(), "Self-timer 2 sec, Mirror Lock-up");
    map.insert("6".to_string(), "Single-frame Bracketing");
    map.insert("7".to_string(), "Continuous Bracketing");
    map
});

static PRINT_CONV_12: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("16".to_string(), "Cloudy");
    map.insert("17".to_string(), "Shade");
    map.insert("18".to_string(), "Color Temperature/Color Filter");
    map.insert("2".to_string(), "Auto");
    map.insert("32".to_string(), "Custom 1");
    map.insert("33".to_string(), "Custom 2");
    map.insert("34".to_string(), "Custom 3");
    map.insert("4".to_string(), "Daylight");
    map.insert("5".to_string(), "Fluorescent");
    map.insert("6".to_string(), "Tungsten");
    map.insert("7".to_string(), "Flash");
    map
});

static PRINT_CONV_13: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_14: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("16".to_string(), "Cloudy");
    map.insert("17".to_string(), "Shade");
    map.insert("18".to_string(), "Color Temperature/Color Filter");
    map.insert("2".to_string(), "Auto");
    map.insert("32".to_string(), "Custom 1");
    map.insert("33".to_string(), "Custom 2");
    map.insert("34".to_string(), "Custom 3");
    map.insert("4".to_string(), "Daylight");
    map.insert("5".to_string(), "Fluorescent");
    map.insert("6".to_string(), "Tungsten");
    map.insert("7".to_string(), "Flash");
    map
});

static PRINT_CONV_15: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("113".to_string(), "Continuous Bracketing 0.3 EV");
    map.insert("117".to_string(), "Continuous Bracketing 0.7 EV");
    map.insert("145".to_string(), "White Balance Bracketing Low");
    map.insert("146".to_string(), "White Balance Bracketing High");
    map.insert("16".to_string(), "Single Frame");
    map.insert("192".to_string(), "Remote Commander");
    map.insert("33".to_string(), "Continuous High");
    map.insert("34".to_string(), "Continuous Low");
    map.insert("48".to_string(), "Speed Priority Continuous");
    map.insert("81".to_string(), "Self-timer 10 sec");
    map.insert("82".to_string(), "Self-timer 2 sec, Mirror Lock-up");
    map
});

static PRINT_CONV_16: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Program AE");
    map.insert("128".to_string(), "Toy Camera");
    map.insert("129".to_string(), "Pop Color");
    map.insert("130".to_string(), "Posterization");
    map.insert("131".to_string(), "Posterization B/W");
    map.insert("132".to_string(), "Retro Photo");
    map.insert("133".to_string(), "High-key");
    map.insert("134".to_string(), "Partial Color Red");
    map.insert("135".to_string(), "Partial Color Green");
    map.insert("136".to_string(), "Partial Color Blue");
    map.insert("137".to_string(), "Partial Color Yellow");
    map.insert("138".to_string(), "High Contrast Monochrome");
    map.insert("16".to_string(), "Auto");
    map.insert("17".to_string(), "Auto (no flash)");
    map.insert("18".to_string(), "Auto+");
    map.insert("2".to_string(), "Aperture-priority AE");
    map.insert("3".to_string(), "Shutter speed priority AE");
    map.insert("4".to_string(), "Manual");
    map.insert("49".to_string(), "Portrait");
    map.insert("5".to_string(), "Cont. Priority AE");
    map.insert("50".to_string(), "Landscape");
    map.insert("51".to_string(), "Macro");
    map.insert("52".to_string(), "Sports");
    map.insert("53".to_string(), "Sunset");
    map.insert("54".to_string(), "Night view");
    map.insert("55".to_string(), "Night view/portrait");
    map.insert("56".to_string(), "Handheld Night Shot");
    map.insert("57".to_string(), "3D Sweep Panorama");
    map.insert("64".to_string(), "Auto 2");
    map.insert("65".to_string(), "Auto 2 (no flash)");
    map.insert("80".to_string(), "Sweep Panorama");
    map.insert("96".to_string(), "Anti Motion Blur");
    map
});

static PRINT_CONV_17: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Multi-segment");
    map.insert("2".to_string(), "Center-weighted average");
    map.insert("3".to_string(), "Spot");
    map
});

static PRINT_CONV_18: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Off");
    map.insert("16".to_string(), "On (Auto)");
    map.insert("17".to_string(), "On (Manual)");
    map
});

static PRINT_CONV_19: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "sRGB");
    map.insert("2".to_string(), "Adobe RGB");
    map
});

static PRINT_CONV_20: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("16".to_string(), "Standard");
    map.insert("160".to_string(), "Sunset");
    map.insert("32".to_string(), "Vivid");
    map.insert("64".to_string(), "Portrait");
    map.insert("80".to_string(), "Landscape");
    map.insert("96".to_string(), "B&W");
    map
});

static PRINT_CONV_21: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("2".to_string(), "Bracketing");
    map.insert("4".to_string(), "Continuous - Burst");
    map.insert("5".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("6".to_string(), "Normal - Self-timer");
    map.insert("9".to_string(), "Single Burst Shooting");
    map
});

static PRINT_CONV_22: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_23: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Autoflash");
    map.insert("1".to_string(), "Fill-flash");
    map.insert("2".to_string(), "Flash Off");
    map.insert("3".to_string(), "Slow Sync");
    map.insert("4".to_string(), "Rear Sync");
    map.insert("6".to_string(), "Wireless");
    map
});

static PRINT_CONV_24: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Auto");
    map.insert("3".to_string(), "Lv1");
    map.insert("4".to_string(), "Lv2");
    map.insert("5".to_string(), "Lv3");
    map.insert("6".to_string(), "Lv4");
    map.insert("7".to_string(), "Lv5");
    map.insert("8".to_string(), "n/a");
    map
});

static PRINT_CONV_25: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "HDR Auto");
    map.insert("11".to_string(), "HDR 5 EV");
    map.insert("13".to_string(), "HDR 6 EV");
    map.insert("3".to_string(), "HDR 1 EV");
    map.insert("5".to_string(), "HDR 2 EV");
    map.insert("7".to_string(), "HDR 3 EV");
    map.insert("9".to_string(), "HDR 4 EV");
    map
});

static PRINT_CONV_26: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Toy Camera");
    map.insert("10".to_string(), "Rich-tone Monochrome");
    map.insert("11".to_string(), "Miniature");
    map.insert("12".to_string(), "Water Color");
    map.insert("13".to_string(), "Illustration");
    map.insert("2".to_string(), "Pop Color");
    map.insert("3".to_string(), "Posterization");
    map.insert("4".to_string(), "Retro Photo");
    map.insert("5".to_string(), "Soft High Key");
    map.insert("6".to_string(), "Partial Color");
    map.insert("7".to_string(), "High Contrast Monochrome");
    map.insert("8".to_string(), "Soft Focus");
    map.insert("9".to_string(), "HDR Painting");
    map
});

static PRINT_CONV_27: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "JPEG");
    map.insert("1".to_string(), "RAW");
    map.insert("2".to_string(), "RAW + JPEG");
    map
});

static PRINT_CONV_28: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Multi-segment");
    map.insert("2".to_string(), "Center-weighted average");
    map.insert("3".to_string(), "Spot");
    map.insert("4".to_string(), "Average");
    map.insert("5".to_string(), "Highlight");
    map
});

static PRINT_CONV_29: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Program AE");
    map.insert("1".to_string(), "Aperture-priority AE");
    map.insert("10".to_string(), "Twilight");
    map.insert("11".to_string(), "Twilight Portrait");
    map.insert("12".to_string(), "Sunset");
    map.insert("14".to_string(), "Action (High speed)");
    map.insert("16".to_string(), "Sports");
    map.insert("17".to_string(), "Handheld Night Shot");
    map.insert("18".to_string(), "Anti Motion Blur");
    map.insert("19".to_string(), "High Sensitivity");
    map.insert("2".to_string(), "Shutter speed priority AE");
    map.insert("21".to_string(), "Beach");
    map.insert("22".to_string(), "Snow");
    map.insert("23".to_string(), "Fireworks");
    map.insert("26".to_string(), "Underwater");
    map.insert("27".to_string(), "Gourmet");
    map.insert("28".to_string(), "Pet");
    map.insert("29".to_string(), "Macro");
    map.insert("3".to_string(), "Manual");
    map.insert("30".to_string(), "Backlight Correction HDR");
    map.insert("33".to_string(), "Sweep Panorama");
    map.insert("36".to_string(), "Background Defocus");
    map.insert("37".to_string(), "Soft Skin");
    map.insert("4".to_string(), "Auto");
    map.insert("42".to_string(), "3D Image");
    map.insert("43".to_string(), "Cont. Priority AE");
    map.insert("45".to_string(), "Document");
    map.insert("46".to_string(), "Party");
    map.insert("5".to_string(), "iAuto");
    map.insert("6".to_string(), "Superior Auto");
    map.insert("7".to_string(), "iAuto+");
    map.insert("8".to_string(), "Portrait");
    map.insert("9".to_string(), "Landscape");
    map
});

static PRINT_CONV_30: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

static PRINT_CONV_31: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Continuous");
    map.insert("10".to_string(), "Continuous - Background defocus");
    map.insert("13".to_string(), "Continuous - 3D Sweep Panorama");
    map.insert("146".to_string(), "Single Frame - Movie Capture");
    map.insert(
        "15".to_string(),
        "Continuous - High Resolution Sweep Panorama",
    );
    map.insert("16".to_string(), "Continuous - 3D Image");
    map.insert("17".to_string(), "Continuous - Burst 2");
    map.insert("18".to_string(), "Normal - iAuto+");
    map.insert("19".to_string(), "Continuous - Speed/Advance Priority");
    map.insert("2".to_string(), "Continuous - Exposure Bracketing");
    map.insert("20".to_string(), "Continuous - Multi Frame NR");
    map.insert("23".to_string(), "Single-frame - Exposure Bracketing");
    map.insert("26".to_string(), "Continuous Low");
    map.insert("27".to_string(), "Continuous - High Sensitivity");
    map.insert("28".to_string(), "Smile Shutter");
    map.insert("29".to_string(), "Continuous - Tele-zoom Advance Priority");
    map.insert("3".to_string(), "DRO or White Balance Bracketing");
    map.insert("5".to_string(), "Continuous - Burst");
    map.insert("6".to_string(), "Single Frame - Capture During Movie");
    map.insert("7".to_string(), "Continuous - Sweep Panorama");
    map.insert(
        "8".to_string(),
        "Continuous - Anti-Motion Blur, Hand-held Twilight",
    );
    map.insert("9".to_string(), "Continuous - HDR");
    map
});

/// Get tag definitions for interop category
pub fn get_interop_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (4096, TagKitDef {
            id: 4096,
            name: "MultiBurstMode",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("MultiBurst tags valid only for models with this feature, like the F88"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_3),
            value_conv: None,
            subdirectory: None,
        }),
        (4097, TagKitDef {
            id: 4097,
            name: "MultiBurstImageWidth",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4098, TagKitDef {
            id: 4098,
            name: "MultiBurstImageHeight",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4099, TagKitDef {
            id: 4099,
            name: "Panorama",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x1003_subdirectory }),
        }),
        (1, TagKitDef {
            id: 1,
            name: "ApertureSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("used only in M and A exposure modes"),
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("2 ** (($val/8 - 1) / 2)"),
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "AspectRatio",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_4),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "ISOSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: Some("($val and $val < 254) ? exp(($val/8-6)*log(2))*100 : $val"),
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "ExposureCompensationSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("($val - 128) / 24"),
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "DriveModeSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_5),
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "ExposureProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_6),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "FocusModeSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_7),
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "MeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_8),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "SonyImageSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_9),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "FNumber",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("2 ** (($val/8 - 1) / 2)"),
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "HighSpeedSync",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_10),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "ExposureCompensationSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("($val - 128) / 24"),
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "DriveMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_11),
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "WhiteBalanceSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_12),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "WhiteBalanceFineTune",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val > 128 ? $val - 256 : $val"),
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "ColorTemperatureSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val K\""),
            value_conv: Some("$val * 100"),
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "ColorCompensationFilterSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("negative is green, positive is magenta"),
            print_conv: PrintConvType::Expression("$val > 0 ? \"+$val\" : $val"),
            value_conv: Some("$val > 128 ? $val - 256 : $val"),
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "FNumber",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("2 ** (($val/8 - 1) / 2)"),
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "HighSpeedSync",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_13),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "ExposureCompensationSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("($val - 128) / 24"),
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "WhiteBalanceSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_14),
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "WhiteBalanceFineTune",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val > 128 ? $val - 256 : $val"),
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "ColorTemperatureSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val K\""),
            value_conv: Some("$val * 100"),
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "ColorCompensationFilterSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("negative is green, positive is magenta"),
            print_conv: PrintConvType::Expression("$val > 0 ? \"+$val\" : $val"),
            value_conv: Some("$val > 128 ? $val - 256 : $val"),
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "CustomWB_RGBLevels",
            format: "int16u[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "DriveMode2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_15),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "SharpnessSetting",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val > 0 ? \"+$val\" : $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "ExposureProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_16),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "MeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_17),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "DynamicRangeOptimizerSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_18),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "ColorSpace",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_19),
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "CreativeStyleSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_20),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "ContrastSetting",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val > 0 ? \"+$val\" : $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "SaturationSetting",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val > 0 ? \"+$val\" : $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (4368, TagKitDef {
            id: 4368,
            name: "TiffMeteringImage",
            format: "undef[9600]",
            groups: HashMap::new(),
            writable: false,
            notes: Some("13-bit RBGG (?) 40x30 pixels, presumably metering info, extracted as a\n            16-bit TIFF image;"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "BatteryTemperature",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f C\",$val)"),
            value_conv: Some("($val - 32) / 1.8"),
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "BatteryLevel",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val%\""),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "BatteryVoltage1",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.2f V\",$val)"),
            value_conv: Some("$val / 128"),
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "BatteryVoltage2",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.2f V\",$val)"),
            value_conv: Some("$val / 128"),
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "SequenceFileNumber",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("file number in burst sequence"),
            print_conv: PrintConvType::None,
            value_conv: Some("$val + 1"),
            subdirectory: None,
        }),
        (4444, TagKitDef {
            id: 4444,
            name: "ReleaseMode3",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_21),
            value_conv: None,
            subdirectory: None,
        }),
        (4448, TagKitDef {
            id: 4448,
            name: "ReleaseMode2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_22),
            value_conv: None,
            subdirectory: None,
        }),
        (4460, TagKitDef {
            id: 4460,
            name: "FlashMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_23),
            value_conv: None,
            subdirectory: None,
        }),
        (4466, TagKitDef {
            id: 4466,
            name: "StopsAboveBaseISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("16 - $val/256"),
            subdirectory: None,
        }),
        (4468, TagKitDef {
            id: 4468,
            name: "BrightnessValue",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val/256 - 56.6"),
            subdirectory: None,
        }),
        (4472, TagKitDef {
            id: 4472,
            name: "DynamicRangeOptimizer",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_24),
            value_conv: None,
            subdirectory: None,
        }),
        (4476, TagKitDef {
            id: 4476,
            name: "HDRSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_25),
            value_conv: None,
            subdirectory: None,
        }),
        (4480, TagKitDef {
            id: 4480,
            name: "ExposureCompensation",
            format: "int16s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_expression_printconv"),
            value_conv: Some("-$val/256"),
            subdirectory: None,
        }),
        (4502, TagKitDef {
            id: 4502,
            name: "PictureProfile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (4503, TagKitDef {
            id: 4503,
            name: "PictureProfile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("complex_hash_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (4507, TagKitDef {
            id: 4507,
            name: "PictureEffect2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_26),
            value_conv: None,
            subdirectory: None,
        }),
        (4520, TagKitDef {
            id: 4520,
            name: "Quality2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_27),
            value_conv: None,
            subdirectory: None,
        }),
        (4524, TagKitDef {
            id: 4524,
            name: "MeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_28),
            value_conv: None,
            subdirectory: None,
        }),
        (4525, TagKitDef {
            id: 4525,
            name: "ExposureProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_29),
            value_conv: None,
            subdirectory: None,
        }),
        (4532, TagKitDef {
            id: 4532,
            name: "WB_RGBLevels",
            format: "int16u[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4692, TagKitDef {
            id: 4692,
            name: "SonyISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("100 * 2**(16 - $val/256)"),
            subdirectory: None,
        }),
        (4696, TagKitDef {
            id: 4696,
            name: "SonyISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("100 * 2**(16 - $val/256)"),
            subdirectory: None,
        }),
        (4728, TagKitDef {
            id: 4728,
            name: "FocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f mm\",$val)"),
            value_conv: Some("$val / 10"),
            subdirectory: None,
        }),
        (4730, TagKitDef {
            id: 4730,
            name: "MinFocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f mm\",$val)"),
            value_conv: Some("$val / 10"),
            subdirectory: None,
        }),
        (4732, TagKitDef {
            id: 4732,
            name: "MaxFocalLength",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f mm\",$val)"),
            value_conv: Some("$val / 10"),
            subdirectory: None,
        }),
        (4736, TagKitDef {
            id: 4736,
            name: "SonyISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("100 * 2**(16 - $val/256)"),
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "ReleaseMode2",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_30),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "ReleaseMode2",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_31),
            value_conv: None,
            subdirectory: None,
        }),
    ]
}
