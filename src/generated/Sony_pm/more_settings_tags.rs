//! Generated tag table definitions from Sony::MoreSettings
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_4b::ast_value_4b2b5b722bdd63f4;
use crate::generated::functions::hash_58::ast_value_58f560b2a6e62b0d;
use crate::generated::functions::hash_60::ast_value_6024bbf5fa17668a;
use crate::generated::functions::hash_63::ast_print_634937674bb4dcf3;
use crate::generated::functions::hash_64::ast_value_647eb869d9cb9ed1;
use crate::generated::functions::hash_8b::ast_print_8b1cb18fc68bc972;
use crate::generated::functions::hash_b7::ast_print_b75f5f46a9f320cf;
use crate::generated::functions::hash_b9::ast_print_b93bf01b5173ce30;
use crate::generated::functions::hash_bb::ast_print_bb36ed62e5a52a4;

/// Tag definitions for Sony::MoreSettings table
pub static SONY_MORESETTINGS_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            1,
            TagInfo {
                name: "DriveMode2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            2,
            TagInfo {
                name: "ExposureProgram",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            3,
            TagInfo {
                name: "MeteringMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4,
            TagInfo {
                name: "DynamicRangeOptimizerSetting",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            6,
            TagInfo {
                name: "ColorSpace",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            7,
            TagInfo {
                name: "CreativeStyleSetting",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            8,
            TagInfo {
                name: "ContrastSetting",
                format: "int8s",
                print_conv: Some(PrintConv::Function(ast_print_b93bf01b5173ce30)),
                value_conv: None,
            },
        ),
        (
            9,
            TagInfo {
                name: "SaturationSetting",
                format: "int8s",
                print_conv: Some(PrintConv::Function(ast_print_b93bf01b5173ce30)),
                value_conv: None,
            },
        ),
        (
            10,
            TagInfo {
                name: "SharpnessSetting",
                format: "int8s",
                print_conv: Some(PrintConv::Function(ast_print_b93bf01b5173ce30)),
                value_conv: None,
            },
        ),
        (
            13,
            TagInfo {
                name: "WhiteBalanceSetting",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            14,
            TagInfo {
                name: "ColorTemperatureSetting",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_8b1cb18fc68bc972)),
                value_conv: Some(ValueConv::Function(ast_value_647eb869d9cb9ed1)),
            },
        ),
        (
            15,
            TagInfo {
                name: "ColorCompensationFilterSet",
                format: "int8s",
                print_conv: Some(PrintConv::Function(ast_print_b93bf01b5173ce30)),
                value_conv: None,
            },
        ),
        (
            16,
            TagInfo {
                name: "FlashMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            17,
            TagInfo {
                name: "LongExposureNoiseReduction",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            18,
            TagInfo {
                name: "HighISONoiseReduction",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            19,
            TagInfo {
                name: "FocusMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            21,
            TagInfo {
                name: "MultiFrameNoiseReduction",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            22,
            TagInfo {
                name: "HDRSetting",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            23,
            TagInfo {
                name: "HDRLevel",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            24,
            TagInfo {
                name: "ViewingMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            25,
            TagInfo {
                name: "FaceDetection",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            26,
            TagInfo {
                name: "CustomWB_RBLevels",
                format: "int16uRev[2]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            34,
            TagInfo {
                name: "FNumber",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_634937674bb4dcf3)),
                value_conv: Some(ValueConv::Function(ast_value_4b2b5b722bdd63f4)),
            },
        ),
        (
            36,
            TagInfo {
                name: "ExposureCompensation2",
                format: "int16s",
                print_conv: Some(PrintConv::Function(ast_print_b75f5f46a9f320cf)),
                value_conv: Some(ValueConv::Function(ast_value_6024bbf5fa17668a)),
            },
        ),
        (
            39,
            TagInfo {
                name: "ExposureTime",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_bb36ed62e5a52a4)),
                value_conv: Some(ValueConv::Function(ast_value_58f560b2a6e62b0d)),
            },
        ),
        (
            40,
            TagInfo {
                name: "Orientation2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            43,
            TagInfo {
                name: "FocusPosition2",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            47,
            TagInfo {
                name: "FocusPosition2",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            48,
            TagInfo {
                name: "FlashAction",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            50,
            TagInfo {
                name: "FocusMode2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            119,
            TagInfo {
                name: "FlashAction2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            120,
            TagInfo {
                name: "FlashActionExternal",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            124,
            TagInfo {
                name: "FlashActionExternal",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            130,
            TagInfo {
                name: "FlashStatus",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            134,
            TagInfo {
                name: "FlashStatus",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_MORESETTINGS_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_MORESETTINGS_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
