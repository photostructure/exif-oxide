//! Generated tag table definitions from Sony::Tag9416
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_1a::ast_print_1ade125dab246be4;
use crate::generated::functions::hash_28::ast_value_28edfda19b0d16dd;
use crate::generated::functions::hash_30::ast_print_30c6ff66128b242c;
use crate::generated::functions::hash_3c::ast_value_3ca782d06a4e1676;
use crate::generated::functions::hash_45::ast_print_45145cdaaff93e23;
use crate::generated::functions::hash_4b::ast_print_4b6db621edbbac84;
use crate::generated::functions::hash_53::ast_value_53ef12641c6719f5;
use crate::generated::functions::hash_74::ast_value_743e189656f40f03;
use crate::generated::functions::hash_84::ast_print_8470e30e1e5b4729;
use crate::generated::functions::hash_bb::ast_print_bb36ed62e5a52a4;
use crate::generated::functions::hash_cc::ast_value_cc6d20d1f05f91ec;
use crate::generated::functions::hash_e0::ast_value_e0b36f169462770c;

/// Tag definitions for Sony::Tag9416 table
pub static SONY_TAG9416_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "Tag9416_0000",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_4b6db621edbbac84)),
                value_conv: None,
            },
        ),
        (
            4,
            TagInfo {
                name: "SonyISO",
                format: "int16u",
                print_conv: Some(PrintConv::Function(ast_print_1ade125dab246be4)),
                value_conv: Some(ValueConv::Function(ast_value_3ca782d06a4e1676)),
            },
        ),
        (
            6,
            TagInfo {
                name: "StopsAboveBaseISO",
                format: "int16u",
                print_conv: Some(PrintConv::Function(ast_print_45145cdaaff93e23)),
                value_conv: Some(ValueConv::Function(ast_value_743e189656f40f03)),
            },
        ),
        (
            10,
            TagInfo {
                name: "SonyExposureTime2",
                format: "int16u",
                print_conv: Some(PrintConv::Function(ast_print_bb36ed62e5a52a4)),
                value_conv: Some(ValueConv::Function(ast_value_53ef12641c6719f5)),
            },
        ),
        (
            12,
            TagInfo {
                name: "ExposureTime",
                format: "rational32u",
                print_conv: Some(PrintConv::Function(ast_print_bb36ed62e5a52a4)),
                value_conv: None,
            },
        ),
        (
            16,
            TagInfo {
                name: "SonyFNumber2",
                format: "int16u",
                print_conv: Some(PrintConv::Function(ast_print_8470e30e1e5b4729)),
                value_conv: Some(ValueConv::Function(ast_value_e0b36f169462770c)),
            },
        ),
        (
            18,
            TagInfo {
                name: "SonyMaxApertureValue",
                format: "int16u",
                print_conv: Some(PrintConv::Function(ast_print_8470e30e1e5b4729)),
                value_conv: Some(ValueConv::Function(ast_value_e0b36f169462770c)),
            },
        ),
        (
            29,
            TagInfo {
                name: "SequenceImageNumber",
                format: "int32u",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_cc6d20d1f05f91ec)),
            },
        ),
        (
            43,
            TagInfo {
                name: "ReleaseMode2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            53,
            TagInfo {
                name: "ExposureProgram",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            55,
            TagInfo {
                name: "CreativeStyle",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            72,
            TagInfo {
                name: "LensMount",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            73,
            TagInfo {
                name: "LensFormat",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            74,
            TagInfo {
                name: "LensMount",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            75,
            TagInfo {
                name: "LensType2",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            77,
            TagInfo {
                name: "LensType",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            79,
            TagInfo {
                name: "DistortionCorrParams",
                format: "int16s[16]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            112,
            TagInfo {
                name: "PictureProfile",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            113,
            TagInfo {
                name: "FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Function(ast_print_30c6ff66128b242c)),
                value_conv: Some(ValueConv::Function(ast_value_28edfda19b0d16dd)),
            },
        ),
        (
            115,
            TagInfo {
                name: "MinFocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Function(ast_print_30c6ff66128b242c)),
                value_conv: Some(ValueConv::Function(ast_value_28edfda19b0d16dd)),
            },
        ),
        (
            117,
            TagInfo {
                name: "MaxFocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Function(ast_print_30c6ff66128b242c)),
                value_conv: Some(ValueConv::Function(ast_value_28edfda19b0d16dd)),
            },
        ),
        (
            2191,
            TagInfo {
                name: "VignettingCorrParams",
                format: "int16s[16]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2193,
            TagInfo {
                name: "VignettingCorrParams",
                format: "int16s[16]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2205,
            TagInfo {
                name: "VignettingCorrParams",
                format: "int16s[32]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2229,
            TagInfo {
                name: "APS-CSizeCapture",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            2231,
            TagInfo {
                name: "APS-CSizeCapture",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            2277,
            TagInfo {
                name: "APS-CSizeCapture",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            2324,
            TagInfo {
                name: "ChromaticAberrationCorrParams",
                format: "int16s[32]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2326,
            TagInfo {
                name: "ChromaticAberrationCorrParams",
                format: "int16s[32]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2373,
            TagInfo {
                name: "ChromaticAberrationCorrParams",
                format: "int16s[32]",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_TAG9416_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_TAG9416_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
