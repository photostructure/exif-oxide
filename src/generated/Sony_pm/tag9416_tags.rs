//! Generated tag table definitions from Sony::Tag9416
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{
    exposuretime_print_conv, fnumber_print_conv, gpsaltitude_print_conv, lensinfo_print_conv,
    print_fraction,
};
use crate::implementations::value_conv::{
    exif_date_value_conv, gps_coordinate_value_conv, gpstimestamp_value_conv,
    reciprocal_10_value_conv, reference_long_string_value_conv,
    reference_very_long_string_value_conv,
};

/// Tag definitions for Sony::Tag9416 table
pub static SONY_TAG9416_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "Tag9416_0000",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("sprintf(\"%3d\",$val)".to_string())),
                value_conv: None,
            },
        ),
        (
            4,
            TagInfo {
                name: "SonyISO",
                format: "int16u",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.0f\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression(
                    "100 * 2**(16 - $val/256)".to_string(),
                )),
            },
        ),
        (
            6,
            TagInfo {
                name: "StopsAboveBaseISO",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "$val ? sprintf(\"%.1f\",$val) : $val".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("16 - $val/256".to_string())),
            },
        ),
        (
            10,
            TagInfo {
                name: "SonyExposureTime2",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "$val ? Image::ExifTool::Exif::PrintExposureTime($val) : \"Bulb\"".to_string(),
                )),
                value_conv: Some(ValueConv::Expression(
                    "$val ? 2 ** (16 - $val/256) : 0".to_string(),
                )),
            },
        ),
        (
            12,
            TagInfo {
                name: "ExposureTime",
                format: "rational32u",
                print_conv: Some(PrintConv::Expression(
                    "$val ? Image::ExifTool::Exif::PrintExposureTime($val) : \"Bulb\"".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            16,
            TagInfo {
                name: "SonyFNumber2",
                format: "int16u",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression(
                    "2 ** (($val/256 - 16) / 2)".to_string(),
                )),
            },
        ),
        (
            18,
            TagInfo {
                name: "SonyMaxApertureValue",
                format: "int16u",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression(
                    "2 ** (($val/256 - 16) / 2)".to_string(),
                )),
            },
        ),
        (
            29,
            TagInfo {
                name: "SequenceImageNumber",
                format: "int32u",
                print_conv: None,
                value_conv: Some(ValueConv::Expression("$val + 1".to_string())),
            },
        ),
        (
            43,
            TagInfo {
                name: "ReleaseMode2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            53,
            TagInfo {
                name: "ExposureProgram",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            55,
            TagInfo {
                name: "CreativeStyle",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            72,
            TagInfo {
                name: "LensMount",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            73,
            TagInfo {
                name: "LensFormat",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            74,
            TagInfo {
                name: "LensMount",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            75,
            TagInfo {
                name: "LensType2",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            77,
            TagInfo {
                name: "LensType",
                format: "int16u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            79,
            TagInfo {
                name: "DistortionCorrParams",
                format: "int16s[16]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            112,
            TagInfo {
                name: "PictureProfile",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            113,
            TagInfo {
                name: "FocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1f mm\",$val)".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("$val / 10".to_string())),
            },
        ),
        (
            115,
            TagInfo {
                name: "MinFocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1f mm\",$val)".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("$val / 10".to_string())),
            },
        ),
        (
            117,
            TagInfo {
                name: "MaxFocalLength",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"%.1f mm\",$val)".to_string(),
                )),
                value_conv: Some(ValueConv::Expression("$val / 10".to_string())),
            },
        ),
        (
            2191,
            TagInfo {
                name: "VignettingCorrParams",
                format: "int16s[16]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2193,
            TagInfo {
                name: "VignettingCorrParams",
                format: "int16s[16]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2205,
            TagInfo {
                name: "VignettingCorrParams",
                format: "int16s[32]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2229,
            TagInfo {
                name: "APS-CSizeCapture",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            2231,
            TagInfo {
                name: "APS-CSizeCapture",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            2277,
            TagInfo {
                name: "APS-CSizeCapture",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            2324,
            TagInfo {
                name: "ChromaticAberrationCorrParams",
                format: "int16s[32]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2326,
            TagInfo {
                name: "ChromaticAberrationCorrParams",
                format: "int16s[32]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2373,
            TagInfo {
                name: "ChromaticAberrationCorrParams",
                format: "int16s[32]",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_TAG9416_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_TAG9416_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
