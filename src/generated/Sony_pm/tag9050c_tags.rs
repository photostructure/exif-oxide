//! Generated tag table definitions from Sony::Tag9050c
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

/// Tag definitions for Sony::Tag9050c table
pub static SONY_TAG9050C_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            38,
            TagInfo {
                name: "Shutter",
                format: "int16u[3]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            57,
            TagInfo {
                name: "FlashStatus",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            58,
            TagInfo {
                name: "ShutterCount",
                format: "int32u",
                print_conv: Some(PrintConv::Expression("sprintf(\"%6d\",$val)".to_string())),
                value_conv: None,
            },
        ),
        (
            70,
            TagInfo {
                name: "SonyExposureTime",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "$val ? Image::ExifTool::Exif::PrintExposureTime($val) : \"Bulb\"".to_string(),
                )),
                value_conv: Some(ValueConv::Expression(
                    "$val ? 2 ** (16 - $val/256) : 0".to_string(),
                )),
            },
        ),
        (
            72,
            TagInfo {
                name: "SonyFNumber",
                format: "int16u",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression(
                    "2 ** (($val/256 - 16) / 2)".to_string(),
                )),
            },
        ),
        (
            75,
            TagInfo {
                name: "ReleaseMode2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            80,
            TagInfo {
                name: "ShutterCount2",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            102,
            TagInfo {
                name: "SonyExposureTime",
                format: "int16u",
                print_conv: Some(PrintConv::Expression(
                    "$val ? Image::ExifTool::Exif::PrintExposureTime($val) : \"Bulb\"".to_string(),
                )),
                value_conv: Some(ValueConv::Expression(
                    "$val ? 2 ** (16 - $val/256) : 0".to_string(),
                )),
            },
        ),
        (
            104,
            TagInfo {
                name: "SonyFNumber",
                format: "int16u",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression(
                    "2 ** (($val/256 - 16) / 2)".to_string(),
                )),
            },
        ),
        (
            107,
            TagInfo {
                name: "ReleaseMode2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            136,
            TagInfo {
                name: "InternalSerialNumber",
                format: "int8u[6]",
                print_conv: Some(PrintConv::Expression(
                    "unpack \"H*\", pack \"C*\", split \" \", $val".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            138,
            TagInfo {
                name: "InternalSerialNumber",
                format: "int8u[6]",
                print_conv: Some(PrintConv::Expression(
                    "unpack \"H*\", pack \"C*\", split \" \", $val".to_string(),
                )),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_TAG9050C_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_TAG9050C_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
