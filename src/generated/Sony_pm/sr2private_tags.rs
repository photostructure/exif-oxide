//! Generated tag table definitions from Sony::SR2Private
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

/// Tag definitions for Sony::SR2Private table
pub static SONY_SR2PRIVATE_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            29184,
            TagInfo {
                name: "SR2SubIFDOffset",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29185,
            TagInfo {
                name: "SR2SubIFDLength",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29217,
            TagInfo {
                name: "SR2SubIFDKey",
                format: "int32u",
                print_conv: Some(PrintConv::Expression(
                    "sprintf(\"0x%.8x\", $val)".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            29248,
            TagInfo {
                name: "IDC_IFD",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29249,
            TagInfo {
                name: "IDC2_IFD",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            29264,
            TagInfo {
                name: "MRWInfo",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_SR2PRIVATE_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SONY_SR2PRIVATE_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
