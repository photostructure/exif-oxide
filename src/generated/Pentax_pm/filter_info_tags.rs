//! Generated tag table definitions from Pentax::FilterInfo
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{
    exposuretime_print_conv, fnumber_print_conv, gpsaltitude_print_conv, lensinfo_print_conv,
    print_fraction,
};
use crate::implementations::value_conv::{
    exif_date_value_conv, gps_coordinate_value_conv, gpstimestamp_value_conv,
    reciprocal_10_value_conv, reference_long_string_value_conv,
    reference_very_long_string_value_conv,
};

/// Tag definitions for Pentax::FilterInfo table
pub static PENTAX_FILTERINFO_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "SourceDirectoryIndex",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2,
            TagInfo {
                name: "SourceFileIndex",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            5,
            TagInfo {
                name: "DigitalFilter01",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            22,
            TagInfo {
                name: "DigitalFilter02",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            39,
            TagInfo {
                name: "DigitalFilter03",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            56,
            TagInfo {
                name: "DigitalFilter04",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            73,
            TagInfo {
                name: "DigitalFilter05",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            90,
            TagInfo {
                name: "DigitalFilter06",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            107,
            TagInfo {
                name: "DigitalFilter07",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            124,
            TagInfo {
                name: "DigitalFilter08",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            141,
            TagInfo {
                name: "DigitalFilter09",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            158,
            TagInfo {
                name: "DigitalFilter10",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            175,
            TagInfo {
                name: "DigitalFilter11",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            192,
            TagInfo {
                name: "DigitalFilter12",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            209,
            TagInfo {
                name: "DigitalFilter13",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            226,
            TagInfo {
                name: "DigitalFilter14",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            243,
            TagInfo {
                name: "DigitalFilter15",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            260,
            TagInfo {
                name: "DigitalFilter16",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            277,
            TagInfo {
                name: "DigitalFilter17",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            294,
            TagInfo {
                name: "DigitalFilter18",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            311,
            TagInfo {
                name: "DigitalFilter19",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            328,
            TagInfo {
                name: "DigitalFilter20",
                format: "undef[17]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = PENTAX_FILTERINFO_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = PENTAX_FILTERINFO_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
