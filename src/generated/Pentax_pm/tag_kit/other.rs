//! Tag kits for other category from Pentax.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_22: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "-2");
    map.insert("1".to_string(), "Normal");
    map.insert("2".to_string(), "2");
    map.insert("3".to_string(), "-1");
    map.insert("4".to_string(), "1");
    map.insert("5".to_string(), "-3");
    map.insert("6".to_string(), "3");
    map.insert("65535".to_string(), "None");
    map.insert("7".to_string(), "-4");
    map.insert("8".to_string(), "4");
    map
});

static PRINT_CONV_23: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1 0".to_string(), "-1");
    map.insert("-2 0".to_string(), "-2");
    map.insert("-3 0".to_string(), "-3");
    map.insert("-4 0".to_string(), "-4");
    map.insert("0 0".to_string(), "0");
    map.insert("1 0".to_string(), "1");
    map.insert("2 0".to_string(), "2");
    map.insert("3 0".to_string(), "3");
    map.insert("4 0".to_string(), "4");
    map
});

static PRINT_CONV_24: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1 0".to_string(), "-1");
    map.insert("-2 0".to_string(), "-2");
    map.insert("-3 0".to_string(), "-3");
    map.insert("-4 0".to_string(), "-4");
    map.insert("0 0".to_string(), "0");
    map.insert("1 0".to_string(), "1");
    map.insert("2 0".to_string(), "2");
    map.insert("3 0".to_string(), "3");
    map.insert("4 0".to_string(), "4");
    map
});

static PRINT_CONV_25: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1 0".to_string(), "-1");
    map.insert("-2 0".to_string(), "-2");
    map.insert("-3 0".to_string(), "-3");
    map.insert("-4 0".to_string(), "-4");
    map.insert("0 0".to_string(), "0");
    map.insert("1 0".to_string(), "1");
    map.insert("2 0".to_string(), "2");
    map.insert("3 0".to_string(), "3");
    map.insert("4 0".to_string(), "4");
    map
});

static PRINT_CONV_26: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_27: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Green");
    map.insert("2".to_string(), "Yellow");
    map.insert("3".to_string(), "Orange");
    map.insert("4".to_string(), "Red");
    map.insert("5".to_string(), "Magenta");
    map.insert("6".to_string(), "Blue");
    map.insert("65535".to_string(), "None");
    map.insert("7".to_string(), "Cyan");
    map.insert("8".to_string(), "Infrared");
    map
});

static PRINT_CONV_28: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "-4");
    map.insert("1".to_string(), "-3");
    map.insert("2".to_string(), "-2");
    map.insert("3".to_string(), "-1");
    map.insert("4".to_string(), "0");
    map.insert("5".to_string(), "1");
    map.insert("6".to_string(), "2");
    map.insert("65535".to_string(), "None");
    map.insert("7".to_string(), "3");
    map.insert("8".to_string(), "4");
    map
});

static PRINT_CONV_29: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("0 0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("1 1".to_string(), "Weak");
    map.insert("1 2".to_string(), "Normal");
    map.insert("1 3".to_string(), "Strong");
    map.insert("2".to_string(), "Auto 2");
    map.insert("2 4".to_string(), "Auto");
    map
});

static PRINT_CONV_30: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Random");
    map.insert("2".to_string(), "Preset 1");
    map.insert("3".to_string(), "Preset 2");
    map.insert("33".to_string(), "Favorite 1");
    map.insert("34".to_string(), "Favorite 2");
    map.insert("35".to_string(), "Favorite 3");
    map.insert("4".to_string(), "Preset 3");
    map
});

static PRINT_CONV_31: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "Green");
    map.insert("2".to_string(), "Yellow");
    map.insert("3".to_string(), "Orange");
    map.insert("4".to_string(), "Red");
    map.insert("5".to_string(), "Magenta");
    map.insert("6".to_string(), "Purple");
    map.insert("65535".to_string(), "n/a");
    map.insert("7".to_string(), "Blue");
    map.insert("8".to_string(), "Cyan");
    map
});

static PRINT_CONV_32: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "4:3");
    map.insert("1".to_string(), "3:2");
    map.insert("2".to_string(), "16:9");
    map.insert("3".to_string(), "1:1");
    map
});

static PRINT_CONV_33: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Macro");
    map.insert("10".to_string(), "Tracking");
    map.insert("11".to_string(), "Continuous");
    map.insert("12".to_string(), "Snap");
    map.insert("16".to_string(), "AF-S (Focus-priority)");
    map.insert("17".to_string(), "AF-C (Focus-priority)");
    map.insert("18".to_string(), "AF-A (Focus-priority)");
    map.insert("2".to_string(), "Infinity");
    map.insert("272".to_string(), "AF-S (Release-priority)");
    map.insert("273".to_string(), "AF-C (Release-priority)");
    map.insert("274".to_string(), "AF-A (Release-priority)");
    map.insert("288".to_string(), "Contrast-detect (Release-priority)");
    map.insert("3".to_string(), "Manual");
    map.insert("32".to_string(), "Contrast-detect (Focus-priority)");
    map.insert("32774".to_string(), "Auto-area (Macro)");
    map.insert("32775".to_string(), "Zone Select (Macro)");
    map.insert("32776".to_string(), "Select (Macro)");
    map.insert("32777".to_string(), "Pinpoint (Macro)");
    map.insert("32778".to_string(), "Tracking (Macro)");
    map.insert("32779".to_string(), "Continuous (Macro)");
    map.insert(
        "33".to_string(),
        "Tracking Contrast-detect (Focus-priority)",
    );
    map.insert("4".to_string(), "Super Macro");
    map.insert("5".to_string(), "Pan Focus");
    map.insert("6".to_string(), "Auto-area");
    map.insert("7".to_string(), "Zone Select");
    map.insert("8".to_string(), "Select");
    map.insert("9".to_string(), "Pinpoint");
    map
});

static PRINT_CONV_34: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Macro (1)");
    map.insert("2".to_string(), "Macro (2)");
    map.insert("3".to_string(), "Infinity");
    map
});

static PRINT_CONV_35: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Electronic");
    map
});

static PRINT_CONV_36: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("0 0".to_string(), "Off (Off)");
    map.insert("0 2".to_string(), "Off (Auto)");
    map.insert("1".to_string(), "On");
    map.insert("1 1".to_string(), "On (On)");
    map.insert("1 2".to_string(), "On (Auto)");
    map
});

static PRINT_CONV_37: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0 0".to_string(), "Off");
    map.insert("1 1".to_string(), "On (type 1)");
    map.insert("1 2".to_string(), "On (type 2)");
    map
});

static PRINT_CONV_38: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0 0 0".to_string(), "Off");
    map
});

static PRINT_CONV_39: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "(none)");
    map
});

static PRINT_CONV_40: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Fixed Center or Multiple");
    map.insert("1".to_string(), "Top-left");
    map.insert("2".to_string(), "Top-center");
    map.insert("3".to_string(), "Top-right");
    map.insert("4".to_string(), "Left");
    map.insert("5".to_string(), "Center");
    map.insert("6".to_string(), "Right");
    map.insert("65535".to_string(), "None");
    map.insert("7".to_string(), "Bottom-left");
    map.insert("8".to_string(), "Bottom-center");
    map.insert("9".to_string(), "Bottom-right");
    map
});

static PRINT_CONV_41: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("10".to_string(), "250");
    map.insert("100".to_string(), "100");
    map.insert("11".to_string(), "320");
    map.insert("12".to_string(), "400");
    map.insert("13".to_string(), "500");
    map.insert("14".to_string(), "640");
    map.insert("15".to_string(), "800");
    map.insert("16".to_string(), "1000");
    map.insert("1600".to_string(), "1600");
    map.insert("17".to_string(), "1250");
    map.insert("18".to_string(), "1600");
    map.insert("19".to_string(), "2000");
    map.insert("20".to_string(), "2500");
    map.insert("200".to_string(), "200");
    map.insert("21".to_string(), "3200");
    map.insert("22".to_string(), "4000");
    map.insert("23".to_string(), "5000");
    map.insert("24".to_string(), "6400");
    map.insert("25".to_string(), "8000");
    map.insert("258".to_string(), "50");
    map.insert("259".to_string(), "70");
    map.insert("26".to_string(), "10000");
    map.insert("260".to_string(), "100");
    map.insert("261".to_string(), "140");
    map.insert("262".to_string(), "200");
    map.insert("263".to_string(), "280");
    map.insert("264".to_string(), "400");
    map.insert("265".to_string(), "560");
    map.insert("266".to_string(), "800");
    map.insert("267".to_string(), "1100");
    map.insert("268".to_string(), "1600");
    map.insert("269".to_string(), "2200");
    map.insert("27".to_string(), "12800");
    map.insert("270".to_string(), "3200");
    map.insert("271".to_string(), "4500");
    map.insert("272".to_string(), "6400");
    map.insert("273".to_string(), "9000");
    map.insert("274".to_string(), "12800");
    map.insert("275".to_string(), "18000");
    map.insert("276".to_string(), "25600");
    map.insert("277".to_string(), "36000");
    map.insert("278".to_string(), "51200");
    map.insert("279".to_string(), "72000");
    map.insert("28".to_string(), "16000");
    map.insert("280".to_string(), "102400");
    map.insert("281".to_string(), "144000");
    map.insert("282".to_string(), "204800");
    map.insert("283".to_string(), "288000");
    map.insert("284".to_string(), "409600");
    map.insert("285".to_string(), "576000");
    map.insert("286".to_string(), "819200");
    map.insert("29".to_string(), "20000");
    map.insert("3".to_string(), "50");
    map.insert("30".to_string(), "25600");
    map.insert("31".to_string(), "32000");
    map.insert("32".to_string(), "40000");
    map.insert("3200".to_string(), "3200");
    map.insert("33".to_string(), "51200");
    map.insert("34".to_string(), "64000");
    map.insert("35".to_string(), "80000");
    map.insert("36".to_string(), "102400");
    map.insert("37".to_string(), "128000");
    map.insert("38".to_string(), "160000");
    map.insert("39".to_string(), "204800");
    map.insert("4".to_string(), "64");
    map.insert("40".to_string(), "256000");
    map.insert("400".to_string(), "400");
    map.insert("41".to_string(), "320000");
    map.insert("42".to_string(), "409600");
    map.insert("43".to_string(), "512000");
    map.insert("44".to_string(), "640000");
    map.insert("45".to_string(), "819200");
    map.insert("5".to_string(), "80");
    map.insert("50".to_string(), "50");
    map.insert("6".to_string(), "100");
    map.insert("65534".to_string(), "Auto 2");
    map.insert("65535".to_string(), "Auto");
    map.insert("7".to_string(), "125");
    map.insert("8".to_string(), "160");
    map.insert("800".to_string(), "800");
    map.insert("9".to_string(), "200");
    map
});

static PRINT_CONV_42: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Multi-segment");
    map.insert("1".to_string(), "Center-weighted average");
    map.insert("2".to_string(), "Spot");
    map.insert("6".to_string(), "Highlight");
    map
});

static PRINT_CONV_43: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Daylight");
    map.insert("10".to_string(), "Cloudy");
    map.insert("11".to_string(), "Warm White Fluorescent");
    map.insert("14".to_string(), "Multi Auto");
    map.insert("15".to_string(), "Color Temperature Enhancement");
    map.insert("17".to_string(), "Kelvin");
    map.insert("2".to_string(), "Shade");
    map.insert("3".to_string(), "Fluorescent");
    map.insert("4".to_string(), "Tungsten");
    map.insert("5".to_string(), "Manual");
    map.insert("6".to_string(), "Daylight Fluorescent");
    map.insert("65534".to_string(), "Unknown");
    map.insert("65535".to_string(), "User-Selected");
    map.insert("7".to_string(), "Day White Fluorescent");
    map.insert("8".to_string(), "White Fluorescent");
    map.insert("9".to_string(), "Flash");
    map
});

static PRINT_CONV_44: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Auto (Daylight)");
    map.insert("10".to_string(), "Auto (Cloudy)");
    map.insert("2".to_string(), "Auto (Shade)");
    map.insert("3".to_string(), "Auto (Flash)");
    map.insert("4".to_string(), "Auto (Tungsten)");
    map.insert("6".to_string(), "Auto (Daylight Fluorescent)");
    map.insert("65534".to_string(), "Unknown");
    map.insert("65535".to_string(), "User-Selected");
    map.insert("7".to_string(), "Auto (Day White Fluorescent)");
    map.insert("8".to_string(), "Auto (White Fluorescent)");
    map
});

static PRINT_CONV_45: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Pago Pago");
    map.insert("1".to_string(), "Honolulu");
    map.insert("10".to_string(), "Miami");
    map.insert("11".to_string(), "Toronto");
    map.insert("12".to_string(), "New York");
    map.insert("13".to_string(), "Santiago");
    map.insert("14".to_string(), "Caracus");
    map.insert("15".to_string(), "Halifax");
    map.insert("16".to_string(), "Buenos Aires");
    map.insert("17".to_string(), "Sao Paulo");
    map.insert("18".to_string(), "Rio de Janeiro");
    map.insert("19".to_string(), "Madrid");
    map.insert("2".to_string(), "Anchorage");
    map.insert("20".to_string(), "London");
    map.insert("21".to_string(), "Paris");
    map.insert("22".to_string(), "Milan");
    map.insert("23".to_string(), "Rome");
    map.insert("24".to_string(), "Berlin");
    map.insert("25".to_string(), "Johannesburg");
    map.insert("26".to_string(), "Istanbul");
    map.insert("27".to_string(), "Cairo");
    map.insert("28".to_string(), "Jerusalem");
    map.insert("29".to_string(), "Moscow");
    map.insert("3".to_string(), "Vancouver");
    map.insert("30".to_string(), "Jeddah");
    map.insert("31".to_string(), "Tehran");
    map.insert("32".to_string(), "Dubai");
    map.insert("33".to_string(), "Karachi");
    map.insert("34".to_string(), "Kabul");
    map.insert("35".to_string(), "Male");
    map.insert("36".to_string(), "Delhi");
    map.insert("37".to_string(), "Colombo");
    map.insert("38".to_string(), "Kathmandu");
    map.insert("39".to_string(), "Dacca");
    map.insert("4".to_string(), "San Francisco");
    map.insert("40".to_string(), "Yangon");
    map.insert("41".to_string(), "Bangkok");
    map.insert("42".to_string(), "Kuala Lumpur");
    map.insert("43".to_string(), "Vientiane");
    map.insert("44".to_string(), "Singapore");
    map.insert("45".to_string(), "Phnom Penh");
    map.insert("46".to_string(), "Ho Chi Minh");
    map.insert("47".to_string(), "Jakarta");
    map.insert("48".to_string(), "Hong Kong");
    map.insert("49".to_string(), "Perth");
    map.insert("5".to_string(), "Los Angeles");
    map.insert("50".to_string(), "Beijing");
    map.insert("51".to_string(), "Shanghai");
    map.insert("52".to_string(), "Manila");
    map.insert("53".to_string(), "Taipei");
    map.insert("54".to_string(), "Seoul");
    map.insert("55".to_string(), "Adelaide");
    map.insert("56".to_string(), "Tokyo");
    map.insert("57".to_string(), "Guam");
    map.insert("58".to_string(), "Sydney");
    map.insert("59".to_string(), "Noumea");
    map.insert("6".to_string(), "Calgary");
    map.insert("60".to_string(), "Wellington");
    map.insert("61".to_string(), "Auckland");
    map.insert("62".to_string(), "Lima");
    map.insert("63".to_string(), "Dakar");
    map.insert("64".to_string(), "Algiers");
    map.insert("65".to_string(), "Helsinki");
    map.insert("66".to_string(), "Athens");
    map.insert("67".to_string(), "Nairobi");
    map.insert("68".to_string(), "Amsterdam");
    map.insert("69".to_string(), "Stockholm");
    map.insert("7".to_string(), "Denver");
    map.insert("70".to_string(), "Lisbon");
    map.insert("71".to_string(), "Copenhagen");
    map.insert("72".to_string(), "Warsaw");
    map.insert("73".to_string(), "Prague");
    map.insert("74".to_string(), "Budapest");
    map.insert("8".to_string(), "Mexico City");
    map.insert("9".to_string(), "Chicago");
    map
});

static PRINT_CONV_46: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Pago Pago");
    map.insert("1".to_string(), "Honolulu");
    map.insert("10".to_string(), "Miami");
    map.insert("11".to_string(), "Toronto");
    map.insert("12".to_string(), "New York");
    map.insert("13".to_string(), "Santiago");
    map.insert("14".to_string(), "Caracus");
    map.insert("15".to_string(), "Halifax");
    map.insert("16".to_string(), "Buenos Aires");
    map.insert("17".to_string(), "Sao Paulo");
    map.insert("18".to_string(), "Rio de Janeiro");
    map.insert("19".to_string(), "Madrid");
    map.insert("2".to_string(), "Anchorage");
    map.insert("20".to_string(), "London");
    map.insert("21".to_string(), "Paris");
    map.insert("22".to_string(), "Milan");
    map.insert("23".to_string(), "Rome");
    map.insert("24".to_string(), "Berlin");
    map.insert("25".to_string(), "Johannesburg");
    map.insert("26".to_string(), "Istanbul");
    map.insert("27".to_string(), "Cairo");
    map.insert("28".to_string(), "Jerusalem");
    map.insert("29".to_string(), "Moscow");
    map.insert("3".to_string(), "Vancouver");
    map.insert("30".to_string(), "Jeddah");
    map.insert("31".to_string(), "Tehran");
    map.insert("32".to_string(), "Dubai");
    map.insert("33".to_string(), "Karachi");
    map.insert("34".to_string(), "Kabul");
    map.insert("35".to_string(), "Male");
    map.insert("36".to_string(), "Delhi");
    map.insert("37".to_string(), "Colombo");
    map.insert("38".to_string(), "Kathmandu");
    map.insert("39".to_string(), "Dacca");
    map.insert("4".to_string(), "San Francisco");
    map.insert("40".to_string(), "Yangon");
    map.insert("41".to_string(), "Bangkok");
    map.insert("42".to_string(), "Kuala Lumpur");
    map.insert("43".to_string(), "Vientiane");
    map.insert("44".to_string(), "Singapore");
    map.insert("45".to_string(), "Phnom Penh");
    map.insert("46".to_string(), "Ho Chi Minh");
    map.insert("47".to_string(), "Jakarta");
    map.insert("48".to_string(), "Hong Kong");
    map.insert("49".to_string(), "Perth");
    map.insert("5".to_string(), "Los Angeles");
    map.insert("50".to_string(), "Beijing");
    map.insert("51".to_string(), "Shanghai");
    map.insert("52".to_string(), "Manila");
    map.insert("53".to_string(), "Taipei");
    map.insert("54".to_string(), "Seoul");
    map.insert("55".to_string(), "Adelaide");
    map.insert("56".to_string(), "Tokyo");
    map.insert("57".to_string(), "Guam");
    map.insert("58".to_string(), "Sydney");
    map.insert("59".to_string(), "Noumea");
    map.insert("6".to_string(), "Calgary");
    map.insert("60".to_string(), "Wellington");
    map.insert("61".to_string(), "Auckland");
    map.insert("62".to_string(), "Lima");
    map.insert("63".to_string(), "Dakar");
    map.insert("64".to_string(), "Algiers");
    map.insert("65".to_string(), "Helsinki");
    map.insert("66".to_string(), "Athens");
    map.insert("67".to_string(), "Nairobi");
    map.insert("68".to_string(), "Amsterdam");
    map.insert("69".to_string(), "Stockholm");
    map.insert("7".to_string(), "Denver");
    map.insert("70".to_string(), "Lisbon");
    map.insert("71".to_string(), "Copenhagen");
    map.insert("72".to_string(), "Warsaw");
    map.insert("73".to_string(), "Prague");
    map.insert("74".to_string(), "Budapest");
    map.insert("8".to_string(), "Mexico City");
    map.insert("9".to_string(), "Chicago");
    map
});

static PRINT_CONV_47: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_48: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_49: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0 0".to_string(), "None");
    map.insert("0 0 0 0".to_string(), "None");
    map.insert("0 0 0 4".to_string(), "Digital Filter");
    map.insert("1 0 0 0".to_string(), "Resized");
    map.insert("16 0 0 0".to_string(), "Frame Synthesis?");
    map.insert("2 0 0 0".to_string(), "Cropped");
    map.insert("4 0 0 0".to_string(), "Digital Filter 4");
    map.insert("6 0 0 0".to_string(), "Digital Filter 6");
    map.insert("8 0 0 0".to_string(), "Red-eye Correction");
    map
});

static PRINT_CONV_50: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "sRGB");
    map.insert("1".to_string(), "Adobe RGB");
    map
});

static PRINT_CONV_51: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "(none)");
    map
});

static PRINT_CONV_52: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_53: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_54: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Natural");
    map.insert("1".to_string(), "Bright");
    map.insert("10".to_string(), "Cross Processing");
    map.insert("11".to_string(), "Flat");
    map.insert("2".to_string(), "Portrait");
    map.insert("256".to_string(), "Standard");
    map.insert("257".to_string(), "Vivid");
    map.insert("258".to_string(), "Monotone");
    map.insert("259".to_string(), "Soft Monotone");
    map.insert("260".to_string(), "Hard Monotone");
    map.insert("261".to_string(), "Hi-contrast B&W");
    map.insert("262".to_string(), "Positive Film");
    map.insert("263".to_string(), "Bleach Bypass 2");
    map.insert("264".to_string(), "Retro");
    map.insert("265".to_string(), "HDR Tone");
    map.insert("266".to_string(), "Cross Processing 2");
    map.insert("267".to_string(), "Negative Film");
    map.insert("3".to_string(), "Landscape");
    map.insert("32768".to_string(), "n/a");
    map.insert("4".to_string(), "Vibrant");
    map.insert("5".to_string(), "Monochrome");
    map.insert("6".to_string(), "Muted");
    map.insert("7".to_string(), "Reversal Film");
    map.insert("8".to_string(), "Bleach Bypass");
    map.insert("9".to_string(), "Radiant");
    map
});

static PRINT_CONV_55: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "1 (K10D,K200D,K2000,K-m)");
    map.insert("10".to_string(), "10 (K-01,K-30,K-50,K-500)");
    map.insert("11".to_string(), "11 (Q10)");
    map.insert("12".to_string(), "12 (MX-1,Q-S1,Q7)");
    map.insert("13".to_string(), "13 (K-3,K-3II)");
    map.insert("14".to_string(), "14 (645Z)");
    map.insert("15".to_string(), "15 (K-S1,K-S2)");
    map.insert("16".to_string(), "16 (K-1)");
    map.insert("17".to_string(), "17 (K-70)");
    map.insert("18".to_string(), "18 (KP)");
    map.insert("19".to_string(), "19 (GR III)");
    map.insert("20".to_string(), "20 (K-3III)");
    map.insert("21".to_string(), "21 (K-3IIIMonochrome)");
    map.insert("3".to_string(), "3 (K20D)");
    map.insert("4".to_string(), "4 (K-7)");
    map.insert("5".to_string(), "5 (K-x)");
    map.insert("6".to_string(), "6 (645D)");
    map.insert("7".to_string(), "7 (K-r)");
    map.insert("8".to_string(), "8 (K-5,K-5II,K-5IIs)");
    map.insert("9".to_string(), "9 (Q)");
    map
});

static PRINT_CONV_56: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Not stabilized");
    map
});

static PRINT_CONV_57: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_58: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_59: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_60: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_61: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Scene Mode");
    map.insert("1".to_string(), "Auto PICT");
    map.insert("10".to_string(), "Aperture Priority, Off-Auto-Aperture");
    map.insert("11".to_string(), "Manual, Off-Auto-Aperture");
    map.insert("12".to_string(), "Bulb, Off-Auto-Aperture");
    map.insert("13".to_string(), "Shutter & Aperture Priority AE");
    map.insert("15".to_string(), "Sensitivity Priority AE");
    map.insert("16".to_string(), "Flash X-Sync Speed AE");
    map.insert("2".to_string(), "Program AE");
    map.insert("3".to_string(), "Green Mode");
    map.insert("4".to_string(), "Shutter Speed Priority");
    map.insert("5".to_string(), "Aperture Priority");
    map.insert("6".to_string(), "Program Tv Shift");
    map.insert("7".to_string(), "Program Av Shift");
    map.insert("8".to_string(), "Manual");
    map.insert("9".to_string(), "Bulb");
    map
});

static PRINT_CONV_62: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Hi Speed");
    map.insert("2".to_string(), "Depth");
    map.insert("3".to_string(), "MTF");
    map
});

static PRINT_CONV_63: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "1/2 EV Steps");
    map.insert("1".to_string(), "1/3 EV Steps");
    map
});

static PRINT_CONV_64: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Tv or Av");
    map.insert("1".to_string(), "P Shift");
    map
});

static PRINT_CONV_65: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Prohibited");
    map.insert("1".to_string(), "Permitted");
    map
});

static PRINT_CONV_66: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_67: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "JPEG (Best)");
    map.insert("33".to_string(), "JPEG (Better)");
    map.insert("36".to_string(), "RAW (PEF, Better)");
    map.insert("37".to_string(), "RAW+JPEG (PEF, Better)");
    map.insert("4".to_string(), "RAW (PEF, Best)");
    map.insert("40".to_string(), "RAW (DNG, Better)");
    map.insert("41".to_string(), "RAW+JPEG (DNG, Better)");
    map.insert("5".to_string(), "RAW+JPEG (PEF, Best)");
    map.insert("65".to_string(), "JPEG (Good)");
    map.insert("68".to_string(), "RAW (PEF, Good)");
    map.insert("69".to_string(), "RAW+JPEG (PEF, Good)");
    map.insert("72".to_string(), "RAW (DNG, Good)");
    map.insert("73".to_string(), "RAW+JPEG (DNG, Good)");
    map.insert("8".to_string(), "RAW (DNG, Best)");
    map.insert("9".to_string(), "RAW+JPEG (DNG, Best)");
    map
});

static PRINT_CONV_68: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "10 MP");
    map.insert("1".to_string(), "6 MP");
    map.insert("2".to_string(), "2 MP");
    map
});

static PRINT_CONV_69: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_70: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "1 EV Steps");
    map.insert("1".to_string(), "As EV Steps");
    map
});

static PRINT_CONV_71: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_72: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Red-eye reduction");
    map.insert("10".to_string(), "Trailing-curtain Sync");
    map.insert("2".to_string(), "Auto");
    map.insert("3".to_string(), "Auto, Red-eye reduction");
    map.insert("5".to_string(), "Wireless (Master)");
    map.insert("6".to_string(), "Wireless (Control)");
    map.insert("8".to_string(), "Slow-sync");
    map.insert("9".to_string(), "Slow-sync, Red-eye reduction");
    map
});

static PRINT_CONV_73: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Multi-segment");
    map
});

static PRINT_CONV_74: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_75: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Horizontal (normal)");
    map.insert("1".to_string(), "Rotate 180");
    map.insert("2".to_string(), "Rotate 90 CW");
    map.insert("3".to_string(), "Rotate 270 CW");
    map
});

static PRINT_CONV_76: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Manual");
    map.insert("1".to_string(), "Auto");
    map
});

static PRINT_CONV_77: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "1 EV Steps");
    map.insert("1".to_string(), "As EV Steps");
    map
});

static PRINT_CONV_78: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Multi-segment");
    map
});

static PRINT_CONV_79: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Manual");
    map.insert("1".to_string(), "AF-S");
    map.insert("2".to_string(), "AF-C");
    map.insert("3".to_string(), "AF-A");
    map
});

static PRINT_CONV_80: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Multi-segment");
    map
});

static PRINT_CONV_81: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Standard");
    map.insert("1".to_string(), "Daylight");
    map.insert("2".to_string(), "Shade");
    map.insert("3".to_string(), "Cloudy");
    map.insert("4".to_string(), "Daylight Fluorescent");
    map.insert("5".to_string(), "Day White Fluorescent");
    map.insert("6".to_string(), "White Fluorescent");
    map.insert("7".to_string(), "Tungsten");
    map.insert("8".to_string(), "Unknown");
    map
});

static PRINT_CONV_82: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Multi-segment");
    map
});

/// Get tag definitions for other category
pub fn get_other_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (0, TagKitDef {
            id: 0,
            name: "PentaxVersion",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression(r"$val=~tr/ /./; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (1022, TagKitDef {
            id: 1022,
            name: "DataDump",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("\\$val"),
            value_conv: None,
            subdirectory: None,
        }),
        (1023, TagKitDef {
            id: 1023,
            name: "TempInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x3ff_subdirectory }),
        }),
        (1023, TagKitDef {
            id: 1023,
            name: "UnknownInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x3ff_subdirectory }),
        }),
        (1026, TagKitDef {
            id: 1026,
            name: "ToneCurve",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\\$val"),
            value_conv: None,
            subdirectory: None,
        }),
        (1027, TagKitDef {
            id: 1027,
            name: "ToneCurves",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\\$val"),
            value_conv: None,
            subdirectory: None,
        }),
        (1029, TagKitDef {
            id: 1029,
            name: "UnknownBlock",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("large unknown data block in PEF/DNG images but not JPG images"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (103, TagKitDef {
            id: 103,
            name: "Hue",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_22),
            value_conv: None,
            subdirectory: None,
        }),
        (1035, TagKitDef {
            id: 1035,
            name: "FaceInfoK3III",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x40b_subdirectory }),
        }),
        (1036, TagKitDef {
            id: 1036,
            name: "AFInfoK3III",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x40c_subdirectory }),
        }),
        (104, TagKitDef {
            id: 104,
            name: "AWBInfo",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x68_subdirectory }),
        }),
        (105, TagKitDef {
            id: 105,
            name: "DynamicRangeExpansion",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("called highlight correction by Pentax for the K20D, K-5, K-01 and maybe\n            other models"),
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (108, TagKitDef {
            id: 108,
            name: "HighLowKeyAdj",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_23),
            value_conv: None,
            subdirectory: None,
        }),
        (109, TagKitDef {
            id: 109,
            name: "ContrastHighlight",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_24),
            value_conv: None,
            subdirectory: None,
        }),
        (11, TagKitDef {
            id: 11,
            name: "PictureMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("1 or 2 values.  Decimal values differentiate Optio 555 modes which are\n            different from other models"),
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: Some("(IsInt($val) and $val < 4 and $$self{Model} =~ /Optio 555\\b/) ? $val + 0.1 : $val"),
            subdirectory: None,
        }),
        (110, TagKitDef {
            id: 110,
            name: "ContrastShadow",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_25),
            value_conv: None,
            subdirectory: None,
        }),
        (111, TagKitDef {
            id: 111,
            name: "ContrastHighlightShadowAdj",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_26),
            value_conv: None,
            subdirectory: None,
        }),
        (112, TagKitDef {
            id: 112,
            name: "FineSharpness",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (113, TagKitDef {
            id: 113,
            name: "HighISONoiseReduction",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (114, TagKitDef {
            id: 114,
            name: "AFAdjustment",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (115, TagKitDef {
            id: 115,
            name: "MonochromeFilterEffect",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_27),
            value_conv: None,
            subdirectory: None,
        }),
        (116, TagKitDef {
            id: 116,
            name: "MonochromeToning",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_28),
            value_conv: None,
            subdirectory: None,
        }),
        (118, TagKitDef {
            id: 118,
            name: "FaceDetect",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (119, TagKitDef {
            id: 119,
            name: "FaceDetectFrameSize",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "FlashMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (121, TagKitDef {
            id: 121,
            name: "ShadowCorrection",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_29),
            value_conv: None,
            subdirectory: None,
        }),
        (122, TagKitDef {
            id: 122,
            name: "ISOAutoMinSpeed",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (123, TagKitDef {
            id: 123,
            name: "CrossProcess",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_30),
            value_conv: None,
            subdirectory: None,
        }),
        (125, TagKitDef {
            id: 125,
            name: "LensCorr",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x7d_subdirectory }),
        }),
        (126, TagKitDef {
            id: 126,
            name: "WhiteLevel",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (127, TagKitDef {
            id: 127,
            name: "BleachBypassToning",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_31),
            value_conv: None,
            subdirectory: None,
        }),
        (128, TagKitDef {
            id: 128,
            name: "AspectRatio",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_32),
            value_conv: None,
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "FocusMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("Pentax models"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_33),
            value_conv: None,
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "FocusMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("Asahi models"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_34),
            value_conv: None,
            subdirectory: None,
        }),
        (130, TagKitDef {
            id: 130,
            name: "BlurControl",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (133, TagKitDef {
            id: 133,
            name: "HDR",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (135, TagKitDef {
            id: 135,
            name: "ShutterType",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_35),
            value_conv: None,
            subdirectory: None,
        }),
        (136, TagKitDef {
            id: 136,
            name: "NeutralDensityFilter",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_36),
            value_conv: None,
            subdirectory: None,
        }),
        (139, TagKitDef {
            id: 139,
            name: "ISO",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "AFPointSelected",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("K-1"),
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "AFPointSelected",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("K-3"),
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "AFPointSelected",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("other models"),
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (146, TagKitDef {
            id: 146,
            name: "IntervalShooting",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("2 numbers: 1. Shot number 2. Total number of shots"),
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (149, TagKitDef {
            id: 149,
            name: "SkinToneCorrection",
            format: "int8s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_37),
            value_conv: None,
            subdirectory: None,
        }),
        (149, TagKitDef {
            id: 149,
            name: "SkinToneCorrection",
            format: "int8s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_38),
            value_conv: None,
            subdirectory: None,
        }),
        (15, TagKitDef {
            id: 15,
            name: "AFPointsInFocus",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("K-3, K-S1 and K-S2 only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_39),
            value_conv: None,
            subdirectory: None,
        }),
        (15, TagKitDef {
            id: 15,
            name: "AFPointsInFocus",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("other models"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_40),
            value_conv: None,
            subdirectory: None,
        }),
        (150, TagKitDef {
            id: 150,
            name: "ClarityControl",
            format: "int8s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
        (16, TagKitDef {
            id: 16,
            name: "FocusPosition",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("related to focus distance but affected by focal length"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (19, TagKitDef {
            id: 19,
            name: "FNumber",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f\",$val)"),
            value_conv: Some("$val / 10"),
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "ISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("may be different than EXIF:ISO, which can round to the nearest full stop"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_41),
            value_conv: None,
            subdirectory: None,
        }),
        (21, TagKitDef {
            id: 21,
            name: "LightReading",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("calibrated differently for different models.  For the Optio WP, add 6 to get\n            approximate Light Value.  May not be valid for some models, eg. Optio S"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (22, TagKitDef {
            id: 22,
            name: "ExposureCompensation",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("some models write two values here.  The second value is meaning of the\n            second value is not yet known"),
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\", $val) : 0"),
            value_conv: Some("($val - 50) / 10"),
            subdirectory: None,
        }),
        (22, TagKitDef {
            id: 22,
            name: "ExposureCompensation",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\", $val) : 0"),
            value_conv: Some("$val =~ s/ .*//; ($val - 50) / 10"),
            subdirectory: None,
        }),
        (23, TagKitDef {
            id: 23,
            name: "MeteringMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_42),
            value_conv: None,
            subdirectory: None,
        }),
        (24, TagKitDef {
            id: 24,
            name: "AutoBracketing",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("1 or 2 values: exposure bracket step in EV, then extended bracket if\n            available.  Extended bracket values are printed as 'WB-BA', 'WB-GM',\n            'Saturation', 'Sharpness', 'Contrast', 'Hue' or 'HighLowKey' followed by\n            '+1', '+2' or '+3' for step size"),
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (25, TagKitDef {
            id: 25,
            name: "WhiteBalance",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_43),
            value_conv: None,
            subdirectory: None,
        }),
        (26, TagKitDef {
            id: 26,
            name: "WhiteBalanceMode",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_44),
            value_conv: None,
            subdirectory: None,
        }),
        (27, TagKitDef {
            id: 27,
            name: "BlueBalance",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val / 256"),
            subdirectory: None,
        }),
        (28, TagKitDef {
            id: 28,
            name: "RedBalance",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val / 256"),
            subdirectory: None,
        }),
        (29, TagKitDef {
            id: 29,
            name: "FocalLength",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f mm\",$val)"),
            value_conv: Some("$val / 10"),
            subdirectory: None,
        }),
        (29, TagKitDef {
            id: 29,
            name: "FocalLength",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f mm\",$val)"),
            value_conv: Some("$val / 100"),
            subdirectory: None,
        }),
        (30, TagKitDef {
            id: 30,
            name: "DigitalZoom",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val / 100"),
            subdirectory: None,
        }),
        (31, TagKitDef {
            id: 31,
            name: "Saturation",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("1 or 2 values"),
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (32, TagKitDef {
            id: 32,
            name: "Contrast",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("1 or 2 values"),
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (33, TagKitDef {
            id: 33,
            name: "Sharpness",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("1 or 2 values"),
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (35, TagKitDef {
            id: 35,
            name: "HometownCity",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_45),
            value_conv: None,
            subdirectory: None,
        }),
        (3584, TagKitDef {
            id: 3584,
            name: "PrintIM",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0xe00_subdirectory }),
        }),
        (36, TagKitDef {
            id: 36,
            name: "DestinationCity",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_46),
            value_conv: None,
            subdirectory: None,
        }),
        (37, TagKitDef {
            id: 37,
            name: "HometownDST",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_47),
            value_conv: None,
            subdirectory: None,
        }),
        (38, TagKitDef {
            id: 38,
            name: "DestinationDST",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_48),
            value_conv: None,
            subdirectory: None,
        }),
        (39, TagKitDef {
            id: 39,
            name: "DSPFirmwareVersion",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression(r"$val=~tr/ /./; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (40, TagKitDef {
            id: 40,
            name: "CPUFirmwareVersion",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression(r"$val=~tr/ /./; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (41, TagKitDef {
            id: 41,
            name: "FrameNumber",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (45, TagKitDef {
            id: 45,
            name: "EffectiveLV",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("camera-calculated light value, but includes exposure compensation"),
            print_conv: PrintConvType::Expression("sprintf(\"%.1f\",$val)"),
            value_conv: Some("$val/1024"),
            subdirectory: None,
        }),
        (45, TagKitDef {
            id: 45,
            name: "EffectiveLV",
            format: "int32s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.1f\",$val)"),
            value_conv: Some("$val/1024"),
            subdirectory: None,
        }),
        (50, TagKitDef {
            id: 50,
            name: "ImageEditing",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_49),
            value_conv: None,
            subdirectory: None,
        }),
        (51, TagKitDef {
            id: 51,
            name: "PictureMode",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (512, TagKitDef {
            id: 512,
            name: "BlackPoint",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (515, TagKitDef {
            id: 515,
            name: "ColorMatrixA",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("join(\" \",map({sprintf(\"%.5f\",$_)} split(\" \",$val)))"),
            value_conv: Some("join(\" \",map({ $_/8192 } split(\" \",$val)))"),
            subdirectory: None,
        }),
        (516, TagKitDef {
            id: 516,
            name: "ColorMatrixB",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("join(\" \",map({sprintf(\"%.5f\",$_)} split(\" \",$val)))"),
            value_conv: Some("join(\" \",map({ $_/8192 } split(\" \",$val)))"),
            subdirectory: None,
        }),
        (517, TagKitDef {
            id: 517,
            name: "CameraSettings",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x205_subdirectory }),
        }),
        (517, TagKitDef {
            id: 517,
            name: "CameraSettingsUnknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x205_subdirectory }),
        }),
        (518, TagKitDef {
            id: 518,
            name: "AEInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x206_subdirectory }),
        }),
        (518, TagKitDef {
            id: 518,
            name: "AEInfo2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x206_subdirectory }),
        }),
        (518, TagKitDef {
            id: 518,
            name: "AEInfo3",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x206_subdirectory }),
        }),
        (518, TagKitDef {
            id: 518,
            name: "AEInfoUnknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x206_subdirectory }),
        }),
        (519, TagKitDef {
            id: 519,
            name: "LensInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x207_subdirectory }),
        }),
        (519, TagKitDef {
            id: 519,
            name: "LensInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x207_subdirectory }),
        }),
        (519, TagKitDef {
            id: 519,
            name: "LensInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x207_subdirectory }),
        }),
        (519, TagKitDef {
            id: 519,
            name: "LensInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x207_subdirectory }),
        }),
        (519, TagKitDef {
            id: 519,
            name: "LensInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x207_subdirectory }),
        }),
        (52, TagKitDef {
            id: 52,
            name: "DriveMode",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (520, TagKitDef {
            id: 520,
            name: "FlashInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x208_subdirectory }),
        }),
        (520, TagKitDef {
            id: 520,
            name: "FlashInfoUnknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x208_subdirectory }),
        }),
        (521, TagKitDef {
            id: 521,
            name: "AEMeteringSegments",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("measurements from each of the 16 AE metering segments for models such as the\n            K10D, 77 metering segments for models such as the K-5, and 4050 metering\n            segments for the K-3, converted to LV"),
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (522, TagKitDef {
            id: 522,
            name: "FlashMeteringSegments",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (523, TagKitDef {
            id: 523,
            name: "SlaveFlashMeteringSegments",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("used in wireless control mode"),
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (525, TagKitDef {
            id: 525,
            name: "WB_RGGBLevelsDaylight",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (526, TagKitDef {
            id: 526,
            name: "WB_RGGBLevelsShade",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (527, TagKitDef {
            id: 527,
            name: "WB_RGGBLevelsCloudy",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (53, TagKitDef {
            id: 53,
            name: "SensorSize",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("includes masked pixels"),
            print_conv: PrintConvType::Expression("sprintf(\"%.3f x %.3f mm\", split(\" \",$val))"),
            value_conv: Some("my @a=split(\" \",$val); $_/=500 foreach @a; join(\" \",@a)"),
            subdirectory: None,
        }),
        (539, TagKitDef {
            id: 539,
            name: "SaturationInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: Some("only in PEF and DNG images"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (540, TagKitDef {
            id: 540,
            name: "ColorMatrixA2",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (541, TagKitDef {
            id: 541,
            name: "ColorMatrixB2",
            format: "int16s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (543, TagKitDef {
            id: 543,
            name: "AFInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x21f_subdirectory }),
        }),
        (544, TagKitDef {
            id: 544,
            name: "HuffmanTable",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: Some("found in K10D, K20D and K2000 PEF images"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (545, TagKitDef {
            id: 545,
            name: "KelvinWB",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x221_subdirectory }),
        }),
        (546, TagKitDef {
            id: 546,
            name: "ColorInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x222_subdirectory }),
        }),
        (548, TagKitDef {
            id: 548,
            name: "EVStepInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x224_subdirectory }),
        }),
        (55, TagKitDef {
            id: 55,
            name: "ColorSpace",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_50),
            value_conv: None,
            subdirectory: None,
        }),
        (550, TagKitDef {
            id: 550,
            name: "ShotInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x226_subdirectory }),
        }),
        (551, TagKitDef {
            id: 551,
            name: "FacePos",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x227_subdirectory }),
        }),
        (552, TagKitDef {
            id: 552,
            name: "FaceSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x228_subdirectory }),
        }),
        (553, TagKitDef {
            id: 553,
            name: "SerialNumber",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: Some("left blank by some cameras"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (554, TagKitDef {
            id: 554,
            name: "FilterInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x22a_subdirectory }),
        }),
        (554, TagKitDef {
            id: 554,
            name: "FilterInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x22a_subdirectory }),
        }),
        (555, TagKitDef {
            id: 555,
            name: "LevelInfoK3III",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x22b_subdirectory }),
        }),
        (555, TagKitDef {
            id: 555,
            name: "LevelInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x22b_subdirectory }),
        }),
        (557, TagKitDef {
            id: 557,
            name: "WBLevels",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x22d_subdirectory }),
        }),
        (558, TagKitDef {
            id: 558,
            name: "Artist",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (559, TagKitDef {
            id: 559,
            name: "Copyright",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (56, TagKitDef {
            id: 56,
            name: "ImageAreaOffset",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (560, TagKitDef {
            id: 560,
            name: "FirmwareVersion",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: Some("only in videos"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (561, TagKitDef {
            id: 561,
            name: "ContrastDetectAFArea",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("AF area of the most recent contrast-detect focus operation. Coordinates\n            are left, top, width and height in a 720x480 frame, with Y downwards"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (565, TagKitDef {
            id: 565,
            name: "CrossProcessParams",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (568, TagKitDef {
            id: 568,
            name: "CAFPointInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x238_subdirectory }),
        }),
        (569, TagKitDef {
            id: 569,
            name: "LensInfoQ",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x239_subdirectory }),
        }),
        (57, TagKitDef {
            id: 57,
            name: "RawImageSize",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("$_=$val;s/ /x/;$_"),
            value_conv: None,
            subdirectory: None,
        }),
        (575, TagKitDef {
            id: 575,
            name: "Model",
            format: "string",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (579, TagKitDef {
            id: 579,
            name: "PixelShiftInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x243_subdirectory }),
        }),
        (581, TagKitDef {
            id: 581,
            name: "AFPointInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x245_subdirectory }),
        }),
        (60, TagKitDef {
            id: 60,
            name: "AFPointsInFocus",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("*istD only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_51),
            value_conv: Some("$val & 0x7ff"),
            subdirectory: None,
        }),
        (61, TagKitDef {
            id: 61,
            name: "DataScaling",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (62, TagKitDef {
            id: 62,
            name: "PreviewImageBorders",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("top, bottom, left, right"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (63, TagKitDef {
            id: 63,
            name: "LensRec",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x3f_subdirectory }),
        }),
        (64, TagKitDef {
            id: 64,
            name: "SensitivityAdjust",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\", $val) : 0"),
            value_conv: Some("($val - 50) / 10"),
            subdirectory: None,
        }),
        (65, TagKitDef {
            id: 65,
            name: "ImageEditCount",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (71, TagKitDef {
            id: 71,
            name: "CameraTemperature",
            format: "int8s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val C\""),
            value_conv: None,
            subdirectory: None,
        }),
        (72, TagKitDef {
            id: 72,
            name: "AELock",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_52),
            value_conv: None,
            subdirectory: None,
        }),
        (73, TagKitDef {
            id: 73,
            name: "NoiseReduction",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_53),
            value_conv: None,
            subdirectory: None,
        }),
        (77, TagKitDef {
            id: 77,
            name: "FlashExposureComp",
            format: "int32s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\", $val) : 0"),
            value_conv: Some("$val / 256"),
            subdirectory: None,
        }),
        (77, TagKitDef {
            id: 77,
            name: "FlashExposureComp",
            format: "int8s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (79, TagKitDef {
            id: 79,
            name: "ImageTone",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_54),
            value_conv: None,
            subdirectory: None,
        }),
        (80, TagKitDef {
            id: 80,
            name: "ColorTemperature",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("53190 - $val"),
            subdirectory: None,
        }),
        (83, TagKitDef {
            id: 83,
            name: "ColorTempDaylight",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("0x0053-0x005a are 3 numbers: Kelvin, shift AB, shift GM"),
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (84, TagKitDef {
            id: 84,
            name: "ColorTempShade",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (85, TagKitDef {
            id: 85,
            name: "ColorTempCloudy",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (86, TagKitDef {
            id: 86,
            name: "ColorTempTungsten",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (87, TagKitDef {
            id: 87,
            name: "ColorTempFluorescentD",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (88, TagKitDef {
            id: 88,
            name: "ColorTempFluorescentN",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (89, TagKitDef {
            id: 89,
            name: "ColorTempFluorescentW",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (90, TagKitDef {
            id: 90,
            name: "ColorTempFlash",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (92, TagKitDef {
            id: 92,
            name: "ShakeReductionInfo",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x5c_subdirectory }),
        }),
        (92, TagKitDef {
            id: 92,
            name: "ShakeReductionInfo",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x5c_subdirectory }),
        }),
        (93, TagKitDef {
            id: 93,
            name: "ShutterCount",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("Note: May be reset by servicing!  Also, does not include shutter actuations\n            for live view or video recording"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (96, TagKitDef {
            id: 96,
            name: "FaceInfo",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x60_subdirectory }),
        }),
        (98, TagKitDef {
            id: 98,
            name: "RawDevelopmentProcess",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_55),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SRResult",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_56),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SRResult",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("BITMASK"),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "FacesDetected",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "WhiteBalanceAutoAdjustment",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_57),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "HometownDST",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_58),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "DestinationDST",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_59),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "DistortionCorrection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_60),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "PictureMode2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_61),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "ProgramLine",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_62),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "EVSteps",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_63),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "E-DialInProgram",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_64),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "ApertureRingUse",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_65),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "MultipleExposureSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_66),
            value_conv: None,
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "RawAndJpgRecording",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K10D only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_67),
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "JpgRecordedPixels",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K10D only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_68),
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "LinkAEToAFPoint",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K-5 only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_69),
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "SensitivitySteps",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K-5 only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_70),
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "ISOAuto",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K-5 only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_71),
            value_conv: None,
            subdirectory: None,
        }),
        (16, TagKitDef {
            id: 16,
            name: "FlashOptions2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K10D only; set even if the flash is off"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_72),
            value_conv: None,
            subdirectory: None,
        }),
        (16, TagKitDef {
            id: 16,
            name: "MeteringMode3",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K10D only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_73),
            value_conv: None,
            subdirectory: None,
        }),
        (17, TagKitDef {
            id: 17,
            name: "SRActive",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K10D only; SR is active only when ShakeReduction is On, DriveMode is not\n            Remote or Self-timer, and Internal/ExternalFlashMode is not \"On, Wireless\""),
            print_conv: PrintConvType::Simple(&PRINT_CONV_74),
            value_conv: None,
            subdirectory: None,
        }),
        (17, TagKitDef {
            id: 17,
            name: "Rotation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K10D only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_75),
            value_conv: None,
            subdirectory: None,
        }),
        (17, TagKitDef {
            id: 17,
            name: "ISOSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K10D only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_76),
            value_conv: None,
            subdirectory: None,
        }),
        (17, TagKitDef {
            id: 17,
            name: "SensitivitySteps",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K10D only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_77),
            value_conv: None,
            subdirectory: None,
        }),
        (19, TagKitDef {
            id: 19,
            name: "AvApertureSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K10D only"),
            print_conv: PrintConvType::Expression("sprintf(\"%.1f\",$val)"),
            value_conv: Some("exp(Image::ExifTool::Pentax::PentaxEv($val-68)*log(2)/2)"),
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "MeteringMode2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("may not be valid for some models, eg. *ist D"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_78),
            value_conv: None,
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "SvISOSetting",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K10D only"),
            print_conv: PrintConvType::None,
            value_conv: Some("int(100*exp(Image::ExifTool::Pentax::PentaxEv($val-32)*log(2))+0.5)"),
            subdirectory: None,
        }),
        (21, TagKitDef {
            id: 21,
            name: "BaseExposureCompensation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K10D only; exposure compensation without auto bracketing"),
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\", $val) : 0"),
            value_conv: Some("Image::ExifTool::Pentax::PentaxEv(64-$val)"),
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "FocusMode2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_79),
            value_conv: None,
            subdirectory: None,
        }),
        (11, TagKitDef {
            id: 11,
            name: "AEMinAperture",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("val = 2**((raw-68)/16)"),
            print_conv: PrintConvType::Expression("sprintf(\"%.0f\",$val)"),
            value_conv: Some("exp(($val-68)*log(2)/16)"),
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "AEMeteringMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_80),
            value_conv: None,
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "AEWhiteBalance",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K7 and Kx"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_81),
            value_conv: None,
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "AEMeteringMode2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("K7 and Kx, override for an incompatible metering mode setting"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_82),
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "FlashExposureCompSet",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: Some("reports the camera setting, unlike tag 0x004d which reports 0 in Green mode\n            or if flash was on but did not fire.  Both this tag and 0x004d report the\n            setting even if the flash is off"),
            print_conv: PrintConvType::Expression("$val ? sprintf(\"%+.1f\", $val) : 0"),
            value_conv: Some("Image::ExifTool::Pentax::PentaxEv($val)"),
            subdirectory: None,
        }),
        (21, TagKitDef {
            id: 21,
            name: "LevelIndicator",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val == 90 ? \"n/a\" : $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "LensType",
            format: "int8u[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ComplexHash"),
            value_conv: None,
            subdirectory: None,
        }),
    ]
}
