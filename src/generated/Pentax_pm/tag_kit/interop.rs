//! Tag kits for interop category from Pentax.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_2: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("13".to_string(), "Optio 330/430");
    map.insert("76070".to_string(), "Optio 230");
    map.insert("76120".to_string(), "Optio 330GS");
    map.insert("76130".to_string(), "Optio 450/550");
    map.insert("76140".to_string(), "Optio S");
    map.insert("76145".to_string(), "Optio S V1.01");
    map.insert("76180".to_string(), "*ist D");
    map.insert("76210".to_string(), "Optio 33L");
    map.insert("76220".to_string(), "Optio 33LF");
    map.insert("76230".to_string(), "Optio 33WR/43WR/555");
    map.insert("76245".to_string(), "Optio S4");
    map.insert("76290".to_string(), "Optio MX");
    map.insert("76300".to_string(), "Optio S40");
    map.insert("76310".to_string(), "Optio S4i");
    map.insert("76340".to_string(), "Optio 30");
    map.insert("76370".to_string(), "Optio S30");
    map.insert("76390".to_string(), "Optio 750Z");
    map.insert("76400".to_string(), "Optio SV");
    map.insert("76405".to_string(), "Optio SVi");
    map.insert("76410".to_string(), "Optio X");
    map.insert("76430".to_string(), "Optio S5i");
    map.insert("76440".to_string(), "Optio S50");
    map.insert("76450".to_string(), "*ist DS");
    map.insert("76470".to_string(), "Optio MX4");
    map.insert("76480".to_string(), "Optio S5n");
    map.insert("76490".to_string(), "Optio WP");
    map.insert("76540".to_string(), "Optio S55");
    map.insert("76560".to_string(), "Optio S5z");
    map.insert("76570".to_string(), "*ist DL");
    map.insert("76580".to_string(), "Optio S60");
    map.insert("76590".to_string(), "Optio S45");
    map.insert("76600".to_string(), "Optio S6");
    map.insert("76620".to_string(), "Optio WPi");
    map.insert("76630".to_string(), "BenQ DC X600");
    map.insert("76640".to_string(), "*ist DS2");
    map.insert("76642".to_string(), "Samsung GX-1S");
    map.insert("76650".to_string(), "Optio A10");
    map.insert("76670".to_string(), "*ist DL2");
    map.insert("76672".to_string(), "Samsung GX-1L");
    map.insert("76700".to_string(), "K100D");
    map.insert("76701".to_string(), "K110D");
    map.insert("76706".to_string(), "K100D Super");
    map.insert("76720".to_string(), "Optio T10/T20");
    map.insert("76770".to_string(), "Optio W10");
    map.insert("76790".to_string(), "Optio M10");
    map.insert("76830".to_string(), "K10D");
    map.insert("76832".to_string(), "Samsung GX10");
    map.insert("76840".to_string(), "Optio S7");
    map.insert("76845".to_string(), "Optio L20");
    map.insert("76850".to_string(), "Optio M20");
    map.insert("76860".to_string(), "Optio W20");
    map.insert("76870".to_string(), "Optio A20");
    map.insert("76920".to_string(), "Optio E30");
    map.insert("76925".to_string(), "Optio E35");
    map.insert("76930".to_string(), "Optio T30");
    map.insert("76940".to_string(), "Optio M30");
    map.insert("76945".to_string(), "Optio L30");
    map.insert("76950".to_string(), "Optio W30");
    map.insert("76960".to_string(), "Optio A30");
    map.insert("76980".to_string(), "Optio E40");
    map.insert("76990".to_string(), "Optio M40");
    map.insert("76995".to_string(), "Optio L40");
    map.insert("76997".to_string(), "Optio L36");
    map.insert("77000".to_string(), "Optio Z10");
    map.insert("77010".to_string(), "K20D");
    map.insert("77012".to_string(), "Samsung GX20");
    map.insert("77020".to_string(), "Optio S10");
    map.insert("77030".to_string(), "Optio A40");
    map.insert("77040".to_string(), "Optio V10");
    map.insert("77050".to_string(), "K200D");
    map.insert("77060".to_string(), "Optio S12");
    map.insert("77070".to_string(), "Optio E50");
    map.insert("77080".to_string(), "Optio M50");
    map.insert("77090".to_string(), "Optio L50");
    map.insert("77100".to_string(), "Optio V20");
    map.insert("77120".to_string(), "Optio W60");
    map.insert("77130".to_string(), "Optio M60");
    map.insert("77160".to_string(), "Optio E60/M90");
    map.insert("77170".to_string(), "K2000");
    map.insert("77171".to_string(), "K-m");
    map.insert("77190".to_string(), "Optio P70");
    map.insert("77200".to_string(), "Optio L70");
    map.insert("77210".to_string(), "Optio E70");
    map.insert("77230".to_string(), "X70");
    map.insert("77240".to_string(), "K-7");
    map.insert("77260".to_string(), "Optio W80");
    map.insert("77290".to_string(), "Optio P80");
    map.insert("77300".to_string(), "Optio WS80");
    map.insert("77310".to_string(), "K-x");
    map.insert("77320".to_string(), "645D");
    map.insert("77330".to_string(), "Optio E80");
    map.insert("77360".to_string(), "Optio W90");
    map.insert("77370".to_string(), "Optio I-10");
    map.insert("77380".to_string(), "Optio H90");
    map.insert("77390".to_string(), "Optio E90");
    map.insert("77400".to_string(), "X90");
    map.insert("77420".to_string(), "K-r");
    map.insert("77430".to_string(), "K-5");
    map.insert("77450".to_string(), "Optio RS1000/RS1500");
    map.insert("77460".to_string(), "Optio RZ10");
    map.insert("77470".to_string(), "Optio LS1000");
    map.insert("77500".to_string(), "Optio WG-1 GPS");
    map.insert("77520".to_string(), "Optio S1");
    map.insert("77540".to_string(), "Q");
    map.insert("77560".to_string(), "K-01");
    map.insert("77580".to_string(), "Optio RZ18");
    map.insert("77590".to_string(), "Optio VS20");
    map.insert("77610".to_string(), "Optio WG-2 GPS");
    map.insert("77640".to_string(), "Optio LS465");
    map.insert("77650".to_string(), "K-30");
    map.insert("77660".to_string(), "X-5");
    map.insert("77670".to_string(), "Q10");
    map.insert("77680".to_string(), "K-5 II");
    map.insert("77681".to_string(), "K-5 II s");
    map.insert("77690".to_string(), "Q7");
    map.insert("77700".to_string(), "MX-1");
    map.insert("77710".to_string(), "WG-3 GPS");
    map.insert("77720".to_string(), "WG-3");
    map.insert("77730".to_string(), "WG-10");
    map.insert("77750".to_string(), "K-50");
    map.insert("77760".to_string(), "K-3");
    map.insert("77770".to_string(), "K-500");
    map.insert("77790".to_string(), "WG-4 GPS");
    map.insert("77800".to_string(), "WG-4");
    map.insert("77830".to_string(), "WG-20");
    map.insert("77840".to_string(), "645Z");
    map.insert("77850".to_string(), "K-S1");
    map.insert("77860".to_string(), "K-S2");
    map.insert("77870".to_string(), "Q-S1");
    map.insert("77910".to_string(), "WG-30");
    map.insert("77950".to_string(), "WG-30W");
    map.insert("77960".to_string(), "WG-5 GPS");
    map.insert("77970".to_string(), "K-1");
    map.insert("77980".to_string(), "K-3 II");
    map.insert("78320".to_string(), "WG-M2");
    map.insert("78350".to_string(), "GR III");
    map.insert("78370".to_string(), "K-70");
    map.insert("78380".to_string(), "KP");
    map.insert("78400".to_string(), "K-1 Mark II");
    map.insert("78420".to_string(), "K-3 Mark III");
    map.insert("78480".to_string(), "WG-70");
    map.insert("78490".to_string(), "GR IIIx");
    map.insert("78520".to_string(), "KF");
    map.insert("78550".to_string(), "K-3 Mark III Monochrome");
    map
});

static PRINT_CONV_3: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Good");
    map.insert("1".to_string(), "Better");
    map.insert("2".to_string(), "Best");
    map.insert("3".to_string(), "TIFF");
    map.insert("4".to_string(), "RAW");
    map.insert("5".to_string(), "Premium");
    map.insert("65535".to_string(), "n/a");
    map.insert("7".to_string(), "RAW (pixel shift enabled)");
    map.insert("8".to_string(), "Dynamic Pixel Shift");
    map.insert("9".to_string(), "Monochrome");
    map
});

static PRINT_CONV_4: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "640x480");
    map.insert("0 0".to_string(), "2304x1728");
    map.insert("1".to_string(), "Full");
    map.insert("10".to_string(), "3264x2448");
    map.insert("129".to_string(), "1920x1080");
    map.insert("135".to_string(), "4608x2592");
    map.insert("19".to_string(), "320x240");
    map.insert("2".to_string(), "1024x768");
    map.insert("20".to_string(), "2288x1712");
    map.insert("21".to_string(), "2592x1944");
    map.insert("22".to_string(), "2304x1728 or 2592x1944");
    map.insert("23".to_string(), "3056x2296");
    map.insert("25".to_string(), "2816x2212 or 2816x2112");
    map.insert("257".to_string(), "3216x3216");
    map.insert("27".to_string(), "3648x2736");
    map.insert("29".to_string(), "4000x3000");
    map.insert("3".to_string(), "1280x960");
    map.insert("30".to_string(), "4288x3216");
    map.insert("31".to_string(), "4608x3456");
    map.insert("32 2".to_string(), "960x640");
    map.insert("33 2".to_string(), "1152x768");
    map.insert("34 2".to_string(), "1536x1024");
    map.insert("35 1".to_string(), "2400x1600");
    map.insert("36 0".to_string(), "3008x2008 or 3040x2024");
    map.insert("37 0".to_string(), "3008x2000");
    map.insert("4".to_string(), "1600x1200");
    map.insert("4 0".to_string(), "1600x1200");
    map.insert("5".to_string(), "2048x1536");
    map.insert("5 0".to_string(), "2048x1536");
    map.insert("8".to_string(), "2560x1920 or 2304x1728");
    map.insert("8 0".to_string(), "2560x1920");
    map.insert("9".to_string(), "3072x2304");
    map
});

static PRINT_CONV_5: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("135".to_string(), "On (135)");
    map.insert("15".to_string(), "On (15)");
    map.insert("167".to_string(), "On (mode 1)");
    map.insert("39".to_string(), "On (mode 2)");
    map.insert("4".to_string(), "Off (4)");
    map.insert("5".to_string(), "On but Disabled");
    map.insert("6".to_string(), "On (Video)");
    map.insert("7".to_string(), "On (7)");
    map
});

static PRINT_CONV_6: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map.insert("12".to_string(), "Off (AA simulation type 1)");
    map.insert("15".to_string(), "On (AA simulation type 1)");
    map.insert("16".to_string(), "Off (AA simulation type 2) (16)");
    map.insert("20".to_string(), "Off (AA simulation type 2)");
    map.insert("23".to_string(), "On (AA simulation type 2)");
    map.insert("4".to_string(), "Off (AA simulation off)");
    map.insert("5".to_string(), "On but Disabled");
    map.insert("6".to_string(), "On (Video)");
    map.insert("7".to_string(), "On (AA simulation off)");
    map.insert("8".to_string(), "Off (AA simulation type 1) (8)");
    map
});

static PRINT_CONV_7: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Subtle Correction");
    map.insert("1".to_string(), "Strong Correction");
    map
});

static PRINT_CONV_8: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Pago Pago");
    map.insert("1".to_string(), "Honolulu");
    map.insert("10".to_string(), "Miami");
    map.insert("11".to_string(), "Toronto");
    map.insert("12".to_string(), "New York");
    map.insert("13".to_string(), "Santiago");
    map.insert("14".to_string(), "Caracus");
    map.insert("15".to_string(), "Halifax");
    map.insert("16".to_string(), "Buenos Aires");
    map.insert("17".to_string(), "Sao Paulo");
    map.insert("18".to_string(), "Rio de Janeiro");
    map.insert("19".to_string(), "Madrid");
    map.insert("2".to_string(), "Anchorage");
    map.insert("20".to_string(), "London");
    map.insert("21".to_string(), "Paris");
    map.insert("22".to_string(), "Milan");
    map.insert("23".to_string(), "Rome");
    map.insert("24".to_string(), "Berlin");
    map.insert("25".to_string(), "Johannesburg");
    map.insert("26".to_string(), "Istanbul");
    map.insert("27".to_string(), "Cairo");
    map.insert("28".to_string(), "Jerusalem");
    map.insert("29".to_string(), "Moscow");
    map.insert("3".to_string(), "Vancouver");
    map.insert("30".to_string(), "Jeddah");
    map.insert("31".to_string(), "Tehran");
    map.insert("32".to_string(), "Dubai");
    map.insert("33".to_string(), "Karachi");
    map.insert("34".to_string(), "Kabul");
    map.insert("35".to_string(), "Male");
    map.insert("36".to_string(), "Delhi");
    map.insert("37".to_string(), "Colombo");
    map.insert("38".to_string(), "Kathmandu");
    map.insert("39".to_string(), "Dacca");
    map.insert("4".to_string(), "San Francisco");
    map.insert("40".to_string(), "Yangon");
    map.insert("41".to_string(), "Bangkok");
    map.insert("42".to_string(), "Kuala Lumpur");
    map.insert("43".to_string(), "Vientiane");
    map.insert("44".to_string(), "Singapore");
    map.insert("45".to_string(), "Phnom Penh");
    map.insert("46".to_string(), "Ho Chi Minh");
    map.insert("47".to_string(), "Jakarta");
    map.insert("48".to_string(), "Hong Kong");
    map.insert("49".to_string(), "Perth");
    map.insert("5".to_string(), "Los Angeles");
    map.insert("50".to_string(), "Beijing");
    map.insert("51".to_string(), "Shanghai");
    map.insert("52".to_string(), "Manila");
    map.insert("53".to_string(), "Taipei");
    map.insert("54".to_string(), "Seoul");
    map.insert("55".to_string(), "Adelaide");
    map.insert("56".to_string(), "Tokyo");
    map.insert("57".to_string(), "Guam");
    map.insert("58".to_string(), "Sydney");
    map.insert("59".to_string(), "Noumea");
    map.insert("6".to_string(), "Calgary");
    map.insert("60".to_string(), "Wellington");
    map.insert("61".to_string(), "Auckland");
    map.insert("62".to_string(), "Lima");
    map.insert("63".to_string(), "Dakar");
    map.insert("64".to_string(), "Algiers");
    map.insert("65".to_string(), "Helsinki");
    map.insert("66".to_string(), "Athens");
    map.insert("67".to_string(), "Nairobi");
    map.insert("68".to_string(), "Amsterdam");
    map.insert("69".to_string(), "Stockholm");
    map.insert("7".to_string(), "Denver");
    map.insert("70".to_string(), "Lisbon");
    map.insert("71".to_string(), "Copenhagen");
    map.insert("72".to_string(), "Warsaw");
    map.insert("73".to_string(), "Prague");
    map.insert("74".to_string(), "Budapest");
    map.insert("8".to_string(), "Mexico City");
    map.insert("9".to_string(), "Chicago");
    map
});

static PRINT_CONV_9: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Pago Pago");
    map.insert("1".to_string(), "Honolulu");
    map.insert("10".to_string(), "Miami");
    map.insert("11".to_string(), "Toronto");
    map.insert("12".to_string(), "New York");
    map.insert("13".to_string(), "Santiago");
    map.insert("14".to_string(), "Caracus");
    map.insert("15".to_string(), "Halifax");
    map.insert("16".to_string(), "Buenos Aires");
    map.insert("17".to_string(), "Sao Paulo");
    map.insert("18".to_string(), "Rio de Janeiro");
    map.insert("19".to_string(), "Madrid");
    map.insert("2".to_string(), "Anchorage");
    map.insert("20".to_string(), "London");
    map.insert("21".to_string(), "Paris");
    map.insert("22".to_string(), "Milan");
    map.insert("23".to_string(), "Rome");
    map.insert("24".to_string(), "Berlin");
    map.insert("25".to_string(), "Johannesburg");
    map.insert("26".to_string(), "Istanbul");
    map.insert("27".to_string(), "Cairo");
    map.insert("28".to_string(), "Jerusalem");
    map.insert("29".to_string(), "Moscow");
    map.insert("3".to_string(), "Vancouver");
    map.insert("30".to_string(), "Jeddah");
    map.insert("31".to_string(), "Tehran");
    map.insert("32".to_string(), "Dubai");
    map.insert("33".to_string(), "Karachi");
    map.insert("34".to_string(), "Kabul");
    map.insert("35".to_string(), "Male");
    map.insert("36".to_string(), "Delhi");
    map.insert("37".to_string(), "Colombo");
    map.insert("38".to_string(), "Kathmandu");
    map.insert("39".to_string(), "Dacca");
    map.insert("4".to_string(), "San Francisco");
    map.insert("40".to_string(), "Yangon");
    map.insert("41".to_string(), "Bangkok");
    map.insert("42".to_string(), "Kuala Lumpur");
    map.insert("43".to_string(), "Vientiane");
    map.insert("44".to_string(), "Singapore");
    map.insert("45".to_string(), "Phnom Penh");
    map.insert("46".to_string(), "Ho Chi Minh");
    map.insert("47".to_string(), "Jakarta");
    map.insert("48".to_string(), "Hong Kong");
    map.insert("49".to_string(), "Perth");
    map.insert("5".to_string(), "Los Angeles");
    map.insert("50".to_string(), "Beijing");
    map.insert("51".to_string(), "Shanghai");
    map.insert("52".to_string(), "Manila");
    map.insert("53".to_string(), "Taipei");
    map.insert("54".to_string(), "Seoul");
    map.insert("55".to_string(), "Adelaide");
    map.insert("56".to_string(), "Tokyo");
    map.insert("57".to_string(), "Guam");
    map.insert("58".to_string(), "Sydney");
    map.insert("59".to_string(), "Noumea");
    map.insert("6".to_string(), "Calgary");
    map.insert("60".to_string(), "Wellington");
    map.insert("61".to_string(), "Auckland");
    map.insert("62".to_string(), "Lima");
    map.insert("63".to_string(), "Dakar");
    map.insert("64".to_string(), "Algiers");
    map.insert("65".to_string(), "Helsinki");
    map.insert("66".to_string(), "Athens");
    map.insert("67".to_string(), "Nairobi");
    map.insert("68".to_string(), "Amsterdam");
    map.insert("69".to_string(), "Stockholm");
    map.insert("7".to_string(), "Denver");
    map.insert("70".to_string(), "Lisbon");
    map.insert("71".to_string(), "Copenhagen");
    map.insert("72".to_string(), "Warsaw");
    map.insert("73".to_string(), "Prague");
    map.insert("74".to_string(), "Budapest");
    map.insert("8".to_string(), "Mexico City");
    map.insert("9".to_string(), "Chicago");
    map
});

static PRINT_CONV_10: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_11: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_12: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("16".to_string(), "On");
    map
});

static PRINT_CONV_13: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map.insert("1".to_string(), "Daylight");
    map.insert("12".to_string(), "Set Color Temperature 1");
    map.insert("13".to_string(), "Set Color Temperature 2");
    map.insert("14".to_string(), "Set Color Temperature 3");
    map.insert("2".to_string(), "Shade");
    map.insert("3".to_string(), "Cloudy");
    map.insert("4".to_string(), "Daylight Fluorescent");
    map.insert("5".to_string(), "Day White Fluorescent");
    map.insert("6".to_string(), "White Fluorescent");
    map.insert("7".to_string(), "Tungsten");
    map.insert("8".to_string(), "Flash");
    map.insert("9".to_string(), "Manual");
    map
});

static PRINT_CONV_14: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Normal");
    map.insert("1".to_string(), "Red-eye reduction");
    map.insert("10".to_string(), "Trailing-curtain Sync");
    map.insert("2".to_string(), "Auto");
    map.insert("3".to_string(), "Auto, Red-eye reduction");
    map.insert("5".to_string(), "Wireless (Master)");
    map.insert("6".to_string(), "Wireless (Control)");
    map.insert("8".to_string(), "Slow-sync");
    map.insert("9".to_string(), "Slow-sync, Red-eye reduction");
    map
});

static PRINT_CONV_15: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map
});

static PRINT_CONV_16: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Auto");
    map
});

static PRINT_CONV_17: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Single-frame");
    map
});

static PRINT_CONV_18: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("11".to_string(), "1.3");
    map.insert("12".to_string(), "1.5");
    map.insert("13".to_string(), "1.7");
    map.insert("16".to_string(), "2.0");
    map.insert("3".to_string(), "0.3");
    map.insert("4".to_string(), "0.5");
    map.insert("5".to_string(), "0.7");
    map.insert("8".to_string(), "1.0");
    map
});

static PRINT_CONV_19: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("18".to_string(), "2 of 2");
    map.insert("19".to_string(), "2 of 3");
    map.insert("2".to_string(), "1 of 2");
    map.insert("21".to_string(), "2 of 5");
    map.insert("3".to_string(), "1 of 3");
    map.insert("35".to_string(), "3 of 3");
    map.insert("37".to_string(), "3 of 5");
    map.insert("5".to_string(), "1 of 5");
    map.insert("53".to_string(), "4 of 5");
    map.insert("69".to_string(), "5 of 5");
    map
});

static PRINT_CONV_20: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "M, P or TAv");
    map.insert("1".to_string(), "Av, B or X");
    map.insert("104".to_string(), "Night Snap");
    map.insert("107".to_string(), "Text");
    map.insert("11".to_string(), "Hi-speed Program (P-Shift)");
    map.insert("115".to_string(), "Sunset");
    map.insert("123".to_string(), "Kids");
    map.insert("131".to_string(), "Pet");
    map.insert("139".to_string(), "Candlelight");
    map.insert("144".to_string(), "SCN");
    map.insert("147".to_string(), "Museum");
    map.insert("16".to_string(), "DOF Program");
    map.insert("160".to_string(), "Program");
    map.insert("184".to_string(), "Shallow DOF Program");
    map.insert("19".to_string(), "DOF Program (P-Shift)");
    map.insert("2".to_string(), "Tv");
    map.insert("216".to_string(), "HDR");
    map.insert("24".to_string(), "MTF Program");
    map.insert("27".to_string(), "MTF Program (P-Shift)");
    map.insert("3".to_string(), "Sv or Green Mode");
    map.insert("35".to_string(), "Standard");
    map.insert("43".to_string(), "Portrait");
    map.insert("51".to_string(), "Landscape");
    map.insert("59".to_string(), "Macro");
    map.insert("67".to_string(), "Sport");
    map.insert("75".to_string(), "Night Scene Portrait");
    map.insert("8".to_string(), "Hi-speed Program");
    map.insert("83".to_string(), "No Flash");
    map.insert("91".to_string(), "Night Scene");
    map.insert("99".to_string(), "Surf & Snow");
    map
});

static PRINT_CONV_21: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Not attached");
    map.insert("1".to_string(), "Attached");
    map
});

/// Get tag definitions for interop category
pub fn get_interop_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (1, TagKitDef {
            id: 1,
            name: "PentaxModelType",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "PreviewImageSize",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression(r"$val =~ tr/ /x/; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "PreviewImageLength",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "PreviewImageStart",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (5, TagKitDef {
            id: 5,
            name: "PentaxModelID",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_2),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "Quality",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_3),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "PentaxImageSize",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_4),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "ShakeReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_5),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "SRFocalLength",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\"$val mm\""),
            value_conv: Some("$val & 0x01 ? $val * 4 : $val / 2"),
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "ShakeReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_6),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "FacePosition",
            format: "int8u[2]",
            groups: HashMap::new(),
            writable: false,
            notes: Some("X/Y coordinates of the center of the main face in percent of frame size,\n            with positive Y downwards"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "TungstenAWB",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_7),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "HometownCity",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_8),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "DestinationCity",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_9),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "ChromaticAberrationCorrection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_10),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "PeripheralIlluminationCorr",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_11),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "DiffractionCorrection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_12),
            value_conv: None,
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "WhiteBalanceSet",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_13),
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "FlashOptions",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("the camera flash options settings, set even if the flash is off"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_14),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "AFPointMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_15),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "AFPointSelected2",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_16),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "ISOFloor",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("int(100*exp(Image::ExifTool::Pentax::PentaxEv($val-32)*log(2))+0.5)"),
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "DriveMode2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_17),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "ExposureBracketStepSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_18),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "BracketShotNumber",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_19),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "AEAperture",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("val = 2**((raw-68)/16)"),
            print_conv: PrintConvType::Expression("sprintf(\"%.1f\",$val)"),
            value_conv: Some("exp(($val-68)*log(2)/16)"),
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "AEMaxAperture2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("val = 2**((raw-68)/16)"),
            print_conv: PrintConvType::Expression("sprintf(\"%.1f\",$val)"),
            value_conv: Some("exp(($val-68)*log(2)/16)"),
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "AE_ISO",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("val = 100 * 2**((raw-32)/8)"),
            print_conv: PrintConvType::Expression("int($val + 0.5)"),
            value_conv: Some("100*exp(($val-32)*log(2)/8)"),
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "AEXv",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("val = (raw-64)/8"),
            print_conv: PrintConvType::None,
            value_conv: Some("($val-64)/8"),
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "AEBXv",
            format: "int8s",
            groups: HashMap::new(),
            writable: false,
            notes: Some("val = raw / 8"),
            print_conv: PrintConvType::None,
            value_conv: Some("$val / 8"),
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "AEProgramMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_20),
            value_conv: None,
            subdirectory: None,
        }),
        (7, TagKitDef {
            id: 7,
            name: "AEFlags",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: Some("indices after this are incremented by 1 for some models"),
            print_conv: PrintConvType::Expression("BITMASK"),
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "AEApertureSteps",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("number of steps the aperture has been stopped down from wide open.  There\n            are roughly 8 steps per F-stop for most lenses, or 18 steps for 645D lenses,\n            but it varies slightly by lens"),
            print_conv: PrintConvType::Expression("$val == 255 ? \"n/a\" : $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "AEMaxAperture",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("val = 2**((raw-68)/16)"),
            print_conv: PrintConvType::Expression("sprintf(\"%.1f\",$val)"),
            value_conv: Some("exp(($val-68)*log(2)/16)"),
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "ExtenderStatus",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("not valid if a non-AF lens is used"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_21),
            value_conv: None,
            subdirectory: None,
        }),
    ]
}
