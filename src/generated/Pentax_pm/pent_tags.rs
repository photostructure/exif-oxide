//! Generated tag table definitions from Pentax::PENT
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_44::ast_print_449352809d0c73f5;
use crate::generated::functions::hash_4d::ast_value_4dd64ad8b929982b;
use crate::generated::functions::hash_5b::ast_value_5b997436cb4c4a4f;
use crate::generated::functions::hash_67::ast_value_67653a3c31f6d232;
use crate::generated::functions::hash_84::ast_print_8470e30e1e5b4729;
use crate::generated::functions::hash_87::ast_print_8764401e4e5a97bf;
use crate::generated::functions::hash_b7::ast_print_b75f5f46a9f320cf;
use crate::generated::functions::hash_ba::ast_print_ba030bb348470426;
use crate::generated::functions::hash_c1::ast_print_c12c7e50f55cf298;
use crate::generated::functions::hash_c6::ast_print_c60ce4347d672501;
use crate::generated::functions::hash_db::ast_value_db6d300cf2bc94e2;
use crate::generated::functions::hash_ec::ast_print_ec01a8049c79f988;

/// Tag definitions for Pentax::PENT table
pub static PENTAX_PENT_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "Make",
                format: "string[24]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            26,
            TagInfo {
                name: "Model",
                format: "string[24]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            56,
            TagInfo {
                name: "ExposureTime",
                format: "int32u",
                print_conv: Some(PrintConv::Function(ast_print_c60ce4347d672501)),
                value_conv: Some(ValueConv::Function(ast_value_5b997436cb4c4a4f)),
            },
        ),
        (
            60,
            TagInfo {
                name: "FNumber",
                format: "rational64u",
                print_conv: Some(PrintConv::Function(ast_print_8470e30e1e5b4729)),
                value_conv: None,
            },
        ),
        (
            68,
            TagInfo {
                name: "ExposureCompensation",
                format: "rational64s",
                print_conv: Some(PrintConv::Function(ast_print_b75f5f46a9f320cf)),
                value_conv: None,
            },
        ),
        (
            84,
            TagInfo {
                name: "FocalLength",
                format: "int32u",
                print_conv: Some(PrintConv::Function(ast_print_ba030bb348470426)),
                value_conv: None,
            },
        ),
        (
            113,
            TagInfo {
                name: "DateTime1",
                format: "string[24]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            139,
            TagInfo {
                name: "DateTime2",
                format: "string[24]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            167,
            TagInfo {
                name: "ISO",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            199,
            TagInfo {
                name: "GPSVersionID",
                format: "undef[8]",
                print_conv: Some(PrintConv::Function(ast_print_c12c7e50f55cf298)),
                value_conv: None,
            },
        ),
        (
            207,
            TagInfo {
                name: "GPSLatitudeRef",
                format: "string[2]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            209,
            TagInfo {
                name: "GPSLatitude",
                format: "rational64u[3]",
                print_conv: Some(PrintConv::Function(ast_print_ec01a8049c79f988)),
                value_conv: Some(ValueConv::Function(ast_value_4dd64ad8b929982b)),
            },
        ),
        (
            233,
            TagInfo {
                name: "GPSLongitudeRef",
                format: "string[2]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            235,
            TagInfo {
                name: "GPSLongitude",
                format: "rational64u[3]",
                print_conv: Some(PrintConv::Function(ast_print_ec01a8049c79f988)),
                value_conv: Some(ValueConv::Function(ast_value_4dd64ad8b929982b)),
            },
        ),
        (
            259,
            TagInfo {
                name: "GPSAltitudeRef",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            260,
            TagInfo {
                name: "GPSAltitude",
                format: "rational64u",
                print_conv: Some(PrintConv::Function(ast_print_8764401e4e5a97bf)),
                value_conv: None,
            },
        ),
        (
            284,
            TagInfo {
                name: "GPSTimeStamp",
                format: "rational64u[3]",
                print_conv: Some(PrintConv::Function(ast_print_449352809d0c73f5)),
                value_conv: Some(ValueConv::Function(ast_value_67653a3c31f6d232)),
            },
        ),
        (
            308,
            TagInfo {
                name: "GPSSatellites",
                format: "string[3]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            311,
            TagInfo {
                name: "GPSStatus",
                format: "string[2]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            313,
            TagInfo {
                name: "GPSMeasureMode",
                format: "string[2]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            315,
            TagInfo {
                name: "GPSMapDatum",
                format: "string[7]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            322,
            TagInfo {
                name: "GPSDateStamp",
                format: "string[11]",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_db6d300cf2bc94e2)),
            },
        ),
        (
            371,
            TagInfo {
                name: "AudioCodecID",
                format: "string[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2003,
            TagInfo {
                name: "PreviewImage",
                format: "undef[$size-0x7d3]",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = PENTAX_PENT_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value, None),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = PENTAX_PENT_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value, None),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
