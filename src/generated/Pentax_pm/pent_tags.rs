//! Generated tag table definitions from Pentax::PENT
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{exposuretime_print_conv, gpsaltitude_print_conv};
use crate::implementations::value_conv::{
    exif_date_value_conv, gps_coordinate_value_conv, gpstimestamp_value_conv,
    reciprocal_10_value_conv,
};

/// Tag definitions for Pentax::PENT table
pub static PENTAX_PENT_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "Make",
                format: "string[24]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            26,
            TagInfo {
                name: "Model",
                format: "string[24]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            56,
            TagInfo {
                name: "ExposureTime",
                format: "int32u",
                print_conv: Some(PrintConv::Function(exposuretime_print_conv)),
                value_conv: Some(ValueConv::Function(reciprocal_10_value_conv)),
            },
        ),
        (
            60,
            TagInfo {
                name: "FNumber",
                format: "rational64u",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
                value_conv: None,
            },
        ),
        (
            68,
            TagInfo {
                name: "ExposureCompensation",
                format: "rational64s",
                print_conv: Some(PrintConv::Expression(
                    "$val ? sprintf(\"%+.1f\", $val) : 0".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            84,
            TagInfo {
                name: "FocalLength",
                format: "int32u",
                print_conv: Some(PrintConv::Expression("\"$val mm\"".to_string())),
                value_conv: None,
            },
        ),
        (
            113,
            TagInfo {
                name: "DateTime1",
                format: "string[24]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            139,
            TagInfo {
                name: "DateTime2",
                format: "string[24]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            167,
            TagInfo {
                name: "ISO",
                format: "int32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            199,
            TagInfo {
                name: "GPSVersionID",
                format: "undef[8]",
                print_conv: Some(PrintConv::Expression("$val =~ tr/ /./; $val".to_string())),
                value_conv: None,
            },
        ),
        (
            207,
            TagInfo {
                name: "GPSLatitudeRef",
                format: "string[2]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            209,
            TagInfo {
                name: "GPSLatitude",
                format: "rational64u[3]",
                print_conv: Some(PrintConv::Expression(
                    "Image::ExifTool::GPS::ToDMS($self, $val, 1)".to_string(),
                )),
                value_conv: Some(ValueConv::Function(gps_coordinate_value_conv)),
            },
        ),
        (
            233,
            TagInfo {
                name: "GPSLongitudeRef",
                format: "string[2]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            235,
            TagInfo {
                name: "GPSLongitude",
                format: "rational64u[3]",
                print_conv: Some(PrintConv::Expression(
                    "Image::ExifTool::GPS::ToDMS($self, $val, 1)".to_string(),
                )),
                value_conv: Some(ValueConv::Function(gps_coordinate_value_conv)),
            },
        ),
        (
            259,
            TagInfo {
                name: "GPSAltitudeRef",
                format: "int8u",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            260,
            TagInfo {
                name: "GPSAltitude",
                format: "rational64u",
                print_conv: Some(PrintConv::Function(gpsaltitude_print_conv)),
                value_conv: None,
            },
        ),
        (
            284,
            TagInfo {
                name: "GPSTimeStamp",
                format: "rational64u[3]",
                print_conv: Some(PrintConv::Expression(
                    "Image::ExifTool::GPS::PrintTimeStamp($val)".to_string(),
                )),
                value_conv: Some(ValueConv::Function(gpstimestamp_value_conv)),
            },
        ),
        (
            308,
            TagInfo {
                name: "GPSSatellites",
                format: "string[3]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            311,
            TagInfo {
                name: "GPSStatus",
                format: "string[2]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            313,
            TagInfo {
                name: "GPSMeasureMode",
                format: "string[2]",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            315,
            TagInfo {
                name: "GPSMapDatum",
                format: "string[7]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            322,
            TagInfo {
                name: "GPSDateStamp",
                format: "string[11]",
                print_conv: None,
                value_conv: Some(ValueConv::Function(exif_date_value_conv)),
            },
        ),
        (
            371,
            TagInfo {
                name: "AudioCodecID",
                format: "string[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2003,
            TagInfo {
                name: "PreviewImage",
                format: "undef[$size-0x7d3]",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = PENTAX_PENT_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = PENTAX_PENT_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
