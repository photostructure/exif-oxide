//! Tag kits for datetime category from QuickTime.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

/// Get tag definitions for datetime category
pub fn get_datetime_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (0, TagKitDef {
            id: 0,
            name: "CDDBDiscPlayTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ConvertDuration($val)"),
            value_conv: Some("$val =~ /^..([a-z0-9]{4})/i ? hex($1) : undef"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "TimeCode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "RTPTimeScale",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "TimestampRandomOffset",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "MaxTransmissionTime",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.3f s\",$val/1000)"),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "MinTransmissionTime",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("sprintf(\"%.3f s\",$val/1000)"),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GoogleStartTime",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ReleaseDate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ContentCreateDate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("\n        require Image::ExifTool::XMP;\n        $val =  Image::ExifTool::XMP::ConvertXMPDate($val);\n        $val =~ s/([-+]\\d{2})(\\d{2})$/$1:$2/; # add colon to timezone if necessary\n        return $val;\n    "),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CreationTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("\n        require Image::ExifTool::XMP;\n        $val =  Image::ExifTool::XMP::ConvertXMPDate($val);\n        $val =~ s/([-+]\\d{2})(\\d{2})$/$1:$2/; # add colon to timezone if necessary\n        return $val;\n    "),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CreationDate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("\n        require Image::ExifTool::XMP;\n        $val =  Image::ExifTool::XMP::ConvertXMPDate($val);\n        $val =~ s/([-+]\\d{2})(\\d{2})$/$1:$2/; # add colon to timezone if necessary\n        return $val;\n    "),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "LocationDate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("\n        require Image::ExifTool::XMP;\n        $val =  Image::ExifTool::XMP::ConvertXMPDate($val);\n        $val =~ s/([-+]\\d{2})(\\d{2})$/$1:$2/; # add colon to timezone if necessary\n        return $val;\n    "),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "StillImageTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: Some("this tag always has a value of -1; the time of the still image is obtained\n            from the associated SampleTime"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "MediaCreateDate",
            format: "1",
            groups: HashMap::new(),
            writable: true,
            notes: Some("converted from UTC to local time if the QuickTimeUTC option is set.  This\n        tag is part of a binary data structure so it may not be deleted -- instead\n        the value is set to zero if the tag is deleted individually"),
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("ConvertUnixTime($val, $self->Options(\"QuickTimeUTC\") || $$self{FileType} eq \"CR3\")"),
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "MediaModifyDate",
            format: "1",
            groups: HashMap::new(),
            writable: true,
            notes: Some("converted from UTC to local time if the QuickTimeUTC option is set.  This\n        tag is part of a binary data structure so it may not be deleted -- instead\n        the value is set to zero if the tag is deleted individually"),
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("ConvertUnixTime($val, $self->Options(\"QuickTimeUTC\") || $$self{FileType} eq \"CR3\")"),
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "MediaTimeScale",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (11, TagKitDef {
            id: 11,
            name: "TimeZone",
            format: "1",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("TimeZoneString($val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "ModifyDate",
            format: "1",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("$val=~tr{/}{:}; $val"),
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "ProductionDate",
            format: "1",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("$val=~tr{/}{:}; $val"),
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "CreateDate",
            format: "1",
            groups: HashMap::new(),
            writable: true,
            notes: Some("converted from UTC to local time if the QuickTimeUTC option is set.  This\n        tag is part of a binary data structure so it may not be deleted -- instead\n        the value is set to zero if the tag is deleted individually"),
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("ConvertUnixTime($val, $self->Options(\"QuickTimeUTC\") || $$self{FileType} eq \"CR3\")"),
            subdirectory: None,
        }),
        (18, TagKitDef {
            id: 18,
            name: "PreviewTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$$self{TimeScale} ? ConvertDuration($val) : $val"),
            value_conv: Some("$$self{TimeScale} ? $val / $$self{TimeScale} : $val"),
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "ModifyDate",
            format: "1",
            groups: HashMap::new(),
            writable: true,
            notes: Some("converted from UTC to local time if the QuickTimeUTC option is set.  This\n        tag is part of a binary data structure so it may not be deleted -- instead\n        the value is set to zero if the tag is deleted individually"),
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("ConvertUnixTime($val, $self->Options(\"QuickTimeUTC\") || $$self{FileType} eq \"CR3\")"),
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "PosterTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$$self{TimeScale} ? ConvertDuration($val) : $val"),
            value_conv: Some("$$self{TimeScale} ? $val / $$self{TimeScale} : $val"),
            subdirectory: None,
        }),
        (21, TagKitDef {
            id: 21,
            name: "SelectionTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$$self{TimeScale} ? ConvertDuration($val) : $val"),
            value_conv: Some("$$self{TimeScale} ? $val / $$self{TimeScale} : $val"),
            subdirectory: None,
        }),
        (23, TagKitDef {
            id: 23,
            name: "CurrentTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$$self{TimeScale} ? ConvertDuration($val) : $val"),
            value_conv: Some("$$self{TimeScale} ? $val / $$self{TimeScale} : $val"),
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "TimeScale",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "TagSD Card Manf Date",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "TimeAndDate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "TagTime Lapse",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "VideoTimeStamp",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "TagTime Zone / DST",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "StartTime",
            format: "int64u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("\n            my $secs = int($val / 1000);\n            return ConvertUnixTime($secs) . sprintf(\".%03d\",$val - $secs * 1000);\n        "),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "PreviewDate",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("converted from UTC to local time if the QuickTimeUTC option is set.  This\n        tag is part of a binary data structure so it may not be deleted -- instead\n        the value is set to zero if the tag is deleted individually"),
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("ConvertUnixTime($val, $self->Options(\"QuickTimeUTC\") || $$self{FileType} eq \"CR3\")"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CompositionToDecodeTimelineMapping",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CompositionTimeToSample",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "TimeToSampleTable",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "TrackCreateDate",
            format: "1",
            groups: HashMap::new(),
            writable: true,
            notes: Some("converted from UTC to local time if the QuickTimeUTC option is set.  This\n        tag is part of a binary data structure so it may not be deleted -- instead\n        the value is set to zero if the tag is deleted individually"),
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("ConvertUnixTime($val, $self->Options(\"QuickTimeUTC\") || $$self{FileType} eq \"CR3\")"),
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "TrackModifyDate",
            format: "1",
            groups: HashMap::new(),
            writable: true,
            notes: Some("converted from UTC to local time if the QuickTimeUTC option is set.  This\n        tag is part of a binary data structure so it may not be deleted -- instead\n        the value is set to zero if the tag is deleted individually"),
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("ConvertUnixTime($val, $self->Options(\"QuickTimeUTC\") || $$self{FileType} eq \"CR3\")"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "TimecodeTrack",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ContentCreateDate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("some stupid Ricoh programmer used the '@' symbol instead of the copyright\n            symbol in these tag ID's for the Ricoh Theta Z1 and maybe other models"),
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("\n        require Image::ExifTool::XMP;\n        $val =  Image::ExifTool::XMP::ConvertXMPDate($val);\n        $val =~ s/([-+]\\d{2})(\\d{2})$/$1:$2/; # add colon to timezone if necessary\n        return $val;\n    "),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "DateTimeOriginal",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("Apple Photos has been reported to show a crazy date/time for some MP4 files\n            containing this tag, but perhaps only if it is missing a time zone"),
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("\n        require Image::ExifTool::XMP;\n        $val =  Image::ExifTool::XMP::ConvertXMPDate($val);\n        $val =~ s/([-+]\\d{2})(\\d{2})$/$1:$2/; # add colon to timezone if necessary\n        return $val;\n    "),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "TimeStamp",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("$val =~ s/ .*//; ConvertUnixTime($val)"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ContentCreateDate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: Some("\n        require Image::ExifTool::XMP;\n        $val =  Image::ExifTool::XMP::ConvertXMPDate($val);\n        $val =~ s/([-+]\\d{2})(\\d{2})$/$1:$2/; # add colon to timezone if necessary\n        return $val;\n    "),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "FrameReadoutTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val * 1e6 . \" microseconds\""),
            value_conv: Some("$val * 1e-6"),
            subdirectory: None,
        }),
    ]
}
