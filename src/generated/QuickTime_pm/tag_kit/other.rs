//! Tag kits for other category from QuickTime.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_3: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "iTunes");
    map.insert("1".to_string(), "AOL");
    map
});

static PRINT_CONV_4: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_5: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("10".to_string(), "Music|Singer/Songwriter");
    map.insert("100000".to_string(), "Music|Christian & Gospel");
    map.insert("100001".to_string(), "Music|Classical|Art Song");
    map.insert("100002".to_string(), "Music|Classical|Brass & Woodwinds");
    map.insert("100003".to_string(), "Music|Classical|Solo Instrumental");
    map.insert("100004".to_string(), "Music|Classical|Contemporary Era");
    map.insert("100005".to_string(), "Music|Classical|Oratorio");
    map.insert("100006".to_string(), "Music|Classical|Cantata");
    map.insert("100007".to_string(), "Music|Classical|Electronic");
    map.insert("100008".to_string(), "Music|Classical|Sacred");
    map.insert("100009".to_string(), "Music|Classical|Guitar");
    map.insert(
        "10001".to_string(),
        "Books|Lifestyle & Home|Antiques & Collectibles",
    );
    map.insert("100010".to_string(), "Music|Classical|Piano");
    map.insert("100011".to_string(), "Music|Classical|Violin");
    map.insert("100012".to_string(), "Music|Classical|Cello");
    map.insert("100013".to_string(), "Music|Classical|Percussion");
    map.insert("100014".to_string(), "Music|Electronic|Dubstep");
    map.insert("100015".to_string(), "Music|Electronic|Bass");
    map.insert("100016".to_string(), "Music|Hip-Hop/Rap|UK Hip-Hop");
    map.insert("100017".to_string(), "Music|Reggae|Lovers Rock");
    map.insert("100018".to_string(), "Music|Alternative|EMO");
    map.insert("100019".to_string(), "Music|Alternative|Pop Punk");
    map.insert(
        "10002".to_string(),
        "Books|Arts & Entertainment|Art & Architecture",
    );
    map.insert("100020".to_string(), "Music|Alternative|Indie Pop");
    map.insert("100021".to_string(), "Music|New Age|Yoga");
    map.insert("100022".to_string(), "Music|Pop|Tribute");
    map.insert("100023".to_string(), "Music|Pop|Shows");
    map.insert("100024".to_string(), "Music|Cuban");
    map.insert("100025".to_string(), "Music|Cuban|Mambo");
    map.insert("100026".to_string(), "Music|Cuban|Chachacha");
    map.insert("100027".to_string(), "Music|Cuban|Guajira");
    map.insert("100028".to_string(), "Music|Cuban|Son");
    map.insert("100029".to_string(), "Music|Cuban|Bolero");
    map.insert("10003".to_string(), "Books|Religion & Spirituality|Bibles");
    map.insert("100030".to_string(), "Music|Cuban|Guaracha");
    map.insert("100031".to_string(), "Music|Cuban|Timba");
    map.insert("100032".to_string(), "Music|Soundtrack|Video Game");
    map.insert(
        "100033".to_string(),
        "Music|Indian|Regional Indian|Punjabi|Punjabi Pop",
    );
    map.insert(
        "100034".to_string(),
        "Music|Indian|Regional Indian|Bengali|Rabindra Sangeet",
    );
    map.insert(
        "100035".to_string(),
        "Music|Indian|Regional Indian|Malayalam",
    );
    map.insert("100036".to_string(), "Music|Indian|Regional Indian|Kannada");
    map.insert("100037".to_string(), "Music|Indian|Regional Indian|Marathi");
    map.insert(
        "100038".to_string(),
        "Music|Indian|Regional Indian|Gujarati",
    );
    map.insert(
        "100039".to_string(),
        "Music|Indian|Regional Indian|Assamese",
    );
    map.insert("10004".to_string(), "Books|Self-Development|Spirituality");
    map.insert(
        "100040".to_string(),
        "Music|Indian|Regional Indian|Bhojpuri",
    );
    map.insert(
        "100041".to_string(),
        "Music|Indian|Regional Indian|Haryanvi",
    );
    map.insert("100042".to_string(), "Music|Indian|Regional Indian|Odia");
    map.insert(
        "100043".to_string(),
        "Music|Indian|Regional Indian|Rajasthani",
    );
    map.insert("100044".to_string(), "Music|Indian|Regional Indian|Urdu");
    map.insert("100045".to_string(), "Music|Indian|Regional Indian|Punjabi");
    map.insert("100046".to_string(), "Music|Indian|Regional Indian|Bengali");
    map.insert(
        "100047".to_string(),
        "Music|Indian|Indian Classical|Carnatic Classical",
    );
    map.insert(
        "100048".to_string(),
        "Music|Indian|Indian Classical|Hindustani Classical",
    );
    map.insert("100049".to_string(), "Music|African|Afro House");
    map.insert(
        "10005".to_string(),
        "Books|Business & Personal Finance|Industries & Professions",
    );
    map.insert("100050".to_string(), "Music|African|Afro Soul");
    map.insert("100051".to_string(), "Music|African|Afrobeats");
    map.insert("100052".to_string(), "Music|African|Benga");
    map.insert("100053".to_string(), "Music|African|Bongo-Flava");
    map.insert("100054".to_string(), "Music|African|Coupe-Decale");
    map.insert("100055".to_string(), "Music|African|Gqom");
    map.insert("100056".to_string(), "Music|African|Highlife");
    map.insert("100057".to_string(), "Music|African|Kuduro");
    map.insert("100058".to_string(), "Music|African|Kizomba");
    map.insert("100059".to_string(), "Music|African|Kwaito");
    map.insert(
        "10006".to_string(),
        "Books|Business & Personal Finance|Marketing & Sales",
    );
    map.insert("100060".to_string(), "Music|African|Mbalax");
    map.insert("100061".to_string(), "Music|African|Ndombolo");
    map.insert("100062".to_string(), "Music|African|Shangaan Electro");
    map.insert("100063".to_string(), "Music|African|Soukous");
    map.insert("100064".to_string(), "Music|African|Taarab");
    map.insert("100065".to_string(), "Music|African|Zouglou");
    map.insert("100066".to_string(), "Music|Turkish|Ozgun");
    map.insert("100067".to_string(), "Music|Turkish|Fantezi");
    map.insert("100068".to_string(), "Music|Turkish|Religious");
    map.insert("100069".to_string(), "Music|Pop|Turkish Pop");
    map.insert(
        "10007".to_string(),
        "Books|Business & Personal Finance|Small Business & Entrepreneurship",
    );
    map.insert("100070".to_string(), "Music|Rock|Turkish Rock");
    map.insert(
        "100071".to_string(),
        "Music|Alternative|Turkish Alternative",
    );
    map.insert(
        "100072".to_string(),
        "Music|Hip-Hop/Rap|Turkish Hip-Hop/Rap",
    );
    map.insert("100073".to_string(), "Music|African|Maskandi");
    map.insert("100074".to_string(), "Music|Russian|Russian Romance");
    map.insert("100075".to_string(), "Music|Russian|Russian Bard");
    map.insert("100076".to_string(), "Music|Russian|Russian Pop");
    map.insert("100077".to_string(), "Music|Russian|Russian Rock");
    map.insert("100078".to_string(), "Music|Russian|Russian Hip-Hop");
    map.insert("100079".to_string(), "Music|Arabic|Levant");
    map.insert(
        "10008".to_string(),
        "Books|Business & Personal Finance|Personal Finance",
    );
    map.insert("100080".to_string(), "Music|Arabic|Levant|Dabke");
    map.insert("100081".to_string(), "Music|Arabic|Maghreb Rai");
    map.insert(
        "100082".to_string(),
        "Music|Arabic|Khaleeji|Khaleeji Jalsat",
    );
    map.insert(
        "100083".to_string(),
        "Music|Arabic|Khaleeji|Khaleeji Shailat",
    );
    map.insert("100084".to_string(), "Music|Tarab");
    map.insert("100085".to_string(), "Music|Tarab|Iraqi Tarab");
    map.insert("100086".to_string(), "Music|Tarab|Egyptian Tarab");
    map.insert("100087".to_string(), "Music|Tarab|Khaleeji Tarab");
    map.insert("100088".to_string(), "Music|Pop|Levant Pop");
    map.insert("100089".to_string(), "Music|Pop|Iraqi Pop");
    map.insert(
        "10009".to_string(),
        "Books|Business & Personal Finance|Reference",
    );
    map.insert("100090".to_string(), "Music|Pop|Egyptian Pop");
    map.insert("100091".to_string(), "Music|Pop|Maghreb Pop");
    map.insert("100092".to_string(), "Music|Pop|Khaleeji Pop");
    map.insert("100093".to_string(), "Music|Hip-Hop/Rap|Levant Hip-Hop");
    map.insert("100094".to_string(), "Music|Hip-Hop/Rap|Egyptian Hip-Hop");
    map.insert("100095".to_string(), "Music|Hip-Hop/Rap|Maghreb Hip-Hop");
    map.insert("100096".to_string(), "Music|Hip-Hop/Rap|Khaleeji Hip-Hop");
    map.insert("100097".to_string(), "Music|Alternative|Indie Levant");
    map.insert("100098".to_string(), "Music|Alternative|Indie Egyptian");
    map.insert("100099".to_string(), "Music|Alternative|Indie Maghreb");
    map.insert("1001".to_string(), "Music|Alternative|College Rock");
    map.insert(
        "10010".to_string(),
        "Books|Business & Personal Finance|Careers",
    );
    map.insert("100100".to_string(), "Music|Electronic|Levant Electronic");
    map.insert("100101".to_string(), "Music|Electronic|Electro-Cha'abi");
    map.insert("100102".to_string(), "Music|Electronic|Maghreb Electronic");
    map.insert("100103".to_string(), "Music|Folk|Iraqi Folk");
    map.insert("100104".to_string(), "Music|Folk|Khaleeji Folk");
    map.insert("100105".to_string(), "Music|Dance|Maghreb Dance");
    map.insert(
        "10011".to_string(),
        "Books|Business & Personal Finance|Economics",
    );
    map.insert(
        "10012".to_string(),
        "Books|Business & Personal Finance|Investing",
    );
    map.insert(
        "10013".to_string(),
        "Books|Business & Personal Finance|Finance",
    );
    map.insert(
        "10014".to_string(),
        "Books|Business & Personal Finance|Management & Leadership",
    );
    map.insert(
        "10015".to_string(),
        "Books|Comics & Graphic Novels|Graphic Novels",
    );
    map.insert("10016".to_string(), "Books|Comics & Graphic Novels|Manga");
    map.insert("10017".to_string(), "Books|Computers & Internet|Computers");
    map.insert("10018".to_string(), "Books|Computers & Internet|Databases");
    map.insert(
        "10019".to_string(),
        "Books|Computers & Internet|Digital Media",
    );
    map.insert("1002".to_string(), "Music|Alternative|Goth Rock");
    map.insert("10020".to_string(), "Books|Computers & Internet|Internet");
    map.insert("10021".to_string(), "Books|Computers & Internet|Network");
    map.insert(
        "10022".to_string(),
        "Books|Computers & Internet|Operating Systems",
    );
    map.insert(
        "10023".to_string(),
        "Books|Computers & Internet|Programming",
    );
    map.insert("10024".to_string(), "Books|Computers & Internet|Software");
    map.insert(
        "10025".to_string(),
        "Books|Computers & Internet|System Administration",
    );
    map.insert(
        "10026".to_string(),
        "Books|Cookbooks, Food & Wine|Beverages",
    );
    map.insert(
        "10027".to_string(),
        "Books|Cookbooks, Food & Wine|Courses & Dishes",
    );
    map.insert(
        "10028".to_string(),
        "Books|Cookbooks, Food & Wine|Special Diet",
    );
    map.insert(
        "10029".to_string(),
        "Books|Cookbooks, Food & Wine|Special Occasions",
    );
    map.insert("1003".to_string(), "Music|Alternative|Grunge");
    map.insert("10030".to_string(), "Books|Cookbooks, Food & Wine|Methods");
    map.insert(
        "10031".to_string(),
        "Books|Cookbooks, Food & Wine|Reference",
    );
    map.insert(
        "10032".to_string(),
        "Books|Cookbooks, Food & Wine|Regional & Ethnic",
    );
    map.insert(
        "10033".to_string(),
        "Books|Cookbooks, Food & Wine|Specific Ingredients",
    );
    map.insert(
        "10034".to_string(),
        "Books|Lifestyle & Home|Crafts & Hobbies",
    );
    map.insert("10035".to_string(), "Books|Professional & Technical|Design");
    map.insert("10036".to_string(), "Books|Arts & Entertainment|Theater");
    map.insert(
        "10037".to_string(),
        "Books|Professional & Technical|Education",
    );
    map.insert(
        "10038".to_string(),
        "Books|Nonfiction|Family & Relationships",
    );
    map.insert(
        "10039".to_string(),
        "Books|Fiction & Literature|Action & Adventure",
    );
    map.insert("1004".to_string(), "Music|Alternative|Indie Rock");
    map.insert(
        "10040".to_string(),
        "Books|Fiction & Literature|African American",
    );
    map.insert("10041".to_string(), "Books|Fiction & Literature|Religious");
    map.insert("10042".to_string(), "Books|Fiction & Literature|Classics");
    map.insert("10043".to_string(), "Books|Fiction & Literature|Erotica");
    map.insert("10044".to_string(), "Books|Sci-Fi & Fantasy|Fantasy");
    map.insert("10045".to_string(), "Books|Fiction & Literature|Gay");
    map.insert("10046".to_string(), "Books|Fiction & Literature|Ghost");
    map.insert("10047".to_string(), "Books|Fiction & Literature|Historical");
    map.insert("10048".to_string(), "Books|Fiction & Literature|Horror");
    map.insert("10049".to_string(), "Books|Fiction & Literature|Literary");
    map.insert("1005".to_string(), "Music|Alternative|New Wave");
    map.insert(
        "10050".to_string(),
        "Books|Mysteries & Thrillers|Hard-Boiled",
    );
    map.insert(
        "10051".to_string(),
        "Books|Mysteries & Thrillers|Historical",
    );
    map.insert(
        "10052".to_string(),
        "Books|Mysteries & Thrillers|Police Procedural",
    );
    map.insert(
        "10053".to_string(),
        "Books|Mysteries & Thrillers|Short Stories",
    );
    map.insert(
        "10054".to_string(),
        "Books|Mysteries & Thrillers|British Detectives",
    );
    map.insert(
        "10055".to_string(),
        "Books|Mysteries & Thrillers|Women Sleuths",
    );
    map.insert("10056".to_string(), "Books|Romance|Erotic Romance");
    map.insert("10057".to_string(), "Books|Romance|Contemporary");
    map.insert("10058".to_string(), "Books|Romance|Paranormal");
    map.insert("10059".to_string(), "Books|Romance|Historical");
    map.insert("1006".to_string(), "Music|Alternative|Punk");
    map.insert("10060".to_string(), "Books|Romance|Short Stories");
    map.insert("10061".to_string(), "Books|Romance|Suspense");
    map.insert("10062".to_string(), "Books|Romance|Western");
    map.insert(
        "10063".to_string(),
        "Books|Sci-Fi & Fantasy|Science Fiction",
    );
    map.insert(
        "10064".to_string(),
        "Books|Sci-Fi & Fantasy|Science Fiction & Literature",
    );
    map.insert(
        "10065".to_string(),
        "Books|Fiction & Literature|Short Stories",
    );
    map.insert("10066".to_string(), "Books|Reference|Foreign Languages");
    map.insert("10067".to_string(), "Books|Arts & Entertainment|Games");
    map.insert("10068".to_string(), "Books|Lifestyle & Home|Gardening");
    map.insert(
        "10069".to_string(),
        "Books|Self-Development|Health & Fitness",
    );
    map.insert("1007".to_string(), "Music|Blues|Chicago Blues");
    map.insert("10070".to_string(), "Books|History|Africa");
    map.insert("10071".to_string(), "Books|History|Americas");
    map.insert("10072".to_string(), "Books|History|Ancient");
    map.insert("10073".to_string(), "Books|History|Asia");
    map.insert("10074".to_string(), "Books|History|Australia & Oceania");
    map.insert("10075".to_string(), "Books|History|Europe");
    map.insert("10076".to_string(), "Books|History|Latin America");
    map.insert("10077".to_string(), "Books|History|Middle East");
    map.insert("10078".to_string(), "Books|History|Military");
    map.insert("10079".to_string(), "Books|History|United States");
    map.insert("10080".to_string(), "Books|History|World");
    map.insert(
        "10081".to_string(),
        "Books|Children & Teens|Children's Fiction",
    );
    map.insert(
        "10082".to_string(),
        "Books|Children & Teens|Children's Nonfiction",
    );
    map.insert("10083".to_string(), "Books|Professional & Technical|Law");
    map.insert(
        "10084".to_string(),
        "Books|Fiction & Literature|Literary Criticism",
    );
    map.insert("10085".to_string(), "Books|Science & Nature|Mathematics");
    map.insert(
        "10086".to_string(),
        "Books|Professional & Technical|Medical",
    );
    map.insert("10087".to_string(), "Books|Arts & Entertainment|Music");
    map.insert("10088".to_string(), "Books|Science & Nature|Nature");
    map.insert(
        "10089".to_string(),
        "Books|Arts & Entertainment|Performing Arts",
    );
    map.insert("1009".to_string(), "Music|Blues|Classic Blues");
    map.insert("10090".to_string(), "Books|Lifestyle & Home|Pets");
    map.insert("10091".to_string(), "Books|Nonfiction|Philosophy");
    map.insert(
        "10092".to_string(),
        "Books|Arts & Entertainment|Photography",
    );
    map.insert("10093".to_string(), "Books|Fiction & Literature|Poetry");
    map.insert("10094".to_string(), "Books|Self-Development|Psychology");
    map.insert("10095".to_string(), "Books|Reference|Almanacs & Yearbooks");
    map.insert("10096".to_string(), "Books|Reference|Atlases & Maps");
    map.insert(
        "10097".to_string(),
        "Books|Reference|Catalogs & Directories",
    );
    map.insert("10098".to_string(), "Books|Reference|Consumer Guides");
    map.insert(
        "10099".to_string(),
        "Books|Reference|Dictionaries & Thesauruses",
    );
    map.insert("1010".to_string(), "Music|Blues|Contemporary Blues");
    map.insert("10100".to_string(), "Books|Reference|Encyclopedias");
    map.insert("10101".to_string(), "Books|Reference|Etiquette");
    map.insert("10102".to_string(), "Books|Reference|Quotations");
    map.insert("10103".to_string(), "Books|Reference|Words & Language");
    map.insert("10104".to_string(), "Books|Reference|Writing");
    map.insert(
        "10105".to_string(),
        "Books|Religion & Spirituality|Bible Studies",
    );
    map.insert(
        "10106".to_string(),
        "Books|Religion & Spirituality|Buddhism",
    );
    map.insert(
        "10107".to_string(),
        "Books|Religion & Spirituality|Christianity",
    );
    map.insert(
        "10108".to_string(),
        "Books|Religion & Spirituality|Hinduism",
    );
    map.insert("10109".to_string(), "Books|Religion & Spirituality|Islam");
    map.insert("1011".to_string(), "Music|Blues|Country Blues");
    map.insert("10110".to_string(), "Books|Religion & Spirituality|Judaism");
    map.insert("10111".to_string(), "Books|Science & Nature|Astronomy");
    map.insert("10112".to_string(), "Books|Science & Nature|Chemistry");
    map.insert("10113".to_string(), "Books|Science & Nature|Earth Sciences");
    map.insert("10114".to_string(), "Books|Science & Nature|Essays");
    map.insert("10115".to_string(), "Books|Science & Nature|History");
    map.insert("10116".to_string(), "Books|Science & Nature|Life Sciences");
    map.insert("10117".to_string(), "Books|Science & Nature|Physics");
    map.insert("10118".to_string(), "Books|Science & Nature|Reference");
    map.insert(
        "10119".to_string(),
        "Books|Self-Development|Self-Improvement",
    );
    map.insert("1012".to_string(), "Music|Blues|Delta Blues");
    map.insert("10120".to_string(), "Books|Nonfiction|Social Science");
    map.insert("10121".to_string(), "Books|Sports & Outdoors|Baseball");
    map.insert("10122".to_string(), "Books|Sports & Outdoors|Basketball");
    map.insert("10123".to_string(), "Books|Sports & Outdoors|Coaching");
    map.insert(
        "10124".to_string(),
        "Books|Sports & Outdoors|Extreme Sports",
    );
    map.insert("10125".to_string(), "Books|Sports & Outdoors|Football");
    map.insert("10126".to_string(), "Books|Sports & Outdoors|Golf");
    map.insert("10127".to_string(), "Books|Sports & Outdoors|Hockey");
    map.insert(
        "10128".to_string(),
        "Books|Sports & Outdoors|Mountaineering",
    );
    map.insert("10129".to_string(), "Books|Sports & Outdoors|Outdoors");
    map.insert("1013".to_string(), "Music|Blues|Electric Blues");
    map.insert("10130".to_string(), "Books|Sports & Outdoors|Racket Sports");
    map.insert("10131".to_string(), "Books|Sports & Outdoors|Reference");
    map.insert("10132".to_string(), "Books|Sports & Outdoors|Soccer");
    map.insert("10133".to_string(), "Books|Sports & Outdoors|Training");
    map.insert("10134".to_string(), "Books|Sports & Outdoors|Water Sports");
    map.insert("10135".to_string(), "Books|Sports & Outdoors|Winter Sports");
    map.insert("10136".to_string(), "Books|Reference|Study Aids");
    map.insert(
        "10137".to_string(),
        "Books|Professional & Technical|Engineering",
    );
    map.insert("10138".to_string(), "Books|Nonfiction|Transportation");
    map.insert("10139".to_string(), "Books|Travel & Adventure|Africa");
    map.insert("1014".to_string(), "Music|Children's Music|Lullabies");
    map.insert("10140".to_string(), "Books|Travel & Adventure|Asia");
    map.insert(
        "10141".to_string(),
        "Books|Travel & Adventure|Specialty Travel",
    );
    map.insert("10142".to_string(), "Books|Travel & Adventure|Canada");
    map.insert("10143".to_string(), "Books|Travel & Adventure|Caribbean");
    map.insert(
        "10144".to_string(),
        "Books|Travel & Adventure|Latin America",
    );
    map.insert(
        "10145".to_string(),
        "Books|Travel & Adventure|Essays & Memoirs",
    );
    map.insert("10146".to_string(), "Books|Travel & Adventure|Europe");
    map.insert("10147".to_string(), "Books|Travel & Adventure|Middle East");
    map.insert(
        "10148".to_string(),
        "Books|Travel & Adventure|United States",
    );
    map.insert("10149".to_string(), "Books|Nonfiction|True Crime");
    map.insert("1015".to_string(), "Music|Children's Music|Sing-Along");
    map.insert("1016".to_string(), "Music|Children's Music|Stories");
    map.insert("1017".to_string(), "Music|Classical|Avant-Garde");
    map.insert("1018".to_string(), "Music|Classical|Baroque Era");
    map.insert("1019".to_string(), "Music|Classical|Chamber Music");
    map.insert("1020".to_string(), "Music|Classical|Chant");
    map.insert("1021".to_string(), "Music|Classical|Choral");
    map.insert("1022".to_string(), "Music|Classical|Classical Crossover");
    map.insert("1023".to_string(), "Music|Classical|Early Music");
    map.insert("1024".to_string(), "Music|Classical|Impressionist");
    map.insert("1025".to_string(), "Music|Classical|Medieval Era");
    map.insert("1026".to_string(), "Music|Classical|Minimalism");
    map.insert("1027".to_string(), "Music|Classical|Modern Era");
    map.insert("1028".to_string(), "Music|Classical|Opera");
    map.insert("1029".to_string(), "Music|Classical|Orchestral");
    map.insert("1030".to_string(), "Music|Classical|Renaissance");
    map.insert("1031".to_string(), "Music|Classical|Romantic Era");
    map.insert("1032".to_string(), "Music|Classical|Wedding Music");
    map.insert("1033".to_string(), "Music|Country|Alternative Country");
    map.insert("1034".to_string(), "Music|Country|Americana");
    map.insert("1035".to_string(), "Music|Country|Bluegrass");
    map.insert("1036".to_string(), "Music|Country|Contemporary Bluegrass");
    map.insert("1037".to_string(), "Music|Country|Contemporary Country");
    map.insert("1038".to_string(), "Music|Country|Country Gospel");
    map.insert("1039".to_string(), "Music|Country|Honky Tonk");
    map.insert("1040".to_string(), "Music|Country|Outlaw Country");
    map.insert("1041".to_string(), "Music|Country|Traditional Bluegrass");
    map.insert("1042".to_string(), "Music|Country|Traditional Country");
    map.insert("1043".to_string(), "Music|Country|Urban Cowboy");
    map.insert("1044".to_string(), "Music|Dance|Breakbeat");
    map.insert("1045".to_string(), "Music|Dance|Exercise");
    map.insert("1046".to_string(), "Music|Dance|Garage");
    map.insert("1047".to_string(), "Music|Dance|Hardcore");
    map.insert("1048".to_string(), "Music|Dance|House");
    map.insert("1049".to_string(), "Music|Dance|Jungle/Drum'n'bass");
    map.insert("1050".to_string(), "Music|Dance|Techno");
    map.insert("1051".to_string(), "Music|Dance|Trance");
    map.insert("1052".to_string(), "Music|Jazz|Big Band");
    map.insert("1053".to_string(), "Music|Jazz|Bop");
    map.insert("1054".to_string(), "Music|Easy Listening|Lounge");
    map.insert("1055".to_string(), "Music|Easy Listening|Swing");
    map.insert("1056".to_string(), "Music|Electronic|Ambient");
    map.insert("1057".to_string(), "Music|Electronic|Downtempo");
    map.insert("1058".to_string(), "Music|Electronic|Electronica");
    map.insert("1060".to_string(), "Music|Electronic|IDM/Experimental");
    map.insert("1061".to_string(), "Music|Electronic|Industrial");
    map.insert(
        "1062".to_string(),
        "Music|Singer/Songwriter|Alternative Folk",
    );
    map.insert(
        "1063".to_string(),
        "Music|Singer/Songwriter|Contemporary Folk",
    );
    map.insert(
        "1064".to_string(),
        "Music|Singer/Songwriter|Contemporary Singer/Songwriter",
    );
    map.insert("1065".to_string(), "Music|Singer/Songwriter|Folk-Rock");
    map.insert("1066".to_string(), "Music|Singer/Songwriter|New Acoustic");
    map.insert(
        "1067".to_string(),
        "Music|Singer/Songwriter|Traditional Folk",
    );
    map.insert("1068".to_string(), "Music|Hip-Hop/Rap|Alternative Rap");
    map.insert("1069".to_string(), "Music|Hip-Hop/Rap|Dirty South");
    map.insert("1070".to_string(), "Music|Hip-Hop/Rap|East Coast Rap");
    map.insert("1071".to_string(), "Music|Hip-Hop/Rap|Gangsta Rap");
    map.insert("1072".to_string(), "Music|Hip-Hop/Rap|Hardcore Rap");
    map.insert("1073".to_string(), "Music|Hip-Hop/Rap|Hip-Hop");
    map.insert("1074".to_string(), "Music|Hip-Hop/Rap|Latin Rap");
    map.insert("1075".to_string(), "Music|Hip-Hop/Rap|Old School Rap");
    map.insert("1076".to_string(), "Music|Hip-Hop/Rap|Rap");
    map.insert("1077".to_string(), "Music|Hip-Hop/Rap|Underground Rap");
    map.insert("1078".to_string(), "Music|Hip-Hop/Rap|West Coast Rap");
    map.insert("1079".to_string(), "Music|Holiday|Chanukah");
    map.insert("1080".to_string(), "Music|Holiday|Christmas");
    map.insert("1081".to_string(), "Music|Holiday|Christmas: Children's");
    map.insert("1082".to_string(), "Music|Holiday|Christmas: Classic");
    map.insert("1083".to_string(), "Music|Holiday|Christmas: Classical");
    map.insert("1084".to_string(), "Music|Holiday|Christmas: Jazz");
    map.insert("1085".to_string(), "Music|Holiday|Christmas: Modern");
    map.insert("1086".to_string(), "Music|Holiday|Christmas: Pop");
    map.insert("1087".to_string(), "Music|Holiday|Christmas: R&B");
    map.insert("1088".to_string(), "Music|Holiday|Christmas: Religious");
    map.insert("1089".to_string(), "Music|Holiday|Christmas: Rock");
    map.insert("1090".to_string(), "Music|Holiday|Easter");
    map.insert("1091".to_string(), "Music|Holiday|Halloween");
    map.insert("1092".to_string(), "Music|Holiday|Holiday: Other");
    map.insert("1093".to_string(), "Music|Holiday|Thanksgiving");
    map.insert("1094".to_string(), "Music|Christian & Gospel|CCM");
    map.insert(
        "1095".to_string(),
        "Music|Christian & Gospel|Christian Metal",
    );
    map.insert("1096".to_string(), "Music|Christian & Gospel|Christian Pop");
    map.insert("1097".to_string(), "Music|Christian & Gospel|Christian Rap");
    map.insert(
        "1098".to_string(),
        "Music|Christian & Gospel|Christian Rock",
    );
    map.insert(
        "1099".to_string(),
        "Music|Christian & Gospel|Classic Christian",
    );
    map.insert("11".to_string(), "Music|Jazz");
    map.insert(
        "1100".to_string(),
        "Music|Christian & Gospel|Contemporary Gospel",
    );
    map.insert(
        "11001".to_string(),
        "Books|Sci-Fi & Fantasy|Fantasy|Contemporary",
    );
    map.insert("11002".to_string(), "Books|Sci-Fi & Fantasy|Fantasy|Epic");
    map.insert(
        "11003".to_string(),
        "Books|Sci-Fi & Fantasy|Fantasy|Historical",
    );
    map.insert(
        "11004".to_string(),
        "Books|Sci-Fi & Fantasy|Fantasy|Paranormal",
    );
    map.insert(
        "11005".to_string(),
        "Books|Sci-Fi & Fantasy|Fantasy|Short Stories",
    );
    map.insert(
        "11006".to_string(),
        "Books|Sci-Fi & Fantasy|Science Fiction & Literature|Adventure",
    );
    map.insert(
        "11007".to_string(),
        "Books|Sci-Fi & Fantasy|Science Fiction & Literature|High Tech",
    );
    map.insert(
        "11008".to_string(),
        "Books|Sci-Fi & Fantasy|Science Fiction & Literature|Short Stories",
    );
    map.insert(
        "11009".to_string(),
        "Books|Professional & Technical|Education|Language Arts & Disciplines",
    );
    map.insert("1101".to_string(), "Music|Christian & Gospel|Gospel");
    map.insert("11010".to_string(), "Books|Communications & Media");
    map.insert(
        "11011".to_string(),
        "Books|Communications & Media|Broadcasting",
    );
    map.insert(
        "11012".to_string(),
        "Books|Communications & Media|Digital Media",
    );
    map.insert(
        "11013".to_string(),
        "Books|Communications & Media|Journalism",
    );
    map.insert(
        "11014".to_string(),
        "Books|Communications & Media|Photojournalism",
    );
    map.insert("11015".to_string(), "Books|Communications & Media|Print");
    map.insert("11016".to_string(), "Books|Communications & Media|Speech");
    map.insert("11017".to_string(), "Books|Communications & Media|Writing");
    map.insert(
        "11018".to_string(),
        "Books|Arts & Entertainment|Art & Architecture|Urban Planning",
    );
    map.insert("11019".to_string(), "Books|Arts & Entertainment|Dance");
    map.insert("11020".to_string(), "Books|Arts & Entertainment|Fashion");
    map.insert("11021".to_string(), "Books|Arts & Entertainment|Film");
    map.insert(
        "11022".to_string(),
        "Books|Arts & Entertainment|Interior Design",
    );
    map.insert("11023".to_string(), "Books|Arts & Entertainment|Media Arts");
    map.insert("11024".to_string(), "Books|Arts & Entertainment|Radio");
    map.insert("11025".to_string(), "Books|Arts & Entertainment|TV");
    map.insert(
        "11026".to_string(),
        "Books|Arts & Entertainment|Visual Arts",
    );
    map.insert(
        "11027".to_string(),
        "Books|Biographies & Memoirs|Arts & Entertainment",
    );
    map.insert("11028".to_string(), "Books|Biographies & Memoirs|Business");
    map.insert("11029".to_string(), "Books|Biographies & Memoirs|Culinary");
    map.insert(
        "1103".to_string(),
        "Music|Christian & Gospel|Praise & Worship",
    );
    map.insert(
        "11030".to_string(),
        "Books|Biographies & Memoirs|Gay & Lesbian",
    );
    map.insert(
        "11031".to_string(),
        "Books|Biographies & Memoirs|Historical",
    );
    map.insert("11032".to_string(), "Books|Biographies & Memoirs|Literary");
    map.insert(
        "11033".to_string(),
        "Books|Biographies & Memoirs|Media & Journalism",
    );
    map.insert("11034".to_string(), "Books|Biographies & Memoirs|Military");
    map.insert("11035".to_string(), "Books|Biographies & Memoirs|Politics");
    map.insert("11036".to_string(), "Books|Biographies & Memoirs|Religious");
    map.insert(
        "11037".to_string(),
        "Books|Biographies & Memoirs|Science & Technology",
    );
    map.insert("11038".to_string(), "Books|Biographies & Memoirs|Sports");
    map.insert("11039".to_string(), "Books|Biographies & Memoirs|Women");
    map.insert(
        "1104".to_string(),
        "Music|Christian & Gospel|Southern Gospel",
    );
    map.insert("11040".to_string(), "Books|Romance|New Adult");
    map.insert("11042".to_string(), "Books|Romance|Romantic Comedy");
    map.insert("11043".to_string(), "Books|Romance|Gay & Lesbian");
    map.insert("11044".to_string(), "Books|Fiction & Literature|Essays");
    map.insert(
        "11045".to_string(),
        "Books|Fiction & Literature|Anthologies",
    );
    map.insert(
        "11046".to_string(),
        "Books|Fiction & Literature|Comparative Literature",
    );
    map.insert("11047".to_string(), "Books|Fiction & Literature|Drama");
    map.insert(
        "11049".to_string(),
        "Books|Fiction & Literature|Fairy Tales, Myths & Fables",
    );
    map.insert(
        "1105".to_string(),
        "Music|Christian & Gospel|Traditional Gospel",
    );
    map.insert("11050".to_string(), "Books|Fiction & Literature|Family");
    map.insert(
        "11051".to_string(),
        "Books|Comics & Graphic Novels|Manga|School Drama",
    );
    map.insert(
        "11052".to_string(),
        "Books|Comics & Graphic Novels|Manga|Human Drama",
    );
    map.insert(
        "11053".to_string(),
        "Books|Comics & Graphic Novels|Manga|Family Drama",
    );
    map.insert("11054".to_string(), "Books|Sports & Outdoors|Boxing");
    map.insert("11055".to_string(), "Books|Sports & Outdoors|Cricket");
    map.insert("11056".to_string(), "Books|Sports & Outdoors|Cycling");
    map.insert("11057".to_string(), "Books|Sports & Outdoors|Equestrian");
    map.insert(
        "11058".to_string(),
        "Books|Sports & Outdoors|Martial Arts & Self Defense",
    );
    map.insert("11059".to_string(), "Books|Sports & Outdoors|Motor Sports");
    map.insert("1106".to_string(), "Music|Jazz|Avant-Garde Jazz");
    map.insert("11060".to_string(), "Books|Sports & Outdoors|Rugby");
    map.insert("11061".to_string(), "Books|Sports & Outdoors|Running");
    map.insert(
        "11062".to_string(),
        "Books|Self-Development|Diet & Nutrition",
    );
    map.insert("11063".to_string(), "Books|Science & Nature|Agriculture");
    map.insert("11064".to_string(), "Books|Science & Nature|Atmosphere");
    map.insert("11065".to_string(), "Books|Science & Nature|Biology");
    map.insert("11066".to_string(), "Books|Science & Nature|Ecology");
    map.insert("11067".to_string(), "Books|Science & Nature|Environment");
    map.insert("11068".to_string(), "Books|Science & Nature|Geography");
    map.insert("11069".to_string(), "Books|Science & Nature|Geology");
    map.insert("1107".to_string(), "Music|Jazz|Contemporary Jazz");
    map.insert(
        "11070".to_string(),
        "Books|Nonfiction|Social Science|Anthropology",
    );
    map.insert(
        "11071".to_string(),
        "Books|Nonfiction|Social Science|Archaeology",
    );
    map.insert(
        "11072".to_string(),
        "Books|Nonfiction|Social Science|Civics",
    );
    map.insert(
        "11073".to_string(),
        "Books|Nonfiction|Social Science|Government",
    );
    map.insert(
        "11074".to_string(),
        "Books|Nonfiction|Social Science|Social Studies",
    );
    map.insert(
        "11075".to_string(),
        "Books|Nonfiction|Social Science|Social Welfare",
    );
    map.insert(
        "11076".to_string(),
        "Books|Nonfiction|Social Science|Society",
    );
    map.insert(
        "11077".to_string(),
        "Books|Nonfiction|Philosophy|Aesthetics",
    );
    map.insert(
        "11078".to_string(),
        "Books|Nonfiction|Philosophy|Epistemology",
    );
    map.insert("11079".to_string(), "Books|Nonfiction|Philosophy|Ethics");
    map.insert("1108".to_string(), "Music|Jazz|Crossover Jazz");
    map.insert("11080".to_string(), "Books|Nonfiction|Philosophy|Language");
    map.insert("11081".to_string(), "Books|Nonfiction|Philosophy|Logic");
    map.insert(
        "11082".to_string(),
        "Books|Nonfiction|Philosophy|Metaphysics",
    );
    map.insert("11083".to_string(), "Books|Nonfiction|Philosophy|Political");
    map.insert("11084".to_string(), "Books|Nonfiction|Philosophy|Religion");
    map.insert("11085".to_string(), "Books|Reference|Manuals");
    map.insert("11086".to_string(), "Books|Kids");
    map.insert("11087".to_string(), "Books|Kids|Animals");
    map.insert("11088".to_string(), "Books|Kids|Basic Concepts");
    map.insert("11089".to_string(), "Books|Kids|Basic Concepts|Alphabet");
    map.insert("1109".to_string(), "Music|Jazz|Dixieland");
    map.insert("11090".to_string(), "Books|Kids|Basic Concepts|Body");
    map.insert("11091".to_string(), "Books|Kids|Basic Concepts|Colors");
    map.insert(
        "11092".to_string(),
        "Books|Kids|Basic Concepts|Counting & Numbers",
    );
    map.insert("11093".to_string(), "Books|Kids|Basic Concepts|Date & Time");
    map.insert("11094".to_string(), "Books|Kids|Basic Concepts|General");
    map.insert("11095".to_string(), "Books|Kids|Basic Concepts|Money");
    map.insert("11096".to_string(), "Books|Kids|Basic Concepts|Opposites");
    map.insert("11097".to_string(), "Books|Kids|Basic Concepts|Seasons");
    map.insert(
        "11098".to_string(),
        "Books|Kids|Basic Concepts|Senses & Sensation",
    );
    map.insert(
        "11099".to_string(),
        "Books|Kids|Basic Concepts|Size & Shape",
    );
    map.insert("1110".to_string(), "Music|Jazz|Fusion");
    map.insert("11100".to_string(), "Books|Kids|Basic Concepts|Sounds");
    map.insert("11101".to_string(), "Books|Kids|Basic Concepts|Words");
    map.insert("11102".to_string(), "Books|Kids|Biography");
    map.insert("11103".to_string(), "Books|Kids|Careers & Occupations");
    map.insert("11104".to_string(), "Books|Kids|Computers & Technology");
    map.insert("11105".to_string(), "Books|Kids|Cooking & Food");
    map.insert("11106".to_string(), "Books|Kids|Arts & Entertainment");
    map.insert("11107".to_string(), "Books|Kids|Arts & Entertainment|Art");
    map.insert(
        "11108".to_string(),
        "Books|Kids|Arts & Entertainment|Crafts",
    );
    map.insert("11109".to_string(), "Books|Kids|Arts & Entertainment|Music");
    map.insert("1111".to_string(), "Music|Jazz|Latin Jazz");
    map.insert(
        "11110".to_string(),
        "Books|Kids|Arts & Entertainment|Performing Arts",
    );
    map.insert("11111".to_string(), "Books|Kids|Family");
    map.insert("11112".to_string(), "Books|Kids|Fiction");
    map.insert("11113".to_string(), "Books|Kids|Fiction|Action & Adventure");
    map.insert("11114".to_string(), "Books|Kids|Fiction|Animals");
    map.insert("11115".to_string(), "Books|Kids|Fiction|Classics");
    map.insert(
        "11116".to_string(),
        "Books|Kids|Fiction|Comics & Graphic Novels",
    );
    map.insert(
        "11117".to_string(),
        "Books|Kids|Fiction|Culture, Places & People",
    );
    map.insert(
        "11118".to_string(),
        "Books|Kids|Fiction|Family & Relationships",
    );
    map.insert("11119".to_string(), "Books|Kids|Fiction|Fantasy");
    map.insert("1112".to_string(), "Music|Jazz|Mainstream Jazz");
    map.insert(
        "11120".to_string(),
        "Books|Kids|Fiction|Fairy Tales, Myths & Fables",
    );
    map.insert(
        "11121".to_string(),
        "Books|Kids|Fiction|Favorite Characters",
    );
    map.insert("11122".to_string(), "Books|Kids|Fiction|Historical");
    map.insert(
        "11123".to_string(),
        "Books|Kids|Fiction|Holidays & Celebrations",
    );
    map.insert("11124".to_string(), "Books|Kids|Fiction|Monsters & Ghosts");
    map.insert("11125".to_string(), "Books|Kids|Fiction|Mysteries");
    map.insert("11126".to_string(), "Books|Kids|Fiction|Nature");
    map.insert("11127".to_string(), "Books|Kids|Fiction|Religion");
    map.insert("11128".to_string(), "Books|Kids|Fiction|Sci-Fi");
    map.insert("11129".to_string(), "Books|Kids|Fiction|Social Issues");
    map.insert("1113".to_string(), "Music|Jazz|Ragtime");
    map.insert(
        "11130".to_string(),
        "Books|Kids|Fiction|Sports & Recreation",
    );
    map.insert("11131".to_string(), "Books|Kids|Fiction|Transportation");
    map.insert("11132".to_string(), "Books|Kids|Games & Activities");
    map.insert("11133".to_string(), "Books|Kids|General Nonfiction");
    map.insert("11134".to_string(), "Books|Kids|Health");
    map.insert("11135".to_string(), "Books|Kids|History");
    map.insert("11136".to_string(), "Books|Kids|Holidays & Celebrations");
    map.insert(
        "11137".to_string(),
        "Books|Kids|Holidays & Celebrations|Birthdays",
    );
    map.insert(
        "11138".to_string(),
        "Books|Kids|Holidays & Celebrations|Christmas & Advent",
    );
    map.insert(
        "11139".to_string(),
        "Books|Kids|Holidays & Celebrations|Easter & Lent",
    );
    map.insert("1114".to_string(), "Music|Jazz|Smooth Jazz");
    map.insert(
        "11140".to_string(),
        "Books|Kids|Holidays & Celebrations|General",
    );
    map.insert(
        "11141".to_string(),
        "Books|Kids|Holidays & Celebrations|Halloween",
    );
    map.insert(
        "11142".to_string(),
        "Books|Kids|Holidays & Celebrations|Hanukkah",
    );
    map.insert(
        "11143".to_string(),
        "Books|Kids|Holidays & Celebrations|Other",
    );
    map.insert(
        "11144".to_string(),
        "Books|Kids|Holidays & Celebrations|Passover",
    );
    map.insert(
        "11145".to_string(),
        "Books|Kids|Holidays & Celebrations|Patriotic Holidays",
    );
    map.insert(
        "11146".to_string(),
        "Books|Kids|Holidays & Celebrations|Ramadan",
    );
    map.insert(
        "11147".to_string(),
        "Books|Kids|Holidays & Celebrations|Thanksgiving",
    );
    map.insert(
        "11148".to_string(),
        "Books|Kids|Holidays & Celebrations|Valentine's Day",
    );
    map.insert("11149".to_string(), "Books|Kids|Humor");
    map.insert("1115".to_string(), "Music|Latino|Latin Jazz");
    map.insert("11150".to_string(), "Books|Kids|Humor|Jokes & Riddles");
    map.insert("11151".to_string(), "Books|Kids|Poetry");
    map.insert("11152".to_string(), "Books|Kids|Learning to Read");
    map.insert(
        "11153".to_string(),
        "Books|Kids|Learning to Read|Chapter Books",
    );
    map.insert(
        "11154".to_string(),
        "Books|Kids|Learning to Read|Early Readers",
    );
    map.insert(
        "11155".to_string(),
        "Books|Kids|Learning to Read|Intermediate Readers",
    );
    map.insert("11156".to_string(), "Books|Kids|Nursery Rhymes");
    map.insert("11157".to_string(), "Books|Kids|Government");
    map.insert("11158".to_string(), "Books|Kids|Reference");
    map.insert("11159".to_string(), "Books|Kids|Religion");
    map.insert("1116".to_string(), "Music|Latino|Contemporary Latin");
    map.insert("11160".to_string(), "Books|Kids|Science & Nature");
    map.insert("11161".to_string(), "Books|Kids|Social Issues");
    map.insert("11162".to_string(), "Books|Kids|Social Studies");
    map.insert("11163".to_string(), "Books|Kids|Sports & Recreation");
    map.insert("11164".to_string(), "Books|Kids|Transportation");
    map.insert("11165".to_string(), "Books|Young Adult");
    map.insert("11166".to_string(), "Books|Young Adult|Animals");
    map.insert("11167".to_string(), "Books|Young Adult|Biography");
    map.insert(
        "11168".to_string(),
        "Books|Young Adult|Careers & Occupations",
    );
    map.insert(
        "11169".to_string(),
        "Books|Young Adult|Computers & Technology",
    );
    map.insert("1117".to_string(), "Music|Latino|Pop Latino");
    map.insert("11170".to_string(), "Books|Young Adult|Cooking & Food");
    map.insert(
        "11171".to_string(),
        "Books|Young Adult|Arts & Entertainment",
    );
    map.insert(
        "11172".to_string(),
        "Books|Young Adult|Arts & Entertainment|Art",
    );
    map.insert(
        "11173".to_string(),
        "Books|Young Adult|Arts & Entertainment|Crafts",
    );
    map.insert(
        "11174".to_string(),
        "Books|Young Adult|Arts & Entertainment|Music",
    );
    map.insert(
        "11175".to_string(),
        "Books|Young Adult|Arts & Entertainment|Performing Arts",
    );
    map.insert("11176".to_string(), "Books|Young Adult|Family");
    map.insert("11177".to_string(), "Books|Young Adult|Fiction");
    map.insert(
        "11178".to_string(),
        "Books|Young Adult|Fiction|Action & Adventure",
    );
    map.insert("11179".to_string(), "Books|Young Adult|Fiction|Animals");
    map.insert("1118".to_string(), "Music|Latino|Raices");
    map.insert("11180".to_string(), "Books|Young Adult|Fiction|Classics");
    map.insert(
        "11181".to_string(),
        "Books|Young Adult|Fiction|Comics & Graphic Novels",
    );
    map.insert(
        "11182".to_string(),
        "Books|Young Adult|Fiction|Culture, Places & People",
    );
    map.insert("11183".to_string(), "Books|Young Adult|Fiction|Dystopian");
    map.insert(
        "11184".to_string(),
        "Books|Young Adult|Fiction|Family & Relationships",
    );
    map.insert("11185".to_string(), "Books|Young Adult|Fiction|Fantasy");
    map.insert(
        "11186".to_string(),
        "Books|Young Adult|Fiction|Fairy Tales, Myths & Fables",
    );
    map.insert(
        "11187".to_string(),
        "Books|Young Adult|Fiction|Favorite Characters",
    );
    map.insert("11188".to_string(), "Books|Young Adult|Fiction|Historical");
    map.insert(
        "11189".to_string(),
        "Books|Young Adult|Fiction|Holidays & Celebrations",
    );
    map.insert("1119".to_string(), "Music|Latino|Urbano latino");
    map.insert(
        "11190".to_string(),
        "Books|Young Adult|Fiction|Horror, Monsters & Ghosts",
    );
    map.insert(
        "11191".to_string(),
        "Books|Young Adult|Fiction|Crime & Mystery",
    );
    map.insert("11192".to_string(), "Books|Young Adult|Fiction|Nature");
    map.insert("11193".to_string(), "Books|Young Adult|Fiction|Religion");
    map.insert("11194".to_string(), "Books|Young Adult|Fiction|Romance");
    map.insert("11195".to_string(), "Books|Young Adult|Fiction|Sci-Fi");
    map.insert(
        "11196".to_string(),
        "Books|Young Adult|Fiction|Coming of Age",
    );
    map.insert(
        "11197".to_string(),
        "Books|Young Adult|Fiction|Sports & Recreation",
    );
    map.insert(
        "11198".to_string(),
        "Books|Young Adult|Fiction|Transportation",
    );
    map.insert("11199".to_string(), "Books|Young Adult|Games & Activities");
    map.insert("1120".to_string(), "Music|Latino|Baladas y Boleros");
    map.insert("11200".to_string(), "Books|Young Adult|General Nonfiction");
    map.insert("11201".to_string(), "Books|Young Adult|Health");
    map.insert("11202".to_string(), "Books|Young Adult|History");
    map.insert(
        "11203".to_string(),
        "Books|Young Adult|Holidays & Celebrations",
    );
    map.insert(
        "11204".to_string(),
        "Books|Young Adult|Holidays & Celebrations|Birthdays",
    );
    map.insert(
        "11205".to_string(),
        "Books|Young Adult|Holidays & Celebrations|Christmas & Advent",
    );
    map.insert(
        "11206".to_string(),
        "Books|Young Adult|Holidays & Celebrations|Easter & Lent",
    );
    map.insert(
        "11207".to_string(),
        "Books|Young Adult|Holidays & Celebrations|General",
    );
    map.insert(
        "11208".to_string(),
        "Books|Young Adult|Holidays & Celebrations|Halloween",
    );
    map.insert(
        "11209".to_string(),
        "Books|Young Adult|Holidays & Celebrations|Hanukkah",
    );
    map.insert("1121".to_string(), "Music|Latino|Rock y Alternativo");
    map.insert(
        "11210".to_string(),
        "Books|Young Adult|Holidays & Celebrations|Other",
    );
    map.insert(
        "11211".to_string(),
        "Books|Young Adult|Holidays & Celebrations|Passover",
    );
    map.insert(
        "11212".to_string(),
        "Books|Young Adult|Holidays & Celebrations|Patriotic Holidays",
    );
    map.insert(
        "11213".to_string(),
        "Books|Young Adult|Holidays & Celebrations|Ramadan",
    );
    map.insert(
        "11214".to_string(),
        "Books|Young Adult|Holidays & Celebrations|Thanksgiving",
    );
    map.insert(
        "11215".to_string(),
        "Books|Young Adult|Holidays & Celebrations|Valentine's Day",
    );
    map.insert("11216".to_string(), "Books|Young Adult|Humor");
    map.insert(
        "11217".to_string(),
        "Books|Young Adult|Humor|Jokes & Riddles",
    );
    map.insert("11218".to_string(), "Books|Young Adult|Poetry");
    map.insert(
        "11219".to_string(),
        "Books|Young Adult|Politics & Government",
    );
    map.insert("1122".to_string(), "Music|Brazilian");
    map.insert("11220".to_string(), "Books|Young Adult|Reference");
    map.insert("11221".to_string(), "Books|Young Adult|Religion");
    map.insert("11222".to_string(), "Books|Young Adult|Science & Nature");
    map.insert("11223".to_string(), "Books|Young Adult|Coming of Age");
    map.insert("11224".to_string(), "Books|Young Adult|Social Studies");
    map.insert("11225".to_string(), "Books|Young Adult|Sports & Recreation");
    map.insert("11226".to_string(), "Books|Young Adult|Transportation");
    map.insert("11227".to_string(), "Books|Communications & Media");
    map.insert("11228".to_string(), "Books|Military & Warfare");
    map.insert("11229".to_string(), "Books|Romance|Inspirational");
    map.insert("1123".to_string(), "Music|Latino|Musica Mexicana");
    map.insert("11231".to_string(), "Books|Romance|Holiday");
    map.insert("11232".to_string(), "Books|Romance|Wholesome");
    map.insert("11233".to_string(), "Books|Romance|Military");
    map.insert(
        "11234".to_string(),
        "Books|Arts & Entertainment|Art History",
    );
    map.insert("11236".to_string(), "Books|Arts & Entertainment|Design");
    map.insert("1124".to_string(), "Music|Latino|Musica tropical");
    map.insert(
        "11243".to_string(),
        "Books|Business & Personal Finance|Accounting",
    );
    map.insert(
        "11244".to_string(),
        "Books|Business & Personal Finance|Hospitality",
    );
    map.insert(
        "11245".to_string(),
        "Books|Business & Personal Finance|Real Estate",
    );
    map.insert("11246".to_string(), "Books|Humor|Jokes & Riddles");
    map.insert(
        "11247".to_string(),
        "Books|Religion & Spirituality|Comparative Religion",
    );
    map.insert("1125".to_string(), "Music|New Age|Environmental");
    map.insert(
        "11255".to_string(),
        "Books|Cookbooks, Food & Wine|Culinary Arts",
    );
    map.insert("11259".to_string(), "Books|Mysteries & Thrillers|Cozy");
    map.insert("1126".to_string(), "Music|New Age|Healing");
    map.insert(
        "11260".to_string(),
        "Books|Politics & Current Events|Current Events",
    );
    map.insert(
        "11261".to_string(),
        "Books|Politics & Current Events|Foreign Policy & International Relations",
    );
    map.insert(
        "11262".to_string(),
        "Books|Politics & Current Events|Local Government",
    );
    map.insert(
        "11263".to_string(),
        "Books|Politics & Current Events|National Government",
    );
    map.insert(
        "11264".to_string(),
        "Books|Politics & Current Events|Political Science",
    );
    map.insert(
        "11265".to_string(),
        "Books|Politics & Current Events|Public Administration",
    );
    map.insert(
        "11266".to_string(),
        "Books|Politics & Current Events|World Affairs",
    );
    map.insert("1127".to_string(), "Music|New Age|Meditation");
    map.insert(
        "11273".to_string(),
        "Books|Nonfiction|Family & Relationships|Family & Childcare",
    );
    map.insert(
        "11274".to_string(),
        "Books|Nonfiction|Family & Relationships|Love & Romance",
    );
    map.insert("11275".to_string(), "Books|Sci-Fi & Fantasy|Fantasy|Urban");
    map.insert(
        "11276".to_string(),
        "Books|Reference|Foreign Languages|Arabic",
    );
    map.insert(
        "11277".to_string(),
        "Books|Reference|Foreign Languages|Bilingual Editions",
    );
    map.insert(
        "11278".to_string(),
        "Books|Reference|Foreign Languages|African Languages",
    );
    map.insert(
        "11279".to_string(),
        "Books|Reference|Foreign Languages|Ancient Languages",
    );
    map.insert("1128".to_string(), "Music|New Age|Nature");
    map.insert(
        "11280".to_string(),
        "Books|Reference|Foreign Languages|Chinese",
    );
    map.insert(
        "11281".to_string(),
        "Books|Reference|Foreign Languages|English",
    );
    map.insert(
        "11282".to_string(),
        "Books|Reference|Foreign Languages|French",
    );
    map.insert(
        "11283".to_string(),
        "Books|Reference|Foreign Languages|German",
    );
    map.insert(
        "11284".to_string(),
        "Books|Reference|Foreign Languages|Hebrew",
    );
    map.insert(
        "11285".to_string(),
        "Books|Reference|Foreign Languages|Hindi",
    );
    map.insert(
        "11286".to_string(),
        "Books|Reference|Foreign Languages|Italian",
    );
    map.insert(
        "11287".to_string(),
        "Books|Reference|Foreign Languages|Japanese",
    );
    map.insert(
        "11288".to_string(),
        "Books|Reference|Foreign Languages|Korean",
    );
    map.insert(
        "11289".to_string(),
        "Books|Reference|Foreign Languages|Linguistics",
    );
    map.insert("1129".to_string(), "Music|New Age|Relaxation");
    map.insert(
        "11290".to_string(),
        "Books|Reference|Foreign Languages|Other Languages",
    );
    map.insert(
        "11291".to_string(),
        "Books|Reference|Foreign Languages|Portuguese",
    );
    map.insert(
        "11292".to_string(),
        "Books|Reference|Foreign Languages|Russian",
    );
    map.insert(
        "11293".to_string(),
        "Books|Reference|Foreign Languages|Spanish",
    );
    map.insert(
        "11294".to_string(),
        "Books|Reference|Foreign Languages|Speech Pathology",
    );
    map.insert(
        "11295".to_string(),
        "Books|Science & Nature|Mathematics|Advanced Mathematics",
    );
    map.insert(
        "11296".to_string(),
        "Books|Science & Nature|Mathematics|Algebra",
    );
    map.insert(
        "11297".to_string(),
        "Books|Science & Nature|Mathematics|Arithmetic",
    );
    map.insert(
        "11298".to_string(),
        "Books|Science & Nature|Mathematics|Calculus",
    );
    map.insert(
        "11299".to_string(),
        "Books|Science & Nature|Mathematics|Geometry",
    );
    map.insert("1130".to_string(), "Music|New Age|Travel");
    map.insert(
        "11300".to_string(),
        "Books|Science & Nature|Mathematics|Statistics",
    );
    map.insert(
        "11301".to_string(),
        "Books|Professional & Technical|Medical|Veterinary",
    );
    map.insert(
        "11302".to_string(),
        "Books|Professional & Technical|Medical|Neuroscience",
    );
    map.insert(
        "11303".to_string(),
        "Books|Professional & Technical|Medical|Immunology",
    );
    map.insert(
        "11304".to_string(),
        "Books|Professional & Technical|Medical|Nursing",
    );
    map.insert(
        "11305".to_string(),
        "Books|Professional & Technical|Medical|Pharmacology & Toxicology",
    );
    map.insert(
        "11306".to_string(),
        "Books|Professional & Technical|Medical|Anatomy & Physiology",
    );
    map.insert(
        "11307".to_string(),
        "Books|Professional & Technical|Medical|Dentistry",
    );
    map.insert(
        "11308".to_string(),
        "Books|Professional & Technical|Medical|Emergency Medicine",
    );
    map.insert(
        "11309".to_string(),
        "Books|Professional & Technical|Medical|Genetics",
    );
    map.insert("1131".to_string(), "Music|Pop|Adult Contemporary");
    map.insert(
        "11310".to_string(),
        "Books|Professional & Technical|Medical|Psychiatry",
    );
    map.insert(
        "11311".to_string(),
        "Books|Professional & Technical|Medical|Radiology",
    );
    map.insert(
        "11312".to_string(),
        "Books|Professional & Technical|Medical|Alternative Medicine",
    );
    map.insert(
        "11317".to_string(),
        "Books|Nonfiction|Philosophy|Political Philosophy",
    );
    map.insert(
        "11319".to_string(),
        "Books|Nonfiction|Philosophy|Philosophy of Language",
    );
    map.insert("1132".to_string(), "Music|Pop|Britpop");
    map.insert(
        "11320".to_string(),
        "Books|Nonfiction|Philosophy|Philosophy of Religion",
    );
    map.insert(
        "11327".to_string(),
        "Books|Nonfiction|Social Science|Sociology",
    );
    map.insert(
        "11329".to_string(),
        "Books|Professional & Technical|Engineering|Aeronautics",
    );
    map.insert("1133".to_string(), "Music|Pop|Pop/Rock");
    map.insert(
        "11330".to_string(),
        "Books|Professional & Technical|Engineering|Chemical & Petroleum Engineering",
    );
    map.insert(
        "11331".to_string(),
        "Books|Professional & Technical|Engineering|Civil Engineering",
    );
    map.insert(
        "11332".to_string(),
        "Books|Professional & Technical|Engineering|Computer Science",
    );
    map.insert(
        "11333".to_string(),
        "Books|Professional & Technical|Engineering|Electrical Engineering",
    );
    map.insert(
        "11334".to_string(),
        "Books|Professional & Technical|Engineering|Environmental Engineering",
    );
    map.insert(
        "11335".to_string(),
        "Books|Professional & Technical|Engineering|Mechanical Engineering",
    );
    map.insert(
        "11336".to_string(),
        "Books|Professional & Technical|Engineering|Power Resources",
    );
    map.insert(
        "11337".to_string(),
        "Books|Comics & Graphic Novels|Manga|Boys",
    );
    map.insert(
        "11338".to_string(),
        "Books|Comics & Graphic Novels|Manga|Men",
    );
    map.insert(
        "11339".to_string(),
        "Books|Comics & Graphic Novels|Manga|Girls",
    );
    map.insert("1134".to_string(), "Music|Pop|Soft Rock");
    map.insert(
        "11340".to_string(),
        "Books|Comics & Graphic Novels|Manga|Women",
    );
    map.insert(
        "11341".to_string(),
        "Books|Comics & Graphic Novels|Manga|Other",
    );
    map.insert(
        "11342".to_string(),
        "Books|Comics & Graphic Novels|Manga|Yaoi",
    );
    map.insert(
        "11343".to_string(),
        "Books|Comics & Graphic Novels|Manga|Comic Essays",
    );
    map.insert("1135".to_string(), "Music|Pop|Teen Pop");
    map.insert("1136".to_string(), "Music|R&B/Soul|Contemporary R&B");
    map.insert("1137".to_string(), "Music|R&B/Soul|Disco");
    map.insert("1138".to_string(), "Music|R&B/Soul|Doo Wop");
    map.insert("1139".to_string(), "Music|R&B/Soul|Funk");
    map.insert("1140".to_string(), "Music|R&B/Soul|Motown");
    map.insert("1141".to_string(), "Music|R&B/Soul|Neo-Soul");
    map.insert("1142".to_string(), "Music|R&B/Soul|Quiet Storm");
    map.insert("1143".to_string(), "Music|R&B/Soul|Soul");
    map.insert("1144".to_string(), "Music|Rock|Adult Alternative");
    map.insert("1145".to_string(), "Music|Rock|American Trad Rock");
    map.insert("1146".to_string(), "Music|Rock|Arena Rock");
    map.insert("1147".to_string(), "Music|Rock|Blues-Rock");
    map.insert("1148".to_string(), "Music|Rock|British Invasion");
    map.insert("1149".to_string(), "Music|Rock|Death Metal/Black Metal");
    map.insert("1150".to_string(), "Music|Rock|Glam Rock");
    map.insert("1151".to_string(), "Music|Rock|Hair Metal");
    map.insert("1152".to_string(), "Music|Rock|Hard Rock");
    map.insert("1153".to_string(), "Music|Rock|Metal");
    map.insert("1154".to_string(), "Music|Rock|Jam Bands");
    map.insert("1155".to_string(), "Music|Rock|Prog-Rock/Art Rock");
    map.insert("1156".to_string(), "Music|Rock|Psychedelic");
    map.insert("1157".to_string(), "Music|Rock|Rock & Roll");
    map.insert("1158".to_string(), "Music|Rock|Rockabilly");
    map.insert("1159".to_string(), "Music|Rock|Roots Rock");
    map.insert("1160".to_string(), "Music|Rock|Singer/Songwriter");
    map.insert("1161".to_string(), "Music|Rock|Southern Rock");
    map.insert("1162".to_string(), "Music|Rock|Surf");
    map.insert("1163".to_string(), "Music|Rock|Tex-Mex");
    map.insert("1165".to_string(), "Music|Soundtrack|Foreign Cinema");
    map.insert("1166".to_string(), "Music|Soundtrack|Musicals");
    map.insert("1167".to_string(), "Music|Comedy|Novelty");
    map.insert("1168".to_string(), "Music|Soundtrack|Original Score");
    map.insert("1169".to_string(), "Music|Soundtrack|Soundtrack");
    map.insert("1171".to_string(), "Music|Comedy|Standup Comedy");
    map.insert("1172".to_string(), "Music|Soundtrack|TV Soundtrack");
    map.insert("1173".to_string(), "Music|Vocal|Standards");
    map.insert("1174".to_string(), "Music|Vocal|Traditional Pop");
    map.insert("1175".to_string(), "Music|Jazz|Vocal Jazz");
    map.insert("1176".to_string(), "Music|Vocal|Vocal Pop");
    map.insert("1177".to_string(), "Music|African|Afro-Beat");
    map.insert("1178".to_string(), "Music|African|Afro-Pop");
    map.insert("1179".to_string(), "Music|World|Cajun");
    map.insert("1180".to_string(), "Music|World|Celtic");
    map.insert("1181".to_string(), "Music|World|Celtic Folk");
    map.insert("1182".to_string(), "Music|World|Contemporary Celtic");
    map.insert("1183".to_string(), "Music|Reggae|Modern Dancehall");
    map.insert("1184".to_string(), "Music|World|Drinking Songs");
    map.insert("1185".to_string(), "Music|Indian|Indian Pop");
    map.insert("1186".to_string(), "Music|World|Japanese Pop");
    map.insert("1187".to_string(), "Music|World|Klezmer");
    map.insert("1188".to_string(), "Music|World|Polka");
    map.insert("1189".to_string(), "Music|World|Traditional Celtic");
    map.insert("1190".to_string(), "Music|World|Worldbeat");
    map.insert("1191".to_string(), "Music|World|Zydeco");
    map.insert("1192".to_string(), "Music|Reggae|Roots Reggae");
    map.insert("1193".to_string(), "Music|Reggae|Dub");
    map.insert("1194".to_string(), "Music|Reggae|Ska");
    map.insert("1195".to_string(), "Music|World|Caribbean");
    map.insert("1196".to_string(), "Music|World|South America");
    map.insert("1197".to_string(), "Music|Arabic");
    map.insert("1198".to_string(), "Music|World|North America");
    map.insert("1199".to_string(), "Music|World|Hawaii");
    map.insert("12".to_string(), "Music|Latino");
    map.insert("1200".to_string(), "Music|World|Australia");
    map.insert("12001".to_string(), "Mac App Store|Business");
    map.insert("12002".to_string(), "Mac App Store|Developer Tools");
    map.insert("12003".to_string(), "Mac App Store|Education");
    map.insert("12004".to_string(), "Mac App Store|Entertainment");
    map.insert("12005".to_string(), "Mac App Store|Finance");
    map.insert("12006".to_string(), "Mac App Store|Games");
    map.insert("12007".to_string(), "Mac App Store|Health & Fitness");
    map.insert("12008".to_string(), "Mac App Store|Lifestyle");
    map.insert("1201".to_string(), "Music|World|Japan");
    map.insert("12010".to_string(), "Mac App Store|Medical");
    map.insert("12011".to_string(), "Mac App Store|Music");
    map.insert("12012".to_string(), "Mac App Store|News");
    map.insert("12013".to_string(), "Mac App Store|Photography");
    map.insert("12014".to_string(), "Mac App Store|Productivity");
    map.insert("12015".to_string(), "Mac App Store|Reference");
    map.insert("12016".to_string(), "Mac App Store|Social Networking");
    map.insert("12017".to_string(), "Mac App Store|Sports");
    map.insert("12018".to_string(), "Mac App Store|Travel");
    map.insert("12019".to_string(), "Mac App Store|Utilities");
    map.insert("1202".to_string(), "Music|World|France");
    map.insert("12020".to_string(), "Mac App Store|Video");
    map.insert("12021".to_string(), "Mac App Store|Weather");
    map.insert("12022".to_string(), "Mac App Store|Graphics & Design");
    map.insert("1203".to_string(), "Music|African");
    map.insert("1204".to_string(), "Music|World|Asia");
    map.insert("1205".to_string(), "Music|World|Europe");
    map.insert("1206".to_string(), "Music|World|South Africa");
    map.insert("1207".to_string(), "Music|Jazz|Hard Bop");
    map.insert("1208".to_string(), "Music|Jazz|Trad Jazz");
    map.insert("1209".to_string(), "Music|Jazz|Cool Jazz");
    map.insert("1210".to_string(), "Music|Blues|Acoustic Blues");
    map.insert("1211".to_string(), "Music|Classical|High Classical");
    map.insert("1220".to_string(), "Music|Brazilian|Axe");
    map.insert("12201".to_string(), "Mac App Store|Games|Action");
    map.insert("12202".to_string(), "Mac App Store|Games|Adventure");
    map.insert("12203".to_string(), "Mac App Store|Games|Casual");
    map.insert("12204".to_string(), "Mac App Store|Games|Board");
    map.insert("12205".to_string(), "Mac App Store|Games|Card");
    map.insert("12206".to_string(), "Mac App Store|Games|Casino");
    map.insert("12207".to_string(), "Mac App Store|Games|Dice");
    map.insert("12208".to_string(), "Mac App Store|Games|Educational");
    map.insert("12209".to_string(), "Mac App Store|Games|Family");
    map.insert("1221".to_string(), "Music|Brazilian|Bossa Nova");
    map.insert("12210".to_string(), "Mac App Store|Games|Kids");
    map.insert("12211".to_string(), "Mac App Store|Games|Music");
    map.insert("12212".to_string(), "Mac App Store|Games|Puzzle");
    map.insert("12213".to_string(), "Mac App Store|Games|Racing");
    map.insert("12214".to_string(), "Mac App Store|Games|Role Playing");
    map.insert("12215".to_string(), "Mac App Store|Games|Simulation");
    map.insert("12216".to_string(), "Mac App Store|Games|Sports");
    map.insert("12217".to_string(), "Mac App Store|Games|Strategy");
    map.insert("12218".to_string(), "Mac App Store|Games|Trivia");
    map.insert("12219".to_string(), "Mac App Store|Games|Word");
    map.insert("1222".to_string(), "Music|Brazilian|Choro");
    map.insert("1223".to_string(), "Music|Brazilian|Forro");
    map.insert("1224".to_string(), "Music|Brazilian|Frevo");
    map.insert("1225".to_string(), "Music|Brazilian|MPB");
    map.insert("1226".to_string(), "Music|Brazilian|Pagode");
    map.insert("1227".to_string(), "Music|Brazilian|Samba");
    map.insert("1228".to_string(), "Music|Brazilian|Sertanejo");
    map.insert("1229".to_string(), "Music|Brazilian|Baile Funk");
    map.insert("1230".to_string(), "Music|Alternative|Chinese Alt");
    map.insert("1231".to_string(), "Music|Alternative|Korean Indie");
    map.insert("1232".to_string(), "Music|Chinese");
    map.insert("1233".to_string(), "Music|Chinese|Chinese Classical");
    map.insert("1234".to_string(), "Music|Chinese|Chinese Flute");
    map.insert("1235".to_string(), "Music|Chinese|Chinese Opera");
    map.insert("1236".to_string(), "Music|Chinese|Chinese Orchestral");
    map.insert("1237".to_string(), "Music|Chinese|Chinese Regional Folk");
    map.insert("1238".to_string(), "Music|Chinese|Chinese Strings");
    map.insert("1239".to_string(), "Music|Chinese|Taiwanese Folk");
    map.insert("1240".to_string(), "Music|Chinese|Tibetan Native Music");
    map.insert("1241".to_string(), "Music|Hip-Hop/Rap|Chinese Hip-Hop");
    map.insert("1242".to_string(), "Music|Hip-Hop/Rap|Korean Hip-Hop");
    map.insert("1243".to_string(), "Music|Korean");
    map.insert("1244".to_string(), "Music|Korean|Korean Classical");
    map.insert("1245".to_string(), "Music|Korean|Korean Trad Song");
    map.insert("1246".to_string(), "Music|Korean|Korean Trad Instrumental");
    map.insert("1247".to_string(), "Music|Korean|Korean Trad Theater");
    map.insert("1248".to_string(), "Music|Rock|Chinese Rock");
    map.insert("1249".to_string(), "Music|Rock|Korean Rock");
    map.insert("1250".to_string(), "Music|Pop|C-Pop");
    map.insert("1251".to_string(), "Music|Pop|Cantopop/HK-Pop");
    map.insert("1252".to_string(), "Music|Pop|Korean Folk-Pop");
    map.insert("1253".to_string(), "Music|Pop|Mandopop");
    map.insert("1254".to_string(), "Music|Pop|Tai-Pop");
    map.insert("1255".to_string(), "Music|Pop|Malaysian Pop");
    map.insert("1256".to_string(), "Music|Pop|Pinoy Pop");
    map.insert("1257".to_string(), "Music|Pop|Original Pilipino Music");
    map.insert("1258".to_string(), "Music|Pop|Manilla Sound");
    map.insert("1259".to_string(), "Music|Pop|Indo Pop");
    map.insert("1260".to_string(), "Music|Pop|Thai Pop");
    map.insert("1261".to_string(), "Music|Vocal|Trot");
    map.insert("1262".to_string(), "Music|Indian");
    map.insert("1263".to_string(), "Music|Indian|Bollywood");
    map.insert("1264".to_string(), "Music|Indian|Regional Indian|Tamil");
    map.insert("1265".to_string(), "Music|Indian|Regional Indian|Telugu");
    map.insert("1266".to_string(), "Music|Indian|Regional Indian");
    map.insert("1267".to_string(), "Music|Indian|Devotional & Spiritual");
    map.insert("1268".to_string(), "Music|Indian|Sufi");
    map.insert("1269".to_string(), "Music|Indian|Indian Classical");
    map.insert("1270".to_string(), "Music|Russian|Russian Chanson");
    map.insert("1271".to_string(), "Music|World|Dini");
    map.insert("1272".to_string(), "Music|Turkish|Halk");
    map.insert("1273".to_string(), "Music|Turkish|Sanat");
    map.insert("1274".to_string(), "Music|World|Dangdut");
    map.insert("1275".to_string(), "Music|World|Indonesian Religious");
    map.insert("1276".to_string(), "Music|World|Calypso");
    map.insert("1277".to_string(), "Music|World|Soca");
    map.insert("1278".to_string(), "Music|Indian|Ghazals");
    map.insert("1279".to_string(), "Music|Indian|Indian Folk");
    map.insert("1280".to_string(), "Music|Turkish|Arabesque");
    map.insert("1281".to_string(), "Music|African|Afrikaans");
    map.insert("1282".to_string(), "Music|World|Farsi");
    map.insert("1283".to_string(), "Music|World|Israeli");
    map.insert("1284".to_string(), "Music|Arabic|Khaleeji");
    map.insert("1285".to_string(), "Music|Arabic|North African");
    map.insert("1286".to_string(), "Music|Arabic|Arabic Pop");
    map.insert("1287".to_string(), "Music|Arabic|Islamic");
    map.insert("1288".to_string(), "Music|Soundtrack|Sound Effects");
    map.insert("1289".to_string(), "Music|Folk");
    map.insert("1290".to_string(), "Music|Orchestral");
    map.insert("1291".to_string(), "Music|Marching");
    map.insert("1293".to_string(), "Music|Pop|Oldies");
    map.insert("1294".to_string(), "Music|Country|Thai Country");
    map.insert("1295".to_string(), "Music|World|Flamenco");
    map.insert("1296".to_string(), "Music|World|Tango");
    map.insert("1297".to_string(), "Music|World|Fado");
    map.insert("1298".to_string(), "Music|World|Iberia");
    map.insert("1299".to_string(), "Music|Russian");
    map.insert("13".to_string(), "Music|New Age");
    map.insert("1300".to_string(), "Music|Turkish");
    map.insert(
        "13001".to_string(),
        "App Store|Magazines & Newspapers|News & Politics",
    );
    map.insert(
        "13002".to_string(),
        "App Store|Magazines & Newspapers|Fashion & Style",
    );
    map.insert(
        "13003".to_string(),
        "App Store|Magazines & Newspapers|Home & Garden",
    );
    map.insert(
        "13004".to_string(),
        "App Store|Magazines & Newspapers|Outdoors & Nature",
    );
    map.insert(
        "13005".to_string(),
        "App Store|Magazines & Newspapers|Sports & Leisure",
    );
    map.insert(
        "13006".to_string(),
        "App Store|Magazines & Newspapers|Automotive",
    );
    map.insert(
        "13007".to_string(),
        "App Store|Magazines & Newspapers|Arts & Photography",
    );
    map.insert(
        "13008".to_string(),
        "App Store|Magazines & Newspapers|Brides & Weddings",
    );
    map.insert(
        "13009".to_string(),
        "App Store|Magazines & Newspapers|Business & Investing",
    );
    map.insert("1301".to_string(), "Podcasts|Arts");
    map.insert(
        "13010".to_string(),
        "App Store|Magazines & Newspapers|Children's Magazines",
    );
    map.insert(
        "13011".to_string(),
        "App Store|Magazines & Newspapers|Computers & Internet",
    );
    map.insert(
        "13012".to_string(),
        "App Store|Magazines & Newspapers|Cooking, Food & Drink",
    );
    map.insert(
        "13013".to_string(),
        "App Store|Magazines & Newspapers|Crafts & Hobbies",
    );
    map.insert(
        "13014".to_string(),
        "App Store|Magazines & Newspapers|Electronics & Audio",
    );
    map.insert(
        "13015".to_string(),
        "App Store|Magazines & Newspapers|Entertainment",
    );
    map.insert(
        "13017".to_string(),
        "App Store|Magazines & Newspapers|Health, Mind & Body",
    );
    map.insert(
        "13018".to_string(),
        "App Store|Magazines & Newspapers|History",
    );
    map.insert(
        "13019".to_string(),
        "App Store|Magazines & Newspapers|Literary Magazines & Journals",
    );
    map.insert(
        "1302".to_string(),
        "Podcasts|Society & Culture|Personal Journals",
    );
    map.insert(
        "13020".to_string(),
        "App Store|Magazines & Newspapers|Men's Interest",
    );
    map.insert(
        "13021".to_string(),
        "App Store|Magazines & Newspapers|Movies & Music",
    );
    map.insert(
        "13023".to_string(),
        "App Store|Magazines & Newspapers|Parenting & Family",
    );
    map.insert("13024".to_string(), "App Store|Magazines & Newspapers|Pets");
    map.insert(
        "13025".to_string(),
        "App Store|Magazines & Newspapers|Professional & Trade",
    );
    map.insert(
        "13026".to_string(),
        "App Store|Magazines & Newspapers|Regional News",
    );
    map.insert(
        "13027".to_string(),
        "App Store|Magazines & Newspapers|Science",
    );
    map.insert(
        "13028".to_string(),
        "App Store|Magazines & Newspapers|Teens",
    );
    map.insert(
        "13029".to_string(),
        "App Store|Magazines & Newspapers|Travel & Regional",
    );
    map.insert("1303".to_string(), "Podcasts|Comedy");
    map.insert(
        "13030".to_string(),
        "App Store|Magazines & Newspapers|Women's Interest",
    );
    map.insert("1304".to_string(), "Podcasts|Education");
    map.insert("1305".to_string(), "Podcasts|Kids & Family");
    map.insert("1306".to_string(), "Podcasts|Arts|Food");
    map.insert("1307".to_string(), "Podcasts|Health");
    map.insert("1309".to_string(), "Podcasts|TV & Film");
    map.insert("1310".to_string(), "Podcasts|Music");
    map.insert("1311".to_string(), "Podcasts|News & Politics");
    map.insert("1314".to_string(), "Podcasts|Religion & Spirituality");
    map.insert("1315".to_string(), "Podcasts|Science & Medicine");
    map.insert("1316".to_string(), "Podcasts|Sports & Recreation");
    map.insert("1318".to_string(), "Podcasts|Technology");
    map.insert(
        "1320".to_string(),
        "Podcasts|Society & Culture|Places & Travel",
    );
    map.insert("1321".to_string(), "Podcasts|Business");
    map.insert("1323".to_string(), "Podcasts|Games & Hobbies");
    map.insert("1324".to_string(), "Podcasts|Society & Culture");
    map.insert("1325".to_string(), "Podcasts|Government & Organizations");
    map.insert("1337".to_string(), "Music Videos|Classical|Piano");
    map.insert("14".to_string(), "Music|Pop");
    map.insert("1401".to_string(), "Podcasts|Arts|Literature");
    map.insert("1402".to_string(), "Podcasts|Arts|Design");
    map.insert("1404".to_string(), "Podcasts|Games & Hobbies|Video Games");
    map.insert("1405".to_string(), "Podcasts|Arts|Performing Arts");
    map.insert("1406".to_string(), "Podcasts|Arts|Visual Arts");
    map.insert("1410".to_string(), "Podcasts|Business|Careers");
    map.insert("1412".to_string(), "Podcasts|Business|Investing");
    map.insert(
        "1413".to_string(),
        "Podcasts|Business|Management & Marketing",
    );
    map.insert("1415".to_string(), "Podcasts|Education|K-12");
    map.insert("1416".to_string(), "Podcasts|Education|Higher Education");
    map.insert("1417".to_string(), "Podcasts|Health|Fitness & Nutrition");
    map.insert("1420".to_string(), "Podcasts|Health|Self-Help");
    map.insert("1421".to_string(), "Podcasts|Health|Sexuality");
    map.insert(
        "1438".to_string(),
        "Podcasts|Religion & Spirituality|Buddhism",
    );
    map.insert(
        "1439".to_string(),
        "Podcasts|Religion & Spirituality|Christianity",
    );
    map.insert("1440".to_string(), "Podcasts|Religion & Spirituality|Islam");
    map.insert(
        "1441".to_string(),
        "Podcasts|Religion & Spirituality|Judaism",
    );
    map.insert("1443".to_string(), "Podcasts|Society & Culture|Philosophy");
    map.insert(
        "1444".to_string(),
        "Podcasts|Religion & Spirituality|Spirituality",
    );
    map.insert("1446".to_string(), "Podcasts|Technology|Gadgets");
    map.insert("1448".to_string(), "Podcasts|Technology|Tech News");
    map.insert("1450".to_string(), "Podcasts|Technology|Podcasting");
    map.insert("1454".to_string(), "Podcasts|Games & Hobbies|Automotive");
    map.insert("1455".to_string(), "Podcasts|Games & Hobbies|Aviation");
    map.insert("1456".to_string(), "Podcasts|Sports & Recreation|Outdoor");
    map.insert("1459".to_string(), "Podcasts|Arts|Fashion & Beauty");
    map.insert("1460".to_string(), "Podcasts|Games & Hobbies|Hobbies");
    map.insert("1461".to_string(), "Podcasts|Games & Hobbies|Other Games");
    map.insert("1462".to_string(), "Podcasts|Society & Culture|History");
    map.insert(
        "1463".to_string(),
        "Podcasts|Religion & Spirituality|Hinduism",
    );
    map.insert("1464".to_string(), "Podcasts|Religion & Spirituality|Other");
    map.insert(
        "1465".to_string(),
        "Podcasts|Sports & Recreation|Professional",
    );
    map.insert(
        "1466".to_string(),
        "Podcasts|Sports & Recreation|College & High School",
    );
    map.insert("1467".to_string(), "Podcasts|Sports & Recreation|Amateur");
    map.insert(
        "1468".to_string(),
        "Podcasts|Education|Educational Technology",
    );
    map.insert("1469".to_string(), "Podcasts|Education|Language Courses");
    map.insert("1470".to_string(), "Podcasts|Education|Training");
    map.insert("1471".to_string(), "Podcasts|Business|Business News");
    map.insert("1472".to_string(), "Podcasts|Business|Shopping");
    map.insert(
        "1473".to_string(),
        "Podcasts|Government & Organizations|National",
    );
    map.insert(
        "1474".to_string(),
        "Podcasts|Government & Organizations|Regional",
    );
    map.insert(
        "1475".to_string(),
        "Podcasts|Government & Organizations|Local",
    );
    map.insert(
        "1476".to_string(),
        "Podcasts|Government & Organizations|Non-Profit",
    );
    map.insert(
        "1477".to_string(),
        "Podcasts|Science & Medicine|Natural Sciences",
    );
    map.insert("1478".to_string(), "Podcasts|Science & Medicine|Medicine");
    map.insert(
        "1479".to_string(),
        "Podcasts|Science & Medicine|Social Sciences",
    );
    map.insert("1480".to_string(), "Podcasts|Technology|Software How-To");
    map.insert("1481".to_string(), "Podcasts|Health|Alternative Health");
    map.insert("1482".to_string(), "Podcasts|Arts|Books");
    map.insert("1483".to_string(), "Podcasts|Fiction");
    map.insert("1484".to_string(), "Podcasts|Fiction|Drama");
    map.insert("1485".to_string(), "Podcasts|Fiction|Science Fiction");
    map.insert("1486".to_string(), "Podcasts|Fiction|Comedy Fiction");
    map.insert("1487".to_string(), "Podcasts|History");
    map.insert("1488".to_string(), "Podcasts|True Crime");
    map.insert("1489".to_string(), "Podcasts|News");
    map.insert("1490".to_string(), "Podcasts|News|Business News");
    map.insert("1491".to_string(), "Podcasts|Business|Management");
    map.insert("1492".to_string(), "Podcasts|Business|Marketing");
    map.insert("1493".to_string(), "Podcasts|Business|Entrepreneurship");
    map.insert("1494".to_string(), "Podcasts|Business|Non-Profit");
    map.insert("1495".to_string(), "Podcasts|Comedy|Improv");
    map.insert("1496".to_string(), "Podcasts|Comedy|Comedy Interviews");
    map.insert("1497".to_string(), "Podcasts|Comedy|Stand-Up");
    map.insert("1498".to_string(), "Podcasts|Education|Language Learning");
    map.insert("1499".to_string(), "Podcasts|Education|How To");
    map.insert("15".to_string(), "Music|R&B/Soul");
    map.insert("1500".to_string(), "Podcasts|Education|Self-Improvement");
    map.insert("15000".to_string(), "Textbooks|Arts & Entertainment");
    map.insert(
        "15001".to_string(),
        "Textbooks|Arts & Entertainment|Art & Architecture",
    );
    map.insert(
        "15002".to_string(),
        "Textbooks|Arts & Entertainment|Art & Architecture|Urban Planning",
    );
    map.insert(
        "15003".to_string(),
        "Textbooks|Arts & Entertainment|Art History",
    );
    map.insert("15004".to_string(), "Textbooks|Arts & Entertainment|Dance");
    map.insert("15005".to_string(), "Textbooks|Arts & Entertainment|Design");
    map.insert(
        "15006".to_string(),
        "Textbooks|Arts & Entertainment|Fashion",
    );
    map.insert("15007".to_string(), "Textbooks|Arts & Entertainment|Film");
    map.insert("15008".to_string(), "Textbooks|Arts & Entertainment|Games");
    map.insert(
        "15009".to_string(),
        "Textbooks|Arts & Entertainment|Interior Design",
    );
    map.insert("1501".to_string(), "Podcasts|Education|Courses");
    map.insert(
        "15010".to_string(),
        "Textbooks|Arts & Entertainment|Media Arts",
    );
    map.insert("15011".to_string(), "Textbooks|Arts & Entertainment|Music");
    map.insert(
        "15012".to_string(),
        "Textbooks|Arts & Entertainment|Performing Arts",
    );
    map.insert(
        "15013".to_string(),
        "Textbooks|Arts & Entertainment|Photography",
    );
    map.insert(
        "15014".to_string(),
        "Textbooks|Arts & Entertainment|Theater",
    );
    map.insert("15015".to_string(), "Textbooks|Arts & Entertainment|TV");
    map.insert(
        "15016".to_string(),
        "Textbooks|Arts & Entertainment|Visual Arts",
    );
    map.insert("15017".to_string(), "Textbooks|Biographies & Memoirs");
    map.insert("15018".to_string(), "Textbooks|Business & Personal Finance");
    map.insert(
        "15019".to_string(),
        "Textbooks|Business & Personal Finance|Accounting",
    );
    map.insert("1502".to_string(), "Podcasts|Leisure");
    map.insert(
        "15020".to_string(),
        "Textbooks|Business & Personal Finance|Careers",
    );
    map.insert(
        "15021".to_string(),
        "Textbooks|Business & Personal Finance|Economics",
    );
    map.insert(
        "15022".to_string(),
        "Textbooks|Business & Personal Finance|Finance",
    );
    map.insert(
        "15023".to_string(),
        "Textbooks|Business & Personal Finance|Hospitality",
    );
    map.insert(
        "15024".to_string(),
        "Textbooks|Business & Personal Finance|Industries & Professions",
    );
    map.insert(
        "15025".to_string(),
        "Textbooks|Business & Personal Finance|Investing",
    );
    map.insert(
        "15026".to_string(),
        "Textbooks|Business & Personal Finance|Management & Leadership",
    );
    map.insert(
        "15027".to_string(),
        "Textbooks|Business & Personal Finance|Marketing & Sales",
    );
    map.insert(
        "15028".to_string(),
        "Textbooks|Business & Personal Finance|Personal Finance",
    );
    map.insert(
        "15029".to_string(),
        "Textbooks|Business & Personal Finance|Real Estate",
    );
    map.insert("1503".to_string(), "Podcasts|Leisure|Automotive");
    map.insert(
        "15030".to_string(),
        "Textbooks|Business & Personal Finance|Reference",
    );
    map.insert(
        "15031".to_string(),
        "Textbooks|Business & Personal Finance|Small Business & Entrepreneurship",
    );
    map.insert("15032".to_string(), "Textbooks|Children & Teens");
    map.insert("15033".to_string(), "Textbooks|Children & Teens|Fiction");
    map.insert("15034".to_string(), "Textbooks|Children & Teens|Nonfiction");
    map.insert("15035".to_string(), "Textbooks|Comics & Graphic Novels");
    map.insert(
        "15036".to_string(),
        "Textbooks|Comics & Graphic Novels|Graphic Novels",
    );
    map.insert(
        "15037".to_string(),
        "Textbooks|Comics & Graphic Novels|Manga",
    );
    map.insert("15038".to_string(), "Textbooks|Communications & Media");
    map.insert(
        "15039".to_string(),
        "Textbooks|Communications & Media|Broadcasting",
    );
    map.insert("1504".to_string(), "Podcasts|Leisure|Aviation");
    map.insert(
        "15040".to_string(),
        "Textbooks|Communications & Media|Digital Media",
    );
    map.insert(
        "15041".to_string(),
        "Textbooks|Communications & Media|Journalism",
    );
    map.insert(
        "15042".to_string(),
        "Textbooks|Communications & Media|Photojournalism",
    );
    map.insert(
        "15043".to_string(),
        "Textbooks|Communications & Media|Print",
    );
    map.insert(
        "15044".to_string(),
        "Textbooks|Communications & Media|Speech",
    );
    map.insert(
        "15045".to_string(),
        "Textbooks|Communications & Media|Writing",
    );
    map.insert("15046".to_string(), "Textbooks|Computers & Internet");
    map.insert(
        "15047".to_string(),
        "Textbooks|Computers & Internet|Computers",
    );
    map.insert(
        "15048".to_string(),
        "Textbooks|Computers & Internet|Databases",
    );
    map.insert(
        "15049".to_string(),
        "Textbooks|Computers & Internet|Digital Media",
    );
    map.insert("1505".to_string(), "Podcasts|Leisure|Hobbies");
    map.insert(
        "15050".to_string(),
        "Textbooks|Computers & Internet|Internet",
    );
    map.insert(
        "15051".to_string(),
        "Textbooks|Computers & Internet|Network",
    );
    map.insert(
        "15052".to_string(),
        "Textbooks|Computers & Internet|Operating Systems",
    );
    map.insert(
        "15053".to_string(),
        "Textbooks|Computers & Internet|Programming",
    );
    map.insert(
        "15054".to_string(),
        "Textbooks|Computers & Internet|Software",
    );
    map.insert(
        "15055".to_string(),
        "Textbooks|Computers & Internet|System Administration",
    );
    map.insert("15056".to_string(), "Textbooks|Cookbooks, Food & Wine");
    map.insert(
        "15057".to_string(),
        "Textbooks|Cookbooks, Food & Wine|Beverages",
    );
    map.insert(
        "15058".to_string(),
        "Textbooks|Cookbooks, Food & Wine|Courses & Dishes",
    );
    map.insert(
        "15059".to_string(),
        "Textbooks|Cookbooks, Food & Wine|Culinary Arts",
    );
    map.insert("1506".to_string(), "Podcasts|Leisure|Crafts");
    map.insert(
        "15060".to_string(),
        "Textbooks|Cookbooks, Food & Wine|Methods",
    );
    map.insert(
        "15061".to_string(),
        "Textbooks|Cookbooks, Food & Wine|Reference",
    );
    map.insert(
        "15062".to_string(),
        "Textbooks|Cookbooks, Food & Wine|Regional & Ethnic",
    );
    map.insert(
        "15063".to_string(),
        "Textbooks|Cookbooks, Food & Wine|Special Diet",
    );
    map.insert(
        "15064".to_string(),
        "Textbooks|Cookbooks, Food & Wine|Special Occasions",
    );
    map.insert(
        "15065".to_string(),
        "Textbooks|Cookbooks, Food & Wine|Specific Ingredients",
    );
    map.insert("15066".to_string(), "Textbooks|Engineering");
    map.insert("15067".to_string(), "Textbooks|Engineering|Aeronautics");
    map.insert(
        "15068".to_string(),
        "Textbooks|Engineering|Chemical & Petroleum Engineering",
    );
    map.insert(
        "15069".to_string(),
        "Textbooks|Engineering|Civil Engineering",
    );
    map.insert("1507".to_string(), "Podcasts|Leisure|Games");
    map.insert(
        "15070".to_string(),
        "Textbooks|Engineering|Computer Science",
    );
    map.insert(
        "15071".to_string(),
        "Textbooks|Engineering|Electrical Engineering",
    );
    map.insert(
        "15072".to_string(),
        "Textbooks|Engineering|Environmental Engineering",
    );
    map.insert(
        "15073".to_string(),
        "Textbooks|Engineering|Mechanical Engineering",
    );
    map.insert("15074".to_string(), "Textbooks|Engineering|Power Resources");
    map.insert("15075".to_string(), "Textbooks|Fiction & Literature");
    map.insert("15076".to_string(), "Textbooks|Fiction & Literature|Latino");
    map.insert(
        "15077".to_string(),
        "Textbooks|Fiction & Literature|Action & Adventure",
    );
    map.insert(
        "15078".to_string(),
        "Textbooks|Fiction & Literature|African American",
    );
    map.insert(
        "15079".to_string(),
        "Textbooks|Fiction & Literature|Anthologies",
    );
    map.insert("1508".to_string(), "Podcasts|Leisure|Home & Garden");
    map.insert(
        "15080".to_string(),
        "Textbooks|Fiction & Literature|Classics",
    );
    map.insert(
        "15081".to_string(),
        "Textbooks|Fiction & Literature|Comparative Literature",
    );
    map.insert(
        "15082".to_string(),
        "Textbooks|Fiction & Literature|Erotica",
    );
    map.insert("15083".to_string(), "Textbooks|Fiction & Literature|Gay");
    map.insert("15084".to_string(), "Textbooks|Fiction & Literature|Ghost");
    map.insert(
        "15085".to_string(),
        "Textbooks|Fiction & Literature|Historical",
    );
    map.insert("15086".to_string(), "Textbooks|Fiction & Literature|Horror");
    map.insert(
        "15087".to_string(),
        "Textbooks|Fiction & Literature|Literary",
    );
    map.insert(
        "15088".to_string(),
        "Textbooks|Fiction & Literature|Literary Criticism",
    );
    map.insert("15089".to_string(), "Textbooks|Fiction & Literature|Poetry");
    map.insert("1509".to_string(), "Podcasts|Leisure|Video Games");
    map.insert(
        "15090".to_string(),
        "Textbooks|Fiction & Literature|Religious",
    );
    map.insert(
        "15091".to_string(),
        "Textbooks|Fiction & Literature|Short Stories",
    );
    map.insert("15092".to_string(), "Textbooks|Health, Mind & Body");
    map.insert("15093".to_string(), "Textbooks|Health, Mind & Body|Fitness");
    map.insert(
        "15094".to_string(),
        "Textbooks|Health, Mind & Body|Self-Improvement",
    );
    map.insert("15095".to_string(), "Textbooks|History");
    map.insert("15096".to_string(), "Textbooks|History|Africa");
    map.insert("15097".to_string(), "Textbooks|History|Americas");
    map.insert("15098".to_string(), "Textbooks|History|Americas|Canada");
    map.insert(
        "15099".to_string(),
        "Textbooks|History|Americas|Latin America",
    );
    map.insert("1510".to_string(), "Podcasts|Leisure|Animation & Manga");
    map.insert(
        "15100".to_string(),
        "Textbooks|History|Americas|United States",
    );
    map.insert("15101".to_string(), "Textbooks|History|Ancient");
    map.insert("15102".to_string(), "Textbooks|History|Asia");
    map.insert("15103".to_string(), "Textbooks|History|Australia & Oceania");
    map.insert("15104".to_string(), "Textbooks|History|Europe");
    map.insert("15105".to_string(), "Textbooks|History|Middle East");
    map.insert("15106".to_string(), "Textbooks|History|Military");
    map.insert("15107".to_string(), "Textbooks|History|World");
    map.insert("15108".to_string(), "Textbooks|Humor");
    map.insert("15109".to_string(), "Textbooks|Language Studies");
    map.insert("1511".to_string(), "Podcasts|Government");
    map.insert(
        "15110".to_string(),
        "Textbooks|Language Studies|African Languages",
    );
    map.insert(
        "15111".to_string(),
        "Textbooks|Language Studies|Ancient Languages",
    );
    map.insert("15112".to_string(), "Textbooks|Language Studies|Arabic");
    map.insert(
        "15113".to_string(),
        "Textbooks|Language Studies|Bilingual Editions",
    );
    map.insert("15114".to_string(), "Textbooks|Language Studies|Chinese");
    map.insert("15115".to_string(), "Textbooks|Language Studies|English");
    map.insert("15116".to_string(), "Textbooks|Language Studies|French");
    map.insert("15117".to_string(), "Textbooks|Language Studies|German");
    map.insert("15118".to_string(), "Textbooks|Language Studies|Hebrew");
    map.insert("15119".to_string(), "Textbooks|Language Studies|Hindi");
    map.insert("1512".to_string(), "Podcasts|Health & Fitness");
    map.insert(
        "15120".to_string(),
        "Textbooks|Language Studies|Indigenous Languages",
    );
    map.insert("15121".to_string(), "Textbooks|Language Studies|Italian");
    map.insert("15122".to_string(), "Textbooks|Language Studies|Japanese");
    map.insert("15123".to_string(), "Textbooks|Language Studies|Korean");
    map.insert(
        "15124".to_string(),
        "Textbooks|Language Studies|Linguistics",
    );
    map.insert(
        "15125".to_string(),
        "Textbooks|Language Studies|Other Language",
    );
    map.insert("15126".to_string(), "Textbooks|Language Studies|Portuguese");
    map.insert("15127".to_string(), "Textbooks|Language Studies|Russian");
    map.insert("15128".to_string(), "Textbooks|Language Studies|Spanish");
    map.insert(
        "15129".to_string(),
        "Textbooks|Language Studies|Speech Pathology",
    );
    map.insert(
        "1513".to_string(),
        "Podcasts|Health & Fitness|Alternative Health",
    );
    map.insert("15130".to_string(), "Textbooks|Lifestyle & Home");
    map.insert(
        "15131".to_string(),
        "Textbooks|Lifestyle & Home|Antiques & Collectibles",
    );
    map.insert(
        "15132".to_string(),
        "Textbooks|Lifestyle & Home|Crafts & Hobbies",
    );
    map.insert("15133".to_string(), "Textbooks|Lifestyle & Home|Gardening");
    map.insert("15134".to_string(), "Textbooks|Lifestyle & Home|Pets");
    map.insert("15135".to_string(), "Textbooks|Mathematics");
    map.insert(
        "15136".to_string(),
        "Textbooks|Mathematics|Advanced Mathematics",
    );
    map.insert("15137".to_string(), "Textbooks|Mathematics|Algebra");
    map.insert("15138".to_string(), "Textbooks|Mathematics|Arithmetic");
    map.insert("15139".to_string(), "Textbooks|Mathematics|Calculus");
    map.insert("1514".to_string(), "Podcasts|Health & Fitness|Fitness");
    map.insert("15140".to_string(), "Textbooks|Mathematics|Geometry");
    map.insert("15141".to_string(), "Textbooks|Mathematics|Statistics");
    map.insert("15142".to_string(), "Textbooks|Medicine");
    map.insert(
        "15143".to_string(),
        "Textbooks|Medicine|Anatomy & Physiology",
    );
    map.insert("15144".to_string(), "Textbooks|Medicine|Dentistry");
    map.insert("15145".to_string(), "Textbooks|Medicine|Emergency Medicine");
    map.insert("15146".to_string(), "Textbooks|Medicine|Genetics");
    map.insert("15147".to_string(), "Textbooks|Medicine|Immunology");
    map.insert("15148".to_string(), "Textbooks|Medicine|Neuroscience");
    map.insert("15149".to_string(), "Textbooks|Medicine|Nursing");
    map.insert("1515".to_string(), "Podcasts|Health & Fitness|Nutrition");
    map.insert(
        "15150".to_string(),
        "Textbooks|Medicine|Pharmacology & Toxicology",
    );
    map.insert("15151".to_string(), "Textbooks|Medicine|Psychiatry");
    map.insert("15152".to_string(), "Textbooks|Medicine|Psychology");
    map.insert("15153".to_string(), "Textbooks|Medicine|Radiology");
    map.insert("15154".to_string(), "Textbooks|Medicine|Veterinary");
    map.insert("15155".to_string(), "Textbooks|Mysteries & Thrillers");
    map.insert(
        "15156".to_string(),
        "Textbooks|Mysteries & Thrillers|British Detectives",
    );
    map.insert(
        "15157".to_string(),
        "Textbooks|Mysteries & Thrillers|Hard-Boiled",
    );
    map.insert(
        "15158".to_string(),
        "Textbooks|Mysteries & Thrillers|Historical",
    );
    map.insert(
        "15159".to_string(),
        "Textbooks|Mysteries & Thrillers|Police Procedural",
    );
    map.insert("1516".to_string(), "Podcasts|Health & Fitness|Sexuality");
    map.insert(
        "15160".to_string(),
        "Textbooks|Mysteries & Thrillers|Short Stories",
    );
    map.insert(
        "15161".to_string(),
        "Textbooks|Mysteries & Thrillers|Women Sleuths",
    );
    map.insert("15162".to_string(), "Textbooks|Nonfiction");
    map.insert(
        "15163".to_string(),
        "Textbooks|Nonfiction|Family & Relationships",
    );
    map.insert("15164".to_string(), "Textbooks|Nonfiction|Transportation");
    map.insert("15165".to_string(), "Textbooks|Nonfiction|True Crime");
    map.insert("15166".to_string(), "Textbooks|Parenting");
    map.insert("15167".to_string(), "Textbooks|Philosophy");
    map.insert("15168".to_string(), "Textbooks|Philosophy|Aesthetics");
    map.insert("15169".to_string(), "Textbooks|Philosophy|Epistemology");
    map.insert(
        "1517".to_string(),
        "Podcasts|Health & Fitness|Mental Health",
    );
    map.insert("15170".to_string(), "Textbooks|Philosophy|Ethics");
    map.insert(
        "15171".to_string(),
        "Textbooks|Philosophy|Philosophy of Language",
    );
    map.insert("15172".to_string(), "Textbooks|Philosophy|Logic");
    map.insert("15173".to_string(), "Textbooks|Philosophy|Metaphysics");
    map.insert(
        "15174".to_string(),
        "Textbooks|Philosophy|Political Philosophy",
    );
    map.insert(
        "15175".to_string(),
        "Textbooks|Philosophy|Philosophy of Religion",
    );
    map.insert("15176".to_string(), "Textbooks|Politics & Current Events");
    map.insert(
        "15177".to_string(),
        "Textbooks|Politics & Current Events|Current Events",
    );
    map.insert(
        "15178".to_string(),
        "Textbooks|Politics & Current Events|Foreign Policy & International Relations",
    );
    map.insert(
        "15179".to_string(),
        "Textbooks|Politics & Current Events|Local Governments",
    );
    map.insert("1518".to_string(), "Podcasts|Health & Fitness|Medicine");
    map.insert(
        "15180".to_string(),
        "Textbooks|Politics & Current Events|National Governments",
    );
    map.insert(
        "15181".to_string(),
        "Textbooks|Politics & Current Events|Political Science",
    );
    map.insert(
        "15182".to_string(),
        "Textbooks|Politics & Current Events|Public Administration",
    );
    map.insert(
        "15183".to_string(),
        "Textbooks|Politics & Current Events|World Affairs",
    );
    map.insert("15184".to_string(), "Textbooks|Professional & Technical");
    map.insert(
        "15185".to_string(),
        "Textbooks|Professional & Technical|Design",
    );
    map.insert(
        "15186".to_string(),
        "Textbooks|Professional & Technical|Language Arts & Disciplines",
    );
    map.insert(
        "15187".to_string(),
        "Textbooks|Professional & Technical|Engineering",
    );
    map.insert(
        "15188".to_string(),
        "Textbooks|Professional & Technical|Law",
    );
    map.insert(
        "15189".to_string(),
        "Textbooks|Professional & Technical|Medical",
    );
    map.insert(
        "1519".to_string(),
        "Podcasts|Kids & Family|Education for Kids",
    );
    map.insert("15190".to_string(), "Textbooks|Reference");
    map.insert(
        "15191".to_string(),
        "Textbooks|Reference|Almanacs & Yearbooks",
    );
    map.insert("15192".to_string(), "Textbooks|Reference|Atlases & Maps");
    map.insert(
        "15193".to_string(),
        "Textbooks|Reference|Catalogs & Directories",
    );
    map.insert("15194".to_string(), "Textbooks|Reference|Consumer Guides");
    map.insert(
        "15195".to_string(),
        "Textbooks|Reference|Dictionaries & Thesauruses",
    );
    map.insert("15196".to_string(), "Textbooks|Reference|Encyclopedias");
    map.insert("15197".to_string(), "Textbooks|Reference|Etiquette");
    map.insert("15198".to_string(), "Textbooks|Reference|Quotations");
    map.insert("15199".to_string(), "Textbooks|Reference|Study Aids");
    map.insert(
        "1520".to_string(),
        "Podcasts|Kids & Family|Stories for Kids",
    );
    map.insert("15200".to_string(), "Textbooks|Reference|Words & Language");
    map.insert("15201".to_string(), "Textbooks|Reference|Writing");
    map.insert("15202".to_string(), "Textbooks|Religion & Spirituality");
    map.insert(
        "15203".to_string(),
        "Textbooks|Religion & Spirituality|Bible Studies",
    );
    map.insert(
        "15204".to_string(),
        "Textbooks|Religion & Spirituality|Bibles",
    );
    map.insert(
        "15205".to_string(),
        "Textbooks|Religion & Spirituality|Buddhism",
    );
    map.insert(
        "15206".to_string(),
        "Textbooks|Religion & Spirituality|Christianity",
    );
    map.insert(
        "15207".to_string(),
        "Textbooks|Religion & Spirituality|Comparative Religion",
    );
    map.insert(
        "15208".to_string(),
        "Textbooks|Religion & Spirituality|Hinduism",
    );
    map.insert(
        "15209".to_string(),
        "Textbooks|Religion & Spirituality|Islam",
    );
    map.insert("1521".to_string(), "Podcasts|Kids & Family|Parenting");
    map.insert(
        "15210".to_string(),
        "Textbooks|Religion & Spirituality|Judaism",
    );
    map.insert(
        "15211".to_string(),
        "Textbooks|Religion & Spirituality|Spirituality",
    );
    map.insert("15212".to_string(), "Textbooks|Romance");
    map.insert("15213".to_string(), "Textbooks|Romance|Contemporary");
    map.insert("15214".to_string(), "Textbooks|Romance|Erotic Romance");
    map.insert("15215".to_string(), "Textbooks|Romance|Paranormal");
    map.insert("15216".to_string(), "Textbooks|Romance|Historical");
    map.insert("15217".to_string(), "Textbooks|Romance|Short Stories");
    map.insert("15218".to_string(), "Textbooks|Romance|Suspense");
    map.insert("15219".to_string(), "Textbooks|Romance|Western");
    map.insert("1522".to_string(), "Podcasts|Kids & Family|Pets & Animals");
    map.insert("15220".to_string(), "Textbooks|Sci-Fi & Fantasy");
    map.insert("15221".to_string(), "Textbooks|Sci-Fi & Fantasy|Fantasy");
    map.insert(
        "15222".to_string(),
        "Textbooks|Sci-Fi & Fantasy|Fantasy|Contemporary",
    );
    map.insert(
        "15223".to_string(),
        "Textbooks|Sci-Fi & Fantasy|Fantasy|Epic",
    );
    map.insert(
        "15224".to_string(),
        "Textbooks|Sci-Fi & Fantasy|Fantasy|Historical",
    );
    map.insert(
        "15225".to_string(),
        "Textbooks|Sci-Fi & Fantasy|Fantasy|Paranormal",
    );
    map.insert(
        "15226".to_string(),
        "Textbooks|Sci-Fi & Fantasy|Fantasy|Short Stories",
    );
    map.insert(
        "15227".to_string(),
        "Textbooks|Sci-Fi & Fantasy|Science Fiction",
    );
    map.insert(
        "15228".to_string(),
        "Textbooks|Sci-Fi & Fantasy|Science Fiction & Literature",
    );
    map.insert(
        "15229".to_string(),
        "Textbooks|Sci-Fi & Fantasy|Science Fiction & Literature|Adventure",
    );
    map.insert("1523".to_string(), "Podcasts|Music|Music Commentary");
    map.insert(
        "15230".to_string(),
        "Textbooks|Sci-Fi & Fantasy|Science Fiction & Literature|High Tech",
    );
    map.insert(
        "15231".to_string(),
        "Textbooks|Sci-Fi & Fantasy|Science Fiction & Literature|Short Stories",
    );
    map.insert("15232".to_string(), "Textbooks|Science & Nature");
    map.insert(
        "15233".to_string(),
        "Textbooks|Science & Nature|Agriculture",
    );
    map.insert("15234".to_string(), "Textbooks|Science & Nature|Astronomy");
    map.insert("15235".to_string(), "Textbooks|Science & Nature|Atmosphere");
    map.insert("15236".to_string(), "Textbooks|Science & Nature|Biology");
    map.insert("15237".to_string(), "Textbooks|Science & Nature|Chemistry");
    map.insert(
        "15238".to_string(),
        "Textbooks|Science & Nature|Earth Sciences",
    );
    map.insert("15239".to_string(), "Textbooks|Science & Nature|Ecology");
    map.insert("1524".to_string(), "Podcasts|Music|Music History");
    map.insert(
        "15240".to_string(),
        "Textbooks|Science & Nature|Environment",
    );
    map.insert("15241".to_string(), "Textbooks|Science & Nature|Essays");
    map.insert("15242".to_string(), "Textbooks|Science & Nature|Geography");
    map.insert("15243".to_string(), "Textbooks|Science & Nature|Geology");
    map.insert("15244".to_string(), "Textbooks|Science & Nature|History");
    map.insert(
        "15245".to_string(),
        "Textbooks|Science & Nature|Life Sciences",
    );
    map.insert("15246".to_string(), "Textbooks|Science & Nature|Nature");
    map.insert("15247".to_string(), "Textbooks|Science & Nature|Physics");
    map.insert("15248".to_string(), "Textbooks|Science & Nature|Reference");
    map.insert("15249".to_string(), "Textbooks|Social Science");
    map.insert("1525".to_string(), "Podcasts|Music|Music Interviews");
    map.insert("15250".to_string(), "Textbooks|Social Science|Anthropology");
    map.insert("15251".to_string(), "Textbooks|Social Science|Archaeology");
    map.insert("15252".to_string(), "Textbooks|Social Science|Civics");
    map.insert("15253".to_string(), "Textbooks|Social Science|Government");
    map.insert(
        "15254".to_string(),
        "Textbooks|Social Science|Social Studies",
    );
    map.insert(
        "15255".to_string(),
        "Textbooks|Social Science|Social Welfare",
    );
    map.insert("15256".to_string(), "Textbooks|Social Science|Society");
    map.insert(
        "15257".to_string(),
        "Textbooks|Social Science|Society|African Studies",
    );
    map.insert(
        "15258".to_string(),
        "Textbooks|Social Science|Society|American Studies",
    );
    map.insert(
        "15259".to_string(),
        "Textbooks|Social Science|Society|Asia Pacific Studies",
    );
    map.insert("1526".to_string(), "Podcasts|News|Daily News");
    map.insert(
        "15260".to_string(),
        "Textbooks|Social Science|Society|Cross-Cultural Studies",
    );
    map.insert(
        "15261".to_string(),
        "Textbooks|Social Science|Society|European Studies",
    );
    map.insert(
        "15262".to_string(),
        "Textbooks|Social Science|Society|Immigration & Emigration",
    );
    map.insert(
        "15263".to_string(),
        "Textbooks|Social Science|Society|Indigenous Studies",
    );
    map.insert(
        "15264".to_string(),
        "Textbooks|Social Science|Society|Latin & Caribbean Studies",
    );
    map.insert(
        "15265".to_string(),
        "Textbooks|Social Science|Society|Middle Eastern Studies",
    );
    map.insert(
        "15266".to_string(),
        "Textbooks|Social Science|Society|Race & Ethnicity Studies",
    );
    map.insert(
        "15267".to_string(),
        "Textbooks|Social Science|Society|Sexuality Studies",
    );
    map.insert(
        "15268".to_string(),
        "Textbooks|Social Science|Society|Women's Studies",
    );
    map.insert("15269".to_string(), "Textbooks|Social Science|Sociology");
    map.insert("1527".to_string(), "Podcasts|News|Politics");
    map.insert("15270".to_string(), "Textbooks|Sports & Outdoors");
    map.insert("15271".to_string(), "Textbooks|Sports & Outdoors|Baseball");
    map.insert(
        "15272".to_string(),
        "Textbooks|Sports & Outdoors|Basketball",
    );
    map.insert("15273".to_string(), "Textbooks|Sports & Outdoors|Coaching");
    map.insert(
        "15274".to_string(),
        "Textbooks|Sports & Outdoors|Equestrian",
    );
    map.insert(
        "15275".to_string(),
        "Textbooks|Sports & Outdoors|Extreme Sports",
    );
    map.insert("15276".to_string(), "Textbooks|Sports & Outdoors|Football");
    map.insert("15277".to_string(), "Textbooks|Sports & Outdoors|Golf");
    map.insert("15278".to_string(), "Textbooks|Sports & Outdoors|Hockey");
    map.insert(
        "15279".to_string(),
        "Textbooks|Sports & Outdoors|Motor Sports",
    );
    map.insert("1528".to_string(), "Podcasts|News|Tech News");
    map.insert(
        "15280".to_string(),
        "Textbooks|Sports & Outdoors|Mountaineering",
    );
    map.insert("15281".to_string(), "Textbooks|Sports & Outdoors|Outdoors");
    map.insert(
        "15282".to_string(),
        "Textbooks|Sports & Outdoors|Racket Sports",
    );
    map.insert("15283".to_string(), "Textbooks|Sports & Outdoors|Reference");
    map.insert("15284".to_string(), "Textbooks|Sports & Outdoors|Soccer");
    map.insert("15285".to_string(), "Textbooks|Sports & Outdoors|Training");
    map.insert(
        "15286".to_string(),
        "Textbooks|Sports & Outdoors|Water Sports",
    );
    map.insert(
        "15287".to_string(),
        "Textbooks|Sports & Outdoors|Winter Sports",
    );
    map.insert("15288".to_string(), "Textbooks|Teaching & Learning");
    map.insert(
        "15289".to_string(),
        "Textbooks|Teaching & Learning|Adult Education",
    );
    map.insert("1529".to_string(), "Podcasts|News|Sports News");
    map.insert(
        "15290".to_string(),
        "Textbooks|Teaching & Learning|Curriculum & Teaching",
    );
    map.insert(
        "15291".to_string(),
        "Textbooks|Teaching & Learning|Educational Leadership",
    );
    map.insert(
        "15292".to_string(),
        "Textbooks|Teaching & Learning|Educational Technology",
    );
    map.insert(
        "15293".to_string(),
        "Textbooks|Teaching & Learning|Family & Childcare",
    );
    map.insert(
        "15294".to_string(),
        "Textbooks|Teaching & Learning|Information & Library Science",
    );
    map.insert(
        "15295".to_string(),
        "Textbooks|Teaching & Learning|Learning Resources",
    );
    map.insert(
        "15296".to_string(),
        "Textbooks|Teaching & Learning|Psychology & Research",
    );
    map.insert(
        "15297".to_string(),
        "Textbooks|Teaching & Learning|Special Education",
    );
    map.insert("15298".to_string(), "Textbooks|Travel & Adventure");
    map.insert("15299".to_string(), "Textbooks|Travel & Adventure|Africa");
    map.insert("1530".to_string(), "Podcasts|News|News Commentary");
    map.insert("15300".to_string(), "Textbooks|Travel & Adventure|Americas");
    map.insert(
        "15301".to_string(),
        "Textbooks|Travel & Adventure|Americas|Canada",
    );
    map.insert(
        "15302".to_string(),
        "Textbooks|Travel & Adventure|Americas|Latin America",
    );
    map.insert(
        "15303".to_string(),
        "Textbooks|Travel & Adventure|Americas|United States",
    );
    map.insert("15304".to_string(), "Textbooks|Travel & Adventure|Asia");
    map.insert(
        "15305".to_string(),
        "Textbooks|Travel & Adventure|Caribbean",
    );
    map.insert(
        "15306".to_string(),
        "Textbooks|Travel & Adventure|Essays & Memoirs",
    );
    map.insert("15307".to_string(), "Textbooks|Travel & Adventure|Europe");
    map.insert(
        "15308".to_string(),
        "Textbooks|Travel & Adventure|Middle East",
    );
    map.insert("15309".to_string(), "Textbooks|Travel & Adventure|Oceania");
    map.insert("1531".to_string(), "Podcasts|News|Entertainment News");
    map.insert(
        "15310".to_string(),
        "Textbooks|Travel & Adventure|Specialty Travel",
    );
    map.insert(
        "15311".to_string(),
        "Textbooks|Comics & Graphic Novels|Comics",
    );
    map.insert("15312".to_string(), "Textbooks|Reference|Manuals");
    map.insert(
        "1532".to_string(),
        "Podcasts|Religion & Spirituality|Religion",
    );
    map.insert("1533".to_string(), "Podcasts|Science");
    map.insert("1534".to_string(), "Podcasts|Science|Natural Sciences");
    map.insert("1535".to_string(), "Podcasts|Science|Social Sciences");
    map.insert("1536".to_string(), "Podcasts|Science|Mathematics");
    map.insert("1537".to_string(), "Podcasts|Science|Nature");
    map.insert("1538".to_string(), "Podcasts|Science|Astronomy");
    map.insert("1539".to_string(), "Podcasts|Science|Chemistry");
    map.insert("1540".to_string(), "Podcasts|Science|Earth Sciences");
    map.insert("1541".to_string(), "Podcasts|Science|Life Sciences");
    map.insert("1542".to_string(), "Podcasts|Science|Physics");
    map.insert("1543".to_string(), "Podcasts|Society & Culture|Documentary");
    map.insert(
        "1544".to_string(),
        "Podcasts|Society & Culture|Relationships",
    );
    map.insert("1545".to_string(), "Podcasts|Sports");
    map.insert("1546".to_string(), "Podcasts|Sports|Soccer");
    map.insert("1547".to_string(), "Podcasts|Sports|Football");
    map.insert("1548".to_string(), "Podcasts|Sports|Basketball");
    map.insert("1549".to_string(), "Podcasts|Sports|Baseball");
    map.insert("1550".to_string(), "Podcasts|Sports|Hockey");
    map.insert("1551".to_string(), "Podcasts|Sports|Running");
    map.insert("1552".to_string(), "Podcasts|Sports|Rugby");
    map.insert("1553".to_string(), "Podcasts|Sports|Golf");
    map.insert("1554".to_string(), "Podcasts|Sports|Cricket");
    map.insert("1555".to_string(), "Podcasts|Sports|Wrestling");
    map.insert("1556".to_string(), "Podcasts|Sports|Tennis");
    map.insert("1557".to_string(), "Podcasts|Sports|Volleyball");
    map.insert("1558".to_string(), "Podcasts|Sports|Swimming");
    map.insert("1559".to_string(), "Podcasts|Sports|Wilderness");
    map.insert("1560".to_string(), "Podcasts|Sports|Fantasy Sports");
    map.insert("1561".to_string(), "Podcasts|TV & Film|TV Reviews");
    map.insert("1562".to_string(), "Podcasts|TV & Film|After Shows");
    map.insert("1563".to_string(), "Podcasts|TV & Film|Film Reviews");
    map.insert("1564".to_string(), "Podcasts|TV & Film|Film History");
    map.insert("1565".to_string(), "Podcasts|TV & Film|Film Interviews");
    map.insert("16".to_string(), "Music|Soundtrack");
    map.insert(
        "16001".to_string(),
        "App Store|Stickers|Emoji & Expressions",
    );
    map.insert("16003".to_string(), "App Store|Stickers|Animals & Nature");
    map.insert("16005".to_string(), "App Store|Stickers|Art");
    map.insert("16006".to_string(), "App Store|Stickers|Celebrations");
    map.insert("16007".to_string(), "App Store|Stickers|Celebrities");
    map.insert("16008".to_string(), "App Store|Stickers|Comics & Cartoons");
    map.insert("16009".to_string(), "App Store|Stickers|Eating & Drinking");
    map.insert("16010".to_string(), "App Store|Stickers|Gaming");
    map.insert("16014".to_string(), "App Store|Stickers|Movies & TV");
    map.insert("16015".to_string(), "App Store|Stickers|Music");
    map.insert("16017".to_string(), "App Store|Stickers|People");
    map.insert("16019".to_string(), "App Store|Stickers|Places & Objects");
    map.insert("1602".to_string(), "Music Videos|Blues");
    map.insert(
        "16021".to_string(),
        "App Store|Stickers|Sports & Activities",
    );
    map.insert("16025".to_string(), "App Store|Stickers|Kids & Family");
    map.insert("16026".to_string(), "App Store|Stickers|Fashion");
    map.insert("1603".to_string(), "Music Videos|Comedy");
    map.insert("1604".to_string(), "Music Videos|Children's Music");
    map.insert("1605".to_string(), "Music Videos|Classical");
    map.insert("1606".to_string(), "Music Videos|Country");
    map.insert("1607".to_string(), "Music Videos|Electronic");
    map.insert("1608".to_string(), "Music Videos|Holiday");
    map.insert("1609".to_string(), "Music Videos|Classical|Opera");
    map.insert("1610".to_string(), "Music Videos|Singer/Songwriter");
    map.insert("1611".to_string(), "Music Videos|Jazz");
    map.insert("1612".to_string(), "Music Videos|Latin");
    map.insert("1613".to_string(), "Music Videos|New Age");
    map.insert("1614".to_string(), "Music Videos|Pop");
    map.insert("1615".to_string(), "Music Videos|R&B/Soul");
    map.insert("1616".to_string(), "Music Videos|Soundtrack");
    map.insert("1617".to_string(), "Music Videos|Dance");
    map.insert("1618".to_string(), "Music Videos|Hip-Hop/Rap");
    map.insert("1619".to_string(), "Music Videos|World");
    map.insert("1620".to_string(), "Music Videos|Alternative");
    map.insert("1621".to_string(), "Music Videos|Rock");
    map.insert("1622".to_string(), "Music Videos|Christian & Gospel");
    map.insert("1623".to_string(), "Music Videos|Vocal");
    map.insert("1624".to_string(), "Music Videos|Reggae");
    map.insert("1625".to_string(), "Music Videos|Easy Listening");
    map.insert("1626".to_string(), "Music Videos|Podcasts");
    map.insert("1627".to_string(), "Music Videos|J-Pop");
    map.insert("1628".to_string(), "Music Videos|Enka");
    map.insert("1629".to_string(), "Music Videos|Anime");
    map.insert("1630".to_string(), "Music Videos|Kayokyoku");
    map.insert("1631".to_string(), "Music Videos|Disney");
    map.insert("1632".to_string(), "Music Videos|French Pop");
    map.insert("1633".to_string(), "Music Videos|German Pop");
    map.insert("1634".to_string(), "Music Videos|German Folk");
    map.insert("1635".to_string(), "Music Videos|Alternative|Chinese Alt");
    map.insert("1636".to_string(), "Music Videos|Alternative|Korean Indie");
    map.insert("1637".to_string(), "Music Videos|Chinese");
    map.insert("1638".to_string(), "Music Videos|Chinese|Chinese Classical");
    map.insert("1639".to_string(), "Music Videos|Chinese|Chinese Flute");
    map.insert("1640".to_string(), "Music Videos|Chinese|Chinese Opera");
    map.insert(
        "1641".to_string(),
        "Music Videos|Chinese|Chinese Orchestral",
    );
    map.insert(
        "1642".to_string(),
        "Music Videos|Chinese|Chinese Regional Folk",
    );
    map.insert("1643".to_string(), "Music Videos|Chinese|Chinese Strings");
    map.insert("1644".to_string(), "Music Videos|Chinese|Taiwanese Folk");
    map.insert(
        "1645".to_string(),
        "Music Videos|Chinese|Tibetan Native Music",
    );
    map.insert(
        "1646".to_string(),
        "Music Videos|Hip-Hop/Rap|Chinese Hip-Hop",
    );
    map.insert(
        "1647".to_string(),
        "Music Videos|Hip-Hop/Rap|Korean Hip-Hop",
    );
    map.insert("1648".to_string(), "Music Videos|Korean");
    map.insert("1649".to_string(), "Music Videos|Korean|Korean Classical");
    map.insert("1650".to_string(), "Music Videos|Korean|Korean Trad Song");
    map.insert(
        "1651".to_string(),
        "Music Videos|Korean|Korean Trad Instrumental",
    );
    map.insert(
        "1652".to_string(),
        "Music Videos|Korean|Korean Trad Theater",
    );
    map.insert("1653".to_string(), "Music Videos|Rock|Chinese Rock");
    map.insert("1654".to_string(), "Music Videos|Rock|Korean Rock");
    map.insert("1655".to_string(), "Music Videos|Pop|C-Pop");
    map.insert("1656".to_string(), "Music Videos|Pop|Cantopop/HK-Pop");
    map.insert("1657".to_string(), "Music Videos|Pop|Korean Folk-Pop");
    map.insert("1658".to_string(), "Music Videos|Pop|Mandopop");
    map.insert("1659".to_string(), "Music Videos|Pop|Tai-Pop");
    map.insert("1660".to_string(), "Music Videos|Pop|Malaysian Pop");
    map.insert("1661".to_string(), "Music Videos|Pop|Pinoy Pop");
    map.insert(
        "1662".to_string(),
        "Music Videos|Pop|Original Pilipino Music",
    );
    map.insert("1663".to_string(), "Music Videos|Pop|Manilla Sound");
    map.insert("1664".to_string(), "Music Videos|Pop|Indo Pop");
    map.insert("1665".to_string(), "Music Videos|Pop|Thai Pop");
    map.insert("1666".to_string(), "Music Videos|Vocal|Trot");
    map.insert("1671".to_string(), "Music Videos|Brazilian");
    map.insert("1672".to_string(), "Music Videos|Brazilian|Axe");
    map.insert("1673".to_string(), "Music Videos|Brazilian|Baile Funk");
    map.insert("1674".to_string(), "Music Videos|Brazilian|Bossa Nova");
    map.insert("1675".to_string(), "Music Videos|Brazilian|Choro");
    map.insert("1676".to_string(), "Music Videos|Brazilian|Forro");
    map.insert("1677".to_string(), "Music Videos|Brazilian|Frevo");
    map.insert("1678".to_string(), "Music Videos|Brazilian|MPB");
    map.insert("1679".to_string(), "Music Videos|Brazilian|Pagode");
    map.insert("1680".to_string(), "Music Videos|Brazilian|Samba");
    map.insert("1681".to_string(), "Music Videos|Brazilian|Sertanejo");
    map.insert("1682".to_string(), "Music Videos|Classical|High Classical");
    map.insert("1683".to_string(), "Music Videos|Fitness & Workout");
    map.insert("1684".to_string(), "Music Videos|Instrumental");
    map.insert("1685".to_string(), "Music Videos|Jazz|Big Band");
    map.insert("1686".to_string(), "Music Videos|Pop|K-Pop");
    map.insert("1687".to_string(), "Music Videos|Karaoke");
    map.insert("1688".to_string(), "Music Videos|Rock|Heavy Metal");
    map.insert("1689".to_string(), "Music Videos|Spoken Word");
    map.insert("1690".to_string(), "Music Videos|Indian");
    map.insert("1691".to_string(), "Music Videos|Indian|Bollywood");
    map.insert(
        "1692".to_string(),
        "Music Videos|Indian|Regional Indian|Tamil",
    );
    map.insert(
        "1693".to_string(),
        "Music Videos|Indian|Regional Indian|Telugu",
    );
    map.insert("1694".to_string(), "Music Videos|Indian|Regional Indian");
    map.insert(
        "1695".to_string(),
        "Music Videos|Indian|Devotional & Spiritual",
    );
    map.insert("1696".to_string(), "Music Videos|Indian|Sufi");
    map.insert("1697".to_string(), "Music Videos|Indian|Indian Classical");
    map.insert("1698".to_string(), "Music Videos|Russian|Russian Chanson");
    map.insert("1699".to_string(), "Music Videos|World|Dini");
    map.insert("17".to_string(), "Music|Dance");
    map.insert("1700".to_string(), "Music Videos|Turkish|Halk");
    map.insert("1701".to_string(), "Music Videos|Turkish|Sanat");
    map.insert("1702".to_string(), "Music Videos|World|Dangdut");
    map.insert(
        "1703".to_string(),
        "Music Videos|World|Indonesian Religious",
    );
    map.insert("1704".to_string(), "Music Videos|Indian|Indian Pop");
    map.insert("1705".to_string(), "Music Videos|World|Calypso");
    map.insert("1706".to_string(), "Music Videos|World|Soca");
    map.insert("1707".to_string(), "Music Videos|Indian|Ghazals");
    map.insert("1708".to_string(), "Music Videos|Indian|Indian Folk");
    map.insert("1709".to_string(), "Music Videos|Turkish|Arabesque");
    map.insert("1710".to_string(), "Music Videos|African|Afrikaans");
    map.insert("1711".to_string(), "Music Videos|World|Farsi");
    map.insert("1712".to_string(), "Music Videos|World|Israeli");
    map.insert("1713".to_string(), "Music Videos|Arabic");
    map.insert("1714".to_string(), "Music Videos|Arabic|Khaleeji");
    map.insert("1715".to_string(), "Music Videos|Arabic|North African");
    map.insert("1716".to_string(), "Music Videos|Arabic|Arabic Pop");
    map.insert("1717".to_string(), "Music Videos|Arabic|Islamic");
    map.insert("1718".to_string(), "Music Videos|Soundtrack|Sound Effects");
    map.insert("1719".to_string(), "Music Videos|Folk");
    map.insert("1720".to_string(), "Music Videos|Orchestral");
    map.insert("1721".to_string(), "Music Videos|Marching");
    map.insert("1723".to_string(), "Music Videos|Pop|Oldies");
    map.insert("1724".to_string(), "Music Videos|Country|Thai Country");
    map.insert("1725".to_string(), "Music Videos|World|Flamenco");
    map.insert("1726".to_string(), "Music Videos|World|Tango");
    map.insert("1727".to_string(), "Music Videos|World|Fado");
    map.insert("1728".to_string(), "Music Videos|World|Iberia");
    map.insert("1729".to_string(), "Music Videos|Russian");
    map.insert("1730".to_string(), "Music Videos|Turkish");
    map.insert("1731".to_string(), "Music Videos|Alternative|College Rock");
    map.insert("1732".to_string(), "Music Videos|Alternative|Goth Rock");
    map.insert("1733".to_string(), "Music Videos|Alternative|Grunge");
    map.insert("1734".to_string(), "Music Videos|Alternative|Indie Rock");
    map.insert("1735".to_string(), "Music Videos|Alternative|New Wave");
    map.insert("1736".to_string(), "Music Videos|Alternative|Punk");
    map.insert("1737".to_string(), "Music Videos|Blues|Acoustic Blues");
    map.insert("1738".to_string(), "Music Videos|Blues|Chicago Blues");
    map.insert("1739".to_string(), "Music Videos|Blues|Classic Blues");
    map.insert("1740".to_string(), "Music Videos|Blues|Contemporary Blues");
    map.insert("1741".to_string(), "Music Videos|Blues|Country Blues");
    map.insert("1742".to_string(), "Music Videos|Blues|Delta Blues");
    map.insert("1743".to_string(), "Music Videos|Blues|Electric Blues");
    map.insert(
        "1744".to_string(),
        "Music Videos|Children's Music|Lullabies",
    );
    map.insert(
        "1745".to_string(),
        "Music Videos|Children's Music|Sing-Along",
    );
    map.insert("1746".to_string(), "Music Videos|Children's Music|Stories");
    map.insert("1747".to_string(), "Music Videos|Christian & Gospel|CCM");
    map.insert(
        "1748".to_string(),
        "Music Videos|Christian & Gospel|Christian Metal",
    );
    map.insert(
        "1749".to_string(),
        "Music Videos|Christian & Gospel|Christian Pop",
    );
    map.insert(
        "1750".to_string(),
        "Music Videos|Christian & Gospel|Christian Rap",
    );
    map.insert(
        "1751".to_string(),
        "Music Videos|Christian & Gospel|Christian Rock",
    );
    map.insert(
        "1752".to_string(),
        "Music Videos|Christian & Gospel|Classic Christian",
    );
    map.insert(
        "1753".to_string(),
        "Music Videos|Christian & Gospel|Contemporary Gospel",
    );
    map.insert("1754".to_string(), "Music Videos|Christian & Gospel|Gospel");
    map.insert(
        "1755".to_string(),
        "Music Videos|Christian & Gospel|Praise & Worship",
    );
    map.insert(
        "1756".to_string(),
        "Music Videos|Christian & Gospel|Southern Gospel",
    );
    map.insert(
        "1757".to_string(),
        "Music Videos|Christian & Gospel|Traditional Gospel",
    );
    map.insert("1758".to_string(), "Music Videos|Classical|Avant-Garde");
    map.insert("1759".to_string(), "Music Videos|Classical|Baroque Era");
    map.insert("1760".to_string(), "Music Videos|Classical|Chamber Music");
    map.insert("1761".to_string(), "Music Videos|Classical|Chant");
    map.insert("1762".to_string(), "Music Videos|Classical|Choral");
    map.insert(
        "1763".to_string(),
        "Music Videos|Classical|Classical Crossover",
    );
    map.insert("1764".to_string(), "Music Videos|Classical|Early Music");
    map.insert("1765".to_string(), "Music Videos|Classical|Impressionist");
    map.insert("1766".to_string(), "Music Videos|Classical|Medieval Era");
    map.insert("1767".to_string(), "Music Videos|Classical|Minimalism");
    map.insert("1768".to_string(), "Music Videos|Classical|Modern Era");
    map.insert("1769".to_string(), "Music Videos|Classical|Orchestral");
    map.insert("1770".to_string(), "Music Videos|Classical|Renaissance");
    map.insert("1771".to_string(), "Music Videos|Classical|Romantic Era");
    map.insert("1772".to_string(), "Music Videos|Classical|Wedding Music");
    map.insert("1773".to_string(), "Music Videos|Comedy|Novelty");
    map.insert("1774".to_string(), "Music Videos|Comedy|Standup Comedy");
    map.insert(
        "1775".to_string(),
        "Music Videos|Country|Alternative Country",
    );
    map.insert("1776".to_string(), "Music Videos|Country|Americana");
    map.insert("1777".to_string(), "Music Videos|Country|Bluegrass");
    map.insert(
        "1778".to_string(),
        "Music Videos|Country|Contemporary Bluegrass",
    );
    map.insert(
        "1779".to_string(),
        "Music Videos|Country|Contemporary Country",
    );
    map.insert("1780".to_string(), "Music Videos|Country|Country Gospel");
    map.insert("1781".to_string(), "Music Videos|Country|Honky Tonk");
    map.insert("1782".to_string(), "Music Videos|Country|Outlaw Country");
    map.insert(
        "1783".to_string(),
        "Music Videos|Country|Traditional Bluegrass",
    );
    map.insert(
        "1784".to_string(),
        "Music Videos|Country|Traditional Country",
    );
    map.insert("1785".to_string(), "Music Videos|Country|Urban Cowboy");
    map.insert("1786".to_string(), "Music Videos|Dance|Breakbeat");
    map.insert("1787".to_string(), "Music Videos|Dance|Exercise");
    map.insert("1788".to_string(), "Music Videos|Dance|Garage");
    map.insert("1789".to_string(), "Music Videos|Dance|Hardcore");
    map.insert("1790".to_string(), "Music Videos|Dance|House");
    map.insert("1791".to_string(), "Music Videos|Dance|Jungle/Drum'n'bass");
    map.insert("1792".to_string(), "Music Videos|Dance|Techno");
    map.insert("1793".to_string(), "Music Videos|Dance|Trance");
    map.insert("1794".to_string(), "Music Videos|Easy Listening|Lounge");
    map.insert("1795".to_string(), "Music Videos|Easy Listening|Swing");
    map.insert("1796".to_string(), "Music Videos|Electronic|Ambient");
    map.insert("1797".to_string(), "Music Videos|Electronic|Downtempo");
    map.insert("1798".to_string(), "Music Videos|Electronic|Electronica");
    map.insert(
        "1799".to_string(),
        "Music Videos|Electronic|IDM/Experimental",
    );
    map.insert("18".to_string(), "Music|Hip-Hop/Rap");
    map.insert("1800".to_string(), "Music Videos|Electronic|Industrial");
    map.insert(
        "1801".to_string(),
        "Music Videos|Hip-Hop/Rap|Alternative Rap",
    );
    map.insert("1802".to_string(), "Music Videos|Hip-Hop/Rap|Dirty South");
    map.insert(
        "1803".to_string(),
        "Music Videos|Hip-Hop/Rap|East Coast Rap",
    );
    map.insert("1804".to_string(), "Music Videos|Hip-Hop/Rap|Gangsta Rap");
    map.insert("1805".to_string(), "Music Videos|Hip-Hop/Rap|Hardcore Rap");
    map.insert("1806".to_string(), "Music Videos|Hip-Hop/Rap|Hip-Hop");
    map.insert("1807".to_string(), "Music Videos|Hip-Hop/Rap|Latin Rap");
    map.insert(
        "1808".to_string(),
        "Music Videos|Hip-Hop/Rap|Old School Rap",
    );
    map.insert("1809".to_string(), "Music Videos|Hip-Hop/Rap|Rap");
    map.insert(
        "1810".to_string(),
        "Music Videos|Hip-Hop/Rap|Underground Rap",
    );
    map.insert(
        "1811".to_string(),
        "Music Videos|Hip-Hop/Rap|West Coast Rap",
    );
    map.insert("1812".to_string(), "Music Videos|Holiday|Chanukah");
    map.insert("1813".to_string(), "Music Videos|Holiday|Christmas");
    map.insert(
        "1814".to_string(),
        "Music Videos|Holiday|Christmas: Children's",
    );
    map.insert(
        "1815".to_string(),
        "Music Videos|Holiday|Christmas: Classic",
    );
    map.insert(
        "1816".to_string(),
        "Music Videos|Holiday|Christmas: Classical",
    );
    map.insert("1817".to_string(), "Music Videos|Holiday|Christmas: Jazz");
    map.insert("1818".to_string(), "Music Videos|Holiday|Christmas: Modern");
    map.insert("1819".to_string(), "Music Videos|Holiday|Christmas: Pop");
    map.insert("1820".to_string(), "Music Videos|Holiday|Christmas: R&B");
    map.insert(
        "1821".to_string(),
        "Music Videos|Holiday|Christmas: Religious",
    );
    map.insert("1822".to_string(), "Music Videos|Holiday|Christmas: Rock");
    map.insert("1823".to_string(), "Music Videos|Holiday|Easter");
    map.insert("1824".to_string(), "Music Videos|Holiday|Halloween");
    map.insert("1825".to_string(), "Music Videos|Holiday|Thanksgiving");
    map.insert("1826".to_string(), "Music Videos|Jazz|Avant-Garde Jazz");
    map.insert("1828".to_string(), "Music Videos|Jazz|Bop");
    map.insert("1829".to_string(), "Music Videos|Jazz|Contemporary Jazz");
    map.insert("1830".to_string(), "Music Videos|Jazz|Cool Jazz");
    map.insert("1831".to_string(), "Music Videos|Jazz|Crossover Jazz");
    map.insert("1832".to_string(), "Music Videos|Jazz|Dixieland");
    map.insert("1833".to_string(), "Music Videos|Jazz|Fusion");
    map.insert("1834".to_string(), "Music Videos|Jazz|Hard Bop");
    map.insert("1835".to_string(), "Music Videos|Jazz|Latin Jazz");
    map.insert("1836".to_string(), "Music Videos|Jazz|Mainstream Jazz");
    map.insert("1837".to_string(), "Music Videos|Jazz|Ragtime");
    map.insert("1838".to_string(), "Music Videos|Jazz|Smooth Jazz");
    map.insert("1839".to_string(), "Music Videos|Jazz|Trad Jazz");
    map.insert(
        "1840".to_string(),
        "Music Videos|Latin|Alternative & Rock in Spanish",
    );
    map.insert("1841".to_string(), "Music Videos|Latin|Baladas y Boleros");
    map.insert("1842".to_string(), "Music Videos|Latin|Contemporary Latin");
    map.insert("1843".to_string(), "Music Videos|Latin|Latin Jazz");
    map.insert("1844".to_string(), "Music Videos|Latin|Latin Urban");
    map.insert("1845".to_string(), "Music Videos|Latin|Pop in Spanish");
    map.insert("1846".to_string(), "Music Videos|Latin|Raices");
    map.insert("1847".to_string(), "Music Videos|Latin|Musica Mexicana");
    map.insert("1848".to_string(), "Music Videos|Latin|Salsa y Tropical");
    map.insert("1849".to_string(), "Music Videos|New Age|Healing");
    map.insert("1850".to_string(), "Music Videos|New Age|Meditation");
    map.insert("1851".to_string(), "Music Videos|New Age|Nature");
    map.insert("1852".to_string(), "Music Videos|New Age|Relaxation");
    map.insert("1853".to_string(), "Music Videos|New Age|Travel");
    map.insert("1854".to_string(), "Music Videos|Pop|Adult Contemporary");
    map.insert("1855".to_string(), "Music Videos|Pop|Britpop");
    map.insert("1856".to_string(), "Music Videos|Pop|Pop/Rock");
    map.insert("1857".to_string(), "Music Videos|Pop|Soft Rock");
    map.insert("1858".to_string(), "Music Videos|Pop|Teen Pop");
    map.insert("1859".to_string(), "Music Videos|R&B/Soul|Contemporary R&B");
    map.insert("1860".to_string(), "Music Videos|R&B/Soul|Disco");
    map.insert("1861".to_string(), "Music Videos|R&B/Soul|Doo Wop");
    map.insert("1862".to_string(), "Music Videos|R&B/Soul|Funk");
    map.insert("1863".to_string(), "Music Videos|R&B/Soul|Motown");
    map.insert("1864".to_string(), "Music Videos|R&B/Soul|Neo-Soul");
    map.insert("1865".to_string(), "Music Videos|R&B/Soul|Soul");
    map.insert("1866".to_string(), "Music Videos|Reggae|Modern Dancehall");
    map.insert("1867".to_string(), "Music Videos|Reggae|Dub");
    map.insert("1868".to_string(), "Music Videos|Reggae|Roots Reggae");
    map.insert("1869".to_string(), "Music Videos|Reggae|Ska");
    map.insert("1870".to_string(), "Music Videos|Rock|Adult Alternative");
    map.insert("1871".to_string(), "Music Videos|Rock|American Trad Rock");
    map.insert("1872".to_string(), "Music Videos|Rock|Arena Rock");
    map.insert("1873".to_string(), "Music Videos|Rock|Blues-Rock");
    map.insert("1874".to_string(), "Music Videos|Rock|British Invasion");
    map.insert(
        "1875".to_string(),
        "Music Videos|Rock|Death Metal/Black Metal",
    );
    map.insert("1876".to_string(), "Music Videos|Rock|Glam Rock");
    map.insert("1877".to_string(), "Music Videos|Rock|Hair Metal");
    map.insert("1878".to_string(), "Music Videos|Rock|Hard Rock");
    map.insert("1879".to_string(), "Music Videos|Rock|Jam Bands");
    map.insert("1880".to_string(), "Music Videos|Rock|Prog-Rock/Art Rock");
    map.insert("1881".to_string(), "Music Videos|Rock|Psychedelic");
    map.insert("1882".to_string(), "Music Videos|Rock|Rock & Roll");
    map.insert("1883".to_string(), "Music Videos|Rock|Rockabilly");
    map.insert("1884".to_string(), "Music Videos|Rock|Roots Rock");
    map.insert("1885".to_string(), "Music Videos|Rock|Singer/Songwriter");
    map.insert("1886".to_string(), "Music Videos|Rock|Southern Rock");
    map.insert("1887".to_string(), "Music Videos|Rock|Surf");
    map.insert("1888".to_string(), "Music Videos|Rock|Tex-Mex");
    map.insert(
        "1889".to_string(),
        "Music Videos|Singer/Songwriter|Alternative Folk",
    );
    map.insert(
        "1890".to_string(),
        "Music Videos|Singer/Songwriter|Contemporary Folk",
    );
    map.insert(
        "1891".to_string(),
        "Music Videos|Singer/Songwriter|Contemporary Singer/Songwriter",
    );
    map.insert(
        "1892".to_string(),
        "Music Videos|Singer/Songwriter|Folk-Rock",
    );
    map.insert(
        "1893".to_string(),
        "Music Videos|Singer/Songwriter|New Acoustic",
    );
    map.insert(
        "1894".to_string(),
        "Music Videos|Singer/Songwriter|Traditional Folk",
    );
    map.insert("1895".to_string(), "Music Videos|Soundtrack|Foreign Cinema");
    map.insert("1896".to_string(), "Music Videos|Soundtrack|Musicals");
    map.insert("1897".to_string(), "Music Videos|Soundtrack|Original Score");
    map.insert("1898".to_string(), "Music Videos|Soundtrack|Soundtrack");
    map.insert("1899".to_string(), "Music Videos|Soundtrack|TV Soundtrack");
    map.insert("19".to_string(), "Music|World");
    map.insert("1900".to_string(), "Music Videos|Vocal|Standards");
    map.insert("1901".to_string(), "Music Videos|Vocal|Traditional Pop");
    map.insert("1902".to_string(), "Music Videos|Jazz|Vocal Jazz");
    map.insert("1903".to_string(), "Music Videos|Vocal|Vocal Pop");
    map.insert("1904".to_string(), "Music Videos|African");
    map.insert("1905".to_string(), "Music Videos|African|Afro-Beat");
    map.insert("1906".to_string(), "Music Videos|African|Afro-Pop");
    map.insert("1907".to_string(), "Music Videos|World|Asia");
    map.insert("1908".to_string(), "Music Videos|World|Australia");
    map.insert("1909".to_string(), "Music Videos|World|Cajun");
    map.insert("1910".to_string(), "Music Videos|World|Caribbean");
    map.insert("1911".to_string(), "Music Videos|World|Celtic");
    map.insert("1912".to_string(), "Music Videos|World|Celtic Folk");
    map.insert("1913".to_string(), "Music Videos|World|Contemporary Celtic");
    map.insert("1914".to_string(), "Music Videos|World|Europe");
    map.insert("1915".to_string(), "Music Videos|World|France");
    map.insert("1916".to_string(), "Music Videos|World|Hawaii");
    map.insert("1917".to_string(), "Music Videos|World|Japan");
    map.insert("1918".to_string(), "Music Videos|World|Klezmer");
    map.insert("1919".to_string(), "Music Videos|World|North America");
    map.insert("1920".to_string(), "Music Videos|World|Polka");
    map.insert("1921".to_string(), "Music Videos|World|South Africa");
    map.insert("1922".to_string(), "Music Videos|World|South America");
    map.insert("1923".to_string(), "Music Videos|World|Traditional Celtic");
    map.insert("1924".to_string(), "Music Videos|World|Worldbeat");
    map.insert("1925".to_string(), "Music Videos|World|Zydeco");
    map.insert("1926".to_string(), "Music Videos|Christian & Gospel");
    map.insert("1928".to_string(), "Music Videos|Classical|Art Song");
    map.insert(
        "1929".to_string(),
        "Music Videos|Classical|Brass & Woodwinds",
    );
    map.insert(
        "1930".to_string(),
        "Music Videos|Classical|Solo Instrumental",
    );
    map.insert(
        "1931".to_string(),
        "Music Videos|Classical|Contemporary Era",
    );
    map.insert("1932".to_string(), "Music Videos|Classical|Oratorio");
    map.insert("1933".to_string(), "Music Videos|Classical|Cantata");
    map.insert("1934".to_string(), "Music Videos|Classical|Electronic");
    map.insert("1935".to_string(), "Music Videos|Classical|Sacred");
    map.insert("1936".to_string(), "Music Videos|Classical|Guitar");
    map.insert("1938".to_string(), "Music Videos|Classical|Violin");
    map.insert("1939".to_string(), "Music Videos|Classical|Cello");
    map.insert("1940".to_string(), "Music Videos|Classical|Percussion");
    map.insert("1941".to_string(), "Music Videos|Electronic|Dubstep");
    map.insert("1942".to_string(), "Music Videos|Electronic|Bass");
    map.insert("1943".to_string(), "Music Videos|Hip-Hop/Rap|UK Hip-Hop");
    map.insert("1944".to_string(), "Music Videos|Reggae|Lovers Rock");
    map.insert("1945".to_string(), "Music Videos|Alternative|EMO");
    map.insert("1946".to_string(), "Music Videos|Alternative|Pop Punk");
    map.insert("1947".to_string(), "Music Videos|Alternative|Indie Pop");
    map.insert("1948".to_string(), "Music Videos|New Age|Yoga");
    map.insert("1949".to_string(), "Music Videos|Pop|Tribute");
    map.insert("1950".to_string(), "Music Videos|Pop|Shows");
    map.insert("1951".to_string(), "Music Videos|Cuban");
    map.insert("1952".to_string(), "Music Videos|Cuban|Mambo");
    map.insert("1953".to_string(), "Music Videos|Cuban|Chachacha");
    map.insert("1954".to_string(), "Music Videos|Cuban|Guajira");
    map.insert("1955".to_string(), "Music Videos|Cuban|Son");
    map.insert("1956".to_string(), "Music Videos|Cuban|Bolero");
    map.insert("1957".to_string(), "Music Videos|Cuban|Guaracha");
    map.insert("1958".to_string(), "Music Videos|Cuban|Timba");
    map.insert("1959".to_string(), "Music Videos|Soundtrack|Video Game");
    map.insert(
        "1960".to_string(),
        "Music Videos|Indian|Regional Indian|Punjabi|Punjabi Pop",
    );
    map.insert(
        "1961".to_string(),
        "Music Videos|Indian|Regional Indian|Bengali|Rabindra Sangeet",
    );
    map.insert(
        "1962".to_string(),
        "Music Videos|Indian|Regional Indian|Malayalam",
    );
    map.insert(
        "1963".to_string(),
        "Music Videos|Indian|Regional Indian|Kannada",
    );
    map.insert(
        "1964".to_string(),
        "Music Videos|Indian|Regional Indian|Marathi",
    );
    map.insert(
        "1965".to_string(),
        "Music Videos|Indian|Regional Indian|Gujarati",
    );
    map.insert(
        "1966".to_string(),
        "Music Videos|Indian|Regional Indian|Assamese",
    );
    map.insert(
        "1967".to_string(),
        "Music Videos|Indian|Regional Indian|Bhojpuri",
    );
    map.insert(
        "1968".to_string(),
        "Music Videos|Indian|Regional Indian|Haryanvi",
    );
    map.insert(
        "1969".to_string(),
        "Music Videos|Indian|Regional Indian|Odia",
    );
    map.insert(
        "1970".to_string(),
        "Music Videos|Indian|Regional Indian|Rajasthani",
    );
    map.insert(
        "1971".to_string(),
        "Music Videos|Indian|Regional Indian|Urdu",
    );
    map.insert(
        "1972".to_string(),
        "Music Videos|Indian|Regional Indian|Punjabi",
    );
    map.insert(
        "1973".to_string(),
        "Music Videos|Indian|Regional Indian|Bengali",
    );
    map.insert(
        "1974".to_string(),
        "Music Videos|Indian|Indian Classical|Carnatic Classical",
    );
    map.insert(
        "1975".to_string(),
        "Music Videos|Indian|Indian Classical|Hindustani Classical",
    );
    map.insert("1976".to_string(), "Music Videos|African|Afro House");
    map.insert("1977".to_string(), "Music Videos|African|Afro Soul");
    map.insert("1978".to_string(), "Music Videos|African|Afrobeats");
    map.insert("1979".to_string(), "Music Videos|African|Benga");
    map.insert("1980".to_string(), "Music Videos|African|Bongo-Flava");
    map.insert("1981".to_string(), "Music Videos|African|Coupe-Decale");
    map.insert("1982".to_string(), "Music Videos|African|Gqom");
    map.insert("1983".to_string(), "Music Videos|African|Highlife");
    map.insert("1984".to_string(), "Music Videos|African|Kuduro");
    map.insert("1985".to_string(), "Music Videos|African|Kizomba");
    map.insert("1986".to_string(), "Music Videos|African|Kwaito");
    map.insert("1987".to_string(), "Music Videos|African|Mbalax");
    map.insert("1988".to_string(), "Music Videos|African|Ndombolo");
    map.insert("1989".to_string(), "Music Videos|African|Shangaan Electro");
    map.insert("1990".to_string(), "Music Videos|African|Soukous");
    map.insert("1991".to_string(), "Music Videos|African|Taarab");
    map.insert("1992".to_string(), "Music Videos|African|Zouglou");
    map.insert("1993".to_string(), "Music Videos|Turkish|Ozgun");
    map.insert("1994".to_string(), "Music Videos|Turkish|Fantezi");
    map.insert("1995".to_string(), "Music Videos|Turkish|Religious");
    map.insert("1996".to_string(), "Music Videos|Pop|Turkish Pop");
    map.insert("1997".to_string(), "Music Videos|Rock|Turkish Rock");
    map.insert(
        "1998".to_string(),
        "Music Videos|Alternative|Turkish Alternative",
    );
    map.insert(
        "1999".to_string(),
        "Music Videos|Hip-Hop/Rap|Turkish Hip-Hop/Rap",
    );
    map.insert("2".to_string(), "Music|Blues");
    map.insert("20".to_string(), "Music|Alternative");
    map.insert("2000".to_string(), "Music Videos|African|Maskandi");
    map.insert("2001".to_string(), "Music Videos|Russian|Russian Romance");
    map.insert("2002".to_string(), "Music Videos|Russian|Russian Bard");
    map.insert("2003".to_string(), "Music Videos|Russian|Russian Pop");
    map.insert("2004".to_string(), "Music Videos|Russian|Russian Rock");
    map.insert("2005".to_string(), "Music Videos|Russian|Russian Hip-Hop");
    map.insert("2006".to_string(), "Music Videos|Arabic|Levant");
    map.insert("2007".to_string(), "Music Videos|Arabic|Levant|Dabke");
    map.insert("2008".to_string(), "Music Videos|Arabic|Maghreb Rai");
    map.insert(
        "2009".to_string(),
        "Music Videos|Arabic|Khaleeji|Khaleeji Jalsat",
    );
    map.insert(
        "2010".to_string(),
        "Music Videos|Arabic|Khaleeji|Khaleeji Shailat",
    );
    map.insert("2011".to_string(), "Music Videos|Tarab");
    map.insert("2012".to_string(), "Music Videos|Tarab|Iraqi Tarab");
    map.insert("2013".to_string(), "Music Videos|Tarab|Egyptian Tarab");
    map.insert("2014".to_string(), "Music Videos|Tarab|Khaleeji Tarab");
    map.insert("2015".to_string(), "Music Videos|Pop|Levant Pop");
    map.insert("2016".to_string(), "Music Videos|Pop|Iraqi Pop");
    map.insert("2017".to_string(), "Music Videos|Pop|Egyptian Pop");
    map.insert("2018".to_string(), "Music Videos|Pop|Maghreb Pop");
    map.insert("2019".to_string(), "Music Videos|Pop|Khaleeji Pop");
    map.insert(
        "2020".to_string(),
        "Music Videos|Hip-Hop/Rap|Levant Hip-Hop",
    );
    map.insert(
        "2021".to_string(),
        "Music Videos|Hip-Hop/Rap|Egyptian Hip-Hop",
    );
    map.insert(
        "2022".to_string(),
        "Music Videos|Hip-Hop/Rap|Maghreb Hip-Hop",
    );
    map.insert(
        "2023".to_string(),
        "Music Videos|Hip-Hop/Rap|Khaleeji Hip-Hop",
    );
    map.insert("2024".to_string(), "Music Videos|Alternative|Indie Levant");
    map.insert(
        "2025".to_string(),
        "Music Videos|Alternative|Indie Egyptian",
    );
    map.insert("2026".to_string(), "Music Videos|Alternative|Indie Maghreb");
    map.insert(
        "2027".to_string(),
        "Music Videos|Electronic|Levant Electronic",
    );
    map.insert(
        "2028".to_string(),
        "Music Videos|Electronic|Electro-Cha'abi",
    );
    map.insert(
        "2029".to_string(),
        "Music Videos|Electronic|Maghreb Electronic",
    );
    map.insert("2030".to_string(), "Music Videos|Folk|Iraqi Folk");
    map.insert("2031".to_string(), "Music Videos|Folk|Khaleeji Folk");
    map.insert("2032".to_string(), "Music Videos|Dance|Maghreb Dance");
    map.insert("21".to_string(), "Music|Rock");
    map.insert("22".to_string(), "Music|Christian & Gospel");
    map.insert("23".to_string(), "Music|Vocal");
    map.insert("24".to_string(), "Music|Reggae");
    map.insert("25".to_string(), "Music|Easy Listening");
    map.insert("26".to_string(), "Podcasts");
    map.insert("27".to_string(), "Music|J-Pop");
    map.insert("28".to_string(), "Music|Enka");
    map.insert("29".to_string(), "Music|Anime");
    map.insert("3".to_string(), "Music|Comedy");
    map.insert("30".to_string(), "Music|Kayokyoku");
    map.insert("31".to_string(), "Music Videos");
    map.insert("32".to_string(), "TV Shows");
    map.insert("33".to_string(), "Movies");
    map.insert("34".to_string(), "Music");
    map.insert("35".to_string(), "iPod Games");
    map.insert("36".to_string(), "App Store");
    map.insert("37".to_string(), "Tones");
    map.insert("38".to_string(), "Books");
    map.insert("39".to_string(), "Mac App Store");
    map.insert("4".to_string(), "Music|Children's Music");
    map.insert("40".to_string(), "Textbooks");
    map.insert("4000".to_string(), "TV Shows|Comedy");
    map.insert("40000000".to_string(), "iTunes U");
    map.insert("40000001".to_string(), "iTunes U|Business & Economics");
    map.insert(
        "40000002".to_string(),
        "iTunes U|Business & Economics|Economics",
    );
    map.insert(
        "40000003".to_string(),
        "iTunes U|Business & Economics|Finance",
    );
    map.insert(
        "40000004".to_string(),
        "iTunes U|Business & Economics|Hospitality",
    );
    map.insert(
        "40000005".to_string(),
        "iTunes U|Business & Economics|Management",
    );
    map.insert(
        "40000006".to_string(),
        "iTunes U|Business & Economics|Marketing",
    );
    map.insert(
        "40000007".to_string(),
        "iTunes U|Business & Economics|Personal Finance",
    );
    map.insert(
        "40000008".to_string(),
        "iTunes U|Business & Economics|Real Estate",
    );
    map.insert("40000009".to_string(), "iTunes U|Engineering");
    map.insert(
        "40000010".to_string(),
        "iTunes U|Engineering|Chemical & Petroleum Engineering",
    );
    map.insert(
        "40000011".to_string(),
        "iTunes U|Engineering|Civil Engineering",
    );
    map.insert(
        "40000012".to_string(),
        "iTunes U|Engineering|Computer Science",
    );
    map.insert(
        "40000013".to_string(),
        "iTunes U|Engineering|Electrical Engineering",
    );
    map.insert(
        "40000014".to_string(),
        "iTunes U|Engineering|Environmental Engineering",
    );
    map.insert(
        "40000015".to_string(),
        "iTunes U|Engineering|Mechanical Engineering",
    );
    map.insert("40000016".to_string(), "iTunes U|Music, Art, & Design");
    map.insert(
        "40000017".to_string(),
        "iTunes U|Music, Art, & Design|Architecture",
    );
    map.insert(
        "40000019".to_string(),
        "iTunes U|Music, Art, & Design|Art History",
    );
    map.insert(
        "40000020".to_string(),
        "iTunes U|Music, Art, & Design|Dance",
    );
    map.insert("40000021".to_string(), "iTunes U|Music, Art, & Design|Film");
    map.insert(
        "40000022".to_string(),
        "iTunes U|Music, Art, & Design|Design",
    );
    map.insert(
        "40000023".to_string(),
        "iTunes U|Music, Art, & Design|Interior Design",
    );
    map.insert(
        "40000024".to_string(),
        "iTunes U|Music, Art, & Design|Music",
    );
    map.insert(
        "40000025".to_string(),
        "iTunes U|Music, Art, & Design|Theater",
    );
    map.insert("40000026".to_string(), "iTunes U|Health & Medicine");
    map.insert(
        "40000027".to_string(),
        "iTunes U|Health & Medicine|Anatomy & Physiology",
    );
    map.insert(
        "40000028".to_string(),
        "iTunes U|Health & Medicine|Behavioral Science",
    );
    map.insert(
        "40000029".to_string(),
        "iTunes U|Health & Medicine|Dentistry",
    );
    map.insert(
        "40000030".to_string(),
        "iTunes U|Health & Medicine|Diet & Nutrition",
    );
    map.insert(
        "40000031".to_string(),
        "iTunes U|Health & Medicine|Emergency Medicine",
    );
    map.insert(
        "40000032".to_string(),
        "iTunes U|Health & Medicine|Genetics",
    );
    map.insert(
        "40000033".to_string(),
        "iTunes U|Health & Medicine|Gerontology",
    );
    map.insert(
        "40000034".to_string(),
        "iTunes U|Health & Medicine|Health & Exercise Science",
    );
    map.insert(
        "40000035".to_string(),
        "iTunes U|Health & Medicine|Immunology",
    );
    map.insert(
        "40000036".to_string(),
        "iTunes U|Health & Medicine|Neuroscience",
    );
    map.insert(
        "40000037".to_string(),
        "iTunes U|Health & Medicine|Pharmacology & Toxicology",
    );
    map.insert(
        "40000038".to_string(),
        "iTunes U|Health & Medicine|Psychiatry",
    );
    map.insert(
        "40000039".to_string(),
        "iTunes U|Health & Medicine|Global Health",
    );
    map.insert(
        "40000040".to_string(),
        "iTunes U|Health & Medicine|Radiology",
    );
    map.insert("40000041".to_string(), "iTunes U|History");
    map.insert("40000042".to_string(), "iTunes U|History|Ancient History");
    map.insert("40000043".to_string(), "iTunes U|History|Medieval History");
    map.insert("40000044".to_string(), "iTunes U|History|Military History");
    map.insert("40000045".to_string(), "iTunes U|History|Modern History");
    map.insert("40000046".to_string(), "iTunes U|History|African History");
    map.insert(
        "40000047".to_string(),
        "iTunes U|History|Asia-Pacific History",
    );
    map.insert("40000048".to_string(), "iTunes U|History|European History");
    map.insert(
        "40000049".to_string(),
        "iTunes U|History|Middle Eastern History",
    );
    map.insert(
        "40000050".to_string(),
        "iTunes U|History|North American History",
    );
    map.insert(
        "40000051".to_string(),
        "iTunes U|History|South American History",
    );
    map.insert(
        "40000053".to_string(),
        "iTunes U|Communications & Journalism",
    );
    map.insert("40000054".to_string(), "iTunes U|Philosophy");
    map.insert("40000055".to_string(), "iTunes U|Religion & Spirituality");
    map.insert("40000056".to_string(), "iTunes U|Languages");
    map.insert(
        "40000057".to_string(),
        "iTunes U|Languages|African Languages",
    );
    map.insert(
        "40000058".to_string(),
        "iTunes U|Languages|Ancient Languages",
    );
    map.insert("40000061".to_string(), "iTunes U|Languages|English");
    map.insert("40000063".to_string(), "iTunes U|Languages|French");
    map.insert("40000064".to_string(), "iTunes U|Languages|German");
    map.insert("40000065".to_string(), "iTunes U|Languages|Italian");
    map.insert("40000066".to_string(), "iTunes U|Languages|Linguistics");
    map.insert("40000068".to_string(), "iTunes U|Languages|Spanish");
    map.insert(
        "40000069".to_string(),
        "iTunes U|Languages|Speech Pathology",
    );
    map.insert("40000070".to_string(), "iTunes U|Writing & Literature");
    map.insert(
        "40000071".to_string(),
        "iTunes U|Writing & Literature|Anthologies",
    );
    map.insert(
        "40000072".to_string(),
        "iTunes U|Writing & Literature|Biography",
    );
    map.insert(
        "40000073".to_string(),
        "iTunes U|Writing & Literature|Classics",
    );
    map.insert(
        "40000074".to_string(),
        "iTunes U|Writing & Literature|Literary Criticism",
    );
    map.insert(
        "40000075".to_string(),
        "iTunes U|Writing & Literature|Fiction",
    );
    map.insert(
        "40000076".to_string(),
        "iTunes U|Writing & Literature|Poetry",
    );
    map.insert("40000077".to_string(), "iTunes U|Mathematics");
    map.insert(
        "40000078".to_string(),
        "iTunes U|Mathematics|Advanced Mathematics",
    );
    map.insert("40000079".to_string(), "iTunes U|Mathematics|Algebra");
    map.insert("40000080".to_string(), "iTunes U|Mathematics|Arithmetic");
    map.insert("40000081".to_string(), "iTunes U|Mathematics|Calculus");
    map.insert("40000082".to_string(), "iTunes U|Mathematics|Geometry");
    map.insert("40000083".to_string(), "iTunes U|Mathematics|Statistics");
    map.insert("40000084".to_string(), "iTunes U|Science");
    map.insert("40000085".to_string(), "iTunes U|Science|Agricultural");
    map.insert("40000086".to_string(), "iTunes U|Science|Astronomy");
    map.insert("40000087".to_string(), "iTunes U|Science|Atmosphere");
    map.insert("40000088".to_string(), "iTunes U|Science|Biology");
    map.insert("40000089".to_string(), "iTunes U|Science|Chemistry");
    map.insert("40000090".to_string(), "iTunes U|Science|Ecology");
    map.insert("40000091".to_string(), "iTunes U|Science|Geography");
    map.insert("40000092".to_string(), "iTunes U|Science|Geology");
    map.insert("40000093".to_string(), "iTunes U|Science|Physics");
    map.insert("40000094".to_string(), "iTunes U|Social Science");
    map.insert("40000095".to_string(), "iTunes U|Law & Politics|Law");
    map.insert(
        "40000096".to_string(),
        "iTunes U|Law & Politics|Political Science",
    );
    map.insert(
        "40000097".to_string(),
        "iTunes U|Law & Politics|Public Administration",
    );
    map.insert("40000098".to_string(), "iTunes U|Social Science|Psychology");
    map.insert(
        "40000099".to_string(),
        "iTunes U|Social Science|Social Welfare",
    );
    map.insert("40000100".to_string(), "iTunes U|Social Science|Sociology");
    map.insert("40000101".to_string(), "iTunes U|Society");
    map.insert(
        "40000103".to_string(),
        "iTunes U|Society|Asia Pacific Studies",
    );
    map.insert("40000104".to_string(), "iTunes U|Society|European Studies");
    map.insert(
        "40000105".to_string(),
        "iTunes U|Society|Indigenous Studies",
    );
    map.insert(
        "40000106".to_string(),
        "iTunes U|Society|Latin & Caribbean Studies",
    );
    map.insert(
        "40000107".to_string(),
        "iTunes U|Society|Middle Eastern Studies",
    );
    map.insert("40000108".to_string(), "iTunes U|Society|Women's Studies");
    map.insert("40000109".to_string(), "iTunes U|Teaching & Learning");
    map.insert(
        "40000110".to_string(),
        "iTunes U|Teaching & Learning|Curriculum & Teaching",
    );
    map.insert(
        "40000111".to_string(),
        "iTunes U|Teaching & Learning|Educational Leadership",
    );
    map.insert(
        "40000112".to_string(),
        "iTunes U|Teaching & Learning|Family & Childcare",
    );
    map.insert(
        "40000113".to_string(),
        "iTunes U|Teaching & Learning|Learning Resources",
    );
    map.insert(
        "40000114".to_string(),
        "iTunes U|Teaching & Learning|Psychology & Research",
    );
    map.insert(
        "40000115".to_string(),
        "iTunes U|Teaching & Learning|Special Education",
    );
    map.insert(
        "40000116".to_string(),
        "iTunes U|Music, Art, & Design|Culinary Arts",
    );
    map.insert(
        "40000117".to_string(),
        "iTunes U|Music, Art, & Design|Fashion",
    );
    map.insert(
        "40000118".to_string(),
        "iTunes U|Music, Art, & Design|Media Arts",
    );
    map.insert(
        "40000119".to_string(),
        "iTunes U|Music, Art, & Design|Photography",
    );
    map.insert(
        "40000120".to_string(),
        "iTunes U|Music, Art, & Design|Visual Art",
    );
    map.insert(
        "40000121".to_string(),
        "iTunes U|Business & Economics|Entrepreneurship",
    );
    map.insert(
        "40000122".to_string(),
        "iTunes U|Communications & Journalism|Broadcasting",
    );
    map.insert(
        "40000123".to_string(),
        "iTunes U|Communications & Journalism|Digital Media",
    );
    map.insert(
        "40000124".to_string(),
        "iTunes U|Communications & Journalism|Journalism",
    );
    map.insert(
        "40000125".to_string(),
        "iTunes U|Communications & Journalism|Photojournalism",
    );
    map.insert(
        "40000126".to_string(),
        "iTunes U|Communications & Journalism|Print",
    );
    map.insert(
        "40000127".to_string(),
        "iTunes U|Communications & Journalism|Speech",
    );
    map.insert(
        "40000128".to_string(),
        "iTunes U|Communications & Journalism|Writing",
    );
    map.insert("40000129".to_string(), "iTunes U|Health & Medicine|Nursing");
    map.insert("40000130".to_string(), "iTunes U|Languages|Arabic");
    map.insert("40000131".to_string(), "iTunes U|Languages|Chinese");
    map.insert("40000132".to_string(), "iTunes U|Languages|Hebrew");
    map.insert("40000133".to_string(), "iTunes U|Languages|Hindi");
    map.insert(
        "40000134".to_string(),
        "iTunes U|Languages|Indigenous Languages",
    );
    map.insert("40000135".to_string(), "iTunes U|Languages|Japanese");
    map.insert("40000136".to_string(), "iTunes U|Languages|Korean");
    map.insert("40000137".to_string(), "iTunes U|Languages|Other Languages");
    map.insert("40000138".to_string(), "iTunes U|Languages|Portuguese");
    map.insert("40000139".to_string(), "iTunes U|Languages|Russian");
    map.insert("40000140".to_string(), "iTunes U|Law & Politics");
    map.insert(
        "40000141".to_string(),
        "iTunes U|Law & Politics|Foreign Policy & International Relations",
    );
    map.insert(
        "40000142".to_string(),
        "iTunes U|Law & Politics|Local Governments",
    );
    map.insert(
        "40000143".to_string(),
        "iTunes U|Law & Politics|National Governments",
    );
    map.insert(
        "40000144".to_string(),
        "iTunes U|Law & Politics|World Affairs",
    );
    map.insert(
        "40000145".to_string(),
        "iTunes U|Writing & Literature|Comparative Literature",
    );
    map.insert("40000146".to_string(), "iTunes U|Philosophy|Aesthetics");
    map.insert("40000147".to_string(), "iTunes U|Philosophy|Epistemology");
    map.insert("40000148".to_string(), "iTunes U|Philosophy|Ethics");
    map.insert("40000149".to_string(), "iTunes U|Philosophy|Metaphysics");
    map.insert(
        "40000150".to_string(),
        "iTunes U|Philosophy|Political Philosophy",
    );
    map.insert("40000151".to_string(), "iTunes U|Philosophy|Logic");
    map.insert(
        "40000152".to_string(),
        "iTunes U|Philosophy|Philosophy of Language",
    );
    map.insert(
        "40000153".to_string(),
        "iTunes U|Philosophy|Philosophy of Religion",
    );
    map.insert(
        "40000154".to_string(),
        "iTunes U|Social Science|Archaeology",
    );
    map.insert(
        "40000155".to_string(),
        "iTunes U|Social Science|Anthropology",
    );
    map.insert(
        "40000156".to_string(),
        "iTunes U|Religion & Spirituality|Buddhism",
    );
    map.insert(
        "40000157".to_string(),
        "iTunes U|Religion & Spirituality|Christianity",
    );
    map.insert(
        "40000158".to_string(),
        "iTunes U|Religion & Spirituality|Comparative Religion",
    );
    map.insert(
        "40000159".to_string(),
        "iTunes U|Religion & Spirituality|Hinduism",
    );
    map.insert(
        "40000160".to_string(),
        "iTunes U|Religion & Spirituality|Islam",
    );
    map.insert(
        "40000161".to_string(),
        "iTunes U|Religion & Spirituality|Judaism",
    );
    map.insert(
        "40000162".to_string(),
        "iTunes U|Religion & Spirituality|Other Religions",
    );
    map.insert(
        "40000163".to_string(),
        "iTunes U|Religion & Spirituality|Spirituality",
    );
    map.insert("40000164".to_string(), "iTunes U|Science|Environment");
    map.insert("40000165".to_string(), "iTunes U|Society|African Studies");
    map.insert("40000166".to_string(), "iTunes U|Society|American Studies");
    map.insert(
        "40000167".to_string(),
        "iTunes U|Society|Cross-cultural Studies",
    );
    map.insert(
        "40000168".to_string(),
        "iTunes U|Society|Immigration & Emigration",
    );
    map.insert(
        "40000169".to_string(),
        "iTunes U|Society|Race & Ethnicity Studies",
    );
    map.insert("40000170".to_string(), "iTunes U|Society|Sexuality Studies");
    map.insert(
        "40000171".to_string(),
        "iTunes U|Teaching & Learning|Educational Technology",
    );
    map.insert(
        "40000172".to_string(),
        "iTunes U|Teaching & Learning|Information/Library Science",
    );
    map.insert("40000173".to_string(), "iTunes U|Languages|Dutch");
    map.insert("40000174".to_string(), "iTunes U|Languages|Luxembourgish");
    map.insert("40000175".to_string(), "iTunes U|Languages|Swedish");
    map.insert("40000176".to_string(), "iTunes U|Languages|Norwegian");
    map.insert("40000177".to_string(), "iTunes U|Languages|Finnish");
    map.insert("40000178".to_string(), "iTunes U|Languages|Danish");
    map.insert("40000179".to_string(), "iTunes U|Languages|Polish");
    map.insert("40000180".to_string(), "iTunes U|Languages|Turkish");
    map.insert("40000181".to_string(), "iTunes U|Languages|Flemish");
    map.insert("4001".to_string(), "TV Shows|Drama");
    map.insert("4002".to_string(), "TV Shows|Animation");
    map.insert("4003".to_string(), "TV Shows|Action & Adventure");
    map.insert("4004".to_string(), "TV Shows|Classics");
    map.insert("4005".to_string(), "TV Shows|Kids & Family");
    map.insert("4006".to_string(), "TV Shows|Nonfiction");
    map.insert("4007".to_string(), "TV Shows|Reality TV");
    map.insert("4008".to_string(), "TV Shows|Sci-Fi & Fantasy");
    map.insert("4009".to_string(), "TV Shows|Sports");
    map.insert("4010".to_string(), "TV Shows|Teens");
    map.insert("4011".to_string(), "TV Shows|Latino TV");
    map.insert("4401".to_string(), "Movies|Action & Adventure");
    map.insert("4402".to_string(), "Movies|Anime");
    map.insert("4403".to_string(), "Movies|Classics");
    map.insert("4404".to_string(), "Movies|Comedy");
    map.insert("4405".to_string(), "Movies|Documentary");
    map.insert("4406".to_string(), "Movies|Drama");
    map.insert("4407".to_string(), "Movies|Foreign");
    map.insert("4408".to_string(), "Movies|Horror");
    map.insert("4409".to_string(), "Movies|Independent");
    map.insert("4410".to_string(), "Movies|Kids & Family");
    map.insert("4411".to_string(), "Movies|Musicals");
    map.insert("4412".to_string(), "Movies|Romance");
    map.insert("4413".to_string(), "Movies|Sci-Fi & Fantasy");
    map.insert("4414".to_string(), "Movies|Short Films");
    map.insert("4415".to_string(), "Movies|Special Interest");
    map.insert("4416".to_string(), "Movies|Thriller");
    map.insert("4417".to_string(), "Movies|Sports");
    map.insert("4418".to_string(), "Movies|Western");
    map.insert("4419".to_string(), "Movies|Urban");
    map.insert("4420".to_string(), "Movies|Holiday");
    map.insert("4421".to_string(), "Movies|Made for TV");
    map.insert("4422".to_string(), "Movies|Concert Films");
    map.insert("4423".to_string(), "Movies|Music Documentaries");
    map.insert("4424".to_string(), "Movies|Music Feature Films");
    map.insert("4425".to_string(), "Movies|Japanese Cinema");
    map.insert("4426".to_string(), "Movies|Jidaigeki");
    map.insert("4427".to_string(), "Movies|Tokusatsu");
    map.insert("4428".to_string(), "Movies|Korean Cinema");
    map.insert("4429".to_string(), "Movies|Russian");
    map.insert("4430".to_string(), "Movies|Turkish");
    map.insert("4431".to_string(), "Movies|Bollywood");
    map.insert("4432".to_string(), "Movies|Regional Indian");
    map.insert("4433".to_string(), "Movies|Middle Eastern");
    map.insert("4434".to_string(), "Movies|African");
    map.insert("5".to_string(), "Music|Classical");
    map.insert("50".to_string(), "Music|Fitness & Workout");
    map.insert("500".to_string(), "Fitness Music");
    map.insert("50000024".to_string(), "Audiobooks");
    map.insert("50000040".to_string(), "Audiobooks|Fiction");
    map.insert("50000041".to_string(), "Audiobooks|Arts & Entertainment");
    map.insert("50000042".to_string(), "Audiobooks|Biographies & Memoirs");
    map.insert(
        "50000043".to_string(),
        "Audiobooks|Business & Personal Finance",
    );
    map.insert("50000044".to_string(), "Audiobooks|Kids & Young Adults");
    map.insert("50000045".to_string(), "Audiobooks|Classics");
    map.insert("50000046".to_string(), "Audiobooks|Comedy");
    map.insert("50000047".to_string(), "Audiobooks|Drama & Poetry");
    map.insert("50000048".to_string(), "Audiobooks|Speakers & Storytellers");
    map.insert("50000049".to_string(), "Audiobooks|History");
    map.insert("50000050".to_string(), "Audiobooks|Languages");
    map.insert("50000051".to_string(), "Audiobooks|Mysteries & Thrillers");
    map.insert("50000052".to_string(), "Audiobooks|Nonfiction");
    map.insert("50000053".to_string(), "Audiobooks|Religion & Spirituality");
    map.insert("50000054".to_string(), "Audiobooks|Science & Nature");
    map.insert("50000055".to_string(), "Audiobooks|Sci Fi & Fantasy");
    map.insert("50000056".to_string(), "Audiobooks|Self-Development");
    map.insert("50000057".to_string(), "Audiobooks|Sports & Outdoors");
    map.insert("50000058".to_string(), "Audiobooks|Technology");
    map.insert("50000059".to_string(), "Audiobooks|Travel & Adventure");
    map.insert("50000061".to_string(), "Music|Spoken Word");
    map.insert("50000063".to_string(), "Music|Disney");
    map.insert("50000064".to_string(), "Music|French Pop");
    map.insert("50000066".to_string(), "Music|German Pop");
    map.insert("50000068".to_string(), "Music|German Folk");
    map.insert("50000069".to_string(), "Audiobooks|Romance");
    map.insert("50000070".to_string(), "Audiobooks|Audiobooks Latino");
    map.insert(
        "50000071".to_string(),
        "Books|Comics & Graphic Novels|Manga|Action",
    );
    map.insert(
        "50000072".to_string(),
        "Books|Comics & Graphic Novels|Manga|Comedy",
    );
    map.insert(
        "50000073".to_string(),
        "Books|Comics & Graphic Novels|Manga|Erotica",
    );
    map.insert(
        "50000074".to_string(),
        "Books|Comics & Graphic Novels|Manga|Fantasy",
    );
    map.insert(
        "50000075".to_string(),
        "Books|Comics & Graphic Novels|Manga|Four Cell Manga",
    );
    map.insert(
        "50000076".to_string(),
        "Books|Comics & Graphic Novels|Manga|Gay & Lesbian",
    );
    map.insert(
        "50000077".to_string(),
        "Books|Comics & Graphic Novels|Manga|Hard-Boiled",
    );
    map.insert(
        "50000078".to_string(),
        "Books|Comics & Graphic Novels|Manga|Heroes",
    );
    map.insert(
        "50000079".to_string(),
        "Books|Comics & Graphic Novels|Manga|Historical Fiction",
    );
    map.insert(
        "50000080".to_string(),
        "Books|Comics & Graphic Novels|Manga|Mecha",
    );
    map.insert(
        "50000081".to_string(),
        "Books|Comics & Graphic Novels|Manga|Mystery",
    );
    map.insert(
        "50000082".to_string(),
        "Books|Comics & Graphic Novels|Manga|Nonfiction",
    );
    map.insert(
        "50000083".to_string(),
        "Books|Comics & Graphic Novels|Manga|Religious",
    );
    map.insert(
        "50000084".to_string(),
        "Books|Comics & Graphic Novels|Manga|Romance",
    );
    map.insert(
        "50000085".to_string(),
        "Books|Comics & Graphic Novels|Manga|Romantic Comedy",
    );
    map.insert(
        "50000086".to_string(),
        "Books|Comics & Graphic Novels|Manga|Science Fiction",
    );
    map.insert(
        "50000087".to_string(),
        "Books|Comics & Graphic Novels|Manga|Sports",
    );
    map.insert(
        "50000088".to_string(),
        "Books|Fiction & Literature|Light Novels",
    );
    map.insert(
        "50000089".to_string(),
        "Books|Comics & Graphic Novels|Manga|Horror",
    );
    map.insert(
        "50000090".to_string(),
        "Books|Comics & Graphic Novels|Comics",
    );
    map.insert("50000091".to_string(), "Books|Romance|Multicultural");
    map.insert("50000092".to_string(), "Audiobooks|Erotica");
    map.insert("50000093".to_string(), "Audiobooks|Light Novels");
    map.insert("501".to_string(), "Fitness Music|Pop");
    map.insert("502".to_string(), "Fitness Music|Dance");
    map.insert("503".to_string(), "Fitness Music|Hip-Hop");
    map.insert("504".to_string(), "Fitness Music|Rock");
    map.insert("505".to_string(), "Fitness Music|Alt/Indie");
    map.insert("506".to_string(), "Fitness Music|Latino");
    map.insert("507".to_string(), "Fitness Music|Country");
    map.insert("508".to_string(), "Fitness Music|World");
    map.insert("509".to_string(), "Fitness Music|New Age");
    map.insert("51".to_string(), "Music|Pop|K-Pop");
    map.insert("510".to_string(), "Fitness Music|Classical");
    map.insert("52".to_string(), "Music|Karaoke");
    map.insert("53".to_string(), "Music|Instrumental");
    map.insert("6".to_string(), "Music|Country");
    map.insert("6000".to_string(), "App Store|Business");
    map.insert("6001".to_string(), "App Store|Weather");
    map.insert("6002".to_string(), "App Store|Utilities");
    map.insert("6003".to_string(), "App Store|Travel");
    map.insert("6004".to_string(), "App Store|Sports");
    map.insert("6005".to_string(), "App Store|Social Networking");
    map.insert("6006".to_string(), "App Store|Reference");
    map.insert("6007".to_string(), "App Store|Productivity");
    map.insert("6008".to_string(), "App Store|Photo & Video");
    map.insert("6009".to_string(), "App Store|News");
    map.insert("6010".to_string(), "App Store|Navigation");
    map.insert("6011".to_string(), "App Store|Music");
    map.insert("6012".to_string(), "App Store|Lifestyle");
    map.insert("6013".to_string(), "App Store|Health & Fitness");
    map.insert("6014".to_string(), "App Store|Games");
    map.insert("6015".to_string(), "App Store|Finance");
    map.insert("6016".to_string(), "App Store|Entertainment");
    map.insert("6017".to_string(), "App Store|Education");
    map.insert("6018".to_string(), "App Store|Books");
    map.insert("6020".to_string(), "App Store|Medical");
    map.insert("6021".to_string(), "App Store|Magazines & Newspapers");
    map.insert("6022".to_string(), "App Store|Catalogs");
    map.insert("6023".to_string(), "App Store|Food & Drink");
    map.insert("6024".to_string(), "App Store|Shopping");
    map.insert("6025".to_string(), "App Store|Stickers");
    map.insert("6026".to_string(), "App Store|Developer Tools");
    map.insert("6027".to_string(), "App Store|Graphics & Design");
    map.insert("7".to_string(), "Music|Electronic");
    map.insert("7001".to_string(), "App Store|Games|Action");
    map.insert("7002".to_string(), "App Store|Games|Adventure");
    map.insert("7003".to_string(), "App Store|Games|Casual");
    map.insert("7004".to_string(), "App Store|Games|Board");
    map.insert("7005".to_string(), "App Store|Games|Card");
    map.insert("7006".to_string(), "App Store|Games|Casino");
    map.insert("7007".to_string(), "App Store|Games|Dice");
    map.insert("7008".to_string(), "App Store|Games|Educational");
    map.insert("7009".to_string(), "App Store|Games|Family");
    map.insert("7011".to_string(), "App Store|Games|Music");
    map.insert("7012".to_string(), "App Store|Games|Puzzle");
    map.insert("7013".to_string(), "App Store|Games|Racing");
    map.insert("7014".to_string(), "App Store|Games|Role Playing");
    map.insert("7015".to_string(), "App Store|Games|Simulation");
    map.insert("7016".to_string(), "App Store|Games|Sports");
    map.insert("7017".to_string(), "App Store|Games|Strategy");
    map.insert("7018".to_string(), "App Store|Games|Trivia");
    map.insert("7019".to_string(), "App Store|Games|Word");
    map.insert("74".to_string(), "Audiobooks|News");
    map.insert("75".to_string(), "Audiobooks|Programs & Performances");
    map.insert("8".to_string(), "Music|Holiday");
    map.insert("8001".to_string(), "Tones|Ringtones|Alternative");
    map.insert("8002".to_string(), "Tones|Ringtones|Blues");
    map.insert("8003".to_string(), "Tones|Ringtones|Children's Music");
    map.insert("8004".to_string(), "Tones|Ringtones|Classical");
    map.insert("8005".to_string(), "Tones|Ringtones|Comedy");
    map.insert("8006".to_string(), "Tones|Ringtones|Country");
    map.insert("8007".to_string(), "Tones|Ringtones|Dance");
    map.insert("8008".to_string(), "Tones|Ringtones|Electronic");
    map.insert("8009".to_string(), "Tones|Ringtones|Enka");
    map.insert("8010".to_string(), "Tones|Ringtones|French Pop");
    map.insert("8011".to_string(), "Tones|Ringtones|German Folk");
    map.insert("8012".to_string(), "Tones|Ringtones|German Pop");
    map.insert("8013".to_string(), "Tones|Ringtones|Hip-Hop/Rap");
    map.insert("8014".to_string(), "Tones|Ringtones|Holiday");
    map.insert("8015".to_string(), "Tones|Ringtones|Inspirational");
    map.insert("8016".to_string(), "Tones|Ringtones|J-Pop");
    map.insert("8017".to_string(), "Tones|Ringtones|Jazz");
    map.insert("8018".to_string(), "Tones|Ringtones|Kayokyoku");
    map.insert("8019".to_string(), "Tones|Ringtones|Latin");
    map.insert("8020".to_string(), "Tones|Ringtones|New Age");
    map.insert("8021".to_string(), "Tones|Ringtones|Classical|Opera");
    map.insert("8022".to_string(), "Tones|Ringtones|Pop");
    map.insert("8023".to_string(), "Tones|Ringtones|R&B/Soul");
    map.insert("8024".to_string(), "Tones|Ringtones|Reggae");
    map.insert("8025".to_string(), "Tones|Ringtones|Rock");
    map.insert("8026".to_string(), "Tones|Ringtones|Singer/Songwriter");
    map.insert("8027".to_string(), "Tones|Ringtones|Soundtrack");
    map.insert("8028".to_string(), "Tones|Ringtones|Spoken Word");
    map.insert("8029".to_string(), "Tones|Ringtones|Vocal");
    map.insert("8030".to_string(), "Tones|Ringtones|World");
    map.insert("8050".to_string(), "Tones|Alert Tones|Sound Effects");
    map.insert("8051".to_string(), "Tones|Alert Tones|Dialogue");
    map.insert("8052".to_string(), "Tones|Alert Tones|Music");
    map.insert("8053".to_string(), "Tones|Ringtones");
    map.insert("8054".to_string(), "Tones|Alert Tones");
    map.insert(
        "8055".to_string(),
        "Tones|Ringtones|Alternative|Chinese Alt",
    );
    map.insert(
        "8056".to_string(),
        "Tones|Ringtones|Alternative|College Rock",
    );
    map.insert("8057".to_string(), "Tones|Ringtones|Alternative|Goth Rock");
    map.insert("8058".to_string(), "Tones|Ringtones|Alternative|Grunge");
    map.insert("8059".to_string(), "Tones|Ringtones|Alternative|Indie Rock");
    map.insert(
        "8060".to_string(),
        "Tones|Ringtones|Alternative|Korean Indie",
    );
    map.insert("8061".to_string(), "Tones|Ringtones|Alternative|New Wave");
    map.insert("8062".to_string(), "Tones|Ringtones|Alternative|Punk");
    map.insert("8063".to_string(), "Tones|Ringtones|Anime");
    map.insert("8064".to_string(), "Tones|Ringtones|Arabic");
    map.insert("8065".to_string(), "Tones|Ringtones|Arabic|Arabic Pop");
    map.insert("8066".to_string(), "Tones|Ringtones|Arabic|Islamic");
    map.insert("8067".to_string(), "Tones|Ringtones|Arabic|Khaleeji");
    map.insert("8068".to_string(), "Tones|Ringtones|Arabic|North African");
    map.insert("8069".to_string(), "Tones|Ringtones|Blues|Acoustic Blues");
    map.insert("8070".to_string(), "Tones|Ringtones|Blues|Chicago Blues");
    map.insert("8071".to_string(), "Tones|Ringtones|Blues|Classic Blues");
    map.insert(
        "8072".to_string(),
        "Tones|Ringtones|Blues|Contemporary Blues",
    );
    map.insert("8073".to_string(), "Tones|Ringtones|Blues|Country Blues");
    map.insert("8074".to_string(), "Tones|Ringtones|Blues|Delta Blues");
    map.insert("8075".to_string(), "Tones|Ringtones|Blues|Electric Blues");
    map.insert("8076".to_string(), "Tones|Ringtones|Brazilian");
    map.insert("8077".to_string(), "Tones|Ringtones|Brazilian|Axe");
    map.insert("8078".to_string(), "Tones|Ringtones|Brazilian|Baile Funk");
    map.insert("8079".to_string(), "Tones|Ringtones|Brazilian|Bossa Nova");
    map.insert("8080".to_string(), "Tones|Ringtones|Brazilian|Choro");
    map.insert("8081".to_string(), "Tones|Ringtones|Brazilian|Forro");
    map.insert("8082".to_string(), "Tones|Ringtones|Brazilian|Frevo");
    map.insert("8083".to_string(), "Tones|Ringtones|Brazilian|MPB");
    map.insert("8084".to_string(), "Tones|Ringtones|Brazilian|Pagode");
    map.insert("8085".to_string(), "Tones|Ringtones|Brazilian|Samba");
    map.insert("8086".to_string(), "Tones|Ringtones|Brazilian|Sertanejo");
    map.insert(
        "8087".to_string(),
        "Tones|Ringtones|Children's Music|Lullabies",
    );
    map.insert(
        "8088".to_string(),
        "Tones|Ringtones|Children's Music|Sing-Along",
    );
    map.insert(
        "8089".to_string(),
        "Tones|Ringtones|Children's Music|Stories",
    );
    map.insert("8090".to_string(), "Tones|Ringtones|Chinese");
    map.insert(
        "8091".to_string(),
        "Tones|Ringtones|Chinese|Chinese Classical",
    );
    map.insert("8092".to_string(), "Tones|Ringtones|Chinese|Chinese Flute");
    map.insert("8093".to_string(), "Tones|Ringtones|Chinese|Chinese Opera");
    map.insert(
        "8094".to_string(),
        "Tones|Ringtones|Chinese|Chinese Orchestral",
    );
    map.insert(
        "8095".to_string(),
        "Tones|Ringtones|Chinese|Chinese Regional Folk",
    );
    map.insert(
        "8096".to_string(),
        "Tones|Ringtones|Chinese|Chinese Strings",
    );
    map.insert("8097".to_string(), "Tones|Ringtones|Chinese|Taiwanese Folk");
    map.insert(
        "8098".to_string(),
        "Tones|Ringtones|Chinese|Tibetan Native Music",
    );
    map.insert("8099".to_string(), "Tones|Ringtones|Christian & Gospel");
    map.insert("8100".to_string(), "Tones|Ringtones|Christian & Gospel|CCM");
    map.insert(
        "8101".to_string(),
        "Tones|Ringtones|Christian & Gospel|Christian Metal",
    );
    map.insert(
        "8102".to_string(),
        "Tones|Ringtones|Christian & Gospel|Christian Pop",
    );
    map.insert(
        "8103".to_string(),
        "Tones|Ringtones|Christian & Gospel|Christian Rap",
    );
    map.insert(
        "8104".to_string(),
        "Tones|Ringtones|Christian & Gospel|Christian Rock",
    );
    map.insert(
        "8105".to_string(),
        "Tones|Ringtones|Christian & Gospel|Classic Christian",
    );
    map.insert(
        "8106".to_string(),
        "Tones|Ringtones|Christian & Gospel|Contemporary Gospel",
    );
    map.insert(
        "8107".to_string(),
        "Tones|Ringtones|Christian & Gospel|Gospel",
    );
    map.insert(
        "8108".to_string(),
        "Tones|Ringtones|Christian & Gospel|Praise & Worship",
    );
    map.insert(
        "8109".to_string(),
        "Tones|Ringtones|Christian & Gospel|Southern Gospel",
    );
    map.insert(
        "8110".to_string(),
        "Tones|Ringtones|Christian & Gospel|Traditional Gospel",
    );
    map.insert("8111".to_string(), "Tones|Ringtones|Classical|Avant-Garde");
    map.insert("8112".to_string(), "Tones|Ringtones|Classical|Baroque Era");
    map.insert(
        "8113".to_string(),
        "Tones|Ringtones|Classical|Chamber Music",
    );
    map.insert("8114".to_string(), "Tones|Ringtones|Classical|Chant");
    map.insert("8115".to_string(), "Tones|Ringtones|Classical|Choral");
    map.insert(
        "8116".to_string(),
        "Tones|Ringtones|Classical|Classical Crossover",
    );
    map.insert("8117".to_string(), "Tones|Ringtones|Classical|Early Music");
    map.insert(
        "8118".to_string(),
        "Tones|Ringtones|Classical|High Classical",
    );
    map.insert(
        "8119".to_string(),
        "Tones|Ringtones|Classical|Impressionist",
    );
    map.insert("8120".to_string(), "Tones|Ringtones|Classical|Medieval Era");
    map.insert("8121".to_string(), "Tones|Ringtones|Classical|Minimalism");
    map.insert("8122".to_string(), "Tones|Ringtones|Classical|Modern Era");
    map.insert("8123".to_string(), "Tones|Ringtones|Classical|Orchestral");
    map.insert("8124".to_string(), "Tones|Ringtones|Classical|Renaissance");
    map.insert("8125".to_string(), "Tones|Ringtones|Classical|Romantic Era");
    map.insert(
        "8126".to_string(),
        "Tones|Ringtones|Classical|Wedding Music",
    );
    map.insert("8127".to_string(), "Tones|Ringtones|Comedy|Novelty");
    map.insert("8128".to_string(), "Tones|Ringtones|Comedy|Standup Comedy");
    map.insert(
        "8129".to_string(),
        "Tones|Ringtones|Country|Alternative Country",
    );
    map.insert("8130".to_string(), "Tones|Ringtones|Country|Americana");
    map.insert("8131".to_string(), "Tones|Ringtones|Country|Bluegrass");
    map.insert(
        "8132".to_string(),
        "Tones|Ringtones|Country|Contemporary Bluegrass",
    );
    map.insert(
        "8133".to_string(),
        "Tones|Ringtones|Country|Contemporary Country",
    );
    map.insert("8134".to_string(), "Tones|Ringtones|Country|Country Gospel");
    map.insert("8135".to_string(), "Tones|Ringtones|Country|Honky Tonk");
    map.insert("8136".to_string(), "Tones|Ringtones|Country|Outlaw Country");
    map.insert("8137".to_string(), "Tones|Ringtones|Country|Thai Country");
    map.insert(
        "8138".to_string(),
        "Tones|Ringtones|Country|Traditional Bluegrass",
    );
    map.insert(
        "8139".to_string(),
        "Tones|Ringtones|Country|Traditional Country",
    );
    map.insert("8140".to_string(), "Tones|Ringtones|Country|Urban Cowboy");
    map.insert("8141".to_string(), "Tones|Ringtones|Dance|Breakbeat");
    map.insert("8142".to_string(), "Tones|Ringtones|Dance|Exercise");
    map.insert("8143".to_string(), "Tones|Ringtones|Dance|Garage");
    map.insert("8144".to_string(), "Tones|Ringtones|Dance|Hardcore");
    map.insert("8145".to_string(), "Tones|Ringtones|Dance|House");
    map.insert(
        "8146".to_string(),
        "Tones|Ringtones|Dance|Jungle/Drum'n'bass",
    );
    map.insert("8147".to_string(), "Tones|Ringtones|Dance|Techno");
    map.insert("8148".to_string(), "Tones|Ringtones|Dance|Trance");
    map.insert("8149".to_string(), "Tones|Ringtones|Disney");
    map.insert("8150".to_string(), "Tones|Ringtones|Easy Listening");
    map.insert("8151".to_string(), "Tones|Ringtones|Easy Listening|Lounge");
    map.insert("8152".to_string(), "Tones|Ringtones|Easy Listening|Swing");
    map.insert("8153".to_string(), "Tones|Ringtones|Electronic|Ambient");
    map.insert("8154".to_string(), "Tones|Ringtones|Electronic|Downtempo");
    map.insert("8155".to_string(), "Tones|Ringtones|Electronic|Electronica");
    map.insert(
        "8156".to_string(),
        "Tones|Ringtones|Electronic|IDM/Experimental",
    );
    map.insert("8157".to_string(), "Tones|Ringtones|Electronic|Industrial");
    map.insert("8158".to_string(), "Tones|Ringtones|Fitness & Workout");
    map.insert("8159".to_string(), "Tones|Ringtones|Folk");
    map.insert(
        "8160".to_string(),
        "Tones|Ringtones|Hip-Hop/Rap|Alternative Rap",
    );
    map.insert(
        "8161".to_string(),
        "Tones|Ringtones|Hip-Hop/Rap|Chinese Hip-Hop",
    );
    map.insert(
        "8162".to_string(),
        "Tones|Ringtones|Hip-Hop/Rap|Dirty South",
    );
    map.insert(
        "8163".to_string(),
        "Tones|Ringtones|Hip-Hop/Rap|East Coast Rap",
    );
    map.insert(
        "8164".to_string(),
        "Tones|Ringtones|Hip-Hop/Rap|Gangsta Rap",
    );
    map.insert(
        "8165".to_string(),
        "Tones|Ringtones|Hip-Hop/Rap|Hardcore Rap",
    );
    map.insert("8166".to_string(), "Tones|Ringtones|Hip-Hop/Rap|Hip-Hop");
    map.insert(
        "8167".to_string(),
        "Tones|Ringtones|Hip-Hop/Rap|Korean Hip-Hop",
    );
    map.insert("8168".to_string(), "Tones|Ringtones|Hip-Hop/Rap|Latin Rap");
    map.insert(
        "8169".to_string(),
        "Tones|Ringtones|Hip-Hop/Rap|Old School Rap",
    );
    map.insert("8170".to_string(), "Tones|Ringtones|Hip-Hop/Rap|Rap");
    map.insert(
        "8171".to_string(),
        "Tones|Ringtones|Hip-Hop/Rap|Underground Rap",
    );
    map.insert(
        "8172".to_string(),
        "Tones|Ringtones|Hip-Hop/Rap|West Coast Rap",
    );
    map.insert("8173".to_string(), "Tones|Ringtones|Holiday|Chanukah");
    map.insert("8174".to_string(), "Tones|Ringtones|Holiday|Christmas");
    map.insert(
        "8175".to_string(),
        "Tones|Ringtones|Holiday|Christmas: Children's",
    );
    map.insert(
        "8176".to_string(),
        "Tones|Ringtones|Holiday|Christmas: Classic",
    );
    map.insert(
        "8177".to_string(),
        "Tones|Ringtones|Holiday|Christmas: Classical",
    );
    map.insert(
        "8178".to_string(),
        "Tones|Ringtones|Holiday|Christmas: Jazz",
    );
    map.insert(
        "8179".to_string(),
        "Tones|Ringtones|Holiday|Christmas: Modern",
    );
    map.insert("8180".to_string(), "Tones|Ringtones|Holiday|Christmas: Pop");
    map.insert("8181".to_string(), "Tones|Ringtones|Holiday|Christmas: R&B");
    map.insert(
        "8182".to_string(),
        "Tones|Ringtones|Holiday|Christmas: Religious",
    );
    map.insert(
        "8183".to_string(),
        "Tones|Ringtones|Holiday|Christmas: Rock",
    );
    map.insert("8184".to_string(), "Tones|Ringtones|Holiday|Easter");
    map.insert("8185".to_string(), "Tones|Ringtones|Holiday|Halloween");
    map.insert("8186".to_string(), "Tones|Ringtones|Holiday|Thanksgiving");
    map.insert("8187".to_string(), "Tones|Ringtones|Indian");
    map.insert("8188".to_string(), "Tones|Ringtones|Indian|Bollywood");
    map.insert(
        "8189".to_string(),
        "Tones|Ringtones|Indian|Devotional & Spiritual",
    );
    map.insert("8190".to_string(), "Tones|Ringtones|Indian|Ghazals");
    map.insert(
        "8191".to_string(),
        "Tones|Ringtones|Indian|Indian Classical",
    );
    map.insert("8192".to_string(), "Tones|Ringtones|Indian|Indian Folk");
    map.insert("8193".to_string(), "Tones|Ringtones|Indian|Indian Pop");
    map.insert("8194".to_string(), "Tones|Ringtones|Indian|Regional Indian");
    map.insert("8195".to_string(), "Tones|Ringtones|Indian|Sufi");
    map.insert(
        "8196".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Tamil",
    );
    map.insert(
        "8197".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Telugu",
    );
    map.insert("8198".to_string(), "Tones|Ringtones|Instrumental");
    map.insert("8199".to_string(), "Tones|Ringtones|Jazz|Avant-Garde Jazz");
    map.insert("8201".to_string(), "Tones|Ringtones|Jazz|Big Band");
    map.insert("8202".to_string(), "Tones|Ringtones|Jazz|Bop");
    map.insert("8203".to_string(), "Tones|Ringtones|Jazz|Contemporary Jazz");
    map.insert("8204".to_string(), "Tones|Ringtones|Jazz|Cool Jazz");
    map.insert("8205".to_string(), "Tones|Ringtones|Jazz|Crossover Jazz");
    map.insert("8206".to_string(), "Tones|Ringtones|Jazz|Dixieland");
    map.insert("8207".to_string(), "Tones|Ringtones|Jazz|Fusion");
    map.insert("8208".to_string(), "Tones|Ringtones|Jazz|Hard Bop");
    map.insert("8209".to_string(), "Tones|Ringtones|Jazz|Latin Jazz");
    map.insert("8210".to_string(), "Tones|Ringtones|Jazz|Mainstream Jazz");
    map.insert("8211".to_string(), "Tones|Ringtones|Jazz|Ragtime");
    map.insert("8212".to_string(), "Tones|Ringtones|Jazz|Smooth Jazz");
    map.insert("8213".to_string(), "Tones|Ringtones|Jazz|Trad Jazz");
    map.insert("8214".to_string(), "Tones|Ringtones|Pop|K-Pop");
    map.insert("8215".to_string(), "Tones|Ringtones|Karaoke");
    map.insert("8216".to_string(), "Tones|Ringtones|Korean");
    map.insert(
        "8217".to_string(),
        "Tones|Ringtones|Korean|Korean Classical",
    );
    map.insert(
        "8218".to_string(),
        "Tones|Ringtones|Korean|Korean Trad Instrumental",
    );
    map.insert(
        "8219".to_string(),
        "Tones|Ringtones|Korean|Korean Trad Song",
    );
    map.insert(
        "8220".to_string(),
        "Tones|Ringtones|Korean|Korean Trad Theater",
    );
    map.insert(
        "8221".to_string(),
        "Tones|Ringtones|Latin|Alternative & Rock in Spanish",
    );
    map.insert(
        "8222".to_string(),
        "Tones|Ringtones|Latin|Baladas y Boleros",
    );
    map.insert(
        "8223".to_string(),
        "Tones|Ringtones|Latin|Contemporary Latin",
    );
    map.insert("8224".to_string(), "Tones|Ringtones|Latin|Latin Jazz");
    map.insert("8225".to_string(), "Tones|Ringtones|Latin|Latin Urban");
    map.insert("8226".to_string(), "Tones|Ringtones|Latin|Pop in Spanish");
    map.insert("8227".to_string(), "Tones|Ringtones|Latin|Raices");
    map.insert("8228".to_string(), "Tones|Ringtones|Latin|Musica Mexicana");
    map.insert("8229".to_string(), "Tones|Ringtones|Latin|Salsa y Tropical");
    map.insert("8230".to_string(), "Tones|Ringtones|Marching Bands");
    map.insert("8231".to_string(), "Tones|Ringtones|New Age|Healing");
    map.insert("8232".to_string(), "Tones|Ringtones|New Age|Meditation");
    map.insert("8233".to_string(), "Tones|Ringtones|New Age|Nature");
    map.insert("8234".to_string(), "Tones|Ringtones|New Age|Relaxation");
    map.insert("8235".to_string(), "Tones|Ringtones|New Age|Travel");
    map.insert("8236".to_string(), "Tones|Ringtones|Orchestral");
    map.insert("8237".to_string(), "Tones|Ringtones|Pop|Adult Contemporary");
    map.insert("8238".to_string(), "Tones|Ringtones|Pop|Britpop");
    map.insert("8239".to_string(), "Tones|Ringtones|Pop|C-Pop");
    map.insert("8240".to_string(), "Tones|Ringtones|Pop|Cantopop/HK-Pop");
    map.insert("8241".to_string(), "Tones|Ringtones|Pop|Indo Pop");
    map.insert("8242".to_string(), "Tones|Ringtones|Pop|Korean Folk-Pop");
    map.insert("8243".to_string(), "Tones|Ringtones|Pop|Malaysian Pop");
    map.insert("8244".to_string(), "Tones|Ringtones|Pop|Mandopop");
    map.insert("8245".to_string(), "Tones|Ringtones|Pop|Manilla Sound");
    map.insert("8246".to_string(), "Tones|Ringtones|Pop|Oldies");
    map.insert(
        "8247".to_string(),
        "Tones|Ringtones|Pop|Original Pilipino Music",
    );
    map.insert("8248".to_string(), "Tones|Ringtones|Pop|Pinoy Pop");
    map.insert("8249".to_string(), "Tones|Ringtones|Pop|Pop/Rock");
    map.insert("8250".to_string(), "Tones|Ringtones|Pop|Soft Rock");
    map.insert("8251".to_string(), "Tones|Ringtones|Pop|Tai-Pop");
    map.insert("8252".to_string(), "Tones|Ringtones|Pop|Teen Pop");
    map.insert("8253".to_string(), "Tones|Ringtones|Pop|Thai Pop");
    map.insert(
        "8254".to_string(),
        "Tones|Ringtones|R&B/Soul|Contemporary R&B",
    );
    map.insert("8255".to_string(), "Tones|Ringtones|R&B/Soul|Disco");
    map.insert("8256".to_string(), "Tones|Ringtones|R&B/Soul|Doo Wop");
    map.insert("8257".to_string(), "Tones|Ringtones|R&B/Soul|Funk");
    map.insert("8258".to_string(), "Tones|Ringtones|R&B/Soul|Motown");
    map.insert("8259".to_string(), "Tones|Ringtones|R&B/Soul|Neo-Soul");
    map.insert("8260".to_string(), "Tones|Ringtones|R&B/Soul|Soul");
    map.insert(
        "8261".to_string(),
        "Tones|Ringtones|Reggae|Modern Dancehall",
    );
    map.insert("8262".to_string(), "Tones|Ringtones|Reggae|Dub");
    map.insert("8263".to_string(), "Tones|Ringtones|Reggae|Roots Reggae");
    map.insert("8264".to_string(), "Tones|Ringtones|Reggae|Ska");
    map.insert("8265".to_string(), "Tones|Ringtones|Rock|Adult Alternative");
    map.insert(
        "8266".to_string(),
        "Tones|Ringtones|Rock|American Trad Rock",
    );
    map.insert("8267".to_string(), "Tones|Ringtones|Rock|Arena Rock");
    map.insert("8268".to_string(), "Tones|Ringtones|Rock|Blues-Rock");
    map.insert("8269".to_string(), "Tones|Ringtones|Rock|British Invasion");
    map.insert("8270".to_string(), "Tones|Ringtones|Rock|Chinese Rock");
    map.insert(
        "8271".to_string(),
        "Tones|Ringtones|Rock|Death Metal/Black Metal",
    );
    map.insert("8272".to_string(), "Tones|Ringtones|Rock|Glam Rock");
    map.insert("8273".to_string(), "Tones|Ringtones|Rock|Hair Metal");
    map.insert("8274".to_string(), "Tones|Ringtones|Rock|Hard Rock");
    map.insert("8275".to_string(), "Tones|Ringtones|Rock|Metal");
    map.insert("8276".to_string(), "Tones|Ringtones|Rock|Jam Bands");
    map.insert("8277".to_string(), "Tones|Ringtones|Rock|Korean Rock");
    map.insert(
        "8278".to_string(),
        "Tones|Ringtones|Rock|Prog-Rock/Art Rock",
    );
    map.insert("8279".to_string(), "Tones|Ringtones|Rock|Psychedelic");
    map.insert("8280".to_string(), "Tones|Ringtones|Rock|Rock & Roll");
    map.insert("8281".to_string(), "Tones|Ringtones|Rock|Rockabilly");
    map.insert("8282".to_string(), "Tones|Ringtones|Rock|Roots Rock");
    map.insert("8283".to_string(), "Tones|Ringtones|Rock|Singer/Songwriter");
    map.insert("8284".to_string(), "Tones|Ringtones|Rock|Southern Rock");
    map.insert("8285".to_string(), "Tones|Ringtones|Rock|Surf");
    map.insert("8286".to_string(), "Tones|Ringtones|Rock|Tex-Mex");
    map.insert(
        "8287".to_string(),
        "Tones|Ringtones|Singer/Songwriter|Alternative Folk",
    );
    map.insert(
        "8288".to_string(),
        "Tones|Ringtones|Singer/Songwriter|Contemporary Folk",
    );
    map.insert(
        "8289".to_string(),
        "Tones|Ringtones|Singer/Songwriter|Contemporary Singer/Songwriter",
    );
    map.insert(
        "8290".to_string(),
        "Tones|Ringtones|Singer/Songwriter|Folk-Rock",
    );
    map.insert(
        "8291".to_string(),
        "Tones|Ringtones|Singer/Songwriter|New Acoustic",
    );
    map.insert(
        "8292".to_string(),
        "Tones|Ringtones|Singer/Songwriter|Traditional Folk",
    );
    map.insert(
        "8293".to_string(),
        "Tones|Ringtones|Soundtrack|Foreign Cinema",
    );
    map.insert("8294".to_string(), "Tones|Ringtones|Soundtrack|Musicals");
    map.insert(
        "8295".to_string(),
        "Tones|Ringtones|Soundtrack|Original Score",
    );
    map.insert(
        "8296".to_string(),
        "Tones|Ringtones|Soundtrack|Sound Effects",
    );
    map.insert("8297".to_string(), "Tones|Ringtones|Soundtrack|Soundtrack");
    map.insert(
        "8298".to_string(),
        "Tones|Ringtones|Soundtrack|TV Soundtrack",
    );
    map.insert("8299".to_string(), "Tones|Ringtones|Vocal|Standards");
    map.insert("8300".to_string(), "Tones|Ringtones|Vocal|Traditional Pop");
    map.insert("8301".to_string(), "Tones|Ringtones|Vocal|Trot");
    map.insert("8302".to_string(), "Tones|Ringtones|Jazz|Vocal Jazz");
    map.insert("8303".to_string(), "Tones|Ringtones|Vocal|Vocal Pop");
    map.insert("8304".to_string(), "Tones|Ringtones|African");
    map.insert("8305".to_string(), "Tones|Ringtones|African|Afrikaans");
    map.insert("8306".to_string(), "Tones|Ringtones|African|Afro-Beat");
    map.insert("8307".to_string(), "Tones|Ringtones|African|Afro-Pop");
    map.insert("8308".to_string(), "Tones|Ringtones|Turkish|Arabesque");
    map.insert("8309".to_string(), "Tones|Ringtones|World|Asia");
    map.insert("8310".to_string(), "Tones|Ringtones|World|Australia");
    map.insert("8311".to_string(), "Tones|Ringtones|World|Cajun");
    map.insert("8312".to_string(), "Tones|Ringtones|World|Calypso");
    map.insert("8313".to_string(), "Tones|Ringtones|World|Caribbean");
    map.insert("8314".to_string(), "Tones|Ringtones|World|Celtic");
    map.insert("8315".to_string(), "Tones|Ringtones|World|Celtic Folk");
    map.insert(
        "8316".to_string(),
        "Tones|Ringtones|World|Contemporary Celtic",
    );
    map.insert("8317".to_string(), "Tones|Ringtones|World|Dangdut");
    map.insert("8318".to_string(), "Tones|Ringtones|World|Dini");
    map.insert("8319".to_string(), "Tones|Ringtones|World|Europe");
    map.insert("8320".to_string(), "Tones|Ringtones|World|Fado");
    map.insert("8321".to_string(), "Tones|Ringtones|World|Farsi");
    map.insert("8322".to_string(), "Tones|Ringtones|World|Flamenco");
    map.insert("8323".to_string(), "Tones|Ringtones|World|France");
    map.insert("8324".to_string(), "Tones|Ringtones|Turkish|Halk");
    map.insert("8325".to_string(), "Tones|Ringtones|World|Hawaii");
    map.insert("8326".to_string(), "Tones|Ringtones|World|Iberia");
    map.insert(
        "8327".to_string(),
        "Tones|Ringtones|World|Indonesian Religious",
    );
    map.insert("8328".to_string(), "Tones|Ringtones|World|Israeli");
    map.insert("8329".to_string(), "Tones|Ringtones|World|Japan");
    map.insert("8330".to_string(), "Tones|Ringtones|World|Klezmer");
    map.insert("8331".to_string(), "Tones|Ringtones|World|North America");
    map.insert("8332".to_string(), "Tones|Ringtones|World|Polka");
    map.insert("8333".to_string(), "Tones|Ringtones|Russian");
    map.insert(
        "8334".to_string(),
        "Tones|Ringtones|Russian|Russian Chanson",
    );
    map.insert("8335".to_string(), "Tones|Ringtones|Turkish|Sanat");
    map.insert("8336".to_string(), "Tones|Ringtones|World|Soca");
    map.insert("8337".to_string(), "Tones|Ringtones|World|South Africa");
    map.insert("8338".to_string(), "Tones|Ringtones|World|South America");
    map.insert("8339".to_string(), "Tones|Ringtones|World|Tango");
    map.insert(
        "8340".to_string(),
        "Tones|Ringtones|World|Traditional Celtic",
    );
    map.insert("8341".to_string(), "Tones|Ringtones|Turkish");
    map.insert("8342".to_string(), "Tones|Ringtones|World|Worldbeat");
    map.insert("8343".to_string(), "Tones|Ringtones|World|Zydeco");
    map.insert("8345".to_string(), "Tones|Ringtones|Classical|Art Song");
    map.insert(
        "8346".to_string(),
        "Tones|Ringtones|Classical|Brass & Woodwinds",
    );
    map.insert(
        "8347".to_string(),
        "Tones|Ringtones|Classical|Solo Instrumental",
    );
    map.insert(
        "8348".to_string(),
        "Tones|Ringtones|Classical|Contemporary Era",
    );
    map.insert("8349".to_string(), "Tones|Ringtones|Classical|Oratorio");
    map.insert("8350".to_string(), "Tones|Ringtones|Classical|Cantata");
    map.insert("8351".to_string(), "Tones|Ringtones|Classical|Electronic");
    map.insert("8352".to_string(), "Tones|Ringtones|Classical|Sacred");
    map.insert("8353".to_string(), "Tones|Ringtones|Classical|Guitar");
    map.insert("8354".to_string(), "Tones|Ringtones|Classical|Piano");
    map.insert("8355".to_string(), "Tones|Ringtones|Classical|Violin");
    map.insert("8356".to_string(), "Tones|Ringtones|Classical|Cello");
    map.insert("8357".to_string(), "Tones|Ringtones|Classical|Percussion");
    map.insert("8358".to_string(), "Tones|Ringtones|Electronic|Dubstep");
    map.insert("8359".to_string(), "Tones|Ringtones|Electronic|Bass");
    map.insert("8360".to_string(), "Tones|Ringtones|Hip-Hop/Rap|UK Hip Hop");
    map.insert("8361".to_string(), "Tones|Ringtones|Reggae|Lovers Rock");
    map.insert("8362".to_string(), "Tones|Ringtones|Alternative|EMO");
    map.insert("8363".to_string(), "Tones|Ringtones|Alternative|Pop Punk");
    map.insert("8364".to_string(), "Tones|Ringtones|Alternative|Indie Pop");
    map.insert("8365".to_string(), "Tones|Ringtones|New Age|Yoga");
    map.insert("8366".to_string(), "Tones|Ringtones|Pop|Tribute");
    map.insert("8367".to_string(), "Tones|Ringtones|Pop|Shows");
    map.insert("8368".to_string(), "Tones|Ringtones|Cuban");
    map.insert("8369".to_string(), "Tones|Ringtones|Cuban|Mambo");
    map.insert("8370".to_string(), "Tones|Ringtones|Cuban|Chachacha");
    map.insert("8371".to_string(), "Tones|Ringtones|Cuban|Guajira");
    map.insert("8372".to_string(), "Tones|Ringtones|Cuban|Son");
    map.insert("8373".to_string(), "Tones|Ringtones|Cuban|Bolero");
    map.insert("8374".to_string(), "Tones|Ringtones|Cuban|Guaracha");
    map.insert("8375".to_string(), "Tones|Ringtones|Cuban|Timba");
    map.insert("8376".to_string(), "Tones|Ringtones|Soundtrack|Video Game");
    map.insert(
        "8377".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Punjabi|Punjabi Pop",
    );
    map.insert(
        "8378".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Bengali|Rabindra Sangeet",
    );
    map.insert(
        "8379".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Malayalam",
    );
    map.insert(
        "8380".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Kannada",
    );
    map.insert(
        "8381".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Marathi",
    );
    map.insert(
        "8382".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Gujarati",
    );
    map.insert(
        "8383".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Assamese",
    );
    map.insert(
        "8384".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Bhojpuri",
    );
    map.insert(
        "8385".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Haryanvi",
    );
    map.insert(
        "8386".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Odia",
    );
    map.insert(
        "8387".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Rajasthani",
    );
    map.insert(
        "8388".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Urdu",
    );
    map.insert(
        "8389".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Punjabi",
    );
    map.insert(
        "8390".to_string(),
        "Tones|Ringtones|Indian|Regional Indian|Bengali",
    );
    map.insert(
        "8391".to_string(),
        "Tones|Ringtones|Indian|Indian Classical|Carnatic Classical",
    );
    map.insert(
        "8392".to_string(),
        "Tones|Ringtones|Indian|Indian Classical|Hindustani Classical",
    );
    map.insert("8393".to_string(), "Tones|Ringtones|African|Afro House");
    map.insert("8394".to_string(), "Tones|Ringtones|African|Afro Soul");
    map.insert("8395".to_string(), "Tones|Ringtones|African|Afrobeats");
    map.insert("8396".to_string(), "Tones|Ringtones|African|Benga");
    map.insert("8397".to_string(), "Tones|Ringtones|African|Bongo-Flava");
    map.insert("8398".to_string(), "Tones|Ringtones|African|Coupe-Decale");
    map.insert("8399".to_string(), "Tones|Ringtones|African|Gqom");
    map.insert("8400".to_string(), "Tones|Ringtones|African|Highlife");
    map.insert("8401".to_string(), "Tones|Ringtones|African|Kuduro");
    map.insert("8402".to_string(), "Tones|Ringtones|African|Kizomba");
    map.insert("8403".to_string(), "Tones|Ringtones|African|Kwaito");
    map.insert("8404".to_string(), "Tones|Ringtones|African|Mbalax");
    map.insert("8405".to_string(), "Tones|Ringtones|African|Ndombolo");
    map.insert(
        "8406".to_string(),
        "Tones|Ringtones|African|Shangaan Electro",
    );
    map.insert("8407".to_string(), "Tones|Ringtones|African|Soukous");
    map.insert("8408".to_string(), "Tones|Ringtones|African|Taarab");
    map.insert("8409".to_string(), "Tones|Ringtones|African|Zouglou");
    map.insert("8410".to_string(), "Tones|Ringtones|Turkish|Ozgun");
    map.insert("8411".to_string(), "Tones|Ringtones|Turkish|Fantezi");
    map.insert("8412".to_string(), "Tones|Ringtones|Turkish|Religious");
    map.insert("8413".to_string(), "Tones|Ringtones|Pop|Turkish Pop");
    map.insert("8414".to_string(), "Tones|Ringtones|Rock|Turkish Rock");
    map.insert(
        "8415".to_string(),
        "Tones|Ringtones|Alternative|Turkish Alternative",
    );
    map.insert(
        "8416".to_string(),
        "Tones|Ringtones|Hip-Hop/Rap|Turkish Hip-Hop/Rap",
    );
    map.insert("8417".to_string(), "Tones|Ringtones|African|Maskandi");
    map.insert(
        "8418".to_string(),
        "Tones|Ringtones|Russian|Russian Romance",
    );
    map.insert("8419".to_string(), "Tones|Ringtones|Russian|Russian Bard");
    map.insert("8420".to_string(), "Tones|Ringtones|Russian|Russian Pop");
    map.insert("8421".to_string(), "Tones|Ringtones|Russian|Russian Rock");
    map.insert(
        "8422".to_string(),
        "Tones|Ringtones|Russian|Russian Hip-Hop",
    );
    map.insert("8423".to_string(), "Tones|Ringtones|Arabic|Levant");
    map.insert("8424".to_string(), "Tones|Ringtones|Arabic|Levant|Dabke");
    map.insert("8425".to_string(), "Tones|Ringtones|Arabic|Maghreb Rai");
    map.insert(
        "8426".to_string(),
        "Tones|Ringtones|Arabic|Khaleeji|Khaleeji Jalsat",
    );
    map.insert(
        "8427".to_string(),
        "Tones|Ringtones|Arabic|Khaleeji|Khaleeji Shailat",
    );
    map.insert("8428".to_string(), "Tones|Ringtones|Tarab");
    map.insert("8429".to_string(), "Tones|Ringtones|Tarab|Iraqi Tarab");
    map.insert("8430".to_string(), "Tones|Ringtones|Tarab|Egyptian Tarab");
    map.insert("8431".to_string(), "Tones|Ringtones|Tarab|Khaleeji Tarab");
    map.insert("8432".to_string(), "Tones|Ringtones|Pop|Levant Pop");
    map.insert("8433".to_string(), "Tones|Ringtones|Pop|Iraqi Pop");
    map.insert("8434".to_string(), "Tones|Ringtones|Pop|Egyptian Pop");
    map.insert("8435".to_string(), "Tones|Ringtones|Pop|Maghreb Pop");
    map.insert("8436".to_string(), "Tones|Ringtones|Pop|Khaleeji Pop");
    map.insert(
        "8437".to_string(),
        "Tones|Ringtones|Hip-Hop/Rap|Levant Hip-Hop",
    );
    map.insert(
        "8438".to_string(),
        "Tones|Ringtones|Hip-Hop/Rap|Egyptian Hip-Hop",
    );
    map.insert(
        "8439".to_string(),
        "Tones|Ringtones|Hip-Hop/Rap|Maghreb Hip-Hop",
    );
    map.insert(
        "8440".to_string(),
        "Tones|Ringtones|Hip-Hop/Rap|Khaleeji Hip-Hop",
    );
    map.insert(
        "8441".to_string(),
        "Tones|Ringtones|Alternative|Indie Levant",
    );
    map.insert(
        "8442".to_string(),
        "Tones|Ringtones|Alternative|Indie Egyptian",
    );
    map.insert(
        "8443".to_string(),
        "Tones|Ringtones|Alternative|Indie Maghreb",
    );
    map.insert(
        "8444".to_string(),
        "Tones|Ringtones|Electronic|Levant Electronic",
    );
    map.insert(
        "8445".to_string(),
        "Tones|Ringtones|Electronic|Electro-Cha'abi",
    );
    map.insert(
        "8446".to_string(),
        "Tones|Ringtones|Electronic|Maghreb Electronic",
    );
    map.insert("8447".to_string(), "Tones|Ringtones|Folk|Iraqi Folk");
    map.insert("8448".to_string(), "Tones|Ringtones|Folk|Khaleeji Folk");
    map.insert("8449".to_string(), "Tones|Ringtones|Dance|Maghreb Dance");
    map.insert("9".to_string(), "Music|Classical|Opera");
    map.insert("9002".to_string(), "Books|Nonfiction");
    map.insert("9003".to_string(), "Books|Romance");
    map.insert("9004".to_string(), "Books|Travel & Adventure");
    map.insert("9007".to_string(), "Books|Arts & Entertainment");
    map.insert("9008".to_string(), "Books|Biographies & Memoirs");
    map.insert("9009".to_string(), "Books|Business & Personal Finance");
    map.insert("9010".to_string(), "Books|Children & Teens");
    map.insert("9012".to_string(), "Books|Humor");
    map.insert("9015".to_string(), "Books|History");
    map.insert("9018".to_string(), "Books|Religion & Spirituality");
    map.insert("9019".to_string(), "Books|Science & Nature");
    map.insert("9020".to_string(), "Books|Sci-Fi & Fantasy");
    map.insert("9024".to_string(), "Books|Lifestyle & Home");
    map.insert("9025".to_string(), "Books|Self-Development");
    map.insert("9026".to_string(), "Books|Comics & Graphic Novels");
    map.insert("9027".to_string(), "Books|Computers & Internet");
    map.insert("9028".to_string(), "Books|Cookbooks, Food & Wine");
    map.insert("9029".to_string(), "Books|Professional & Technical");
    map.insert("9030".to_string(), "Books|Parenting");
    map.insert("9031".to_string(), "Books|Fiction & Literature");
    map.insert("9032".to_string(), "Books|Mysteries & Thrillers");
    map.insert("9033".to_string(), "Books|Reference");
    map.insert("9034".to_string(), "Books|Politics & Current Events");
    map.insert("9035".to_string(), "Books|Sports & Outdoors");
    map
});

static PRINT_CONV_6: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_7: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_8: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_9: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Insert Gap");
    map.insert("1".to_string(), "No Gap");
    map
});

static PRINT_CONV_10: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "none");
    map.insert("1".to_string(), "Explicit");
    map.insert("2".to_string(), "Clean");
    map.insert("4".to_string(), "Explicit (old)");
    map
});

static PRINT_CONV_11: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("143441".to_string(), "United States");
    map.insert("143442".to_string(), "France");
    map.insert("143443".to_string(), "Germany");
    map.insert("143444".to_string(), "United Kingdom");
    map.insert("143445".to_string(), "Austria");
    map.insert("143446".to_string(), "Belgium");
    map.insert("143447".to_string(), "Finland");
    map.insert("143448".to_string(), "Greece");
    map.insert("143449".to_string(), "Ireland");
    map.insert("143450".to_string(), "Italy");
    map.insert("143451".to_string(), "Luxembourg");
    map.insert("143452".to_string(), "Netherlands");
    map.insert("143453".to_string(), "Portugal");
    map.insert("143454".to_string(), "Spain");
    map.insert("143455".to_string(), "Canada");
    map.insert("143456".to_string(), "Sweden");
    map.insert("143457".to_string(), "Norway");
    map.insert("143458".to_string(), "Denmark");
    map.insert("143459".to_string(), "Switzerland");
    map.insert("143460".to_string(), "Australia");
    map.insert("143461".to_string(), "New Zealand");
    map.insert("143462".to_string(), "Japan");
    map.insert("143463".to_string(), "Hong Kong");
    map.insert("143464".to_string(), "Singapore");
    map.insert("143465".to_string(), "China");
    map.insert("143466".to_string(), "Republic of Korea");
    map.insert("143467".to_string(), "India");
    map.insert("143468".to_string(), "Mexico");
    map.insert("143469".to_string(), "Russia");
    map.insert("143470".to_string(), "Taiwan");
    map.insert("143471".to_string(), "Vietnam");
    map.insert("143472".to_string(), "South Africa");
    map.insert("143473".to_string(), "Malaysia");
    map.insert("143474".to_string(), "Philippines");
    map.insert("143475".to_string(), "Thailand");
    map.insert("143476".to_string(), "Indonesia");
    map.insert("143477".to_string(), "Pakistan");
    map.insert("143478".to_string(), "Poland");
    map.insert("143479".to_string(), "Saudi Arabia");
    map.insert("143480".to_string(), "Turkey");
    map.insert("143481".to_string(), "United Arab Emirates");
    map.insert("143482".to_string(), "Hungary");
    map.insert("143483".to_string(), "Chile");
    map.insert("143484".to_string(), "Nepal");
    map.insert("143485".to_string(), "Panama");
    map.insert("143486".to_string(), "Sri Lanka");
    map.insert("143487".to_string(), "Romania");
    map.insert("143489".to_string(), "Czech Republic");
    map.insert("143491".to_string(), "Israel");
    map.insert("143492".to_string(), "Ukraine");
    map.insert("143493".to_string(), "Kuwait");
    map.insert("143494".to_string(), "Croatia");
    map.insert("143495".to_string(), "Costa Rica");
    map.insert("143496".to_string(), "Slovakia");
    map.insert("143497".to_string(), "Lebanon");
    map.insert("143498".to_string(), "Qatar");
    map.insert("143499".to_string(), "Slovenia");
    map.insert("143501".to_string(), "Colombia");
    map.insert("143502".to_string(), "Venezuela");
    map.insert("143503".to_string(), "Brazil");
    map.insert("143504".to_string(), "Guatemala");
    map.insert("143505".to_string(), "Argentina");
    map.insert("143506".to_string(), "El Salvador");
    map.insert("143507".to_string(), "Peru");
    map.insert("143508".to_string(), "Dominican Republic");
    map.insert("143509".to_string(), "Ecuador");
    map.insert("143510".to_string(), "Honduras");
    map.insert("143511".to_string(), "Jamaica");
    map.insert("143512".to_string(), "Nicaragua");
    map.insert("143513".to_string(), "Paraguay");
    map.insert("143514".to_string(), "Uruguay");
    map.insert("143515".to_string(), "Macau");
    map.insert("143516".to_string(), "Egypt");
    map.insert("143517".to_string(), "Kazakhstan");
    map.insert("143518".to_string(), "Estonia");
    map.insert("143519".to_string(), "Latvia");
    map.insert("143520".to_string(), "Lithuania");
    map.insert("143521".to_string(), "Malta");
    map.insert("143523".to_string(), "Moldova");
    map.insert("143524".to_string(), "Armenia");
    map.insert("143525".to_string(), "Botswana");
    map.insert("143526".to_string(), "Bulgaria");
    map.insert("143528".to_string(), "Jordan");
    map.insert("143529".to_string(), "Kenya");
    map.insert("143530".to_string(), "Macedonia");
    map.insert("143531".to_string(), "Madagascar");
    map.insert("143532".to_string(), "Mali");
    map.insert("143533".to_string(), "Mauritius");
    map.insert("143534".to_string(), "Niger");
    map.insert("143535".to_string(), "Senegal");
    map.insert("143536".to_string(), "Tunisia");
    map.insert("143537".to_string(), "Uganda");
    map.insert("143538".to_string(), "Anguilla");
    map.insert("143539".to_string(), "Bahamas");
    map.insert("143540".to_string(), "Antigua and Barbuda");
    map.insert("143541".to_string(), "Barbados");
    map.insert("143542".to_string(), "Bermuda");
    map.insert("143543".to_string(), "British Virgin Islands");
    map.insert("143544".to_string(), "Cayman Islands");
    map.insert("143545".to_string(), "Dominica");
    map.insert("143546".to_string(), "Grenada");
    map.insert("143547".to_string(), "Montserrat");
    map.insert("143548".to_string(), "St. Kitts and Nevis");
    map.insert("143549".to_string(), "St. Lucia");
    map.insert("143550".to_string(), "St. Vincent and The Grenadines");
    map.insert("143551".to_string(), "Trinidad and Tobago");
    map.insert("143552".to_string(), "Turks and Caicos");
    map.insert("143553".to_string(), "Guyana");
    map.insert("143554".to_string(), "Suriname");
    map.insert("143555".to_string(), "Belize");
    map.insert("143556".to_string(), "Bolivia");
    map.insert("143557".to_string(), "Cyprus");
    map.insert("143558".to_string(), "Iceland");
    map.insert("143559".to_string(), "Bahrain");
    map.insert("143560".to_string(), "Brunei Darussalam");
    map.insert("143561".to_string(), "Nigeria");
    map.insert("143562".to_string(), "Oman");
    map.insert("143563".to_string(), "Algeria");
    map.insert("143564".to_string(), "Angola");
    map.insert("143565".to_string(), "Belarus");
    map.insert("143566".to_string(), "Uzbekistan");
    map.insert("143568".to_string(), "Azerbaijan");
    map.insert("143571".to_string(), "Yemen");
    map.insert("143572".to_string(), "Tanzania");
    map.insert("143573".to_string(), "Ghana");
    map.insert("143575".to_string(), "Albania");
    map.insert("143576".to_string(), "Benin");
    map.insert("143577".to_string(), "Bhutan");
    map.insert("143578".to_string(), "Burkina Faso");
    map.insert("143579".to_string(), "Cambodia");
    map.insert("143580".to_string(), "Cape Verde");
    map.insert("143581".to_string(), "Chad");
    map.insert("143582".to_string(), "Republic of the Congo");
    map.insert("143583".to_string(), "Fiji");
    map.insert("143584".to_string(), "Gambia");
    map.insert("143585".to_string(), "Guinea-Bissau");
    map.insert("143586".to_string(), "Kyrgyzstan");
    map.insert("143587".to_string(), "Lao People's Democratic Republic");
    map.insert("143588".to_string(), "Liberia");
    map.insert("143589".to_string(), "Malawi");
    map.insert("143590".to_string(), "Mauritania");
    map.insert("143591".to_string(), "Federated States of Micronesia");
    map.insert("143592".to_string(), "Mongolia");
    map.insert("143593".to_string(), "Mozambique");
    map.insert("143594".to_string(), "Namibia");
    map.insert("143595".to_string(), "Palau");
    map.insert("143597".to_string(), "Papua New Guinea");
    map.insert("143598".to_string(), "Sao Tome and Principe");
    map.insert("143599".to_string(), "Seychelles");
    map.insert("143600".to_string(), "Sierra Leone");
    map.insert("143601".to_string(), "Solomon Islands");
    map.insert("143602".to_string(), "Swaziland");
    map.insert("143603".to_string(), "Tajikistan");
    map.insert("143604".to_string(), "Turkmenistan");
    map.insert("143605".to_string(), "Zimbabwe");
    map
});

static PRINT_CONV_12: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No");
    map.insert("1".to_string(), "Yes");
    map
});

static PRINT_CONV_13: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Movie (old)");
    map.insert("1".to_string(), "Normal (Music)");
    map.insert("10".to_string(), "TV Show");
    map.insert("11".to_string(), "Booklet");
    map.insert("14".to_string(), "Ringtone");
    map.insert("2".to_string(), "Audiobook");
    map.insert("21".to_string(), "Podcast");
    map.insert("23".to_string(), "iTunes U");
    map.insert("5".to_string(), "Whacked Bookmark");
    map.insert("6".to_string(), "Music Video");
    map.insert("9".to_string(), "Movie");
    map
});

static PRINT_CONV_14: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Shooting Location");
    map.insert("1".to_string(), "Real Location");
    map.insert("2".to_string(), "Fictional Location");
    map
});

static PRINT_CONV_15: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Off");
    map.insert("1".to_string(), "On");
    map
});

static PRINT_CONV_16: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Horizontal (normal)");
    map.insert("2".to_string(), "Mirror horizontal");
    map.insert("3".to_string(), "Rotate 180");
    map.insert("4".to_string(), "Mirror vertical");
    map.insert("5".to_string(), "Mirror horizontal and rotate 270 CW");
    map.insert("6".to_string(), "Rotate 90 CW");
    map.insert("7".to_string(), "Mirror horizontal and rotate 90 CW");
    map.insert("8".to_string(), "Rotate 270 CW");
    map
});

static PRINT_CONV_17: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Monoscopic");
    map.insert("1".to_string(), "Stereoscopic Top-Bottom");
    map.insert("2".to_string(), "Stereoscopic Left-Right");
    map.insert("3".to_string(), "Stereoscopic Stereo-Custom");
    map.insert("4".to_string(), "Stereoscopic Right-Left");
    map
});

static PRINT_CONV_18: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert(" KD ".to_string(), "Kodak");
    map.insert("AR.D".to_string(), "Parrot AR.Drone");
    map.insert("FFMP".to_string(), "FFmpeg");
    map.insert("GIC ".to_string(), "General Imaging Co.");
    map.insert("KMPI".to_string(), "Konica-Minolta");
    map.insert("NIKO".to_string(), "Nikon");
    map.insert("SMI ".to_string(), "Sorenson Media Inc.");
    map.insert("ZORA".to_string(), "Zoran Corporation");
    map.insert("appl".to_string(), "Apple");
    map.insert("fe20".to_string(), "Olympus (fe20)");
    map.insert("kdak".to_string(), "Kodak");
    map.insert("leic".to_string(), "Leica");
    map.insert("mino".to_string(), "Minolta");
    map.insert("niko".to_string(), "Nikon");
    map.insert("olym".to_string(), "Olympus");
    map.insert("pana".to_string(), "Panasonic");
    map.insert("pent".to_string(), "Pentax");
    map.insert("pr01".to_string(), "Olympus (pr01)");
    map.insert("sany".to_string(), "Sanyo");
    map
});

static PRINT_CONV_19: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert(" KD ".to_string(), "Kodak");
    map.insert("AR.D".to_string(), "Parrot AR.Drone");
    map.insert("FFMP".to_string(), "FFmpeg");
    map.insert("GIC ".to_string(), "General Imaging Co.");
    map.insert("KMPI".to_string(), "Konica-Minolta");
    map.insert("NIKO".to_string(), "Nikon");
    map.insert("SMI ".to_string(), "Sorenson Media Inc.");
    map.insert("ZORA".to_string(), "Zoran Corporation");
    map.insert("appl".to_string(), "Apple");
    map.insert("fe20".to_string(), "Olympus (fe20)");
    map.insert("kdak".to_string(), "Kodak");
    map.insert("leic".to_string(), "Leica");
    map.insert("mino".to_string(), "Minolta");
    map.insert("niko".to_string(), "Nikon");
    map.insert("olym".to_string(), "Olympus");
    map.insert("pana".to_string(), "Panasonic");
    map.insert("pent".to_string(), "Pentax");
    map.insert("pr01".to_string(), "Olympus (pr01)");
    map.insert("sany".to_string(), "Sanyo");
    map
});

static PRINT_CONV_20: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Horizontal (normal)");
    map.insert("1".to_string(), "Rotate 270 CW");
    map.insert("2".to_string(), "Rotate 180");
    map.insert("3".to_string(), "Rotate 90 CW");
    map
});

/// Get tag definitions for other category
pub fn get_other_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (0, TagKitDef {
            id: 0,
            name: "HTCInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ARDroneFile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("length($val) > 4 ? substr($val,4) : $val"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Kodak_frea",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "KodakFree",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Pittasoft",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagfree",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "FileType",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "GSensor",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Insta360Info",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagjunk",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "MediaData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "MediaDataOffset",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "MediaDataSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("not a real tag ID, this tag represents the size of the 'mdat' data in bytes\n            and is used in the AvgBitrate calculation"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "OtherMeta",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Meta",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "MovieFragment",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Movie",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "MotionPhotoVideo",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("MP4-format video saved in Samsung motion-photo HEIC images."),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "NextbaseMeta",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "PreviewPICT",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Preview",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ARDroneTelemetry",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("telemetry information for each video frame: status1, status2, time, pitch,\n            roll, yaw, speed, altitude"),
            print_conv: PrintConvType::None,
            value_conv: Some("\n            my $size = length $val;\n            return \\$val if $size < 12 or not $$self{OPTIONS}{Binary};\n            my $len = Get16u(\\$val, 2);\n            my $str = '';\n            SetByteOrder('II');\n            my $pos = 12;\n            while ($pos + $len <= $size) {\n                my $s1 = Get16u(\\$val, $pos);\n                # s2: 7=take-off?, 3=moving, 4=hovering, 9=landing?, 2=landed\n                my $s2 = Get16u(\\$val, $pos + 2);\n                $str .= \"$s1 $s2\";\n                my $num = int(($len-4)/4);\n                my ($i, $v);\n                for ($i=0; $i<$num; ++$i) {\n                    my $pt = $pos + 4 + $i * 4;\n                    if ($i > 0 && $i < 4) {\n                        $v = GetFloat(\\$val, $pt); # pitch/roll/yaw\n                    } else {\n                        $v = Get32u(\\$val, $pt);\n                        # convert time to sec, and speed(NC)/altitude to metres\n                        $v /= 1000 if $i <= 5;\n                    }\n                    $str .= \" $v\";\n                }\n                $str .= \"\\n\";\n                $pos += $len;\n            }\n            SetByteOrder('MM');\n            return \\$str;\n        "),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SamsungTrailer",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "CanonSkip",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "PreviewImage",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SkipInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "LigoGPSInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Skip",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "KenwoodData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "LigoJSON",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "GKUData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "FLIRData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "XMP",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "UUID-PROF",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "UUID-Flip",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "UUID-Canon2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "SensorData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "SensorData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("raw 360Fly sensor data without ExtractEmbedded option"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "JUMBF",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "CBOR",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "PreviewImage",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "UUID-Unknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ /^([\\x20-\\x7e]*)\\0*$/ ? $1 : \\$val"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagwide",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CompressedMovie",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "HTCTrack",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "InitialObjectDescriptor",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "OtherMeta",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Meta",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "MovieHeader",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Track",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "UserData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "UUID-USMT",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "UUID-Canon",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "GarminGPS",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "GarminGPS",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("Garmin GPS sensor data"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "UUID-Unknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ /^([\\x20-\\x7e]*)\\0*$/ ? $1 : \\$val"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Media",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "OtherMeta",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Meta",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "TrackAperture",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "TrackHeader",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "TrackRef",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "UserData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "UUID-USMT",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "SphericalVideoXML",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "UUID-Unknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ /^([\\x20-\\x7e]*)\\0*$/ ? $1 : \\$val"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Handler",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "MediaHeader",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "MediaInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Make",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Model",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SamsungSec",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "SoftwareVersion",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "PlayAllFrames",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "KodakDcMD",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "LevelMeter",
            format: "rational64s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "MinoltaMMA0",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "MinoltaMMA1",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "SerialNumber",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "PlaySelection",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "MicrosoftXtra",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "CX",
            format: "rational64s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CY",
            format: "rational64s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Yaw",
            format: "rational64s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Unknown_adzc",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Unknown_adze",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Unknown_adzm",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Album",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("used in 3gp videos"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AlbumArtist",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CameraAngle",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ApertureMode",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Author",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("used in 3gp videos"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GlamourSettings",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ChapterList",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ClipFileName",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ClipID",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Classification",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("string in the form \"Entity=XXXX Index=### XXXXX\", used in 3gp videos"),
            print_conv: PrintConvType::None,
            value_conv: Some("$val=~s/^(.{4})(.{2})/\"Entity=$1 Index=\".unpack(\"n\",$2).\" \"/ie; $val"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CameraID",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Model",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CollectionName",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("used in 3gp videos"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Copyright",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("used in 3gp videos"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Description",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("used in 3gp videos"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "OriginalFileName",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Genre",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("used in 3gp videos"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "HintTrackInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "HintInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "HTCBinary",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "CameraInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "TrackType",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Keywords",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("not writable because Apple doesn't follow the 3gp specification"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "LocationInformation",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("string in the form \"XXXXX Role=XXX Lat=XXX Lon=XXX Alt=XXX Body=XXX\n            Notes=XXX\", used in 3gp videos"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "LevelMeter",
            format: "rational64s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Make",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "PreviewImage",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Meta",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Model",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Unknown_nbpl",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Performer",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("used in 3gp videos"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GarminSettings",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("substr($val, 4)"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "pose",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Pitch",
            format: "rational64s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "PrintToVideo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Rads",
            format: "rational64s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ReelName",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Roll",
            format: "rational64s",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Rating",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("string in the form \"Entity=XXXX Criteria=XXXX XXXXX\", used in 3gp videos"),
            print_conv: PrintConvType::None,
            value_conv: Some("$val=~s/^(.{4})(.{4})/Entity=$1 Criteria=$2 /i; $val"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Scene",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "OlympusPreview",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ShotName",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SerialNumber",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SamsungSmta",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Audible_tags",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "MakerNotePentax5a",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Title",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("used in 3gp videos"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "TrackName",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "UserRating",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("used in 3gp videos"),
            print_conv: PrintConvType::None,
            value_conv: Some("\n            return '<err>' unless length $val >= 8;\n            unpack('x7C', $val);\n        "),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GarminSoftware",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GarminModel",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "UUID-Unknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ /^([\\x20-\\x7e]*)\\0*$/ ? $1 : \\$val"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AccelerometerData",
            format: "rational64s",
            groups: HashMap::new(),
            writable: false,
            notes: Some("accelerometer readings for each frame of the video, expressed as sets of\n            yaw, pitch and roll angles in degrees"),
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ s/^-?\\d+ //; \\$val"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Year",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("used in 3gp videos"),
            print_conv: PrintConvType::None,
            value_conv: Some("length($val) >= 6 ? unpack(\"x4n\",$val) : \"<err>\""),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Copyright",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "UserData_dji",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Model",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: Some("non-standard-format DJI tag"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "UserData_res",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "UserData_uid",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Composer",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "BinaryXML",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "DataInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Free",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Unknown_grpl",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Handler",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "MetaImageSize",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val =~ s/^(\\d+) (\\d+) (\\d+) (\\d+)/${3}x$4/; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ItemInformation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ItemInformation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ItemLocation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("parsed, but not extracted as a tag"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ItemList",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "IPMPControl",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ItemProtection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ItemProperties",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ItemReference",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "AudioKeys",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "VideoKeys",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Keys",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "PrimaryItemReference",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "PrimaryItemReference",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "MetaVersion",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "UUID-Unknown",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ /^([\\x20-\\x7e]*)\\0*$/ ? $1 : \\$val"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "XML",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "iTunesInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "AlbumArtist",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AppleStoreAccountType",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_3),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Album",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ArtistID",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Author",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AppleStoreCatalogID",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CoverArt",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Compilation",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_4),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Copyright",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Description",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "DiskNumber",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("\n            return \\$val unless length($val) >= 6;\n            my @a = unpack 'x2nn', $val;\n            return $a[1] ? join(' of ', @a) : $a[0];\n        "),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Description",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GenreID",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_5),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Genre",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\n            return $val unless $val =~ /^\\d+$/;\n            require Image::ExifTool::ID3;\n            Image::ExifTool::ID3::PrintGenre($val - 1); # note the \"- 1\"\n        "),
            value_conv: Some("unpack(\"n\",$val)"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Grouping",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GoogleHostHeader",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GooglePingMessage",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GooglePingURL",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GoogleSourceData",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GoogleTrackDuration",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ConvertDuration($val)"),
            value_conv: Some("$val / 1000"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "HDVideo",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_6),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "iTunesU",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_7),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Podcast",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_8),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "PlayGap",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_9),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AlbumID",
            format: "int64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Rating",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_10),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AppleStoreCountry",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_11),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ShowMovement",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_12),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "PreviewImage",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "MediaType",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_13),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Title",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "BeatsPerMinute",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "TrackNumber",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("\n            return \\$val unless length($val) >= 6;\n            my @a = unpack 'x2nn', $val;\n            return $a[1] ? join(' of ', @a) : $a[0];\n        "),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "TVEpisode",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "TVSeason",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Author",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Composer",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Copyright",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "MovementCount",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "MovementNumber",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ApplePhotosVariationIdentifier",
            format: "int64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagartist",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagartwork",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Author",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AndroidCaptureFPS",
            format: "float",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "XiaomiHDR10",
            format: "int32s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "XiaomiPreviewVideoCover",
            format: "int32s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagcomment",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CompatibleBrands",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Copyright",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagdescription",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "FaceInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "DetectedFaceBounds",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression("my @a=split \" \",$val;$_=int($_*1e6+.5)/1e6 foreach @a;join \" \",@a"),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "DetectedFaceID",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "DetectedFaceRollAngle",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "DetectedFaceYawAngle",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CameraDirection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CameraMotion",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagdirector",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "DisplayName",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagencoder",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Taggenre",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Taginformation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagkeywords",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "LivePhotoInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("join \" \",unpack \"VfVVf6c4lCCcclf4Vvv\", $val"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "LivePhotoAuto",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "LivePhotoVitalityScore",
            format: "float",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "LivePhotoVitalityScoringVersion",
            format: "int64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "LocationAccuracyHorizontal",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "LocationBody",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "LocationName",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "LocationNote",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "LocationRole",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_14),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "MajorBrand",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Make",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "MinorVersion",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Model",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Mute",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_15),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagproducer",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagpublisher",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SceneIlluminance",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: Some("milli-lux"),
            print_conv: PrintConvType::None,
            value_conv: Some("unpack(\"N\", $val)"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagsoftware",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagtitle",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "VideoOrientation",
            format: "unknown",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_16),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagyear",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ChunkOffset64",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SamplePaddingBits",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SampleToGroup",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "IdependentAndDisposableSamples",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SampleGroupDescription",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ChunkOffset",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SampleDegradationPriority",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "PartialSyncSamples",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("join \" \",unpack(\"x8N*\",$val)"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SampleToChunk",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AudioSampleDesc",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "VisualSampleDesc",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "HintSampleDesc",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "MetaSampleDesc",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "OtherSampleDesc",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ShadowSyncSampleTable",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SyncSampleTable",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SampleSizes",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "VideoFrameRate",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: Some("average rate calculated from time-to-sample table for video media"),
            print_conv: PrintConvType::Expression("int($val * 1000 + 0.5) / 1000"),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CompactSampleSizes",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Sub-sampleInformation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (18, TagKitDef {
            id: 18,
            name: "XResolution",
            format: "fixed32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "YResolution",
            format: "fixed32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (25, TagKitDef {
            id: 25,
            name: "CompressorName",
            format: "string[32]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CDI1",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "CMP1",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "AVCConfiguration",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "BitrateInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "CleanAperture",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ColorRepresentation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "VideoFieldOrder",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("array_printconv"),
            value_conv: Some("join(\" \", unpack(\"C*\",$val))"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Gamma",
            format: "fixed32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "PixelAspectRatio",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("join(\":\", unpack(\"N*\",$val))"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Stereoscopic3D",
            format: "int8u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_17),
            value_conv: Some("$val =~ s/.* //; $val"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SphericalVideo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (20, TagKitDef {
            id: 20,
            name: "AudioVendorID",
            format: "undef[4]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_18),
            value_conv: None,
            subdirectory: None,
        }),
        (24, TagKitDef {
            id: 24,
            name: "AudioChannels",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (26, TagKitDef {
            id: 26,
            name: "AudioBitsPerSample",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (32, TagKitDef {
            id: 32,
            name: "AudioSampleRate",
            format: "fixed32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "SpatialAudio",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "BitrateInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "AudioChannelLayout",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "DecodeConfig",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "PurchaseInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ProtectionInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Wave",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "DataInfo",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "GenMediaHeader",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Handler",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "HintHeader",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "NullMediaHeader",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AudioHeader",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "SampleTable",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "VideoHeader",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (12, TagKitDef {
            id: 12,
            name: "HandlerVendorID",
            format: "undef[4]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_19),
            value_conv: None,
            subdirectory: None,
        }),
        (24, TagKitDef {
            id: 24,
            name: "HandlerDescription",
            format: "string",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ItemPropertyContainer",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ItemPropertyAssociation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("parsed, but not extracted as a tag"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AuxiliaryImageType",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AV1Configuration",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "CleanAperture",
            format: "rational64s",
            groups: HashMap::new(),
            writable: false,
            notes: Some("4 numbers: width, height, left and top"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ContentLightLevel",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ICC_Profile",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ColorRepresentation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "HEVCConfiguration",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Rotation",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_20),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ImageSpatialExtent",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val =~ tr/ /x/; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "PixelAspectRatio",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ImagePixelDepth",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "RelativeLocation",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Projection",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "MetadataSource",
            format: "undef",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val=~tr/\\0//d; $val"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CubemapProj",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "EquirectangularProj",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ProjectionHeader",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Meta",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "MovieFragmentHeader",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "TrackFragment",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Meta",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
    ]
}
