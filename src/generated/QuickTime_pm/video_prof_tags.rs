//! Generated tag table definitions from QuickTime::VideoProf
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_1b::ast_print_1b836ed3009794ff;
use crate::generated::functions::hash_42::ast_print_422bfca23e0caff5;
use crate::generated::functions::hash_4e::ast_print_4e5e992f9b388e54;
use crate::generated::functions::hash_8f::ast_print_8f60444a6530198d;
use crate::generated::functions::hash_c0::ast_print_c0a8bf21acb9deb1;
use crate::generated::functions::hash_fd::ast_value_fdcd5166daf4068;

/// Tag definitions for QuickTime::VideoProf table
pub static QUICK_TIME_VIDEOPROF_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "VideoProfileVersion",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            2,
            TagInfo {
                name: "VideoCodec",
                format: "undef[4]",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            3,
            TagInfo {
                name: "VideoCodecInfo",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_1b836ed3009794ff)),
                value_conv: None,
            },
        ),
        (
            4,
            TagInfo {
                name: "VideoAttributes",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            5,
            TagInfo {
                name: "VideoAvgBitrate",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_8f60444a6530198d)),
                value_conv: Some(ValueConv::Function(ast_value_fdcd5166daf4068)),
            },
        ),
        (
            6,
            TagInfo {
                name: "VideoMaxBitrate",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_8f60444a6530198d)),
                value_conv: Some(ValueConv::Function(ast_value_fdcd5166daf4068)),
            },
        ),
        (
            7,
            TagInfo {
                name: "VideoAvgFrameRate",
                format: "fixed32u",
                print_conv: Some(PrintConv::Function(ast_print_c0a8bf21acb9deb1)),
                value_conv: None,
            },
        ),
        (
            8,
            TagInfo {
                name: "VideoMaxFrameRate",
                format: "fixed32u",
                print_conv: Some(PrintConv::Function(ast_print_c0a8bf21acb9deb1)),
                value_conv: None,
            },
        ),
        (
            9,
            TagInfo {
                name: "VideoSize",
                format: "int16u[2]",
                print_conv: Some(PrintConv::Function(ast_print_4e5e992f9b388e54)),
                value_conv: None,
            },
        ),
        (
            10,
            TagInfo {
                name: "PixelAspectRatio",
                format: "int16u[2]",
                print_conv: Some(PrintConv::Function(ast_print_422bfca23e0caff5)),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = QUICK_TIME_VIDEOPROF_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value, None),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = QUICK_TIME_VIDEOPROF_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value, None),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
