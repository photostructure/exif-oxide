//! Generated tag table definitions from QuickTime::MovieHeader
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{
    exposuretime_print_conv, fnumber_print_conv, gpsaltitude_print_conv, lensinfo_print_conv,
    print_fraction,
};
use crate::implementations::value_conv::{
    exif_date_value_conv, gps_coordinate_value_conv, gpstimestamp_value_conv,
    reciprocal_10_value_conv, reference_long_string_value_conv,
    reference_very_long_string_value_conv,
};

/// Tag definitions for QuickTime::MovieHeader table
pub static QUICK_TIME_MOVIEHEADER_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (0, TagInfo {
            name: "MovieHeaderVersion",
            format: "int8u",
            print_conv: None,
            value_conv: None,
        }),
        (1, TagInfo {
            name: "CreateDate",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("$self->ConvertDateTime($val)".to_string())),
            value_conv: Some(ValueConv::Expression("ConvertUnixTime($val, $self->Options(\"QuickTimeUTC\") || $$self{FileType} eq \"CR3\")".to_string())),
        }),
        (2, TagInfo {
            name: "ModifyDate",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("$self->ConvertDateTime($val)".to_string())),
            value_conv: Some(ValueConv::Expression("ConvertUnixTime($val, $self->Options(\"QuickTimeUTC\") || $$self{FileType} eq \"CR3\")".to_string())),
        }),
        (3, TagInfo {
            name: "TimeScale",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (4, TagInfo {
            name: "Duration",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("$$self{TimeScale} ? ConvertDuration($val) : $val".to_string())),
            value_conv: Some(ValueConv::Expression("$$self{TimeScale} ? $val / $$self{TimeScale} : $val".to_string())),
        }),
        (5, TagInfo {
            name: "PreferredRate",
            format: "unknown",
            print_conv: None,
            value_conv: Some(ValueConv::Expression("$val / 0x10000".to_string())),
        }),
        (6, TagInfo {
            name: "PreferredVolume",
            format: "int16u",
            print_conv: Some(PrintConv::Expression("sprintf(\"%.2f%%\", $val * 100)".to_string())),
            value_conv: Some(ValueConv::Expression("$val / 256".to_string())),
        }),
        (9, TagInfo {
            name: "MatrixStructure",
            format: "fixed32s[9]",
            print_conv: None,
            value_conv: Some(ValueConv::Expression("\n            my @a = split ' ',$val;\n            $_ /= 0x4000 foreach @a[2,5,8];\n            return \"@a\";\n        ".to_string())),
        }),
        (18, TagInfo {
            name: "PreviewTime",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("$$self{TimeScale} ? ConvertDuration($val) : $val".to_string())),
            value_conv: Some(ValueConv::Expression("$$self{TimeScale} ? $val / $$self{TimeScale} : $val".to_string())),
        }),
        (19, TagInfo {
            name: "PreviewDuration",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("$$self{TimeScale} ? ConvertDuration($val) : $val".to_string())),
            value_conv: Some(ValueConv::Expression("$$self{TimeScale} ? $val / $$self{TimeScale} : $val".to_string())),
        }),
        (20, TagInfo {
            name: "PosterTime",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("$$self{TimeScale} ? ConvertDuration($val) : $val".to_string())),
            value_conv: Some(ValueConv::Expression("$$self{TimeScale} ? $val / $$self{TimeScale} : $val".to_string())),
        }),
        (21, TagInfo {
            name: "SelectionTime",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("$$self{TimeScale} ? ConvertDuration($val) : $val".to_string())),
            value_conv: Some(ValueConv::Expression("$$self{TimeScale} ? $val / $$self{TimeScale} : $val".to_string())),
        }),
        (22, TagInfo {
            name: "SelectionDuration",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("$$self{TimeScale} ? ConvertDuration($val) : $val".to_string())),
            value_conv: Some(ValueConv::Expression("$$self{TimeScale} ? $val / $$self{TimeScale} : $val".to_string())),
        }),
        (23, TagInfo {
            name: "CurrentTime",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("$$self{TimeScale} ? ConvertDuration($val) : $val".to_string())),
            value_conv: Some(ValueConv::Expression("$$self{TimeScale} ? $val / $$self{TimeScale} : $val".to_string())),
        }),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = QUICK_TIME_MOVIEHEADER_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = QUICK_TIME_MOVIEHEADER_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
