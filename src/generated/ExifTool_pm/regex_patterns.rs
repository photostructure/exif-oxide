//! Regex patterns for file type detection
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

use std::collections::HashMap;
use std::sync::LazyLock;

/// Regex patterns for file type detection
pub static REGEX_PATTERNS: LazyLock<HashMap<&'static str, &'static [u8]>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("AA", &[0x2eu8, 0x7bu8, 0x34u8, 0x7du8, 0x57u8, 0x90u8, 0x75u8, 0x36u8] as &[u8]);
    map.insert("AAC", &[0xffu8, 0x5bu8, 0xf0u8, 0xf1u8, 0x5du8] as &[u8]);
    map.insert("AIFF", &[0x28u8, 0x46u8, 0x4fu8, 0x52u8, 0x4du8, 0x2eu8, 0x2eu8, 0x2eu8, 0x2eu8, 0x41u8, 0x49u8, 0x46u8, 0x5bu8, 0x46u8, 0x43u8, 0x5du8, 0x7cu8, 0x41u8, 0x54u8, 0x26u8, 0x54u8, 0x46u8, 0x4fu8, 0x52u8, 0x4du8, 0x29u8] as &[u8]);
    map.insert("ALIAS", &[0x62u8, 0x6fu8, 0x6fu8, 0x6bu8, 0x00u8, 0x00u8, 0x00u8, 0x00u8, 0x6du8, 0x61u8, 0x72u8, 0x6bu8, 0x00u8, 0x00u8, 0x00u8, 0x00u8] as &[u8]);
    map.insert("APE", &[0x28u8, 0x4du8, 0x41u8, 0x43u8, 0x20u8, 0x7cu8, 0x41u8, 0x50u8, 0x45u8, 0x54u8, 0x41u8, 0x47u8, 0x45u8, 0x58u8, 0x7cu8, 0x49u8, 0x44u8, 0x33u8, 0x29u8] as &[u8]);
    map.insert("ASF", &[0x30u8, 0x26u8, 0xb2u8, 0x75u8, 0x8eu8, 0x66u8, 0xcfu8, 0x11u8, 0xa6u8, 0xd9u8, 0x00u8, 0xaau8, 0x00u8, 0x62u8, 0xceu8, 0x6cu8] as &[u8]);
    map.insert("AVC", &[0x5cu8, 0x2bu8, 0x41u8, 0x5cu8, 0x2bu8, 0x56u8, 0x5cu8, 0x2bu8, 0x43u8, 0x5cu8, 0x2bu8] as &[u8]);
    map.insert("BMP", &[0x42u8, 0x4du8] as &[u8]);
    map.insert("BPG", &[0x42u8, 0x50u8, 0x47u8, 0xfdu8] as &[u8]);
    map.insert("BTF", &[0x28u8, 0x49u8, 0x49u8, 0x2bu8, 0x5cu8, 0x30u8, 0x7cu8, 0x4du8, 0x4du8, 0x5cu8, 0x30u8, 0x2bu8, 0x29u8] as &[u8]);
    map.insert("BZ2", &[0x42u8, 0x5au8, 0x68u8, 0x5bu8, 0x31u8, 0x2du8, 0x39u8, 0x5du8, 0x31u8, 0x41u8, 0x59u8, 0x26u8, 0x53u8, 0x59u8] as &[u8]);
    map.insert("CHM", &[0x49u8, 0x54u8, 0x53u8, 0x46u8, 0x2eu8, 0x7bu8, 0x32u8, 0x30u8, 0x7du8, 0x10u8, 0xfdu8, 0x01u8, 0x7cu8, 0xaau8, 0x7bu8, 0xd0u8, 0x11u8, 0x9eu8, 0x0cu8, 0x5cu8, 0x30u8, 0xa0u8, 0xc9u8, 0x22u8, 0xe6u8, 0xecu8] as &[u8]);
    map.insert("CRW", &[0x28u8, 0x49u8, 0x49u8, 0x7cu8, 0x4du8, 0x4du8, 0x29u8, 0x2eu8, 0x7bu8, 0x34u8, 0x7du8, 0x48u8, 0x45u8, 0x41u8, 0x50u8, 0x28u8, 0x43u8, 0x43u8, 0x44u8, 0x52u8, 0x7cu8, 0x4au8, 0x50u8, 0x47u8, 0x4du8, 0x29u8] as &[u8]);
    map.insert("CZI", &[0x5au8, 0x49u8, 0x53u8, 0x52u8, 0x41u8, 0x57u8, 0x46u8, 0x49u8, 0x4cu8, 0x45u8, 0x5cu8, 0x30u8, 0x7bu8, 0x36u8, 0x7du8] as &[u8]);
    map.insert("DCX", &[0xb1u8, 0x68u8, 0xdeu8, 0x3au8] as &[u8]);
    map.insert("DEX", &[0x64u8, 0x65u8, 0x78u8, 0x0au8, 0x30u8, 0x33u8, 0x35u8, 0x00u8] as &[u8]);
    map.insert("DICOM", &[0x28u8, 0x2eu8, 0x7bu8, 0x31u8, 0x32u8, 0x38u8, 0x7du8, 0x44u8, 0x49u8, 0x43u8, 0x4du8, 0x7cu8, 0x5cu8, 0x30u8, 0x5bu8, 0x02u8, 0x04u8, 0x06u8, 0x08u8, 0x5du8, 0x5cu8, 0x30u8, 0x5bu8, 0x5cu8, 0x30u8, 0x2du8, 0x20u8, 0x5du8, 0x7cu8, 0x5bu8, 0x02u8, 0x04u8, 0x06u8, 0x08u8, 0x5du8, 0x5cu8, 0x30u8, 0x5bu8, 0x5cu8, 0x30u8, 0x2du8, 0x20u8, 0x5du8, 0x5cu8, 0x30u8, 0x29u8] as &[u8]);
    map.insert("DOCX", &[0x50u8, 0x4bu8, 0x03u8, 0x04u8] as &[u8]);
    map.insert("DPX", &[0x28u8, 0x53u8, 0x44u8, 0x50u8, 0x58u8, 0x7cu8, 0x58u8, 0x50u8, 0x44u8, 0x53u8, 0x29u8] as &[u8]);
    map.insert("DR4", &[0x49u8, 0x49u8, 0x49u8, 0x49u8, 0x5bu8, 0x04u8, 0x7cu8, 0x05u8, 0x5du8, 0x5cu8, 0x30u8, 0x04u8, 0x5cu8, 0x30u8] as &[u8]);
    map.insert("DSS", &[0x28u8, 0x02u8, 0x64u8, 0x73u8, 0x73u8, 0x7cu8, 0x03u8, 0x64u8, 0x73u8, 0x32u8, 0x29u8] as &[u8]);
    map.insert("DV", &[0x1fu8, 0x07u8, 0x5cu8, 0x30u8, 0x5bu8, 0x3fu8, 0xbfu8, 0x5du8] as &[u8]);
    map.insert("DWF", &[0x5cu8, 0x28u8, 0x44u8, 0x57u8, 0x46u8, 0x20u8, 0x56u8, 0x5cu8, 0x64u8] as &[u8]);
    map.insert("DWG", &[0x41u8, 0x43u8, 0x31u8, 0x30u8, 0x5cu8, 0x64u8, 0x7bu8, 0x32u8, 0x7du8, 0x5cu8, 0x30u8] as &[u8]);
    map.insert("DXF", &[0x5cu8, 0x73u8, 0x2au8, 0x30u8, 0x5cu8, 0x73u8, 0x2bu8, 0x5cu8, 0x30u8, 0x3fu8, 0x5cu8, 0x73u8, 0x2au8, 0x53u8, 0x45u8, 0x43u8, 0x54u8, 0x49u8, 0x4fu8, 0x4eu8, 0x5cu8, 0x73u8, 0x2bu8, 0x32u8, 0x5cu8, 0x73u8, 0x2bu8, 0x48u8, 0x45u8, 0x41u8, 0x44u8, 0x45u8, 0x52u8] as &[u8]);
    map.insert("EPS", &[0x28u8, 0x25u8, 0x21u8, 0x50u8, 0x53u8, 0x7cu8, 0x25u8, 0x21u8, 0x41u8, 0x64u8, 0x7cu8, 0xc5u8, 0xd0u8, 0xd3u8, 0xc6u8, 0x29u8] as &[u8]);
    map.insert("EXE", &[0x28u8, 0x4du8, 0x5au8, 0x7cu8, 0xcau8, 0xfeu8, 0xbau8, 0xbeu8, 0x7cu8, 0xfeu8, 0xedu8, 0xfau8, 0x5bu8, 0xceu8, 0xcfu8, 0x5du8, 0x7cu8, 0x5bu8, 0xceu8, 0xcfu8, 0x5du8, 0xfau8, 0xedu8, 0xfeu8, 0x7cu8, 0x4au8, 0x6fu8, 0x79u8, 0x21u8, 0x70u8, 0x65u8, 0x66u8, 0x66u8, 0x7cu8, 0x7fu8, 0x45u8, 0x4cu8, 0x46u8, 0x7cu8, 0x23u8, 0x21u8, 0x5cu8, 0x73u8, 0x2au8, 0x2fu8, 0x5cu8, 0x53u8, 0x2au8, 0x62u8, 0x69u8, 0x6eu8, 0x2fu8, 0x7cu8, 0x21u8, 0x3cu8, 0x61u8, 0x72u8, 0x63u8, 0x68u8, 0x3eu8, 0x0au8, 0x29u8] as &[u8]);
    map.insert("EXIF", &[0x28u8, 0x49u8, 0x49u8, 0x2au8, 0x5cu8, 0x30u8, 0x7cu8, 0x4du8, 0x4du8, 0x5cu8, 0x30u8, 0x2au8, 0x29u8] as &[u8]);
    map.insert("EXR", &[0x76u8, 0x2fu8, 0x31u8, 0x01u8] as &[u8]);
    map.insert("EXV", &[0xffu8, 0x01u8, 0x45u8, 0x78u8, 0x69u8, 0x76u8, 0x32u8] as &[u8]);
    map.insert("FITS", &[0x53u8, 0x49u8, 0x4du8, 0x50u8, 0x4cu8, 0x45u8, 0x20u8, 0x20u8, 0x3du8, 0x20u8, 0x7bu8, 0x32u8, 0x30u8, 0x7du8, 0x54u8] as &[u8]);
    map.insert("FLAC", &[0x28u8, 0x66u8, 0x4cu8, 0x61u8, 0x43u8, 0x7cu8, 0x49u8, 0x44u8, 0x33u8, 0x29u8] as &[u8]);
    map.insert("FLIF", &[0x46u8, 0x4cu8, 0x49u8, 0x46u8, 0x5bu8, 0x30u8, 0x2du8, 0x6fu8, 0x5du8, 0x5bu8, 0x30u8, 0x2du8, 0x32u8, 0x5du8] as &[u8]);
    map.insert("FLIR", &[0x5bu8, 0x41u8, 0x46u8, 0x5du8, 0x46u8, 0x46u8, 0x5cu8, 0x30u8] as &[u8]);
    map.insert("FLV", &[0x46u8, 0x4cu8, 0x56u8, 0x01u8] as &[u8]);
    map.insert("FPF", &[0x46u8, 0x50u8, 0x46u8, 0x20u8, 0x50u8, 0x75u8, 0x62u8, 0x6cu8, 0x69u8, 0x63u8, 0x20u8, 0x49u8, 0x6du8, 0x61u8, 0x67u8, 0x65u8, 0x20u8, 0x46u8, 0x6fu8, 0x72u8, 0x6du8, 0x61u8, 0x74u8, 0x5cu8, 0x30u8] as &[u8]);
    map.insert("FPX", &[0xd0u8, 0xcfu8, 0x11u8, 0xe0u8, 0xa1u8, 0xb1u8, 0x1au8, 0xe1u8] as &[u8]);
    map.insert("Font", &[0x28u8, 0x28u8, 0x5cu8, 0x30u8, 0x01u8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x7cu8, 0x4fu8, 0x54u8, 0x54u8, 0x4fu8, 0x7cu8, 0x74u8, 0x72u8, 0x75u8, 0x65u8, 0x7cu8, 0x74u8, 0x79u8, 0x70u8, 0x31u8, 0x29u8, 0x5bu8, 0x5cu8, 0x30u8, 0x01u8, 0x5du8, 0x7cu8, 0x74u8, 0x74u8, 0x63u8, 0x66u8, 0x5cu8, 0x30u8, 0x5bu8, 0x01u8, 0x02u8, 0x5du8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x7cu8, 0x5cu8, 0x30u8, 0x5bu8, 0x01u8, 0x02u8, 0x5du8, 0x7cu8, 0x28u8, 0x2eu8, 0x7bu8, 0x36u8, 0x7du8, 0x29u8, 0x3fu8, 0x25u8, 0x21u8, 0x28u8, 0x50u8, 0x53u8, 0x2du8, 0x28u8, 0x41u8, 0x64u8, 0x6fu8, 0x62u8, 0x65u8, 0x46u8, 0x6fu8, 0x6eu8, 0x74u8, 0x2du8, 0x7cu8, 0x42u8, 0x69u8, 0x74u8, 0x73u8, 0x74u8, 0x72u8, 0x65u8, 0x61u8, 0x6du8, 0x20u8, 0x29u8, 0x7cu8, 0x46u8, 0x6fu8, 0x6eu8, 0x74u8, 0x54u8, 0x79u8, 0x70u8, 0x65u8, 0x31u8, 0x2du8, 0x29u8, 0x7cu8, 0x53u8, 0x74u8, 0x61u8, 0x72u8, 0x74u8, 0x28u8, 0x43u8, 0x6fu8, 0x6du8, 0x70u8, 0x7cu8, 0x4du8, 0x61u8, 0x73u8, 0x74u8, 0x65u8, 0x72u8, 0x29u8, 0x3fu8, 0x46u8, 0x6fu8, 0x6eu8, 0x74u8, 0x4du8, 0x65u8, 0x74u8, 0x72u8, 0x69u8, 0x63u8, 0x73u8, 0x7cu8, 0x77u8, 0x4fu8, 0x46u8, 0x5bu8, 0x46u8, 0x32u8, 0x5du8, 0x29u8] as &[u8]);
    map.insert("GIF", &[0x47u8, 0x49u8, 0x46u8, 0x38u8, 0x5bu8, 0x37u8, 0x39u8, 0x5du8, 0x61u8] as &[u8]);
    map.insert("GZIP", &[0x1fu8, 0x8bu8, 0x08u8] as &[u8]);
    map.insert("HDR", &[0x23u8, 0x5cu8, 0x3fu8, 0x28u8, 0x52u8, 0x41u8, 0x44u8, 0x49u8, 0x41u8, 0x4eu8, 0x43u8, 0x45u8, 0x7cu8, 0x52u8, 0x47u8, 0x42u8, 0x45u8, 0x29u8, 0x0au8] as &[u8]);
    map.insert("HTML", &[0x28u8, 0xefu8, 0xbbu8, 0xbfu8, 0x29u8, 0x3fu8, 0x5cu8, 0x73u8, 0x2au8, 0x28u8, 0x3fu8, 0x69u8, 0x29u8, 0x3cu8, 0x28u8, 0x21u8, 0x44u8, 0x4fu8, 0x43u8, 0x54u8, 0x59u8, 0x50u8, 0x45u8, 0x5cu8, 0x73u8, 0x2bu8, 0x48u8, 0x54u8, 0x4du8, 0x4cu8, 0x7cu8, 0x48u8, 0x54u8, 0x4du8, 0x4cu8, 0x7cu8, 0x5cu8, 0x3fu8, 0x78u8, 0x6du8, 0x6cu8, 0x29u8] as &[u8]);
    map.insert("ICC", &[0x2eu8, 0x7bu8, 0x31u8, 0x32u8, 0x7du8, 0x28u8, 0x73u8, 0x63u8, 0x6eu8, 0x72u8, 0x7cu8, 0x6du8, 0x6eu8, 0x74u8, 0x72u8, 0x7cu8, 0x70u8, 0x72u8, 0x74u8, 0x72u8, 0x7cu8, 0x6cu8, 0x69u8, 0x6eu8, 0x6bu8, 0x7cu8, 0x73u8, 0x70u8, 0x61u8, 0x63u8, 0x7cu8, 0x61u8, 0x62u8, 0x73u8, 0x74u8, 0x7cu8, 0x6eu8, 0x6du8, 0x63u8, 0x6cu8, 0x7cu8, 0x6eu8, 0x6bu8, 0x70u8, 0x66u8, 0x7cu8, 0x63u8, 0x65u8, 0x6eu8, 0x63u8, 0x7cu8, 0x6du8, 0x69u8, 0x64u8, 0x20u8, 0x7cu8, 0x6du8, 0x6cu8, 0x6eu8, 0x6bu8, 0x7cu8, 0x6du8, 0x76u8, 0x69u8, 0x73u8, 0x29u8, 0x28u8, 0x58u8, 0x59u8, 0x5au8, 0x20u8, 0x7cu8, 0x4cu8, 0x61u8, 0x62u8, 0x20u8, 0x7cu8, 0x4cu8, 0x75u8, 0x76u8, 0x20u8, 0x7cu8, 0x59u8, 0x43u8, 0x62u8, 0x72u8, 0x7cu8, 0x59u8, 0x78u8, 0x79u8, 0x20u8, 0x7cu8, 0x52u8, 0x47u8, 0x42u8, 0x20u8, 0x7cu8, 0x47u8, 0x52u8, 0x41u8, 0x59u8, 0x7cu8, 0x48u8, 0x53u8, 0x56u8, 0x20u8, 0x7cu8, 0x48u8, 0x4cu8, 0x53u8, 0x20u8, 0x7cu8, 0x43u8, 0x4du8, 0x59u8, 0x4bu8, 0x7cu8, 0x43u8, 0x4du8, 0x59u8, 0x20u8, 0x7cu8, 0x5bu8, 0x32u8, 0x2du8, 0x39u8, 0x41u8, 0x2du8, 0x46u8, 0x5du8, 0x43u8, 0x4cu8, 0x52u8, 0x7cu8, 0x6eu8, 0x63u8, 0x2eu8, 0x2eu8, 0x7cu8, 0x5cu8, 0x30u8, 0x7bu8, 0x34u8, 0x7du8, 0x29u8, 0x7bu8, 0x32u8, 0x7du8] as &[u8]);
    map.insert("ICO", &[0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x5bu8, 0x01u8, 0x02u8, 0x5du8, 0x5cu8, 0x30u8, 0x5bu8, 0x5eu8, 0x30u8, 0x5du8, 0x5cu8, 0x30u8] as &[u8]);
    map.insert("IND", &[0x06u8, 0x06u8, 0xedu8, 0xf5u8, 0xd8u8, 0x1du8, 0x46u8, 0xe5u8, 0xbdu8, 0x31u8, 0xefu8, 0xe7u8, 0xfeu8, 0x74u8, 0xb7u8, 0x1du8] as &[u8]);
    map.insert("ITC", &[0x2eu8, 0x7bu8, 0x34u8, 0x7du8, 0x69u8, 0x74u8, 0x63u8, 0x68u8] as &[u8]);
    map.insert("JP2", &[0x28u8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x0cu8, 0x6au8, 0x50u8, 0x28u8, 0x20u8, 0x20u8, 0x7cu8, 0x1au8, 0x1au8, 0x29u8, 0x0du8, 0x0au8, 0x87u8, 0x0au8, 0x7cu8, 0xffu8, 0x4fu8, 0xffu8, 0x51u8, 0x5cu8, 0x30u8, 0x29u8] as &[u8]);
    map.insert("JPEG", &[0xffu8, 0xd8u8, 0xffu8] as &[u8]);
    map.insert("JSON", &[0x28u8, 0xefu8, 0xbbu8, 0xbfu8, 0x29u8, 0x3fu8, 0x5cu8, 0x73u8, 0x2au8, 0x28u8, 0x5cu8, 0x5bu8, 0x5cu8, 0x73u8, 0x2au8, 0x29u8, 0x3fu8, 0x5cu8, 0x7bu8, 0x5cu8, 0x73u8, 0x2au8, 0x22u8, 0x5bu8, 0x5eu8, 0x22u8, 0x5du8, 0x2au8, 0x22u8, 0x5cu8, 0x73u8, 0x2au8, 0x3au8] as &[u8]);
    map.insert("JUMBF", &[0x2eu8, 0x7bu8, 0x34u8, 0x7du8, 0x6au8, 0x75u8, 0x6du8, 0x62u8, 0x5cu8, 0x30u8, 0x2eu8, 0x7bu8, 0x33u8, 0x7du8, 0x6au8, 0x75u8, 0x6du8, 0x64u8] as &[u8]);
    map.insert("JXL", &[0x28u8, 0xffu8, 0x0au8, 0x7cu8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x0cu8, 0x4au8, 0x58u8, 0x4cu8, 0x20u8, 0x0du8, 0x0au8, 0x2eu8, 0x2eu8, 0x2eu8, 0x2eu8, 0x2eu8, 0x2eu8, 0x66u8, 0x74u8, 0x79u8, 0x70u8, 0x6au8, 0x78u8, 0x6cu8, 0x20u8, 0x29u8] as &[u8]);
    map.insert("LFP", &[0x89u8, 0x4cu8, 0x46u8, 0x50u8, 0x0du8, 0x0au8, 0x1au8, 0x0au8] as &[u8]);
    map.insert("LIF", &[0x70u8, 0x5cu8, 0x30u8, 0x7bu8, 0x33u8, 0x7du8, 0x2eu8, 0x7bu8, 0x34u8, 0x7du8, 0x2au8, 0x2eu8, 0x7bu8, 0x34u8, 0x7du8, 0x3cu8, 0x5cu8, 0x30u8] as &[u8]);
    map.insert("LNK", &[0x2eu8, 0x7bu8, 0x34u8, 0x7du8, 0x01u8, 0x14u8, 0x02u8, 0x5cu8, 0x30u8, 0x7bu8, 0x35u8, 0x7du8, 0xc0u8, 0x5cu8, 0x30u8, 0x7bu8, 0x36u8, 0x7du8, 0x46u8] as &[u8]);
    map.insert("LRI", &[0x4cu8, 0x45u8, 0x4cu8, 0x52u8, 0x20u8, 0x5cu8, 0x30u8] as &[u8]);
    map.insert("M2TS", &[0x28u8, 0x2eu8, 0x2eu8, 0x2eu8, 0x2eu8, 0x29u8, 0x3fu8, 0x47u8] as &[u8]);
    map.insert("MIE", &[0x7eu8, 0x5bu8, 0x10u8, 0x18u8, 0x5du8, 0x04u8, 0x2eu8, 0x30u8, 0x4du8, 0x49u8, 0x45u8] as &[u8]);
    map.insert("MIFF", &[0x69u8, 0x64u8, 0x3du8, 0x49u8, 0x6du8, 0x61u8, 0x67u8, 0x65u8, 0x4du8, 0x61u8, 0x67u8, 0x69u8, 0x63u8, 0x6bu8] as &[u8]);
    map.insert("MKV", &[0x1au8, 0x45u8, 0xdfu8, 0xa3u8] as &[u8]);
    map.insert("MOI", &[0x56u8, 0x36u8] as &[u8]);
    map.insert("MOV", &[0x2eu8, 0x7bu8, 0x34u8, 0x7du8, 0x28u8, 0x66u8, 0x72u8, 0x65u8, 0x65u8, 0x7cu8, 0x73u8, 0x6bu8, 0x69u8, 0x70u8, 0x7cu8, 0x77u8, 0x69u8, 0x64u8, 0x65u8, 0x7cu8, 0x66u8, 0x74u8, 0x79u8, 0x70u8, 0x7cu8, 0x70u8, 0x6eu8, 0x6fu8, 0x74u8, 0x7cu8, 0x50u8, 0x49u8, 0x43u8, 0x54u8, 0x7cu8, 0x70u8, 0x69u8, 0x63u8, 0x74u8, 0x7cu8, 0x6du8, 0x6fu8, 0x6fu8, 0x76u8, 0x7cu8, 0x6du8, 0x64u8, 0x61u8, 0x74u8, 0x7cu8, 0x6au8, 0x75u8, 0x6eu8, 0x6bu8, 0x7cu8, 0x75u8, 0x75u8, 0x69u8, 0x64u8, 0x29u8] as &[u8]);
    map.insert("MPC", &[0x28u8, 0x4du8, 0x50u8, 0x5cu8, 0x2bu8, 0x7cu8, 0x49u8, 0x44u8, 0x33u8, 0x29u8] as &[u8]);
    map.insert("MPEG", &[0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x01u8, 0x5bu8, 0xb0u8, 0x2du8, 0xbfu8, 0x5du8] as &[u8]);
    map.insert("MRC", &[0x2eu8, 0x7bu8, 0x36u8, 0x34u8, 0x7du8, 0x5bu8, 0x01u8, 0x02u8, 0x03u8, 0x5du8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x5bu8, 0x01u8, 0x02u8, 0x03u8, 0x5du8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x5bu8, 0x01u8, 0x02u8, 0x03u8, 0x5du8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x2eu8, 0x7bu8, 0x31u8, 0x33u8, 0x32u8, 0x7du8, 0x4du8, 0x41u8, 0x50u8, 0x5bu8, 0x5cu8, 0x30u8, 0x20u8, 0x5du8, 0x28u8, 0x44u8, 0x44u8, 0x7cu8, 0x44u8, 0x41u8, 0x7cu8, 0x11u8, 0x11u8, 0x29u8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8] as &[u8]);
    map.insert("MRW", &[0x5cu8, 0x30u8, 0x4du8, 0x52u8, 0x5bu8, 0x4du8, 0x49u8, 0x5du8] as &[u8]);
    map.insert("MXF", &[0x06u8, 0x0eu8, 0x2bu8, 0x34u8, 0x02u8, 0x05u8, 0x01u8, 0x01u8, 0x0du8, 0x01u8, 0x02u8] as &[u8]);
    map.insert("MacOS", &[0x5cu8, 0x30u8, 0x05u8, 0x16u8, 0x07u8, 0x5cu8, 0x30u8, 0x2eu8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x4du8, 0x61u8, 0x63u8, 0x20u8, 0x4fu8, 0x53u8, 0x20u8, 0x58u8, 0x20u8, 0x20u8, 0x20u8, 0x20u8, 0x20u8, 0x20u8, 0x20u8, 0x20u8] as &[u8]);
    map.insert("NKA", &[0x4eu8, 0x49u8, 0x4bu8, 0x4fu8, 0x4eu8, 0x41u8, 0x44u8, 0x4au8] as &[u8]);
    map.insert("OGG", &[0x28u8, 0x4fu8, 0x67u8, 0x67u8, 0x53u8, 0x7cu8, 0x49u8, 0x44u8, 0x33u8, 0x29u8] as &[u8]);
    map.insert("ORF", &[0x28u8, 0x49u8, 0x49u8, 0x7cu8, 0x4du8, 0x4du8, 0x29u8] as &[u8]);
    map.insert("PCAP", &[0xa1u8, 0xb2u8, 0x28u8, 0xc3u8, 0xd4u8, 0x7cu8, 0x3cu8, 0x4du8, 0x29u8, 0x5cu8, 0x30u8, 0x2eu8, 0x5cu8, 0x30u8, 0x2eu8, 0x7cu8, 0x28u8, 0xd4u8, 0xc3u8, 0x7cu8, 0x4du8, 0x3cu8, 0x29u8, 0xb2u8, 0xa1u8, 0x2eu8, 0x5cu8, 0x30u8, 0x2eu8, 0x5cu8, 0x30u8, 0x7cu8, 0x0au8, 0x0du8, 0x0du8, 0x0au8, 0x2eu8, 0x7bu8, 0x34u8, 0x7du8, 0x28u8, 0x1au8, 0x2bu8, 0x3cu8, 0x4du8, 0x7cu8, 0x4du8, 0x3cu8, 0x2bu8, 0x1au8, 0x29u8, 0x7cu8, 0x47u8, 0x4du8, 0x42u8, 0x55u8, 0x5cu8, 0x30u8, 0x02u8] as &[u8]);
    map.insert("PCX", &[0x0au8, 0x5bu8, 0x5cu8, 0x30u8, 0x2du8, 0x05u8, 0x5du8, 0x01u8, 0x5bu8, 0x01u8, 0x02u8, 0x04u8, 0x08u8, 0x5du8, 0x2eu8, 0x7bu8, 0x36u8, 0x34u8, 0x7du8, 0x5bu8, 0x5cu8, 0x30u8, 0x2du8, 0x02u8, 0x5du8] as &[u8]);
    map.insert("PDB", &[0x2eu8, 0x7bu8, 0x36u8, 0x30u8, 0x7du8, 0x28u8, 0x5cu8, 0x2eu8, 0x70u8, 0x64u8, 0x66u8, 0x41u8, 0x44u8, 0x42u8, 0x45u8, 0x7cu8, 0x54u8, 0x45u8, 0x58u8, 0x74u8, 0x52u8, 0x45u8, 0x41u8, 0x64u8, 0x7cu8, 0x42u8, 0x56u8, 0x6fu8, 0x6bu8, 0x42u8, 0x44u8, 0x49u8, 0x43u8, 0x7cu8, 0x44u8, 0x42u8, 0x39u8, 0x39u8, 0x44u8, 0x42u8, 0x4fu8, 0x53u8, 0x7cu8, 0x50u8, 0x4eu8, 0x52u8, 0x64u8, 0x50u8, 0x50u8, 0x72u8, 0x73u8, 0x7cu8, 0x44u8, 0x61u8, 0x74u8, 0x61u8, 0x50u8, 0x50u8, 0x72u8, 0x73u8, 0x7cu8, 0x76u8, 0x49u8, 0x4du8, 0x47u8, 0x56u8, 0x69u8, 0x65u8, 0x77u8, 0x7cu8, 0x50u8, 0x6du8, 0x44u8, 0x42u8, 0x50u8, 0x6du8, 0x44u8, 0x42u8, 0x7cu8, 0x49u8, 0x6eu8, 0x66u8, 0x6fu8, 0x49u8, 0x4eu8, 0x44u8, 0x42u8, 0x7cu8, 0x54u8, 0x6fu8, 0x47u8, 0x6fu8, 0x54u8, 0x6fu8, 0x47u8, 0x6fu8, 0x7cu8, 0x53u8, 0x44u8, 0x6fu8, 0x63u8, 0x53u8, 0x69u8, 0x6cu8, 0x58u8, 0x7cu8, 0x4au8, 0x62u8, 0x44u8, 0x62u8, 0x4au8, 0x42u8, 0x61u8, 0x73u8, 0x7cu8, 0x4au8, 0x66u8, 0x44u8, 0x62u8, 0x4au8, 0x46u8, 0x69u8, 0x6cu8, 0x7cu8, 0x44u8, 0x41u8, 0x54u8, 0x41u8, 0x4cu8, 0x53u8, 0x64u8, 0x62u8, 0x7cu8, 0x4du8, 0x64u8, 0x62u8, 0x31u8, 0x4du8, 0x64u8, 0x62u8, 0x31u8, 0x7cu8, 0x42u8, 0x4fu8, 0x4fu8, 0x4bu8, 0x4du8, 0x4fu8, 0x42u8, 0x49u8, 0x7cu8, 0x44u8, 0x61u8, 0x74u8, 0x61u8, 0x50u8, 0x6cu8, 0x6bu8, 0x72u8, 0x7cu8, 0x44u8, 0x61u8, 0x74u8, 0x61u8, 0x53u8, 0x70u8, 0x72u8, 0x64u8, 0x7cu8, 0x53u8, 0x4du8, 0x30u8, 0x31u8, 0x53u8, 0x4du8, 0x65u8, 0x6du8, 0x7cu8, 0x54u8, 0x45u8, 0x58u8, 0x74u8, 0x54u8, 0x6cu8, 0x44u8, 0x63u8, 0x7cu8, 0x49u8, 0x6eu8, 0x66u8, 0x6fu8, 0x54u8, 0x6cu8, 0x49u8, 0x66u8, 0x7cu8, 0x44u8, 0x61u8, 0x74u8, 0x61u8, 0x54u8, 0x6cu8, 0x4du8, 0x6cu8, 0x7cu8, 0x44u8, 0x61u8, 0x74u8, 0x61u8, 0x54u8, 0x6cu8, 0x50u8, 0x74u8, 0x7cu8, 0x64u8, 0x61u8, 0x74u8, 0x61u8, 0x54u8, 0x44u8, 0x42u8, 0x50u8, 0x7cu8, 0x54u8, 0x64u8, 0x61u8, 0x74u8, 0x54u8, 0x69u8, 0x64u8, 0x65u8, 0x7cu8, 0x54u8, 0x6fu8, 0x52u8, 0x61u8, 0x54u8, 0x52u8, 0x50u8, 0x57u8, 0x7cu8, 0x7au8, 0x54u8, 0x58u8, 0x54u8, 0x47u8, 0x50u8, 0x6cu8, 0x6du8, 0x7cu8, 0x42u8, 0x44u8, 0x4fu8, 0x43u8, 0x57u8, 0x72u8, 0x64u8, 0x53u8, 0x29u8] as &[u8]);
    map.insert("PDF", &[0x5cu8, 0x73u8, 0x2au8, 0x25u8, 0x50u8, 0x44u8, 0x46u8, 0x2du8, 0x5cu8, 0x64u8, 0x2bu8, 0x5cu8, 0x2eu8, 0x5cu8, 0x64u8, 0x2bu8] as &[u8]);
    map.insert("PFM", &[0x50u8, 0x5bu8, 0x46u8, 0x66u8, 0x5du8, 0x0au8, 0x5cu8, 0x64u8, 0x2bu8, 0x20u8, 0x5cu8, 0x64u8, 0x2bu8, 0x0au8, 0x5bu8, 0x2du8, 0x2bu8, 0x30u8, 0x2du8, 0x39u8, 0x2eu8, 0x5du8, 0x2bu8, 0x0au8] as &[u8]);
    map.insert("PGF", &[0x50u8, 0x47u8, 0x46u8] as &[u8]);
    map.insert("PHP", &[0x3cu8, 0x5cu8, 0x3fu8, 0x70u8, 0x68u8, 0x70u8, 0x5cu8, 0x73u8] as &[u8]);
    map.insert("PICT", &[0x28u8, 0x2eu8, 0x7bu8, 0x31u8, 0x30u8, 0x7du8, 0x7cu8, 0x2eu8, 0x7bu8, 0x35u8, 0x32u8, 0x32u8, 0x7du8, 0x29u8, 0x28u8, 0x11u8, 0x01u8, 0x7cu8, 0x00u8, 0x11u8, 0x29u8] as &[u8]);
    map.insert("PLIST", &[0x28u8, 0x62u8, 0x70u8, 0x6cu8, 0x69u8, 0x73u8, 0x74u8, 0x30u8, 0x7cu8, 0x5cu8, 0x73u8, 0x2au8, 0x3cu8, 0x7cu8, 0xfeu8, 0xffu8, 0x00u8, 0x29u8] as &[u8]);
    map.insert("PMP", &[0x2eu8, 0x7bu8, 0x38u8, 0x7du8, 0x5cu8, 0x30u8, 0x7bu8, 0x33u8, 0x7du8, 0x7cu8, 0x2eu8, 0x7bu8, 0x31u8, 0x31u8, 0x32u8, 0x7du8, 0xffu8, 0xd8u8, 0xffu8, 0xdbu8] as &[u8]);
    map.insert("PNG", &[0x28u8, 0x89u8, 0x50u8, 0x7cu8, 0x8au8, 0x4du8, 0x7cu8, 0x8bu8, 0x4au8, 0x29u8, 0x4eu8, 0x47u8, 0x5cu8, 0x72u8, 0x5cu8, 0x6eu8, 0x1au8, 0x5cu8, 0x6eu8] as &[u8]);
    map.insert("PPM", &[0x50u8, 0x5bu8, 0x31u8, 0x2du8, 0x36u8, 0x5du8, 0x5cu8, 0x73u8, 0x2bu8] as &[u8]);
    map.insert("PS", &[0x28u8, 0x25u8, 0x21u8, 0x50u8, 0x53u8, 0x7cu8, 0x25u8, 0x21u8, 0x41u8, 0x64u8, 0x7cu8, 0xc5u8, 0xd0u8, 0xd3u8, 0xc6u8, 0x29u8] as &[u8]);
    map.insert("PSD", &[0x38u8, 0x42u8, 0x50u8, 0x53u8, 0x5cu8, 0x30u8, 0x5bu8, 0x01u8, 0x02u8, 0x5du8] as &[u8]);
    map.insert("PSP", &[0x50u8, 0x61u8, 0x69u8, 0x6eu8, 0x74u8, 0x20u8, 0x53u8, 0x68u8, 0x6fu8, 0x70u8, 0x20u8, 0x50u8, 0x72u8, 0x6fu8, 0x20u8, 0x49u8, 0x6du8, 0x61u8, 0x67u8, 0x65u8, 0x20u8, 0x46u8, 0x69u8, 0x6cu8, 0x65u8, 0x0au8, 0x1au8, 0x5cu8, 0x30u8, 0x7bu8, 0x35u8, 0x7du8] as &[u8]);
    map.insert("QTIF", &[0x2eu8, 0x7bu8, 0x34u8, 0x7du8, 0x28u8, 0x69u8, 0x64u8, 0x73u8, 0x63u8, 0x7cu8, 0x69u8, 0x64u8, 0x61u8, 0x74u8, 0x7cu8, 0x69u8, 0x69u8, 0x63u8, 0x63u8, 0x29u8] as &[u8]);
    map.insert("R3D", &[0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x2eu8, 0x2eu8, 0x52u8, 0x45u8, 0x44u8, 0x28u8, 0x31u8, 0x7cu8, 0x32u8, 0x29u8] as &[u8]);
    map.insert("RAF", &[0x46u8, 0x55u8, 0x4au8, 0x49u8, 0x46u8, 0x49u8, 0x4cu8, 0x4du8] as &[u8]);
    map.insert("RAR", &[0x52u8, 0x61u8, 0x72u8, 0x21u8, 0x1au8, 0x07u8, 0x01u8, 0x3fu8, 0x5cu8, 0x30u8] as &[u8]);
    map.insert("RAW", &[0x28u8, 0x2eu8, 0x7bu8, 0x32u8, 0x35u8, 0x7du8, 0x41u8, 0x52u8, 0x45u8, 0x43u8, 0x4fu8, 0x59u8, 0x4bu8, 0x7cu8, 0x49u8, 0x49u8, 0x7cu8, 0x4du8, 0x4du8, 0x29u8] as &[u8]);
    map.insert("RIFF", &[0x28u8, 0x52u8, 0x49u8, 0x46u8, 0x46u8, 0x7cu8, 0x4cu8, 0x41u8, 0x30u8, 0x5bu8, 0x32u8, 0x33u8, 0x34u8, 0x5du8, 0x7cu8, 0x4fu8, 0x46u8, 0x52u8, 0x20u8, 0x7cu8, 0x4cu8, 0x50u8, 0x41u8, 0x43u8, 0x7cu8, 0x77u8, 0x76u8, 0x70u8, 0x6bu8, 0x7cu8, 0x52u8, 0x46u8, 0x36u8, 0x34u8, 0x29u8] as &[u8]);
    map.insert("RSRC", &[0x28u8, 0x2eu8, 0x2eu8, 0x2eu8, 0x2eu8, 0x29u8, 0x3fu8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x01u8, 0x5cu8, 0x30u8] as &[u8]);
    map.insert("RTF", &[0x5bu8, 0x5cu8, 0x6eu8, 0x5cu8, 0x72u8, 0x5du8, 0x2au8, 0x5cu8, 0x7bu8, 0x5bu8, 0x5cu8, 0x6eu8, 0x5cu8, 0x72u8, 0x5du8, 0x2au8, 0x5cu8, 0x5cu8, 0x72u8, 0x74u8, 0x66u8] as &[u8]);
    map.insert("RWZ", &[0x72u8, 0x61u8, 0x77u8, 0x7au8, 0x6fu8, 0x72u8] as &[u8]);
    map.insert("Real", &[0x28u8, 0x5cu8, 0x2eu8, 0x52u8, 0x4du8, 0x46u8, 0x7cu8, 0x5cu8, 0x2eu8, 0x72u8, 0x61u8, 0xfdu8, 0x7cu8, 0x70u8, 0x6eu8, 0x6du8, 0x3au8, 0x2fu8, 0x2fu8, 0x7cu8, 0x72u8, 0x74u8, 0x73u8, 0x70u8, 0x3au8, 0x2fu8, 0x2fu8, 0x7cu8, 0x68u8, 0x74u8, 0x74u8, 0x70u8, 0x3au8, 0x2fu8, 0x2fu8, 0x29u8] as &[u8]);
    map.insert("SWF", &[0x5bu8, 0x46u8, 0x43u8, 0x5du8, 0x57u8, 0x53u8, 0x5bu8, 0x5eu8, 0x5cu8, 0x30u8, 0x5du8] as &[u8]);
    map.insert("TAR", &[0x2eu8, 0x7bu8, 0x32u8, 0x35u8, 0x37u8, 0x7du8, 0x75u8, 0x73u8, 0x74u8, 0x61u8, 0x72u8, 0x28u8, 0x20u8, 0x20u8, 0x29u8, 0x3fu8, 0x5cu8, 0x30u8] as &[u8]);
    map.insert("TIFF", &[0x28u8, 0x49u8, 0x49u8, 0x7cu8, 0x4du8, 0x4du8, 0x29u8] as &[u8]);
    map.insert("TXT", &[0x28u8, 0xffu8, 0xfeu8, 0x7cu8, 0x28u8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x29u8, 0x3fu8, 0xfeu8, 0xffu8, 0x7cu8, 0x28u8, 0xefu8, 0xbbu8, 0xbfu8, 0x29u8, 0x3fu8, 0x5bu8, 0x07u8, 0x2du8, 0x0du8, 0x20u8, 0x2du8, 0x7eu8, 0x80u8, 0x2du8, 0xfeu8, 0x5du8, 0x2au8, 0x24u8, 0x29u8] as &[u8]);
    map.insert("Torrent", &[0x64u8, 0x5cu8, 0x64u8, 0x2bu8, 0x3au8, 0x5cu8, 0x77u8, 0x2bu8] as &[u8]);
    map.insert("VCard", &[0x28u8, 0x3fu8, 0x69u8, 0x29u8, 0x42u8, 0x45u8, 0x47u8, 0x49u8, 0x4eu8, 0x3au8, 0x28u8, 0x56u8, 0x43u8, 0x41u8, 0x52u8, 0x44u8, 0x7cu8, 0x56u8, 0x43u8, 0x41u8, 0x4cu8, 0x45u8, 0x4eu8, 0x44u8, 0x41u8, 0x52u8, 0x7cu8, 0x56u8, 0x4eu8, 0x4fu8, 0x54u8, 0x45u8, 0x29u8, 0x5cu8, 0x72u8, 0x5cu8, 0x6eu8] as &[u8]);
    map.insert("VRD", &[0x43u8, 0x41u8, 0x4eu8, 0x4fu8, 0x4eu8, 0x20u8, 0x4fu8, 0x50u8, 0x54u8, 0x49u8, 0x4fu8, 0x4eu8, 0x41u8, 0x4cu8, 0x20u8, 0x44u8, 0x41u8, 0x54u8, 0x41u8, 0x5cu8, 0x30u8] as &[u8]);
    map.insert("WMF", &[0x28u8, 0xd7u8, 0xcdu8, 0xc6u8, 0x9au8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x7cu8, 0x01u8, 0x5cu8, 0x30u8, 0x09u8, 0x5cu8, 0x30u8, 0x5cu8, 0x30u8, 0x03u8, 0x29u8] as &[u8]);
    map.insert("WPG", &[0xffu8, 0x57u8, 0x50u8, 0x43u8] as &[u8]);
    map.insert("WTV", &[0xb7u8, 0xd8u8, 0x00u8, 0x20u8, 0x37u8, 0x49u8, 0xdau8, 0x11u8, 0xa6u8, 0x4eu8, 0x00u8, 0x07u8, 0xe9u8, 0x5eu8, 0xadu8, 0x8du8] as &[u8]);
    map.insert("X3F", &[0x46u8, 0x4fu8, 0x56u8, 0x62u8] as &[u8]);
    map.insert("XCF", &[0x67u8, 0x69u8, 0x6du8, 0x70u8, 0x20u8, 0x78u8, 0x63u8, 0x66u8, 0x20u8] as &[u8]);
    map.insert("XISF", &[0x58u8, 0x49u8, 0x53u8, 0x46u8, 0x30u8, 0x31u8, 0x30u8, 0x30u8] as &[u8]);
    map.insert("XMP", &[0x5cu8, 0x30u8, 0x7bu8, 0x30u8, 0x2cu8, 0x33u8, 0x7du8, 0x28u8, 0xfeu8, 0xffu8, 0x7cu8, 0xffu8, 0xfeu8, 0x7cu8, 0xefu8, 0xbbu8, 0xbfu8, 0x29u8, 0x3fu8, 0x5cu8, 0x30u8, 0x7bu8, 0x30u8, 0x2cu8, 0x33u8, 0x7du8, 0x5cu8, 0x73u8, 0x2au8, 0x3cu8] as &[u8]);
    map.insert("ZIP", &[0x50u8, 0x4bu8, 0x03u8, 0x04u8] as &[u8]);
    map
});

/// Detect file type by regex pattern
pub fn detect_file_type_by_regex(data: &[u8]) -> Option<&'static str> {
    for (file_type, pattern) in REGEX_PATTERNS.iter() {
        if data.starts_with(pattern) {
            return Some(file_type);
        }
    }
    None
}
