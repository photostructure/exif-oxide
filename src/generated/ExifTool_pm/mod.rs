//! Generated lookup tables from ExifTool ExifTool.pm
//!
//! This file is automatically generated.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

use std::collections::HashMap;
use std::collections::HashSet;
use std::sync::LazyLock;

// Simple lookup tables
// Generated mime_types lookup table
// Source: ExifTool ExifTool.pm %mimeType
// Description: MIME type mappings for file types

/// Static data for mime type mappings for file types lookup
/// Source: ExifTool ExifTool.pm %mimeType (225 entries)
static MIME_TYPES_DATA: &[(&str, &str)] = &[
    ("3FR", "image/x-hasselblad-3fr"),
    ("7Z", "application/x-7z-compressed"),
    ("AA", "audio/audible"),
    ("AAC", "audio/aac"),
    ("AAE", "application/vnd.apple.photos"),
    ("AI", "application/vnd.adobe.illustrator"),
    ("AIFF", "audio/x-aiff"),
    ("ALIAS", "application/x-macos"),
    ("APE", "audio/x-monkeys-audio"),
    ("APNG", "image/apng"),
    ("ARW", "image/x-sony-arw"),
    ("ASF", "video/x-ms-asf"),
    ("BMP", "image/bmp"),
    ("BPG", "image/bpg"),
    ("BTF", "image/x-tiff-big"),
    ("BZ2", "application/bzip2"),
    ("C2PA", "application/c2pa"),
    ("CHM", "application/x-chm"),
    ("COS", "application/octet-stream"),
    ("CR2", "image/x-canon-cr2"),
    ("CR3", "image/x-canon-cr3"),
    ("CRM", "video/x-canon-crm"),
    ("CRW", "image/x-canon-crw"),
    ("CSV", "text/csv"),
    ("CUR", "image/x-cursor"),
    ("CZI", "image/x-zeiss-czi"),
    ("Canon 1D RAW", "image/x-raw"),
    ("DCP", "application/octet-stream"),
    ("DCR", "image/x-kodak-dcr"),
    ("DCX", "image/dcx"),
    ("DEX", "application/octet-stream"),
    ("DFONT", "application/x-dfont"),
    ("DICOM", "application/dicom"),
    ("DIVX", "video/divx"),
    ("DJVU", "image/vnd.djvu"),
    ("DNG", "image/x-adobe-dng"),
    ("DOC", "application/msword"),
    ("DOCM", "application/vnd.ms-word.document.macroEnabled.12"),
    (
        "DOCX",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    ),
    ("DOT", "application/msword"),
    (
        "DOTM",
        "application/vnd.ms-word.template.macroEnabledTemplate",
    ),
    (
        "DOTX",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.template",
    ),
    ("DPX", "image/x-dpx"),
    ("DR4", "application/octet-stream"),
    ("DS2", "audio/x-ds2"),
    ("DSS", "audio/x-dss"),
    ("DV", "video/x-dv"),
    ("DVR-MS", "video/x-ms-dvr"),
    ("DWF", "model/vnd.dwf"),
    ("DWG", "image/vnd.dwg"),
    ("DXF", "application/dxf"),
    ("EIP", "application/x-captureone"),
    ("EPS", "application/postscript"),
    ("ERF", "image/x-epson-erf"),
    ("EXE", "application/octet-stream"),
    ("EXR", "image/x-exr"),
    ("EXV", "image/x-exv"),
    ("FFF", "image/x-hasselblad-fff"),
    ("FITS", "image/fits"),
    ("FLA", "application/vnd.adobe.fla"),
    ("FLAC", "audio/flac"),
    ("FLIF", "image/flif"),
    ("FLIR", "image/x-flir-fff"),
    ("FLV", "video/x-flv"),
    ("FPF", "image/x-flir-fpf"),
    ("FPX", "image/vnd.fpx"),
    ("Font", "application/x-font-type1"),
    ("GIF", "image/gif"),
    ("GPR", "image/x-gopro-gpr"),
    ("GZIP", "application/x-gzip"),
    ("HDP", "image/vnd.ms-photo"),
    ("HDR", "image/vnd.radiance"),
    ("HTML", "text/html"),
    ("ICC", "application/vnd.iccprofile"),
    ("ICO", "image/x-icon"),
    ("ICS", "text/calendar"),
    ("IDML", "application/vnd.adobe.indesign-idml-package"),
    ("IIQ", "image/x-raw"),
    ("IND", "application/x-indesign"),
    ("INX", "application/x-indesign-interchange"),
    ("ISO", "application/x-iso9660-image"),
    ("ITC", "application/itunes"),
    ("J2C", "image/x-j2c"),
    ("JNG", "image/jng"),
    ("JP2", "image/jp2"),
    ("JPEG", "image/jpeg"),
    ("JPH", "image/jph"),
    ("JPM", "image/jpm"),
    ("JPS", "image/x-jps"),
    ("JPX", "image/jpx"),
    ("JSON", "application/json"),
    ("JUMBF", "application/octet-stream"),
    ("JXL", "image/jxl"),
    ("JXR", "image/jxr"),
    ("K25", "image/x-kodak-k25"),
    ("KDC", "image/x-kodak-kdc"),
    ("KEY", "application/x-iwork-keynote-sffkey"),
    ("LFP", "image/x-lytro-lfp"),
    ("LIF", "image/x-lif"),
    ("LNK", "application/octet-stream"),
    ("LRI", "image/x-light-lri"),
    ("M2T", "video/mpeg"),
    ("M2TS", "video/m2ts"),
    ("MAX", "application/x-3ds"),
    ("MEF", "image/x-mamiya-mef"),
    ("MIE", "application/x-mie"),
    ("MIFF", "application/x-magick-image"),
    ("MKA", "audio/x-matroska"),
    ("MKS", "application/x-matroska"),
    ("MKV", "video/x-matroska"),
    ("MNG", "video/mng"),
    ("MOBI", "application/x-mobipocket-ebook"),
    ("MOI", "application/octet-stream"),
    ("MOS", "image/x-raw"),
    ("MOV", "video/quicktime"),
    ("MP3", "audio/mpeg"),
    ("MP4", "video/mp4"),
    ("MPC", "audio/x-musepack"),
    ("MPEG", "video/mpeg"),
    ("MRC", "image/x-mrc"),
    ("MRW", "image/x-minolta-mrw"),
    ("MXF", "application/mxf"),
    ("NEF", "image/x-nikon-nef"),
    ("NKSC", "application/x-nikon-nxstudio"),
    ("NRW", "image/x-nikon-nrw"),
    ("NUMBERS", "application/x-iwork-numbers-sffnumbers"),
    ("ODB", "application/vnd.oasis.opendocument.database"),
    ("ODC", "application/vnd.oasis.opendocument.chart"),
    ("ODF", "application/vnd.oasis.opendocument.formula"),
    ("ODG", "application/vnd.oasis.opendocument.graphics"),
    ("ODI", "application/vnd.oasis.opendocument.image"),
    ("ODP", "application/vnd.oasis.opendocument.presentation"),
    ("ODS", "application/vnd.oasis.opendocument.spreadsheet"),
    ("ODT", "application/vnd.oasis.opendocument.text"),
    ("OGG", "audio/ogg"),
    ("OGV", "video/ogg"),
    ("ONP", "application/on1"),
    ("ORF", "image/x-olympus-orf"),
    ("OTF", "application/font-otf"),
    ("PAGES", "application/x-iwork-pages-sffpages"),
    ("PBM", "image/x-portable-bitmap"),
    ("PCAP", "application/vnd.tcpdump.pcap"),
    ("PCD", "image/x-photo-cd"),
    ("PCX", "image/pcx"),
    ("PDB", "application/vnd.palm"),
    ("PDF", "application/pdf"),
    ("PEF", "image/x-pentax-pef"),
    ("PFA", "application/x-font-type1"),
    ("PGF", "image/pgf"),
    ("PGM", "image/x-portable-graymap"),
    ("PHP", "application/x-httpd-php"),
    ("PICT", "image/pict"),
    ("PLIST", "application/xml"),
    ("PMP", "image/x-sony-pmp"),
    ("PNG", "image/png"),
    ("POT", "application/vnd.ms-powerpoint"),
    (
        "POTM",
        "application/vnd.ms-powerpoint.template.macroEnabled.12",
    ),
    (
        "POTX",
        "application/vnd.openxmlformats-officedocument.presentationml.template",
    ),
    (
        "PPAM",
        "application/vnd.ms-powerpoint.addin.macroEnabled.12",
    ),
    (
        "PPAX",
        "application/vnd.openxmlformats-officedocument.presentationml.addin",
    ),
    ("PPM", "image/x-portable-pixmap"),
    ("PPS", "application/vnd.ms-powerpoint"),
    (
        "PPSM",
        "application/vnd.ms-powerpoint.slideshow.macroEnabled.12",
    ),
    (
        "PPSX",
        "application/vnd.openxmlformats-officedocument.presentationml.slideshow",
    ),
    ("PPT", "application/vnd.ms-powerpoint"),
    (
        "PPTM",
        "application/vnd.ms-powerpoint.presentation.macroEnabled.12",
    ),
    (
        "PPTX",
        "application/vnd.openxmlformats-officedocument.presentationml.presentation",
    ),
    ("PS", "application/postscript"),
    ("PSD", "application/vnd.adobe.photoshop"),
    ("PSP", "image/x-paintshoppro"),
    ("QTIF", "image/x-quicktime"),
    ("R3D", "video/x-red-r3d"),
    ("RA", "audio/x-pn-realaudio"),
    ("RAF", "image/x-fujifilm-raf"),
    ("RAM", "audio/x-pn-realaudio"),
    ("RAR", "application/x-rar-compressed"),
    ("RAW", "image/x-raw"),
    ("RM", "application/vnd.rn-realmedia"),
    ("RMVB", "application/vnd.rn-realmedia-vbr"),
    ("RPM", "audio/x-pn-realaudio-plugin"),
    ("RSRC", "application/ResEdit"),
    ("RTF", "text/rtf"),
    ("RV", "video/vnd.rn-realvideo"),
    ("RW2", "image/x-panasonic-rw2"),
    ("RWL", "image/x-leica-rwl"),
    ("RWZ", "image/x-rawzor"),
    ("SEQ", "image/x-flir-seq"),
    ("SKETCH", "application/sketch"),
    ("SR2", "image/x-sony-sr2"),
    ("SRF", "image/x-sony-srf"),
    ("SRW", "image/x-samsung-srw"),
    ("SVG", "image/svg+xml"),
    ("SWF", "application/x-shockwave-flash"),
    ("TAR", "application/x-tar"),
    ("THMX", "application/vnd.ms-officetheme"),
    ("TIFF", "image/tiff"),
    ("TTC", "application/font-ttf"),
    ("TTF", "application/font-ttf"),
    ("TXT", "text/plain"),
    ("Torrent", "application/x-bittorrent"),
    ("VCard", "text/vcard"),
    ("VRD", "application/octet-stream"),
    ("VSD", "application/x-visio"),
    ("WDP", "image/vnd.ms-photo"),
    ("WEBM", "video/webm"),
    ("WMA", "audio/x-ms-wma"),
    ("WMF", "application/x-wmf"),
    ("WMV", "video/x-ms-wmv"),
    ("WPG", "image/x-wpg"),
    ("WTV", "video/x-ms-wtv"),
    ("X3F", "image/x-sigma-x3f"),
    ("XCF", "image/x-xcf"),
    ("XISF", "image/x-xisf"),
    ("XLA", "application/vnd.ms-excel"),
    ("XLAM", "application/vnd.ms-excel.addin.macroEnabled.12"),
    ("XLS", "application/vnd.ms-excel"),
    (
        "XLSB",
        "application/vnd.ms-excel.sheet.binary.macroEnabled.12",
    ),
    ("XLSM", "application/vnd.ms-excel.sheet.macroEnabled.12"),
    (
        "XLSX",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    ),
    ("XLT", "application/vnd.ms-excel"),
    ("XLTM", "application/vnd.ms-excel.template.macroEnabled.12"),
    (
        "XLTX",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.template",
    ),
    ("XML", "application/xml"),
    ("XMP", "application/rdf+xml"),
    ("ZIP", "application/zip"),
];

/// MIME type mappings for file types lookup table
/// Built from static data on first access
pub static MIME_TYPES: LazyLock<HashMap<&'static str, &'static str>> =
    LazyLock::new(|| MIME_TYPES_DATA.iter().copied().collect());

/// Look up mime type mappings for file types value by key
pub fn lookup_mime_types(key: &str) -> Option<&'static str> {
    MIME_TYPES.get(key).copied()
}

// Generated file_type_extensions lookup table
// Source: ExifTool ExifTool.pm %fileTypeExt
// Description: Canonical file extensions for file types

/// Static data for canonical file extensions for file types lookup
/// Source: ExifTool ExifTool.pm %fileTypeExt (9 entries)
static FILE_TYPE_EXTENSIONS_DATA: &[(&str, &str)] = &[
    ("Canon 1D RAW", "tif"),
    ("DICOM", "dcm"),
    ("FLIR", "fff"),
    ("GZIP", "gz"),
    ("JPEG", "jpg"),
    ("M2TS", "mts"),
    ("MPEG", "mpg"),
    ("TIFF", "tif"),
    ("VCard", "vcf"),
];

/// Canonical file extensions for file types lookup table
/// Built from static data on first access
pub static FILE_TYPE_EXTENSIONS: LazyLock<HashMap<&'static str, &'static str>> =
    LazyLock::new(|| FILE_TYPE_EXTENSIONS_DATA.iter().copied().collect());

/// Look up canonical file extensions for file types value by key
pub fn lookup_file_type_extensions(key: &str) -> Option<&'static str> {
    FILE_TYPE_EXTENSIONS.get(key).copied()
}

// Boolean set tables
// Generated weak magic file types boolean set
// Source: ExifTool Image::ExifTool %weakMagic
// Description: File types with weak magic number recognition (MP3)

/// Static data for file types with weak magic number recognition (mp3) set
/// Source: ExifTool Image::ExifTool %weakMagic (1 entries)
static WEAK_MAGIC_FILE_TYPES_DATA: &[&str] = &["MP3"];

/// File types with weak magic number recognition (MP3) boolean set table
/// Built from static data on first access
pub static WEAK_MAGIC_FILE_TYPES: LazyLock<HashSet<&'static str>> =
    LazyLock::new(|| WEAK_MAGIC_FILE_TYPES_DATA.iter().copied().collect());

/// Check if a file type is in the file types with weak magic number recognition (mp3) set
pub fn is_weak_magic_file(file_type: &str) -> bool {
    WEAK_MAGIC_FILE_TYPES.contains(file_type)
}

// Generated creatable file types boolean set
// Source: ExifTool Image::ExifTool %createTypes
// Description: File types that can be created from scratch (XMP, ICC, MIE, VRD, etc.)

/// Static data for file types that can be created from scratch (xmp, icc, mie, vrd, etc.) set
/// Source: ExifTool Image::ExifTool %createTypes (7 entries)
static CREATABLE_FILE_TYPES_DATA: &[&str] = &["DR4", "EXIF", "EXV", "ICC", "MIE", "VRD", "XMP"];

/// File types that can be created from scratch (XMP, ICC, MIE, VRD, etc.) boolean set table
/// Built from static data on first access
pub static CREATABLE_FILE_TYPES: LazyLock<HashSet<&'static str>> =
    LazyLock::new(|| CREATABLE_FILE_TYPES_DATA.iter().copied().collect());

/// Check if a file type is in the file types that can be created from scratch (xmp, icc, mie, vrd, etc.) set
pub fn is_creatable_file(file_type: &str) -> bool {
    CREATABLE_FILE_TYPES.contains(file_type)
}

// Generated process determined types boolean set
// Source: ExifTool Image::ExifTool %processType
// Description: File types determined by process proc during FastScan == 3

/// Static data for file types determined by process proc during fastscan == 3 set
/// Source: ExifTool Image::ExifTool %processType (10 entries)
static PROCESS_DETERMINED_TYPES_DATA: &[&str] = &[
    "AIFF", "EXE", "Font", "JPEG", "PS", "Real", "TIFF", "TXT", "VCard", "XMP",
];

/// File types determined by process proc during FastScan == 3 boolean set table
/// Built from static data on first access
pub static PROCESS_DETERMINED_TYPES: LazyLock<HashSet<&'static str>> =
    LazyLock::new(|| PROCESS_DETERMINED_TYPES_DATA.iter().copied().collect());

/// Check if a file type is in the file types determined by process proc during fastscan == 3 set
pub fn is_process_determined(file_type: &str) -> bool {
    PROCESS_DETERMINED_TYPES.contains(file_type)
}

// Generated pc operating systems boolean set
// Source: ExifTool Image::ExifTool %isPC
// Description: Operating systems that use PC-style file paths

/// Static data for operating systems that use pc-style file paths set
/// Source: ExifTool Image::ExifTool %isPC (6 entries)
static PC_OPERATING_SYSTEMS_DATA: &[&str] =
    &["MSWin32", "NetWare", "cygwin", "dos", "os2", "symbian"];

/// Operating systems that use PC-style file paths boolean set table
/// Built from static data on first access
pub static PC_OPERATING_SYSTEMS: LazyLock<HashSet<&'static str>> =
    LazyLock::new(|| PC_OPERATING_SYSTEMS_DATA.iter().copied().collect());

/// Check if a file type is in the operating systems that use pc-style file paths set
pub fn is_pc_operating_systems(file_type: &str) -> bool {
    PC_OPERATING_SYSTEMS.contains(file_type)
}
