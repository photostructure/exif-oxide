//! Tag kits for other category from Sigma.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_2: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1024".to_string(), "Sigma 19mm F2.8 EX DN");
    map.insert("1025".to_string(), "Sigma 24mm F1.4 DG HSM | A");
    map.insert("1041".to_string(), "Sigma 20mm F1.8 EX DG ASP RF");
    map.insert("1042".to_string(), "Sigma 20mm F1.4 DG HSM | A");
    map.insert("1074".to_string(), "Sigma 24mm F1.8 EX DG ASP Macro");
    map.insert("1088".to_string(), "Sigma 28mm F1.8 EX DG ASP Macro");
    map.insert("1104".to_string(), "Sigma 14mm F1.8 DH HSM | A");
    map.insert("1121".to_string(), "Sigma 14mm F2.8 EX ASP HSM");
    map.insert("1141".to_string(), "Sigma 15mm F2.8 EX Diagonal FishEye");
    map.insert("1142".to_string(), "Sigma 15mm F2.8 EX DG Diagonal Fisheye");
    map.insert("1143".to_string(), "Sigma 10mm F2.8 EX DC HSM Fisheye");
    map.insert("1155".to_string(), "Sigma 8mm F4 EX Circular Fisheye");
    map.insert("1156".to_string(), "Sigma 8mm F4 EX DG Circular Fisheye");
    map.insert("1157".to_string(), "Sigma 8mm F3.5 EX DG Circular Fisheye");
    map.insert(
        "1158".to_string(),
        "Sigma 4.5mm F2.8 EX DC HSM Circular Fisheye",
    );
    map.insert("1284".to_string(), "Sigma 70-300mm F4-5.6 Macro Super");
    map.insert("1285".to_string(), "Sigma APO 70-300mm F4-5.6 Macro Super");
    map.insert(
        "1286".to_string(),
        "Sigma 70-300mm F4-5.6 APO Macro Super II",
    );
    map.insert(
        "1287".to_string(),
        "Sigma 70-300mm F4-5.6 DL Macro Super II",
    );
    map.insert("1288".to_string(), "Sigma 70-300mm F4-5.6 DG APO Macro");
    map.insert("1289".to_string(), "Sigma 70-300mm F4-5.6 DG Macro");
    map.insert("1296".to_string(), "Sigma 17-35 F2.8-4 EX DG ASP");
    map.insert("1298".to_string(), "Sigma 15-30mm F3.5-4.5 EX DG ASP DF");
    map.insert("1299".to_string(), "Sigma 20-40mm F2.8 EX DG");
    map.insert("1305".to_string(), "Sigma 17-35 F2.8-4 EX ASP HSM");
    map.insert("1312".to_string(), "Sigma 100-300mm F4.5-6.7 DL");
    map.insert("1313".to_string(), "Sigma 18-50mm F3.5-5.6 DC Macro");
    map.insert("1319".to_string(), "Sigma 100-300mm F4 EX IF HSM");
    map.insert("1321".to_string(), "Sigma 120-300mm F2.8 EX HSM IF APO");
    map.insert("1349".to_string(), "Sigma 28-70mm F2.8 EX ASP DF");
    map.insert("1351".to_string(), "Sigma 24-60mm F2.8 EX DG");
    map.insert("1352".to_string(), "Sigma 24-70mm F2.8 EX DG Macro");
    map.insert("1353".to_string(), "Sigma 28-70mm F2.8 EX DG");
    map.insert("1382".to_string(), "Sigma 70-200mm F2.8 EX IF APO");
    map.insert("1383".to_string(), "Sigma 70-200mm F2.8 EX IF HSM APO");
    map.insert("1384".to_string(), "Sigma 70-200mm F2.8 EX DG IF HSM APO");
    map.insert("1385".to_string(), "Sigma 70-200 F2.8 EX DG HSM APO Macro");
    map.insert("1393".to_string(), "Sigma 24-70mm F2.8 IF EX DG HSM");
    map.insert("1394".to_string(), "Sigma 70-300mm F4-5.6 DG OS");
    map.insert("1398".to_string(), "Sigma 24-70mm F2.8 DG OS HSM | A");
    map.insert(
        "1401".to_string(),
        "Sigma 70-200mm F2.8 EX DG HSM APO Macro",
    );
    map.insert("1408".to_string(), "Sigma 18-50mm F2.8 EX DC");
    map.insert("1409".to_string(), "Sigma 18-50mm F2.8 EX DC Macro");
    map.insert("1410".to_string(), "Sigma 18-50mm F2.8 EX DC HSM Macro");
    map.insert("1411".to_string(), "Sigma 17-50mm F2.8 EX DC OS HSM");
    map.insert("1416".to_string(), "Sigma 24-35mm F2 DG HSM | A");
    map.insert("1417".to_string(), "Sigma APO 70-200mm F2.8 EX DG OS HSM");
    map.insert("1428".to_string(), "Sigma 300-800mm F5.6 EX HSM IF APO");
    map.insert("1429".to_string(), "Sigma 300-800mm F5.6 EX DG APO HSM");
    map.insert("1431".to_string(), "Sigma 200-500mm F2.8 APO EX DG");
    map.insert(
        "1448".to_string(),
        "Sigma 70-300mm F4-5.6 APO DG Macro (Motorized)",
    );
    map.insert(
        "1449".to_string(),
        "Sigma 70-300mm F4-5.6 DG Macro (Motorized)",
    );
    map.insert("1541".to_string(), "Sigma 24-70mm F3.5-5.6 ASP HF");
    map.insert("1587".to_string(), "Sigma 28-70mm F2.8-4 HS");
    map.insert("1588".to_string(), "Sigma 28-70mm F2.8-4 DG");
    map.insert("1589".to_string(), "Sigma 24-105mm F4 DG OS HSM | A");
    map.insert("16".to_string(), "Sigma 50mm F2.8 EX DG MACRO");
    map.insert("16.1".to_string(), "Sigma 70mm F2.8 EX DG Macro");
    map.insert("16.2".to_string(), "Sigma 105mm F2.8 EX DG Macro");
    map.insert("1604".to_string(), "Sigma 28-80mm F3.5-5.6 ASP HF Macro");
    map.insert(
        "1625".to_string(),
        "Sigma 28-80mm F3.5-5.6 Mini Zoom Macro II ASP",
    );
    map.insert("1633".to_string(), "Sigma 28-105mm F2.8-4 IF ASP");
    map.insert("1635".to_string(), "Sigma 28-105mm F3.8-5.6 IF UC-III ASP");
    map.insert("1636".to_string(), "Sigma 28-105mm F2.8-4 IF DG ASP");
    map.insert(
        "16385".to_string(),
        "Lumix S 24-105mm F4 Macro OIS (S-R24105)",
    );
    map.insert("16386".to_string(), "Lumix S 70-200mm F4 OIS (S-R70200)");
    map.insert("16387".to_string(), "Lumix S 50mm F1.4 (S-X50)");
    map.insert("1639".to_string(), "Sigma 24-135mm F2.8-4.5 IF ASP");
    map.insert("16390".to_string(), "Lumix S 24-70mm F2.8 (S-E2470)");
    map.insert("16391".to_string(), "Lumix S 16-35mm F4 (S-R1635)");
    map.insert("16392".to_string(), "Lumix S 70-200mm F2.8 OIS (S-E70200)");
    map.insert("16395".to_string(), "Lumix S 20-60mm F3.5-5.6 (S-R2060)");
    map.insert("16396".to_string(), "Lumix S 85mm F1.8 (S-S85)");
    map.insert(
        "16397".to_string(),
        "Lumix S 70-300 F4.5-5.6 Macro OIS (S-R70300)",
    );
    map.insert("16399".to_string(), "Lumix S 24mm F1.8 (S-S24)");
    map.insert("1640".to_string(), "Sigma 17-70mm F2.8-4 DC Macro OS HSM");
    map.insert("16400".to_string(), "Lumix S 35mm F1.8 (S-S35)");
    map.insert("16401".to_string(), "LUMIX S 18mm F1.8 (S-S18)");
    map.insert("1641".to_string(), "Sigma 17-70mm F2.8-4.5 DC HSM Macro");
    map.insert("1668".to_string(), "Sigma 55-200mm F4-5.6 DC");
    map.insert("1670".to_string(), "Sigma 50-200mm F4-5.6 DC OS HSM");
    map.insert("1673".to_string(), "Sigma 17-70mm F2.8-4.5 DC Macro");
    map.insert("1680".to_string(), "Sigma 50-150mm F2.8 EX DC HSM APO");
    map.insert("1681".to_string(), "Sigma 50-150mm F2.8 EX DC APO HSM II");
    map.insert("1682".to_string(), "Sigma APO 50-150mm F2.8 EX DC OS HSM");
    map.insert("1683".to_string(), "Sigma 50-100mm F1.8 DC HSM | A");
    map.insert("1801".to_string(), "Sigma 28-135mm F3.8-5.6 IF ASP Macro");
    map.insert("1827".to_string(), "Sigma 135-400mm F4.5-5.6 ASP APO");
    map.insert("1829".to_string(), "Sigma 80-400mm F4.5-5.6 EX OS");
    map.insert("1830".to_string(), "Sigma 80-400mm F4.5-5.6 EX DG OS APO");
    map.insert("1831".to_string(), "Sigma 135-400mm F4.5-5.6 DG ASP APO");
    map.insert("1832".to_string(), "Sigma 120-400mm F4.5-5.6 DG APO OS HSM");
    map.insert("1833".to_string(), "Sigma 100-400mm F5-6.3 DG OS HSM | C");
    map.insert("1840".to_string(), "Sigma 60-600mm F4.5-6.3 DG OS HSM | S");
    map.insert("1843".to_string(), "Sigma 170-500mm F5-6.3 ASP APO");
    map.insert("1844".to_string(), "Sigma 170-500mm F5-6.3 DG ASP APO");
    map.insert("1845".to_string(), "Sigma 50-500mm F4-6.3 EX RF HSM APO");
    map.insert("1846".to_string(), "Sigma 50-500mm F4-6.3 EX DG HSM APO");
    map.insert("1847".to_string(), "Sigma 150-500mm F5-6.3 APO DG OS HSM");
    map.insert("1848".to_string(), "Sigma 50-500mm F4.5-6.3 APO DG OS HSM");
    map.insert("1856".to_string(), "Sigma 150-600mm F5-6.3 DG OS HSM | S");
    map.insert("1861".to_string(), "Sigma 150-600mm F5-6.3 DG OS HSM | C");
    map.insert("1911".to_string(), "Sigma 18-200mm F3.5-6.3 DC");
    map.insert("1917".to_string(), "Sigma 18-200mm F3.5-6.3 DC (Motorized)");
    map.insert(
        "1925".to_string(),
        "Sigma 28-200mm F3.5-5.6 DL ASP IF HZM Macro",
    );
    map.insert(
        "1927".to_string(),
        "Sigma 28-200mm F3.5-5.6 Compact ASP HZ Macro",
    );
    map.insert("1929".to_string(), "Sigma 18-125mm F3.5-5.6 DC");
    map.insert("1936".to_string(), "Sigma 28-300mm F3.5-6.3 DL ASP IF HZM");
    map.insert("1939".to_string(), "Sigma 28-300mm F3.5-6.3 Macro");
    map.insert(
        "1940".to_string(),
        "Sigma 28-200mm F3.5-5.6 DG Compact ASP HZ Macro",
    );
    map.insert("1941".to_string(), "Sigma 28-300mm F3.5-6.3 DG Macro");
    map.insert("2083".to_string(), "Sigma 1.4X TC EX APO");
    map.insert("2084".to_string(), "Sigma 1.4X Teleconverter EX APO DG");
    map.insert("2131".to_string(), "Sigma 18-125mm F3.8-5.6 DC OS HSM");
    map.insert("2145".to_string(), "Sigma 18-50mm F2.8-4.5 DC OS HSM");
    map.insert("2160".to_string(), "Sigma 2.0X Teleconverter TC-2001");
    map.insert("2165".to_string(), "Sigma 2.0X TC EX APO");
    map.insert("2166".to_string(), "Sigma 2.0X Teleconverter EX APO DG");
    map.insert("2169".to_string(), "Sigma 1.4X Teleconverter TC-1401");
    map.insert("2176".to_string(), "Sigma 18-250mm F3.5-6.3 DC OS HSM");
    map.insert("2178".to_string(), "Sigma 18-200mm F3.5-6.3 II DC OS HSM");
    map.insert(
        "2179".to_string(),
        "Sigma 18-250mm F3.5-6.3 DC Macro OS HSM",
    );
    map.insert(
        "2180".to_string(),
        "Sigma 17-70mm F2.8-4 DC OS HSM Macro | C",
    );
    map.insert(
        "2181".to_string(),
        "Sigma 18-200mm F3.5-6.3 DC OS HSM Macro | C",
    );
    map.insert(
        "2182".to_string(),
        "Sigma 18-300mm F3.5-6.3 DC OS HSM Macro | C",
    );
    map.insert("2184".to_string(), "Sigma 18-200mm F3.5-6.3 DC OS");
    map.insert("2192".to_string(), "Sigma Mount Converter MC-11");
    map.insert("22".to_string(), "Sigma 18-50mm F3.5-5.6 DC");
    map.insert("2345".to_string(), "Sigma 60mm F2.8 DN | A");
    map.insert("24577".to_string(), "Sigma 150-600mm F5-6.3 DG OS HSM | S");
    map.insert("24579".to_string(), "Sigma 45mm F2.8 DG DN | C");
    map.insert("24581".to_string(), "Sigma 14-24mm F2.8 DG DN | A");
    map.insert("24582".to_string(), "Sigma 50mm F1.4 DG HSM | A");
    map.insert("24593".to_string(), "Sigma 24-70mm F2.8 DG DN | A");
    map.insert("24594".to_string(), "Sigma 100-400mm F5-6.3 DG DN OS | C");
    map.insert(
        "24595".to_string(),
        "Sigma 100-400mm F5-6.3 DG DN OS | C + TC-1411",
    );
    map.insert("24597".to_string(), "Sigma 85mm F1.4 DG DN | A");
    map.insert("24599".to_string(), "Sigma 65mm F2 DG DN | C");
    map.insert("24600".to_string(), "Sigma 35mm F2 DG DN | C");
    map.insert("24602".to_string(), "Sigma 28-70mm F2.8 DG DN | C");
    map.insert("24603".to_string(), "Sigma 150-600mm F5-6.3 DG DN OS | S");
    map.insert("24608".to_string(), "Sigma 35mm F1.4 DG DN | A");
    map.insert("24609".to_string(), "Sigma 90mm F2.8 DG DN | C");
    map.insert("24611".to_string(), "Sigma 20mm F2 DG DN | C");
    map.insert("24613".to_string(), "Sigma 20mm F1.4 DG DN | A");
    map.insert("24614".to_string(), "Sigma 24mm F1.4 DG DN | A");
    map.insert("24620".to_string(), "Sigma 50mm F1.4 DG DN | A (2023)");
    map.insert("259".to_string(), "Sigma 180mm F3.5 EX IF HSM APO Macro");
    map.insert("260".to_string(), "Sigma 150mm F2.8 EX DG HSM APO Macro");
    map.insert("261".to_string(), "Sigma 180mm F3.5 EX DG HSM APO Macro");
    map.insert("262".to_string(), "Sigma 150mm F2.8 EX DG OS HSM APO Macro");
    map.insert("263".to_string(), "Sigma 180mm F2.8 EX DG OS HSM APO Macro");
    map.insert("297".to_string(), "Sigma Lens (0x129)");
    map.insert("297.1".to_string(), "Sigma 14mm F2.8 EX Aspherical");
    map.insert("297.2".to_string(), "Sigma 30mm F1.4");
    map.insert("305".to_string(), "Sigma Lens (0x131)");
    map.insert("305.1".to_string(), "Sigma 17-70mm F2.8-4.5 DC Macro");
    map.insert("305.2".to_string(), "Sigma 70-200mm F2.8 APO EX HSM");
    map.insert("305.3".to_string(), "Sigma 120-300mm F2.8 APO EX IF HSM");
    map.insert("308".to_string(), "Sigma 100-300mm F4 EX DG HSM APO");
    map.insert("309".to_string(), "Sigma 120-300mm F2.8 EX DG HSM APO");
    map.insert("310".to_string(), "Sigma 120-300mm F2.8 EX DG OS HSM APO");
    map.insert("311".to_string(), "Sigma 120-300mm F2.8 DG OS HSM | S");
    map.insert("323".to_string(), "Sigma 600mm F8 Mirror");
    map.insert("325".to_string(), "Sigma Lens (0x145)");
    map.insert(
        "325.1".to_string(),
        "Sigma 15-30mm F3.5-4.5 EX DG Aspherical",
    );
    map.insert("325.2".to_string(), "Sigma 18-50mm F2.8 EX DG");
    map.insert("325.3".to_string(), "Sigma 20-40mm F2.8 EX DG");
    map.insert("32773".to_string(), "Sigma 35mm F1.4 DG HSM | A");
    map.insert("32777".to_string(), "Sigma 18-35mm F1.8 DC HSM | A");
    map.insert("336".to_string(), "Sigma 30mm F1.4 DC HSM");
    map.insert("338".to_string(), "Sigma Lens (0x152)");
    map.insert("338.1".to_string(), "Sigma APO 800mm F5.6 EX DG HSM");
    map.insert("338.2".to_string(), "Sigma 12-24mm F4.5-5.6 EX DG ASP HSM");
    map.insert("338.3".to_string(), "Sigma 10-20mm F4-5.6 EX DC HSM");
    map.insert("35072".to_string(), "Sigma 70-300mm F4-5.6 DG OS");
    map.insert("357".to_string(), "Sigma 70-200mm F2.8 EX");
    map.insert("361".to_string(), "Sigma 18-50mm F2.8 EX DC");
    map.insert("387".to_string(), "Sigma 500mm F4.5 EX HSM APO");
    map.insert("388".to_string(), "Sigma 500mm F4.5 EX DG HSM APO");
    map.insert("389".to_string(), "Sigma 500mm F4 DG OS HSM | S");
    map.insert("404".to_string(), "Sigma 300mm F2.8 EX HSM APO");
    map.insert("405".to_string(), "Sigma 300mm F2.8 EX DG HSM APO");
    map.insert("4099".to_string(), "Sigma 19mm F2.8");
    map.insert("4100".to_string(), "Sigma 30mm F2.8");
    map.insert("4101".to_string(), "Sigma 50mm F2.8 Macro");
    map.insert("4102".to_string(), "Sigma 19mm F2.8");
    map.insert("4103".to_string(), "Sigma 30mm F2.8");
    map.insert("4104".to_string(), "Sigma 50mm F2.8 Macro");
    map.insert("4105".to_string(), "Sigma 14mm F4");
    map.insert("41216".to_string(), "Sigma 24-70mm F2.8 DG Macro");
    map.insert("512".to_string(), "Sigma 12-24mm F4.5-5.6 EX DG ASP HSM");
    map.insert("513".to_string(), "Sigma 10-20mm F4-5.6 EX DC HSM");
    map.insert("514".to_string(), "Sigma 10-20mm F3.5 EX DC HSM");
    map.insert("515".to_string(), "Sigma 8-16mm F4.5-5.6 DC HSM");
    map.insert("516".to_string(), "Sigma 12-24mm F4.5-5.6 DG HSM II");
    map.insert("517".to_string(), "Sigma 12-24mm F4 DG HSM | A");
    map.insert("528".to_string(), "Sigma 18-35mm F1.8 DC HSM | A");
    map.insert("576".to_string(), "Sigma 135mm F1.8 DG HSM | A");
    map.insert("598".to_string(), "Sigma 105mm F2.8 EX Macro");
    map.insert("599".to_string(), "Sigma 105mm F2.8 EX DG Macro");
    map.insert("600".to_string(), "Sigma 105mm F2.8 EX DG OS HSM Macro");
    map.insert("601".to_string(), "Sigma 105mm F1.4 DG HSM | A");
    map.insert("624".to_string(), "Sigma 70mm F2.8 EX DG Macro");
    map.insert("625".to_string(), "Sigma 70mm F2.8 DG Macro | A");
    map.insert("768".to_string(), "Sigma 30mm F1.4 EX DC HSM");
    map.insert("769".to_string(), "Sigma 30mm F1.4 DC HSM | A");
    map.insert("770".to_string(), "Sigma 30mm F1.4 DC DN | C");
    map.insert("784".to_string(), "Sigma 50mm F1.4 EX DG HSM");
    map.insert("785".to_string(), "Sigma 50mm F1.4 DG HSM | A");
    map.insert("800".to_string(), "Sigma 85mm F1.4 EX DG HSM");
    map.insert("801".to_string(), "Sigma 85mm F1.4 DG HSM | A");
    map.insert("816".to_string(), "Sigma 30mm F2.8 EX DN");
    map.insert("832".to_string(), "Sigma 35mm F1.4 DG HSM");
    map.insert("837".to_string(), "Sigma 50mm F2.8 EX Macro");
    map.insert("838".to_string(), "Sigma 50mm F2.8 EX DG Macro");
    map.insert("848".to_string(), "Sigma 60mm F2.8 DN | A");
    map
});

static PRINT_CONV_3: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1024".to_string(), "Sigma 19mm F2.8 EX DN");
    map.insert("1025".to_string(), "Sigma 24mm F1.4 DG HSM | A");
    map.insert("1041".to_string(), "Sigma 20mm F1.8 EX DG ASP RF");
    map.insert("1042".to_string(), "Sigma 20mm F1.4 DG HSM | A");
    map.insert("1074".to_string(), "Sigma 24mm F1.8 EX DG ASP Macro");
    map.insert("1088".to_string(), "Sigma 28mm F1.8 EX DG ASP Macro");
    map.insert("1104".to_string(), "Sigma 14mm F1.8 DH HSM | A");
    map.insert("1121".to_string(), "Sigma 14mm F2.8 EX ASP HSM");
    map.insert("1141".to_string(), "Sigma 15mm F2.8 EX Diagonal FishEye");
    map.insert("1142".to_string(), "Sigma 15mm F2.8 EX DG Diagonal Fisheye");
    map.insert("1143".to_string(), "Sigma 10mm F2.8 EX DC HSM Fisheye");
    map.insert("1155".to_string(), "Sigma 8mm F4 EX Circular Fisheye");
    map.insert("1156".to_string(), "Sigma 8mm F4 EX DG Circular Fisheye");
    map.insert("1157".to_string(), "Sigma 8mm F3.5 EX DG Circular Fisheye");
    map.insert(
        "1158".to_string(),
        "Sigma 4.5mm F2.8 EX DC HSM Circular Fisheye",
    );
    map.insert("1284".to_string(), "Sigma 70-300mm F4-5.6 Macro Super");
    map.insert("1285".to_string(), "Sigma APO 70-300mm F4-5.6 Macro Super");
    map.insert(
        "1286".to_string(),
        "Sigma 70-300mm F4-5.6 APO Macro Super II",
    );
    map.insert(
        "1287".to_string(),
        "Sigma 70-300mm F4-5.6 DL Macro Super II",
    );
    map.insert("1288".to_string(), "Sigma 70-300mm F4-5.6 DG APO Macro");
    map.insert("1289".to_string(), "Sigma 70-300mm F4-5.6 DG Macro");
    map.insert("1296".to_string(), "Sigma 17-35 F2.8-4 EX DG ASP");
    map.insert("1298".to_string(), "Sigma 15-30mm F3.5-4.5 EX DG ASP DF");
    map.insert("1299".to_string(), "Sigma 20-40mm F2.8 EX DG");
    map.insert("1305".to_string(), "Sigma 17-35 F2.8-4 EX ASP HSM");
    map.insert("1312".to_string(), "Sigma 100-300mm F4.5-6.7 DL");
    map.insert("1313".to_string(), "Sigma 18-50mm F3.5-5.6 DC Macro");
    map.insert("1319".to_string(), "Sigma 100-300mm F4 EX IF HSM");
    map.insert("1321".to_string(), "Sigma 120-300mm F2.8 EX HSM IF APO");
    map.insert("1349".to_string(), "Sigma 28-70mm F2.8 EX ASP DF");
    map.insert("1351".to_string(), "Sigma 24-60mm F2.8 EX DG");
    map.insert("1352".to_string(), "Sigma 24-70mm F2.8 EX DG Macro");
    map.insert("1353".to_string(), "Sigma 28-70mm F2.8 EX DG");
    map.insert("1382".to_string(), "Sigma 70-200mm F2.8 EX IF APO");
    map.insert("1383".to_string(), "Sigma 70-200mm F2.8 EX IF HSM APO");
    map.insert("1384".to_string(), "Sigma 70-200mm F2.8 EX DG IF HSM APO");
    map.insert("1385".to_string(), "Sigma 70-200 F2.8 EX DG HSM APO Macro");
    map.insert("1393".to_string(), "Sigma 24-70mm F2.8 IF EX DG HSM");
    map.insert("1394".to_string(), "Sigma 70-300mm F4-5.6 DG OS");
    map.insert("1398".to_string(), "Sigma 24-70mm F2.8 DG OS HSM | A");
    map.insert(
        "1401".to_string(),
        "Sigma 70-200mm F2.8 EX DG HSM APO Macro",
    );
    map.insert("1408".to_string(), "Sigma 18-50mm F2.8 EX DC");
    map.insert("1409".to_string(), "Sigma 18-50mm F2.8 EX DC Macro");
    map.insert("1410".to_string(), "Sigma 18-50mm F2.8 EX DC HSM Macro");
    map.insert("1411".to_string(), "Sigma 17-50mm F2.8 EX DC OS HSM");
    map.insert("1416".to_string(), "Sigma 24-35mm F2 DG HSM | A");
    map.insert("1417".to_string(), "Sigma APO 70-200mm F2.8 EX DG OS HSM");
    map.insert("1428".to_string(), "Sigma 300-800mm F5.6 EX HSM IF APO");
    map.insert("1429".to_string(), "Sigma 300-800mm F5.6 EX DG APO HSM");
    map.insert("1431".to_string(), "Sigma 200-500mm F2.8 APO EX DG");
    map.insert(
        "1448".to_string(),
        "Sigma 70-300mm F4-5.6 APO DG Macro (Motorized)",
    );
    map.insert(
        "1449".to_string(),
        "Sigma 70-300mm F4-5.6 DG Macro (Motorized)",
    );
    map.insert("1541".to_string(), "Sigma 24-70mm F3.5-5.6 ASP HF");
    map.insert("1587".to_string(), "Sigma 28-70mm F2.8-4 HS");
    map.insert("1588".to_string(), "Sigma 28-70mm F2.8-4 DG");
    map.insert("1589".to_string(), "Sigma 24-105mm F4 DG OS HSM | A");
    map.insert("16".to_string(), "Sigma 50mm F2.8 EX DG MACRO");
    map.insert("16.1".to_string(), "Sigma 70mm F2.8 EX DG Macro");
    map.insert("16.2".to_string(), "Sigma 105mm F2.8 EX DG Macro");
    map.insert("1604".to_string(), "Sigma 28-80mm F3.5-5.6 ASP HF Macro");
    map.insert(
        "1625".to_string(),
        "Sigma 28-80mm F3.5-5.6 Mini Zoom Macro II ASP",
    );
    map.insert("1633".to_string(), "Sigma 28-105mm F2.8-4 IF ASP");
    map.insert("1635".to_string(), "Sigma 28-105mm F3.8-5.6 IF UC-III ASP");
    map.insert("1636".to_string(), "Sigma 28-105mm F2.8-4 IF DG ASP");
    map.insert(
        "16385".to_string(),
        "Lumix S 24-105mm F4 Macro OIS (S-R24105)",
    );
    map.insert("16386".to_string(), "Lumix S 70-200mm F4 OIS (S-R70200)");
    map.insert("16387".to_string(), "Lumix S 50mm F1.4 (S-X50)");
    map.insert("1639".to_string(), "Sigma 24-135mm F2.8-4.5 IF ASP");
    map.insert("16390".to_string(), "Lumix S 24-70mm F2.8 (S-E2470)");
    map.insert("16391".to_string(), "Lumix S 16-35mm F4 (S-R1635)");
    map.insert("16392".to_string(), "Lumix S 70-200mm F2.8 OIS (S-E70200)");
    map.insert("16395".to_string(), "Lumix S 20-60mm F3.5-5.6 (S-R2060)");
    map.insert("16396".to_string(), "Lumix S 85mm F1.8 (S-S85)");
    map.insert(
        "16397".to_string(),
        "Lumix S 70-300 F4.5-5.6 Macro OIS (S-R70300)",
    );
    map.insert("16399".to_string(), "Lumix S 24mm F1.8 (S-S24)");
    map.insert("1640".to_string(), "Sigma 17-70mm F2.8-4 DC Macro OS HSM");
    map.insert("16400".to_string(), "Lumix S 35mm F1.8 (S-S35)");
    map.insert("16401".to_string(), "LUMIX S 18mm F1.8 (S-S18)");
    map.insert("1641".to_string(), "Sigma 17-70mm F2.8-4.5 DC HSM Macro");
    map.insert("1668".to_string(), "Sigma 55-200mm F4-5.6 DC");
    map.insert("1670".to_string(), "Sigma 50-200mm F4-5.6 DC OS HSM");
    map.insert("1673".to_string(), "Sigma 17-70mm F2.8-4.5 DC Macro");
    map.insert("1680".to_string(), "Sigma 50-150mm F2.8 EX DC HSM APO");
    map.insert("1681".to_string(), "Sigma 50-150mm F2.8 EX DC APO HSM II");
    map.insert("1682".to_string(), "Sigma APO 50-150mm F2.8 EX DC OS HSM");
    map.insert("1683".to_string(), "Sigma 50-100mm F1.8 DC HSM | A");
    map.insert("1801".to_string(), "Sigma 28-135mm F3.8-5.6 IF ASP Macro");
    map.insert("1827".to_string(), "Sigma 135-400mm F4.5-5.6 ASP APO");
    map.insert("1829".to_string(), "Sigma 80-400mm F4.5-5.6 EX OS");
    map.insert("1830".to_string(), "Sigma 80-400mm F4.5-5.6 EX DG OS APO");
    map.insert("1831".to_string(), "Sigma 135-400mm F4.5-5.6 DG ASP APO");
    map.insert("1832".to_string(), "Sigma 120-400mm F4.5-5.6 DG APO OS HSM");
    map.insert("1833".to_string(), "Sigma 100-400mm F5-6.3 DG OS HSM | C");
    map.insert("1840".to_string(), "Sigma 60-600mm F4.5-6.3 DG OS HSM | S");
    map.insert("1843".to_string(), "Sigma 170-500mm F5-6.3 ASP APO");
    map.insert("1844".to_string(), "Sigma 170-500mm F5-6.3 DG ASP APO");
    map.insert("1845".to_string(), "Sigma 50-500mm F4-6.3 EX RF HSM APO");
    map.insert("1846".to_string(), "Sigma 50-500mm F4-6.3 EX DG HSM APO");
    map.insert("1847".to_string(), "Sigma 150-500mm F5-6.3 APO DG OS HSM");
    map.insert("1848".to_string(), "Sigma 50-500mm F4.5-6.3 APO DG OS HSM");
    map.insert("1856".to_string(), "Sigma 150-600mm F5-6.3 DG OS HSM | S");
    map.insert("1861".to_string(), "Sigma 150-600mm F5-6.3 DG OS HSM | C");
    map.insert("1911".to_string(), "Sigma 18-200mm F3.5-6.3 DC");
    map.insert("1917".to_string(), "Sigma 18-200mm F3.5-6.3 DC (Motorized)");
    map.insert(
        "1925".to_string(),
        "Sigma 28-200mm F3.5-5.6 DL ASP IF HZM Macro",
    );
    map.insert(
        "1927".to_string(),
        "Sigma 28-200mm F3.5-5.6 Compact ASP HZ Macro",
    );
    map.insert("1929".to_string(), "Sigma 18-125mm F3.5-5.6 DC");
    map.insert("1936".to_string(), "Sigma 28-300mm F3.5-6.3 DL ASP IF HZM");
    map.insert("1939".to_string(), "Sigma 28-300mm F3.5-6.3 Macro");
    map.insert(
        "1940".to_string(),
        "Sigma 28-200mm F3.5-5.6 DG Compact ASP HZ Macro",
    );
    map.insert("1941".to_string(), "Sigma 28-300mm F3.5-6.3 DG Macro");
    map.insert("2083".to_string(), "Sigma 1.4X TC EX APO");
    map.insert("2084".to_string(), "Sigma 1.4X Teleconverter EX APO DG");
    map.insert("2131".to_string(), "Sigma 18-125mm F3.8-5.6 DC OS HSM");
    map.insert("2145".to_string(), "Sigma 18-50mm F2.8-4.5 DC OS HSM");
    map.insert("2160".to_string(), "Sigma 2.0X Teleconverter TC-2001");
    map.insert("2165".to_string(), "Sigma 2.0X TC EX APO");
    map.insert("2166".to_string(), "Sigma 2.0X Teleconverter EX APO DG");
    map.insert("2169".to_string(), "Sigma 1.4X Teleconverter TC-1401");
    map.insert("2176".to_string(), "Sigma 18-250mm F3.5-6.3 DC OS HSM");
    map.insert("2178".to_string(), "Sigma 18-200mm F3.5-6.3 II DC OS HSM");
    map.insert(
        "2179".to_string(),
        "Sigma 18-250mm F3.5-6.3 DC Macro OS HSM",
    );
    map.insert(
        "2180".to_string(),
        "Sigma 17-70mm F2.8-4 DC OS HSM Macro | C",
    );
    map.insert(
        "2181".to_string(),
        "Sigma 18-200mm F3.5-6.3 DC OS HSM Macro | C",
    );
    map.insert(
        "2182".to_string(),
        "Sigma 18-300mm F3.5-6.3 DC OS HSM Macro | C",
    );
    map.insert("2184".to_string(), "Sigma 18-200mm F3.5-6.3 DC OS");
    map.insert("2192".to_string(), "Sigma Mount Converter MC-11");
    map.insert("22".to_string(), "Sigma 18-50mm F3.5-5.6 DC");
    map.insert("2345".to_string(), "Sigma 60mm F2.8 DN | A");
    map.insert("24577".to_string(), "Sigma 150-600mm F5-6.3 DG OS HSM | S");
    map.insert("24579".to_string(), "Sigma 45mm F2.8 DG DN | C");
    map.insert("24581".to_string(), "Sigma 14-24mm F2.8 DG DN | A");
    map.insert("24582".to_string(), "Sigma 50mm F1.4 DG HSM | A");
    map.insert("24593".to_string(), "Sigma 24-70mm F2.8 DG DN | A");
    map.insert("24594".to_string(), "Sigma 100-400mm F5-6.3 DG DN OS | C");
    map.insert(
        "24595".to_string(),
        "Sigma 100-400mm F5-6.3 DG DN OS | C + TC-1411",
    );
    map.insert("24597".to_string(), "Sigma 85mm F1.4 DG DN | A");
    map.insert("24599".to_string(), "Sigma 65mm F2 DG DN | C");
    map.insert("24600".to_string(), "Sigma 35mm F2 DG DN | C");
    map.insert("24602".to_string(), "Sigma 28-70mm F2.8 DG DN | C");
    map.insert("24603".to_string(), "Sigma 150-600mm F5-6.3 DG DN OS | S");
    map.insert("24608".to_string(), "Sigma 35mm F1.4 DG DN | A");
    map.insert("24609".to_string(), "Sigma 90mm F2.8 DG DN | C");
    map.insert("24611".to_string(), "Sigma 20mm F2 DG DN | C");
    map.insert("24613".to_string(), "Sigma 20mm F1.4 DG DN | A");
    map.insert("24614".to_string(), "Sigma 24mm F1.4 DG DN | A");
    map.insert("24620".to_string(), "Sigma 50mm F1.4 DG DN | A (2023)");
    map.insert("259".to_string(), "Sigma 180mm F3.5 EX IF HSM APO Macro");
    map.insert("260".to_string(), "Sigma 150mm F2.8 EX DG HSM APO Macro");
    map.insert("261".to_string(), "Sigma 180mm F3.5 EX DG HSM APO Macro");
    map.insert("262".to_string(), "Sigma 150mm F2.8 EX DG OS HSM APO Macro");
    map.insert("263".to_string(), "Sigma 180mm F2.8 EX DG OS HSM APO Macro");
    map.insert("297".to_string(), "Sigma Lens (0x129)");
    map.insert("297.1".to_string(), "Sigma 14mm F2.8 EX Aspherical");
    map.insert("297.2".to_string(), "Sigma 30mm F1.4");
    map.insert("305".to_string(), "Sigma Lens (0x131)");
    map.insert("305.1".to_string(), "Sigma 17-70mm F2.8-4.5 DC Macro");
    map.insert("305.2".to_string(), "Sigma 70-200mm F2.8 APO EX HSM");
    map.insert("305.3".to_string(), "Sigma 120-300mm F2.8 APO EX IF HSM");
    map.insert("308".to_string(), "Sigma 100-300mm F4 EX DG HSM APO");
    map.insert("309".to_string(), "Sigma 120-300mm F2.8 EX DG HSM APO");
    map.insert("310".to_string(), "Sigma 120-300mm F2.8 EX DG OS HSM APO");
    map.insert("311".to_string(), "Sigma 120-300mm F2.8 DG OS HSM | S");
    map.insert("323".to_string(), "Sigma 600mm F8 Mirror");
    map.insert("325".to_string(), "Sigma Lens (0x145)");
    map.insert(
        "325.1".to_string(),
        "Sigma 15-30mm F3.5-4.5 EX DG Aspherical",
    );
    map.insert("325.2".to_string(), "Sigma 18-50mm F2.8 EX DG");
    map.insert("325.3".to_string(), "Sigma 20-40mm F2.8 EX DG");
    map.insert("32773".to_string(), "Sigma 35mm F1.4 DG HSM | A");
    map.insert("32777".to_string(), "Sigma 18-35mm F1.8 DC HSM | A");
    map.insert("336".to_string(), "Sigma 30mm F1.4 DC HSM");
    map.insert("338".to_string(), "Sigma Lens (0x152)");
    map.insert("338.1".to_string(), "Sigma APO 800mm F5.6 EX DG HSM");
    map.insert("338.2".to_string(), "Sigma 12-24mm F4.5-5.6 EX DG ASP HSM");
    map.insert("338.3".to_string(), "Sigma 10-20mm F4-5.6 EX DC HSM");
    map.insert("35072".to_string(), "Sigma 70-300mm F4-5.6 DG OS");
    map.insert("357".to_string(), "Sigma 70-200mm F2.8 EX");
    map.insert("361".to_string(), "Sigma 18-50mm F2.8 EX DC");
    map.insert("387".to_string(), "Sigma 500mm F4.5 EX HSM APO");
    map.insert("388".to_string(), "Sigma 500mm F4.5 EX DG HSM APO");
    map.insert("389".to_string(), "Sigma 500mm F4 DG OS HSM | S");
    map.insert("404".to_string(), "Sigma 300mm F2.8 EX HSM APO");
    map.insert("405".to_string(), "Sigma 300mm F2.8 EX DG HSM APO");
    map.insert("4099".to_string(), "Sigma 19mm F2.8");
    map.insert("4100".to_string(), "Sigma 30mm F2.8");
    map.insert("4101".to_string(), "Sigma 50mm F2.8 Macro");
    map.insert("4102".to_string(), "Sigma 19mm F2.8");
    map.insert("4103".to_string(), "Sigma 30mm F2.8");
    map.insert("4104".to_string(), "Sigma 50mm F2.8 Macro");
    map.insert("4105".to_string(), "Sigma 14mm F4");
    map.insert("41216".to_string(), "Sigma 24-70mm F2.8 DG Macro");
    map.insert("512".to_string(), "Sigma 12-24mm F4.5-5.6 EX DG ASP HSM");
    map.insert("513".to_string(), "Sigma 10-20mm F4-5.6 EX DC HSM");
    map.insert("514".to_string(), "Sigma 10-20mm F3.5 EX DC HSM");
    map.insert("515".to_string(), "Sigma 8-16mm F4.5-5.6 DC HSM");
    map.insert("516".to_string(), "Sigma 12-24mm F4.5-5.6 DG HSM II");
    map.insert("517".to_string(), "Sigma 12-24mm F4 DG HSM | A");
    map.insert("528".to_string(), "Sigma 18-35mm F1.8 DC HSM | A");
    map.insert("576".to_string(), "Sigma 135mm F1.8 DG HSM | A");
    map.insert("598".to_string(), "Sigma 105mm F2.8 EX Macro");
    map.insert("599".to_string(), "Sigma 105mm F2.8 EX DG Macro");
    map.insert("600".to_string(), "Sigma 105mm F2.8 EX DG OS HSM Macro");
    map.insert("601".to_string(), "Sigma 105mm F1.4 DG HSM | A");
    map.insert("624".to_string(), "Sigma 70mm F2.8 EX DG Macro");
    map.insert("625".to_string(), "Sigma 70mm F2.8 DG Macro | A");
    map.insert("768".to_string(), "Sigma 30mm F1.4 EX DC HSM");
    map.insert("769".to_string(), "Sigma 30mm F1.4 DC HSM | A");
    map.insert("770".to_string(), "Sigma 30mm F1.4 DC DN | C");
    map.insert("784".to_string(), "Sigma 50mm F1.4 EX DG HSM");
    map.insert("785".to_string(), "Sigma 50mm F1.4 DG HSM | A");
    map.insert("800".to_string(), "Sigma 85mm F1.4 EX DG HSM");
    map.insert("801".to_string(), "Sigma 85mm F1.4 DG HSM | A");
    map.insert("816".to_string(), "Sigma 30mm F2.8 EX DN");
    map.insert("832".to_string(), "Sigma 35mm F1.4 DG HSM");
    map.insert("837".to_string(), "Sigma 50mm F2.8 EX Macro");
    map.insert("838".to_string(), "Sigma 50mm F2.8 EX DG Macro");
    map.insert("848".to_string(), "Sigma 60mm F2.8 DN | A");
    map
});

static PRINT_CONV_4: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "n/a");
    map.insert("1".to_string(), "Sepia");
    map.insert("2".to_string(), "B&W");
    map.insert("3".to_string(), "Standard");
    map.insert("4".to_string(), "Vivid");
    map.insert("5".to_string(), "Neutral");
    map.insert("6".to_string(), "Portrait");
    map.insert("7".to_string(), "Landscape");
    map.insert("8".to_string(), "FOV Classic Blue");
    map
});

/// Get tag definitions for other category
pub fn get_other_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (12, TagKitDef {
            id: 12,
            name: "ExposureCompensation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ s/Expo:\\s*//, $val"),
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "ExposureAdjust",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "Contrast",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ s/Cont:\\s*//, $val"),
            subdirectory: None,
        }),
        (13, TagKitDef {
            id: 13,
            name: "Contrast",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (132, TagKitDef {
            id: 132,
            name: "Model",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (134, TagKitDef {
            id: 134,
            name: "ISO",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "Shadow",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ s/Shad:\\s*//, $val"),
            subdirectory: None,
        }),
        (14, TagKitDef {
            id: 14,
            name: "Shadow",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (15, TagKitDef {
            id: 15,
            name: "Highlight",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ s/High:\\s*//, $val"),
            subdirectory: None,
        }),
        (15, TagKitDef {
            id: 15,
            name: "Highlight",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (16, TagKitDef {
            id: 16,
            name: "Saturation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ s/Satu:\\s*//, $val"),
            subdirectory: None,
        }),
        (16, TagKitDef {
            id: 16,
            name: "Saturation",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (17, TagKitDef {
            id: 17,
            name: "Sharpness",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ s/Shar:\\s*//, $val"),
            subdirectory: None,
        }),
        (17, TagKitDef {
            id: 17,
            name: "Sharpness",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (18, TagKitDef {
            id: 18,
            name: "X3FillLight",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ s/Fill:\\s*//, $val"),
            subdirectory: None,
        }),
        (18, TagKitDef {
            id: 18,
            name: "X3FillLight",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "ColorAdjustment",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ s/CC:\\s*//, $val"),
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "ColorAdjustment",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (22, TagKitDef {
            id: 22,
            name: "Quality",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ s/Qual:\\s*//, $val"),
            subdirectory: None,
        }),
        (24, TagKitDef {
            id: 24,
            name: "Software",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (25, TagKitDef {
            id: 25,
            name: "AutoBracket",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression(r"$val =~ s/(\d)of(\d)/$1 of $2/; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (26, TagKitDef {
            id: 26,
            name: "PreviewImageStart",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("Sigma Photo Pro writes ChrominanceNoiseReduction here, but various\n                models use this for PreviewImageStart"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (26, TagKitDef {
            id: 26,
            name: "ChrominanceNoiseReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ s/Chro:\\s*//, $val"),
            subdirectory: None,
        }),
        (27, TagKitDef {
            id: 27,
            name: "PreviewImageLength",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("Sigma Photo Pro writes LuminanceNoiseReduction here, but various models use\n                this for PreviewImageLength"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (27, TagKitDef {
            id: 27,
            name: "LuminanceNoiseReduction",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$val =~ s/Luma:\\s*//, $val"),
            subdirectory: None,
        }),
        (28, TagKitDef {
            id: 28,
            name: "PreviewImageSize",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("PreviewImageStart for the SD1 and Merrill/Quattro models, and\n                PreviewImageSize for others"),
            print_conv: PrintConvType::Expression(r"$val =~ tr/ /x/; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (28, TagKitDef {
            id: 28,
            name: "PreviewImageStart",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (29, TagKitDef {
            id: 29,
            name: "MakerNoteVersion",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: Some("PreviewImageLength for the SD1 and Merrill/Quattro models, and\n                MakerNoteVersion for others"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (29, TagKitDef {
            id: 29,
            name: "PreviewImageLength",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (30, TagKitDef {
            id: 30,
            name: "PreviewImageSize",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("only valid for some models"),
            print_conv: PrintConvType::Expression(r"$val =~ tr/ /x/; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (31, TagKitDef {
            id: 31,
            name: "AFPoint",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("MakerNoteVersion for the SD1 and Merrill/Quattro models, and AFPoint for\n                others"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (31, TagKitDef {
            id: 31,
            name: "MakerNoteVersion",
            format: "undef",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (312, TagKitDef {
            id: 312,
            name: "Fade",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (313, TagKitDef {
            id: 313,
            name: "Vignette",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (34, TagKitDef {
            id: 34,
            name: "FileFormat",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("models other than the SD1 and Merrill/Quattro models"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (36, TagKitDef {
            id: 36,
            name: "Calibration",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("models other than the SD1 and Merrill/Quattro models"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (38, TagKitDef {
            id: 38,
            name: "FileFormat",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("some newer models only"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (39, TagKitDef {
            id: 39,
            name: "LensType",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("some newer models only"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_2),
            value_conv: Some("$val =~ /^[0-9a-f]+$/i ? hex($val) : $val"),
            subdirectory: None,
        }),
        (39, TagKitDef {
            id: 39,
            name: "LensType",
            format: "int16u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("some other models like the fp"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_3),
            value_conv: None,
            subdirectory: None,
        }),
        (42, TagKitDef {
            id: 42,
            name: "LensFocalRange",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("some newer models only"),
            print_conv: PrintConvType::Expression(r"$val=~s/ / to /; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (43, TagKitDef {
            id: 43,
            name: "LensMaxApertureRange",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("some newer models only"),
            print_conv: PrintConvType::Expression(r"$val=~s/ / to /; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (44, TagKitDef {
            id: 44,
            name: "ColorMode",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("not valid for some models"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_4),
            value_conv: None,
            subdirectory: None,
        }),
        (48, TagKitDef {
            id: 48,
            name: "LensApertureRange",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("Calibration for the SD1 and Merrill/Quattro models, and LensApertureRange\n                for others. Note that LensApertureRange changes with focal length, and some\n                models report the maximum aperture here"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (48, TagKitDef {
            id: 48,
            name: "Calibration",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (49, TagKitDef {
            id: 49,
            name: "FNumber",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("models other than the SD1 and Merrill/Quattro models"),
            print_conv: PrintConvType::Expression("sprintf(\"%.1f\",$val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (52, TagKitDef {
            id: 52,
            name: "BurstShot",
            format: "int32u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("models other than the SD1 and Merrill/Quattro models"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (53, TagKitDef {
            id: 53,
            name: "ExposureCompensation",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("models other than the SD1 and Merrill/Quattro models"),
            print_conv: PrintConvType::Expression(r"$val and $val =~ s/^(\d)/\+$1/; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (57, TagKitDef {
            id: 57,
            name: "SensorTemperature",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("models other than the SD1 and Merrill/Quattro models"),
            print_conv: PrintConvType::Expression("IsInt($val) ? \"$val C\" : $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (58, TagKitDef {
            id: 58,
            name: "FlashExposureComp",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("models other than the SD1 and Merrill/Quattro models"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (59, TagKitDef {
            id: 59,
            name: "Firmware",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("models other than the SD1 and Merrill/Quattro models"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (60, TagKitDef {
            id: 60,
            name: "WhiteBalance",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("models other than the SD1 and Merrill/Quattro models"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (61, TagKitDef {
            id: 61,
            name: "PictureMode",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("same as ColorMode, but \"Standard\" when ColorMode is Sepia or B&W"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (71, TagKitDef {
            id: 71,
            name: "ExposureCompensation",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Expression(r"$val and $val =~ s/^(\d)/\+$1/; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (72, TagKitDef {
            id: 72,
            name: "LensApertureRange",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("some newer models only"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (73, TagKitDef {
            id: 73,
            name: "FNumber",
            format: "rational64u",
            groups: HashMap::new(),
            writable: true,
            notes: Some("some newer models only"),
            print_conv: PrintConvType::Expression("sprintf(\"%.1f\",$val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (77, TagKitDef {
            id: 77,
            name: "ExposureCompensation",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("some newer models only"),
            print_conv: PrintConvType::Expression(r"$val and $val =~ s/^(\d)/\+$1/; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (85, TagKitDef {
            id: 85,
            name: "SensorTemperature",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("some newer models only"),
            print_conv: PrintConvType::Expression("IsInt($val) ? \"$val C\" : $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (86, TagKitDef {
            id: 86,
            name: "FlashExposureComp",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("some newer models only"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (87, TagKitDef {
            id: 87,
            name: "Firmware2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("some newer models only"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (88, TagKitDef {
            id: 88,
            name: "WhiteBalance",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("some newer models only"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (89, TagKitDef {
            id: 89,
            name: "DigitalFilter",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("some newer models only"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "WB_RGBLevelsAuto",
            format: "float[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "WB_RGBLevelsIncandescent",
            format: "float[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (15, TagKitDef {
            id: 15,
            name: "WB_RGBLevelsFluorescent",
            format: "float[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (18, TagKitDef {
            id: 18,
            name: "WB_RGBLevelsFlash",
            format: "float[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (21, TagKitDef {
            id: 21,
            name: "WB_RGBLevelsCustom1",
            format: "float[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (24, TagKitDef {
            id: 24,
            name: "WB_RGBLevelsCustom2",
            format: "float[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (27, TagKitDef {
            id: 27,
            name: "WB_RGBLevelsCustom3",
            format: "float[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "WB_RGBLevelsUnknown0",
            format: "float[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "WB_RGBLevelsUnknown4",
            format: "float[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (15, TagKitDef {
            id: 15,
            name: "WB_RGBLevelsUnknown5",
            format: "float[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (18, TagKitDef {
            id: 18,
            name: "WB_RGBLevelsUnknown6",
            format: "float[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (21, TagKitDef {
            id: 21,
            name: "WB_RGBLevelsUnknown7",
            format: "float[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (24, TagKitDef {
            id: 24,
            name: "WB_RGBLevelsUnknown8",
            format: "float[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (27, TagKitDef {
            id: 27,
            name: "WB_RGBLevelsUnknown9",
            format: "float[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
    ]
}
