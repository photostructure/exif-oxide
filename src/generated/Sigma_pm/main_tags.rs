//! Generated tag table definitions from Sigma::Main
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{
    exposuretime_print_conv, fnumber_print_conv, gpsaltitude_print_conv, lensinfo_print_conv,
    print_fraction,
};
use crate::implementations::value_conv::{
    exif_date_value_conv, gps_coordinate_value_conv, gpstimestamp_value_conv,
    reciprocal_10_value_conv, reference_long_string_value_conv,
    reference_very_long_string_value_conv,
};

/// Tag definitions for Sigma::Main table
pub static SIGMA_MAIN_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            8,
            TagInfo {
                name: "ExposureMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            9,
            TagInfo {
                name: "MeteringMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            22,
            TagInfo {
                name: "Quality",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Expression(
                    "$val =~ s/Qual:\\s*//, $val".to_string(),
                )),
            },
        ),
        (
            24,
            TagInfo {
                name: "Software",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            25,
            TagInfo {
                name: "AutoBracket",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val =~ s/(\\d)of(\\d)/$1 of $2/; $val".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            30,
            TagInfo {
                name: "PreviewImageSize",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("$val =~ tr/ /x/; $val".to_string())),
                value_conv: None,
            },
        ),
        (
            34,
            TagInfo {
                name: "FileFormat",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            36,
            TagInfo {
                name: "Calibration",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            38,
            TagInfo {
                name: "FileFormat",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            42,
            TagInfo {
                name: "LensFocalRange",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("$val=~s/ / to /; $val".to_string())),
                value_conv: None,
            },
        ),
        (
            43,
            TagInfo {
                name: "LensMaxApertureRange",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("$val=~s/ / to /; $val".to_string())),
                value_conv: None,
            },
        ),
        (
            44,
            TagInfo {
                name: "ColorMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            49,
            TagInfo {
                name: "FNumber",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
                value_conv: None,
            },
        ),
        (
            50,
            TagInfo {
                name: "ExposureTime",
                format: "unknown",
                print_conv: Some(PrintConv::Function(exposuretime_print_conv)),
                value_conv: None,
            },
        ),
        (
            51,
            TagInfo {
                name: "ExposureTime2",
                format: "unknown",
                print_conv: Some(PrintConv::Function(exposuretime_print_conv)),
                value_conv: Some(ValueConv::Expression("$val * 1e-6".to_string())),
            },
        ),
        (
            52,
            TagInfo {
                name: "BurstShot",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            53,
            TagInfo {
                name: "ExposureCompensation",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val and $val =~ s/^(\\d)/\\+$1/; $val".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            57,
            TagInfo {
                name: "SensorTemperature",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "IsInt($val) ? \"$val C\" : $val".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            58,
            TagInfo {
                name: "FlashExposureComp",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            59,
            TagInfo {
                name: "Firmware",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            60,
            TagInfo {
                name: "WhiteBalance",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            61,
            TagInfo {
                name: "PictureMode",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            71,
            TagInfo {
                name: "ExposureCompensation",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val and $val =~ s/^(\\d)/\\+$1/; $val".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            72,
            TagInfo {
                name: "LensApertureRange",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            73,
            TagInfo {
                name: "FNumber",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
                value_conv: None,
            },
        ),
        (
            74,
            TagInfo {
                name: "ExposureTime",
                format: "unknown",
                print_conv: Some(PrintConv::Function(exposuretime_print_conv)),
                value_conv: None,
            },
        ),
        (
            77,
            TagInfo {
                name: "ExposureCompensation",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val and $val =~ s/^(\\d)/\\+$1/; $val".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            85,
            TagInfo {
                name: "SensorTemperature",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "IsInt($val) ? \"$val C\" : $val".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            86,
            TagInfo {
                name: "FlashExposureComp",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            87,
            TagInfo {
                name: "Firmware2",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            88,
            TagInfo {
                name: "WhiteBalance",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            89,
            TagInfo {
                name: "DigitalFilter",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            132,
            TagInfo {
                name: "Model",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            134,
            TagInfo {
                name: "ISO",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            275,
            TagInfo {
                name: "PictureModeStrength",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            287,
            TagInfo {
                name: "CameraCalibration",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            288,
            TagInfo {
                name: "WBSettings",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            289,
            TagInfo {
                name: "WBSettings2",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            312,
            TagInfo {
                name: "Fade",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            313,
            TagInfo {
                name: "Vignette",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SIGMA_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SIGMA_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
