//! Generated tag table definitions from Sigma::Main
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_30::ast_value_30791c0bd9d5eab2;
use crate::generated::functions::hash_45::ast_print_45781a09f536a8e0;
use crate::generated::functions::hash_4e::ast_print_4e5e992f9b388e54;
use crate::generated::functions::hash_84::ast_print_8470e30e1e5b4729;
use crate::generated::functions::hash_c6::ast_print_c60ce4347d672501;
use crate::generated::functions::hash_d1::ast_print_d1ea0bc590f67427;
use crate::generated::functions::hash_d3::ast_print_d367e2a7f0ec6d0c;
use crate::generated::functions::hash_e4::ast_print_e4e7cb74671abf2f;
use crate::generated::functions::hash_f8::ast_value_f87b1058f4dbdeaa;

/// Tag definitions for Sigma::Main table
pub static SIGMA_MAIN_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            8,
            TagInfo {
                name: "ExposureMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            9,
            TagInfo {
                name: "MeteringMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            22,
            TagInfo {
                name: "Quality",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_30791c0bd9d5eab2)),
            },
        ),
        (
            24,
            TagInfo {
                name: "Software",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            25,
            TagInfo {
                name: "AutoBracket",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_e4e7cb74671abf2f)),
                value_conv: None,
            },
        ),
        (
            30,
            TagInfo {
                name: "PreviewImageSize",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_4e5e992f9b388e54)),
                value_conv: None,
            },
        ),
        (
            34,
            TagInfo {
                name: "FileFormat",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            36,
            TagInfo {
                name: "Calibration",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            38,
            TagInfo {
                name: "FileFormat",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            42,
            TagInfo {
                name: "LensFocalRange",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_d1ea0bc590f67427)),
                value_conv: None,
            },
        ),
        (
            43,
            TagInfo {
                name: "LensMaxApertureRange",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_d1ea0bc590f67427)),
                value_conv: None,
            },
        ),
        (
            44,
            TagInfo {
                name: "ColorMode",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            49,
            TagInfo {
                name: "FNumber",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_8470e30e1e5b4729)),
                value_conv: None,
            },
        ),
        (
            50,
            TagInfo {
                name: "ExposureTime",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_c60ce4347d672501)),
                value_conv: None,
            },
        ),
        (
            51,
            TagInfo {
                name: "ExposureTime2",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_c60ce4347d672501)),
                value_conv: Some(ValueConv::Function(ast_value_f87b1058f4dbdeaa)),
            },
        ),
        (
            52,
            TagInfo {
                name: "BurstShot",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            53,
            TagInfo {
                name: "ExposureCompensation",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_d367e2a7f0ec6d0c)),
                value_conv: None,
            },
        ),
        (
            57,
            TagInfo {
                name: "SensorTemperature",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_45781a09f536a8e0)),
                value_conv: None,
            },
        ),
        (
            58,
            TagInfo {
                name: "FlashExposureComp",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            59,
            TagInfo {
                name: "Firmware",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            60,
            TagInfo {
                name: "WhiteBalance",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            61,
            TagInfo {
                name: "PictureMode",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            71,
            TagInfo {
                name: "ExposureCompensation",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_d367e2a7f0ec6d0c)),
                value_conv: None,
            },
        ),
        (
            72,
            TagInfo {
                name: "LensApertureRange",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            73,
            TagInfo {
                name: "FNumber",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_8470e30e1e5b4729)),
                value_conv: None,
            },
        ),
        (
            74,
            TagInfo {
                name: "ExposureTime",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_c60ce4347d672501)),
                value_conv: None,
            },
        ),
        (
            77,
            TagInfo {
                name: "ExposureCompensation",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_d367e2a7f0ec6d0c)),
                value_conv: None,
            },
        ),
        (
            85,
            TagInfo {
                name: "SensorTemperature",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_45781a09f536a8e0)),
                value_conv: None,
            },
        ),
        (
            86,
            TagInfo {
                name: "FlashExposureComp",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            87,
            TagInfo {
                name: "Firmware2",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            88,
            TagInfo {
                name: "WhiteBalance",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            89,
            TagInfo {
                name: "DigitalFilter",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            132,
            TagInfo {
                name: "Model",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            134,
            TagInfo {
                name: "ISO",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            275,
            TagInfo {
                name: "PictureModeStrength",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            287,
            TagInfo {
                name: "CameraCalibration",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            288,
            TagInfo {
                name: "WBSettings",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            289,
            TagInfo {
                name: "WBSettings2",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            312,
            TagInfo {
                name: "Fade",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            313,
            TagInfo {
                name: "Vignette",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SIGMA_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value, None),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = SIGMA_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value, None),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
