//! Generated AST functions for hash prefix 76
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{ExifContext, TagValue};
use codegen_runtime::{
    math::{abs, atan2, cos, exp, int, log, sin, sqrt, IsFloat},
    string::{chr, length_i32, length_string, uc},
};

/// Original perl expression:
/// ``` perl
/// $val / ($val >= 1024 ? 1024 : ($val >= 256 ? 256 : 100))
/// ```
/// Used by:
/// - PanasonicRaw::Main.Gamma
pub fn ast_value_7626d89bf49583a2(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    Ok(val
        / (if (val >= 1024i32) {
            1024i32
        } else {
            (if (val >= 256i32) { 256i32 } else { 100i32 })
        }))
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// my $on = ((($val >> 8) & 0x0f) == 1) ? 'On' : 'Off';
/// return sprintf('%s (0x%.4x)', $on, $val);
/// ```
/// Used by:
/// - FujiFilm::Main.FlickerReduction
/// TODO: Add support for this expression pattern
pub fn ast_print_76b92beaaba5ca0b(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    tracing::warn!("Missing implementation for expression in {}", file!());
    codegen_runtime::missing::missing_print_conv(
                    0, // tag_id will be filled at runtime
                    "UnknownTag", // tag_name will be filled at runtime
                    "UnknownGroup", // group will be filled at runtime
                    "my $on = ((($val >> 8) & 0x0f) == 1) ? \'On\' : \'Off\';\n            return sprintf(\'%s (0x%.4x)\', $on, $val);", // original expression
                    val
                )
}
