//! Generated AST functions for hash prefix AD
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{ExifContext, TagValue};
use codegen_runtime::{
    math::{abs, atan2, cos, exp, int, log, sin, sqrt, IsFloat},
    string::{chr, length_i32, length_string, uc},
};

/// Original perl expression:
/// ``` perl
/// $val/6
/// ```
/// Used by:
/// - Nikon::IntervalInfoD6.FlashMasterCompensation
/// - Nikon::MenuSettingsZ6III.FlashMasterCompensation
/// - Nikon::MenuSettingsZ7II.FlashMasterCompensation
/// - Nikon::MenuSettingsZ9.FlashMasterCompensation
/// - Nikon::MenuSettingsZ9v3.FlashMasterCompensation
/// - Nikon::MenuSettingsZ9v4.FlashMasterCompensation
pub fn ast_value_ada28829e28f9303(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    Ok((val / 6i32))
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// sprintf("%4d %4d %4d (%dK)", split(" ",$val))
/// ```
/// Used by:
/// - Canon::ColorCalib.CameraColorCalibration01
/// - Canon::ColorCalib.CameraColorCalibration02
/// - Canon::ColorCalib.CameraColorCalibration03
/// - Canon::ColorCalib.CameraColorCalibration04
/// - Canon::ColorCalib.CameraColorCalibration05
/// - Canon::ColorCalib.CameraColorCalibration06
/// - Canon::ColorCalib.CameraColorCalibration07
/// - Canon::ColorCalib.CameraColorCalibration08
/// - Canon::ColorCalib.CameraColorCalibration09
/// - Canon::ColorCalib.CameraColorCalibration10
/// - Canon::ColorCalib.CameraColorCalibration11
/// - Canon::ColorCalib.CameraColorCalibration12
/// - Canon::ColorCalib.CameraColorCalibration13
/// - Canon::ColorCalib.CameraColorCalibration14
/// - Canon::ColorCalib.CameraColorCalibration15
/// TODO: Add support for this expression pattern
pub fn ast_print_ad5045ef02b4c16f(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    tracing::warn!("Missing implementation for expression in {}", file!());
    codegen_runtime::missing::missing_print_conv(
        0,                                                   // tag_id will be filled at runtime
        "UnknownTag",                                        // tag_name will be filled at runtime
        "UnknownGroup",                                      // group will be filled at runtime
        "sprintf(\"%4d %4d %4d (%dK)\", split(\" \",$val))", // original expression
        val,
    )
}
