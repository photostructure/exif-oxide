//! Generated AST functions for hash prefix 15
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{ExifContext, TagValue};
use codegen_runtime::{
    math::{exp, int, log},
    string::{length_i32, length_string},
};

/// Original perl expression:
/// ``` perl
/// "$val%"
/// ```
/// Used by:
/// - FujiFilm::Main.AutoDynamicRange
/// - Photoshop::ChannelOptions.ChannelOpacity
/// - Sony::CameraSettings.BatteryLevel
/// - Sony::ExtraInfo.BatteryLevel
/// - Sony::ExtraInfo2.BatteryLevel
/// - Sony::ExtraInfo3.BatteryLevel
/// - Sony::Tag9406.BatteryLevel
/// - Sony::Tag9406.BatteryLevelGrip1
/// - Sony::Tag9406.BatteryLevelGrip2
/// - Sony::Tag9406b.BatteryLevel
/// - Sony::Tag9406b.BatteryLevel2
pub fn ast_print_15d3bbdbc77bdb90(val: &TagValue) -> TagValue {
    format!("{}%", val).into()
}

/// Original perl expression:
/// ``` perl
/// $val == 4294965247 ? "n/a" : $val
/// ```
/// Used by:
/// - Nikon::Main.ShutterCount
pub fn ast_print_155f09e06c458602(val: &TagValue) -> TagValue {
    if (val == 4294965247i32) {
        "n/a".into()
    } else {
        val
    }
}

/// Original perl expression:
/// ``` perl
/// ($val >> 16) . "." . ($val & 0xffff)
/// ```
/// Used by:
/// - SigmaRaw::Header.FileVersion
/// - SigmaRaw::Header4.FileVersion
pub fn ast_value_15cf16a8ad9f58e5(
    val: &TagValue,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    Ok(TagValue::String(
        format!("{}{}", (val >> 16i32), "." . ((val & 0xffffu32))),
    ))
}

/// Original perl expression:
/// ``` perl
/// 53190 - $val
/// ```
/// Used by:
/// - Pentax::Main.ColorTemperature
pub fn ast_value_15b61e0dd2629a12(
    val: &TagValue,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    Ok((53190i32 - val))
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// my @a = split ' ', $val;
/// return $a[2] ? sprintf('%3dx%3d', $a[0], $a[1]) : 'n/a';
/// ```
/// Used by:
/// - Sony::Main.FocusFrameSize
/// TODO: Add support for this expression pattern
pub fn ast_print_15baaa80ffdd285a(val: &TagValue) -> TagValue {
    tracing::warn!("Missing implementation for expression in {}", file!());
    val.clone()
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// sprintf("%.2x:%.2x:%.2x:%.2x",reverse unpack("C*",$val))
/// ```
/// Used by:
/// - H264::MDPM.TimeCode
/// TODO: Add support for this expression pattern
pub fn ast_value_1535cc61d3e15b8b(
    val: &TagValue,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    tracing::warn!("Missing implementation for expression in {}", file!());
    Ok(val.clone())
}
