//! Generated AST functions for hash prefix AA
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{ExifContext, TagValue};
use codegen_runtime::{
    math::{abs, atan2, cos, exp, int, log, sin, sqrt, IsFloat},
    string::{chr, length_i32, length_string, uc},
};

/// Original perl expression:
/// ``` perl
/// "$val Hz"
/// ```
/// Used by:
/// - Nikon::ShotInfoD800.RepeatingFlashRateBuilt-in
/// - Nikon::ShotInfoD800.RepeatingFlashRateExternal
pub fn ast_print_aabd3f97f7321fbc(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    Into::<TagValue>::into(format!("{} Hz", val))
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// $val =~ s/(\d+) (\d+)/$2\/$1/; $val
/// ```
/// Used by:
/// - RIFF::Acidizer.Meter
/// TODO: Add support for this expression pattern
pub fn ast_print_aa93afa3ba8c29d4(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    tracing::warn!("Missing implementation for expression in {}", file!());
    codegen_runtime::missing::missing_print_conv(
        0,                                        // tag_id will be filled at runtime
        "UnknownTag",                             // tag_name will be filled at runtime
        "UnknownGroup",                           // group will be filled at runtime
        "$val =~ s/(\\d+) (\\d+)/$2\\/$1/; $val", // original expression
        val,
    )
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// my $tagInfo = $Image::ExifTool::Matroska::Main{$val};
/// $val = sprintf('0x%x', $val);
/// $val .= " ($$tagInfo{Name})" if ref $tagInfo eq 'HASH' and $$tagInfo{Name};
/// return $val;
/// ```
/// Used by:
/// - Matroska::Main.SeekID
/// TODO: Add support for this expression pattern
pub fn ast_print_aaf44bf2fde8c749(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    tracing::warn!("Missing implementation for expression in {}", file!());
    codegen_runtime::missing::missing_print_conv(
                    0, // tag_id will be filled at runtime
                    "UnknownTag", // tag_name will be filled at runtime
                    "UnknownGroup", // group will be filled at runtime
                    "my $tagInfo = $Image::ExifTool::Matroska::Main{$val};\n            $val = sprintf(\'0x%x\', $val);\n            $val .= \" ($$tagInfo{Name})\" if ref $tagInfo eq \'HASH\' and $$tagInfo{Name};\n            return $val;", // original expression
                    val
                )
}
