//! Generated AST functions for hash prefix 1F
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{ExifContext, TagValue};
use codegen_runtime::{
    math::{exp, int, log},
    string::{length_i32, length_string},
};

/// Original perl expression:
/// ``` perl
/// -$val/256
/// ```
/// Used by:
/// - Sony::Tag2010a.ExposureCompensation
/// - Sony::Tag2010b.ExposureCompensation
/// - Sony::Tag2010c.ExposureCompensation
/// - Sony::Tag2010e.ExposureCompensation
/// - Sony::Tag2010f.ExposureCompensation
/// - Sony::Tag2010g.ExposureCompensation
/// - Sony::Tag2010h.ExposureCompensation
/// - Sony::Tag2010i.ExposureCompensation
pub fn ast_value_1f3cbbb3d7cfc943(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    Ok((codegen_runtime::negate(val) / 256i32))
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// $val == 0xff and return 'Variable';
/// my $sign = ($val & 0x80) ? 'Signed' : 'Unsigned';
/// return (($val & 0x7f) + 1) . " Bits, $sign";
/// ```
/// Used by:
/// - Jpeg2000::ImageHeader.BitsPerComponent
/// TODO: Add support for this expression pattern
pub fn ast_print_1f60a9abccfeb56(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    tracing::warn!("Missing implementation for expression in {}", file!());
    codegen_runtime::missing::missing_print_conv(
                    0, // tag_id will be filled at runtime
                    "UnknownTag", // tag_name will be filled at runtime
                    "UnknownGroup", // group will be filled at runtime
                    "$val == 0xff and return \'Variable\';\n            my $sign = ($val & 0x80) ? \'Signed\' : \'Unsigned\';\n            return (($val & 0x7f) + 1) . \" Bits, $sign\";", // original expression
                    val
                )
}
