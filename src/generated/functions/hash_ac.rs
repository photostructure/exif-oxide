//! Generated AST functions for hash prefix AC
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{ExifContext, TagValue};
use codegen_runtime::{
    math::{abs, atan2, cos, exp, int, log, sin, sqrt, IsFloat},
    string::{chr, length_i32, length_string, uc},
};

/// Original perl expression:
/// ``` perl
/// $val > 0 ? 8*$val : "n.a."
/// ```
/// Used by:
/// - Sony::Tag9400a.SonyImageHeight
/// - Sony::Tag9400b.SonyImageHeight
pub fn ast_print_ac819f699b1427c4(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    if (val > 0i32) {
        (8i32 * val)
    } else {
        Into::<TagValue>::into("n.a.")
    }
}

/// Original perl expression:
/// ``` perl
/// ($val & 0x3fff) + 1
/// ```
/// Used by:
/// - RIFF::VP8L.ImageWidth
pub fn ast_value_aca221497f1eb51c(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    Ok((val & 0x3fffu32) + 1i32)
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// (($val >> 2) & 0xffff) . " " . ($val & 0x3)
/// ```
/// Used by:
/// - Panasonic::Data1.LensType
/// TODO: Add support for this expression pattern
pub fn ast_value_ac0e8b8bbf4b643f(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    tracing::warn!("Missing implementation for expression in {}", file!());
    Ok(codegen_runtime::missing::missing_value_conv(
        0,                                               // tag_id will be filled at runtime
        "UnknownTag",                                    // tag_name will be filled at runtime
        "UnknownGroup",                                  // group will be filled at runtime
        "(($val >> 2) & 0xffff) . \" \" . ($val & 0x3)", // original expression
        val,
    ))
}
