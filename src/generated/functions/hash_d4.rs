//! Generated AST functions for hash prefix D4
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{ExifContext, TagValue};
use codegen_runtime::{
    math::{exp, int, log},
    string::{length_i32, length_string},
};

/// Original perl expression:
/// ``` perl
/// $val ? "$val byte" . ($val==1 ? "" : "s") : "Variable"
/// ```
/// Used by:
/// - RIFF::StreamHeader.SampleSize
pub fn ast_print_d43fd7a703ae1653(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    if val {
        TagValue::String(format!(
            "{}{}",
            format!("{} byte", val).into(),
            (if (val == 1i32) { "".into() } else { "s".into() })
        ))
    } else {
        "Variable".into()
    }
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// $val ? sprintf("%.1f sec",$val/1000) : "Off"
/// ```
/// Used by:
/// - Nikon::MenuSettingsZ9v4.ExposureDelay
/// TODO: Add support for this expression pattern
pub fn ast_print_d4f2f6797789d4ee(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    tracing::warn!("Missing implementation for expression in {}", file!());
    codegen_runtime::missing::missing_print_conv(
        0,                                                  // tag_id will be filled at runtime
        "UnknownTag",                                       // tag_name will be filled at runtime
        "UnknownGroup",                                     // group will be filled at runtime
        "$val ? sprintf(\"%.1f sec\",$val/1000) : \"Off\"", // original expression
        val,
    )
}
