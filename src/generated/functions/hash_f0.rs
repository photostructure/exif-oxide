//! Generated AST functions for hash prefix F0
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{ExifContext, TagValue};
use codegen_runtime::{
    math::{exp, int, log},
    string::{length_i32, length_string},
};

/// Original perl expression:
/// ``` perl
/// int($val + 0.5)
/// ```
/// Used by:
/// - Kodak::Type10.ISO
/// - Nikon::ISOInfo.ISO
/// - Nikon::ISOInfo.ISO2
/// - Nikon::ShotInfoD300S.ISO2
/// - Nikon::ShotInfoD300a.ISO2
/// - Nikon::ShotInfoD300b.ISO2
/// - Nikon::ShotInfoD3X.ISO2
/// - Nikon::ShotInfoD5000.ISO2
/// - Nikon::ShotInfoD700.ISO2
/// - Nikon::ShotInfoD90.ISO2
/// - Pentax::AEInfo2.AE_ISO
/// - Pentax::AEInfo3.AE_ISO
pub fn ast_print_f0406a5cf107f00d(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    int((val + 0.5f64))
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// $val == 255 ? "Strobe or Misfire" : sprintf("%.0f%%", $val * 100)
/// ```
/// Used by:
/// - Canon::ColorData3.FlashOutput
/// TODO: Add support for this expression pattern
pub fn ast_print_f0a9b201612fbfd0(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    tracing::warn!("Missing implementation for expression in {}", file!());
    codegen_runtime::missing::missing_print_conv(
        0,              // tag_id will be filled at runtime
        "UnknownTag",   // tag_name will be filled at runtime
        "UnknownGroup", // group will be filled at runtime
        "$val == 255 ? \"Strobe or Misfire\" : sprintf(\"%.0f%%\", $val * 100)", // original expression
        val,
    )
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// $val=~s/ +$//; $val
/// ```
/// Used by:
/// - Exif::Main.SubSecTime
/// - Exif::Main.SubSecTimeDigitized
/// - Exif::Main.SubSecTimeOriginal
/// - Panasonic::Leica6.LensType
/// - Panasonic::Main.AccessorySerialNumber
/// - Panasonic::Main.AccessoryType
/// - Panasonic::Main.LensSerialNumber
/// - Panasonic::Main.LensType
/// TODO: Add support for this expression pattern
pub fn ast_value_f0ad119439d04a33(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    tracing::warn!("Missing implementation for expression in {}", file!());
    Ok(codegen_runtime::missing::missing_value_conv(
        0,                     // tag_id will be filled at runtime
        "UnknownTag",          // tag_name will be filled at runtime
        "UnknownGroup",        // group will be filled at runtime
        "$val=~s/ +$//; $val", // original expression
        val,
    ))
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// length($val)==4 ? sprintf("%.4d:%.2d:%.2d",unpack("nC2",$val)) : "Unknown ($val)"
/// ```
/// Used by:
/// - Pentax::Main.Date
/// TODO: Add support for this expression pattern
pub fn ast_value_f0974ef9a0a8813d(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    tracing::warn!("Missing implementation for expression in {}", file!());
    Ok(codegen_runtime::missing::missing_value_conv(
        0,              // tag_id will be filled at runtime
        "UnknownTag",   // tag_name will be filled at runtime
        "UnknownGroup", // group will be filled at runtime
        "length($val)==4 ? sprintf(\"%.4d:%.2d:%.2d\",unpack(\"nC2\",$val)) : \"Unknown ($val)\"", // original expression
        val,
    ))
}
