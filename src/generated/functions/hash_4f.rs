//! Generated AST functions for hash prefix 4F
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{ExifContext, TagValue};
use codegen_runtime::{
    math::{exp, int, log},
    string::{length_i32, length_string},
};

/// Original perl expression:
/// ``` perl
/// $val / 128
/// ```
/// Used by:
/// - Sony::ExtraInfo3.BatteryVoltage1
/// - Sony::ExtraInfo3.BatteryVoltage2
pub fn ast_value_4ffb07b2339cdeec(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    Ok((val / 128i32))
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// $val =~ s/(\d{2})/$1./; $val
/// ```
/// Used by:
/// - Nikon::MakerNotes0x56.FirmwareVersion56
/// TODO: Add support for this expression pattern
pub fn ast_value_4f90f27dec9aa072(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    tracing::warn!("Missing implementation for expression in {}", file!());
    Ok(codegen_runtime::missing::missing_value_conv(
        0,                               // tag_id will be filled at runtime
        "UnknownTag",                    // tag_name will be filled at runtime
        "UnknownGroup",                  // group will be filled at runtime
        "$val =~ s/(\\d{2})/$1./; $val", // original expression
        val,
    ))
}
