//! Generated AST functions for hash prefix 99
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{TagValue, ExifContext};

/// Original perl expression:
/// ``` perl
/// "$val Ah"
/// ```
/// Used by:
/// - GoPro::KBAT.BatteryCapacity
pub fn ast_print_993ce46cc3d936eb(val: &TagValue) -> TagValue {
    format!("{} Ah", val)
}


/// Original perl expression:
/// ``` perl
/// $val || "inf"
/// ```
/// Used by:
/// - PNG::AnimationControl.AnimationPlays
/// - RIFF::ANIM.AnimationLoopCount
pub fn ast_print_9957cfcd700746af(val: &TagValue) -> TagValue {
    val || "inf"
}


/// Original perl expression:
/// ``` perl
/// 2**($val / 8) / 16000
/// ```
/// Used by:
/// - KyoceraRaw::Main.ExposureTime
pub fn ast_value_99d1796b50c9db89(val: &TagValue) -> Result<TagValue, crate::types::ExifError> {
    Ok((2 as f64).powf((val / 8) / 16000 as f64))
}


/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// 
/// if ($val =~ /^(.*?\s*)([0-9a-fA-F]*)(\d{2})(\d{2})(\d{2})(.{12})\s*\0*$/s
/// and $4 >= 1 and $4 <= 12 and $5 >= 1 and $5 <= 31)
/// {
/// my $yr = $3 + ($3 < 70 ? 2000 : 1900);
/// my $sn = pack 'H*', $2;
/// return "$1$sn $yr:$4:$5 $6";
/// } else {
/// # handle a couple of models which use a slightly different format
/// $val =~ s/\b(592D(3[0-9])+)/pack("H*",$1).' '/e;
/// }
/// return $val;
/// 
/// ```
/// Used by:
/// - FujiFilm::Main.InternalSerialNumber
/// TODO: Add support for this expression pattern
pub fn ast_print_99f2663c86a2cff(val: &TagValue) -> TagValue
{
    tracing::warn!("Missing implementation for expression in {}", file!());
    val.clone()
}


