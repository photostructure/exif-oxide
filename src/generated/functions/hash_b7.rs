//! Generated AST functions for hash prefix B7
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{ExifContext, TagValue};
use codegen_runtime::{
    math::{exp, int, log},
    string::{length_i32, length_string},
};

/// Original perl expression:
/// ``` perl
/// exp($val/32*log(2))*100/32
/// ```
/// Used by:
/// - Canon::ShotInfo.BaseISO
pub fn ast_value_b74a49b788fbe61c(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    Ok(((exp(((val / 32i32) * log((2i32)))) * 100i32) / 32i32))
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// $_=$val;s/^0 //;$_
/// ```
/// Used by:
/// - Nikon::Main.ISOSetting
/// TODO: Add support for this expression pattern
pub fn ast_print_b777f2fa21c400c(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    tracing::warn!("Missing implementation for expression in {}", file!());
    codegen_runtime::missing::missing_print_conv(
        0,                    // tag_id will be filled at runtime
        "UnknownTag",         // tag_name will be filled at runtime
        "UnknownGroup",       // group will be filled at runtime
        "$_=$val;s/^0 //;$_", // original expression
        val,
    )
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// $val ? sprintf("%+.1f", $val) : 0
/// ```
/// Used by:
/// - FujiFilm::MOV.ExposureCompensation
/// - FujiFilm::RAF.RawExposureBias
/// - FujiFilm::RAF.RelativeExposure
/// - Nikon::IntervalInfoD6.FlashMasterCompensation
/// - Nikon::Main.ExposureDifference
/// - Nikon::MenuSettingsZ6III.FlashMasterCompensation
/// - Nikon::MenuSettingsZ7II.FlashMasterCompensation
/// - Nikon::MenuSettingsZ9.FlashMasterCompensation
/// - Nikon::MenuSettingsZ9v3.FlashMasterCompensation
/// - Nikon::MenuSettingsZ9v4.FlashMasterCompensation
/// - Pentax::MOV.ExposureCompensation
/// - Pentax::Main.SensitivityAdjust
/// - Pentax::PENT.ExposureCompensation
/// - Ricoh::Main.FlashExposureComp
/// - Samsung::MP4.ExposureCompensation
/// - Sanyo::MP4.ExposureCompensation
/// - Sony::CameraSettings.ExposureCompensationSet
/// - Sony::CameraSettings.FlashExposureCompSet
/// - Sony::CameraSettings2.ExposureCompensationSet
/// - Sony::CameraSettings2.FlashExposureCompSet
/// - Sony::Main.ExposureStandardAdjustment
/// - Sony::MoreSettings.ExposureCompensation2
/// - Sony::Tag2010a.ExposureCompensation
/// - Sony::Tag2010b.ExposureCompensation
/// - Sony::Tag2010c.ExposureCompensation
/// - Sony::Tag2010e.ExposureCompensation
/// - Sony::Tag2010f.ExposureCompensation
/// - Sony::Tag2010g.ExposureCompensation
/// - Sony::Tag2010h.ExposureCompensation
/// - Sony::Tag2010i.ExposureCompensation
/// TODO: Add support for this expression pattern
pub fn ast_print_b75f5f46a9f320cf(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    tracing::warn!("Missing implementation for expression in {}", file!());
    codegen_runtime::missing::missing_print_conv(
        0,                                     // tag_id will be filled at runtime
        "UnknownTag",                          // tag_name will be filled at runtime
        "UnknownGroup",                        // group will be filled at runtime
        "$val ? sprintf(\"%+.1f\", $val) : 0", // original expression
        val,
    )
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// $val=~/[\0-\x2f]/ ? join(" ",unpack("C*",$val)) : $val
/// ```
/// Used by:
/// - Panasonic::Main.FirmwareVersion
/// TODO: Add support for this expression pattern
pub fn ast_value_b7b5c432b9d85328(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    tracing::warn!("Missing implementation for expression in {}", file!());
    Ok(codegen_runtime::missing::missing_value_conv(
        0,                                                              // tag_id will be filled at runtime
        "UnknownTag",   // tag_name will be filled at runtime
        "UnknownGroup", // group will be filled at runtime
        "$val=~/[\\0-\\x2f]/ ? join(\" \",unpack(\"C*\",$val)) : $val", // original expression
        val,
    ))
}
