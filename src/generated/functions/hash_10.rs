//! Generated AST functions for hash prefix 10
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{ExifContext, TagValue};
use codegen_runtime::{
    math::{abs, atan2, cos, exp, int, log, sin, sqrt, IsFloat},
    string::{chr, length_i32, length_string, uc},
};

/// Original perl expression:
/// ``` perl
/// exp(Image::ExifTool::Canon::CanonEv($val*4-32)*log(2)/2)
/// ```
/// Used by:
/// - CanonCustom::PersonalFuncValues.PF5ApertureMax
/// - CanonCustom::PersonalFuncValues.PF5ApertureMin
pub fn ast_value_1072171a0b3828b9(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    Ok(exp(val.clone()))
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// my ($a,$b,$c)=split ' ',$val;
/// if ($self->{Model} =~ /^E-1\b/) {
/// $a-=$b; $c-=$b;
/// return "CS$a (min CS0, max CS$c)";
/// } else {
/// return "$a (min $b, max $c)";
/// }
/// ```
/// Used by:
/// - Olympus::CameraSettings.CustomSaturation
/// TODO: Add support for this expression pattern
pub fn ast_print_103361d26a5af32d(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    tracing::warn!("Missing implementation for expression in {}", file!());
    codegen_runtime::missing::missing_print_conv(
                    0, // tag_id will be filled at runtime
                    "UnknownTag", // tag_name will be filled at runtime
                    "UnknownGroup", // group will be filled at runtime
                    "my ($a,$b,$c)=split \' \',$val;\n            if ($self->{Model} =~ /^E-1\\b/) {\n                $a-=$b; $c-=$b;\n                return \"CS$a (min CS0, max CS$c)\";\n            } else {\n                return \"$a (min $b, max $c)\";\n            }", // original expression
                    val
                )
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// my @v=split(" ",$val);
/// return $val / 1000 if @v == 1;
/// return $v[1] ? "$v[1]-$v[0]" : ($v[0] > 10000 ? $v[0] / 1000 : $v[0]);
/// ```
/// Used by:
/// - Casio::Type2.CaptureFrameRate
/// TODO: Add support for this expression pattern
pub fn ast_value_1034313b8375eef0(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    tracing::warn!("Missing implementation for expression in {}", file!());
    Ok(codegen_runtime::missing::missing_value_conv(
                    0, // tag_id will be filled at runtime
                    "UnknownTag", // tag_name will be filled at runtime
                    "UnknownGroup", // group will be filled at runtime
                    "my @v=split(\" \",$val);\n            return $val / 1000 if @v == 1;\n            return $v[1] ? \"$v[1]-$v[0]\" : ($v[0] > 10000 ? $v[0] / 1000 : $v[0]);", // original expression
                    val
                ))
}
