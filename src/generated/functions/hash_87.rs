//! Generated AST functions for hash prefix 87
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{ExifContext, TagValue};
use codegen_runtime::{
    math::{exp, int, log},
    string::{length_i32, length_string},
};

/// Original perl expression:
/// ``` perl
/// $val =~ /^(inf|undef)$/ ? $val : "$val m"
/// ```
/// Used by:
/// - GPS::Main.GPSAltitude
/// - Pentax::PENT.GPSAltitude
pub fn ast_print_8764401e4e5a97bf(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    if {
        use regex::Regex;
        use std::sync::LazyLock;
        static REGEX_f893aee228dc6318: LazyLock<Regex> =
            LazyLock::new(|| Regex::new(r"^(inf|undef)$").unwrap());
        REGEX_f893aee228dc6318.is_match(&val.to_string())
    } {
        val
    } else {
        format!("{} m", val).into()
    }
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// my $str = sprintf('%.8x', $val);
/// $str =~ s/(..)(..)(..)(..)/$1:$2:$3:$4/;
/// return $str;
/// ```
/// Used by:
/// - RIFF::Sampler.SMPTEOffset
/// TODO: Add support for this expression pattern
pub fn ast_value_879d7ecabc496495(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    tracing::warn!("Missing implementation for expression in {}", file!());
    Ok(codegen_runtime::missing::missing_value_conv(
                    0, // tag_id will be filled at runtime
                    "UnknownTag", // tag_name will be filled at runtime
                    "UnknownGroup", // group will be filled at runtime
                    "my $str = sprintf(\'%.8x\', $val);\n            $str =~ s/(..)(..)(..)(..)/$1:$2:$3:$4/;\n            return $str;", // original expression
                    val
                ))
}
