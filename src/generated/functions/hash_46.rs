//! Generated AST functions for hash prefix 46
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{ExifContext, TagValue};

/// Original perl expression:
/// ``` perl
/// $val & 0x01 ? $val * 4 : $val / 2
/// ```
/// Used by:
/// - Pentax::SRInfo.SRFocalLength
pub fn ast_value_46ca3f250be86611(val: &TagValue) -> Result<TagValue, crate::types::ExifError> {
    Ok(if val & 0x01 { val * 4 } else { val / 2 })
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// my @v=split(" ",$val); $_*=15 foreach @v; "$v[1] $v[0] $v[3] $v[2]"
/// ```
/// Used by:
/// - Sony::FaceInfo.Face1Position
/// - Sony::FaceInfo.Face2Position
/// - Sony::FaceInfo.Face3Position
/// - Sony::FaceInfo.Face4Position
/// - Sony::FaceInfo.Face5Position
/// - Sony::FaceInfo.Face6Position
/// - Sony::FaceInfo.Face7Position
/// - Sony::FaceInfo.Face8Position
/// - Sony::FaceInfoA.Face1Position
/// - Sony::FaceInfoA.Face2Position
/// - Sony::FaceInfoA.Face3Position
/// - Sony::FaceInfoA.Face4Position
/// - Sony::FaceInfoA.PotentialFace1Position
/// - Sony::FaceInfoA.PotentialFace2Position
/// - Sony::FaceInfoA.PotentialFace3Position
/// - Sony::FaceInfoA.PotentialFace4Position
/// - Sony::FaceInfoA.PotentialFace5Position
/// - Sony::FaceInfoA.PotentialFace6Position
/// - Sony::FaceInfoA.PotentialFace7Position
/// - Sony::FaceInfoA.PotentialFace8Position
/// TODO: Add support for this expression pattern
pub fn ast_value_462402e4c245880c(val: &TagValue) -> Result<TagValue, crate::types::ExifError> {
    tracing::warn!("Missing implementation for expression in {}", file!());
    Ok(val.clone())
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// sprintf("%.10d",$val)
/// ```
/// Used by:
/// - Panasonic::Leica6.LensSerialNumber
/// TODO: Add support for this expression pattern
pub fn ast_print_46a2e64bb40e5c4a(val: &TagValue) -> TagValue {
    tracing::warn!("Missing implementation for expression in {}", file!());
    val.clone()
}
