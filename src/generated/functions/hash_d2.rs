//! Generated AST functions for hash prefix D2
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{ExifContext, TagValue};

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// $val / 1e5
/// ```
/// Used by:
/// - Kodak::Main.ExposureTime
/// - Kodak::SubIFD0.ExposureTime
/// - Kodak::Type10.ExposureTime
/// - Kodak::Type3.ExposureTime
/// - Kodak::Type5.ExposureTime
/// - Kodak::Type6.ExposureTime
/// - Panasonic::Subdir.ExternalSensorBrightnessValue
/// - Panasonic::Subdir.MeasuredLV
/// TODO: Add support for this expression pattern
pub fn ast_value_d257a2f28a742d8d(val: &TagValue) -> Result<TagValue, crate::types::ExifError> {
    tracing::warn!("Missing implementation for expression in {}", file!());
    Ok(val.clone())
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// $val ? sprintf("%.2f m",$val) : "inf"
/// ```
/// Used by:
/// - Nikon::LensData01.FocusDistance
/// - Nikon::LensData0204.FocusDistance
/// - Nikon::LensData0800.FocusDistance
/// TODO: Add support for this expression pattern
pub fn ast_print_d23a0db383ac12a7(val: &TagValue) -> TagValue {
    tracing::warn!("Missing implementation for expression in {}", file!());
    val.clone()
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// my ($a,$b,$c)=unpack("c3",$val); $c ? $a*($b/$c) : 0
/// ```
/// Used by:
/// - Nikon::Main.ExposureDifference
/// - Nikon::Main.ExposureTuning
/// - Nikon::Main.ExternalFlashExposureComp
/// - Nikon::Main.FlashExposureBracketValue
/// - Nikon::Main.FlashExposureComp
/// - Nikon::Main.ProgramShift
/// TODO: Add support for this expression pattern
pub fn ast_value_d25c2abd9d1305a3(val: &TagValue) -> Result<TagValue, crate::types::ExifError> {
    tracing::warn!("Missing implementation for expression in {}", file!());
    Ok(val.clone())
}
