//! Generated AST functions for hash prefix EE
//!
//! This file is auto-generated by codegen/src/ppi/fn_registry/mod.rs.
//! DO NOT EDIT MANUALLY.

#![allow(dead_code, unused_variables, unreachable_code)]

use crate::types::{ExifContext, TagValue};
use codegen_runtime::{
    math::{abs, atan2, cos, exp, int, log, sin, sqrt, IsFloat},
    string::{chr, length_i32, length_string, uc},
};

/// Original perl expression:
/// ``` perl
/// $val / 100
/// ```
/// Used by:
/// - Canon::CameraInfo1000D.FocusDistanceLower
/// - Canon::CameraInfo1000D.FocusDistanceUpper
/// - Canon::CameraInfo1DX.FocusDistanceLower
/// - Canon::CameraInfo1DX.FocusDistanceUpper
/// - Canon::CameraInfo1DmkIII.FocusDistanceLower
/// - Canon::CameraInfo1DmkIII.FocusDistanceUpper
/// - Canon::CameraInfo1DmkIV.FocusDistanceLower
/// - Canon::CameraInfo1DmkIV.FocusDistanceUpper
/// - Canon::CameraInfo40D.FocusDistanceLower
/// - Canon::CameraInfo40D.FocusDistanceUpper
/// - Canon::CameraInfo450D.FocusDistanceLower
/// - Canon::CameraInfo450D.FocusDistanceUpper
/// - Canon::CameraInfo500D.FocusDistanceLower
/// - Canon::CameraInfo500D.FocusDistanceUpper
/// - Canon::CameraInfo50D.FocusDistanceLower
/// - Canon::CameraInfo50D.FocusDistanceUpper
/// - Canon::CameraInfo550D.FocusDistanceLower
/// - Canon::CameraInfo550D.FocusDistanceUpper
/// - Canon::CameraInfo5DmkII.FocusDistanceLower
/// - Canon::CameraInfo5DmkII.FocusDistanceUpper
/// - Canon::CameraInfo5DmkIII.FocusDistanceLower
/// - Canon::CameraInfo5DmkIII.FocusDistanceUpper
/// - Canon::CameraInfo600D.FocusDistanceLower
/// - Canon::CameraInfo600D.FocusDistanceUpper
/// - Canon::CameraInfo60D.FocusDistanceLower
/// - Canon::CameraInfo60D.FocusDistanceUpper
/// - Canon::CameraInfo650D.FocusDistanceLower
/// - Canon::CameraInfo650D.FocusDistanceUpper
/// - Canon::CameraInfo6D.FocusDistanceLower
/// - Canon::CameraInfo6D.FocusDistanceUpper
/// - Canon::CameraInfo70D.FocusDistanceLower
/// - Canon::CameraInfo70D.FocusDistanceUpper
/// - Canon::CameraInfo750D.FocusDistanceLower
/// - Canon::CameraInfo750D.FocusDistanceUpper
/// - Canon::CameraInfo7D.FocusDistanceLower
/// - Canon::CameraInfo7D.FocusDistanceUpper
/// - Canon::CameraInfo80D.FocusDistanceLower
/// - Canon::CameraInfo80D.FocusDistanceUpper
/// - Canon::FileInfo.FocusDistanceLower
/// - Canon::FileInfo.FocusDistanceUpper
/// - Canon::ShotInfo.FocusDistanceLower
/// - Canon::ShotInfo.FocusDistanceUpper
/// - DJI::ThermalParams3.Emissivity
/// - Kodak::CameraInfo.FNumber
/// - Kodak::Main.DigitalZoom
/// - Kodak::Main.FNumber
/// - Kodak::Main.TotalZoom
/// - Kodak::SubIFD0.FNumber
/// - Kodak::SubIFD0.OpticalZoom
/// - Kodak::SubIFD2.FNumber
/// - Kodak::SubIFD2.MaxAperture
/// - Kodak::SubIFD2.OpticalZoom
/// - Kodak::SubIFD3.OpticalZoom
/// - Kodak::SubIFD5.OpticalZoom
/// - Kodak::Type10.FocalLength
/// - Kodak::Type3.FNumber
/// - Kodak::Type3.OpticalZoom
/// - Kodak::Type5.DigitalZoom
/// - Kodak::Type5.FNumber
/// - Kodak::Type5.OpticalZoom
/// - Kodak::Type6.DigitalZoom
/// - Kodak::Type6.FNumber
/// - Kodak::Type6.OpticalZoom
/// - Panasonic::Main.TimeSincePowerOn
/// - Pentax::Main.DigitalZoom
/// - Sony::PMP.ExposureCompensation
/// - Sony::PMP.FNumber
/// - Sony::PMP.FocalLength
/// - Sony::rtmd.MasterGainAdjustment
pub fn ast_value_ee9b0901d11400f9(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    Ok((val / 100i32))
}

/// Original perl expression:
/// ``` perl
/// 2**(($val-80)/12)
/// ```
/// Used by:
/// - Nikon::LensData0800.FocusDistance
pub fn ast_value_ee91ddedc5e86fe3(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    Ok(power(2i32, ((val - 80i32) / 12i32)))
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// ($val >> 8) + 1
/// ```
/// Used by:
/// - RIFF::VP8X.ImageHeight
/// TODO: Add support for this expression pattern
pub fn ast_value_ee373eddfb12a7cf(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    tracing::warn!("Missing implementation for expression in {}", file!());
    Ok(codegen_runtime::missing::missing_value_conv(
        0,                 // tag_id will be filled at runtime
        "UnknownTag",      // tag_name will be filled at runtime
        "UnknownGroup",    // group will be filled at runtime
        "($val >> 8) + 1", // original expression
        val,
    ))
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// Image::ExifTool::Exif::ConvertExifText($self,$val,"BorderName")
/// ```
/// Used by:
/// - Kodak::Borders.BorderName
/// TODO: Add support for this expression pattern
pub fn ast_print_ee86c0adbbb71bec(val: &TagValue, ctx: Option<&ExifContext>) -> TagValue {
    tracing::warn!("Missing implementation for expression in {}", file!());
    codegen_runtime::missing::missing_print_conv(
        0,              // tag_id will be filled at runtime
        "UnknownTag",   // tag_name will be filled at runtime
        "UnknownGroup", // group will be filled at runtime
        "Image::ExifTool::Exif::ConvertExifText($self,$val,\"BorderName\")", // original expression
        val,
    )
}

/// PLACEHOLDER: Unsupported expression (missing implementation)
/// Original perl expression:
/// ``` perl
/// my @v = split(' ',$val);
/// $v[0] &= 0x0f;
/// $v[1] = $v[3] * 256 + $v[4]; # (always high byte first)
/// return "$v[0] $v[1]";
/// ```
/// Used by:
/// - Pentax::LensInfo5.LensType
/// TODO: Add support for this expression pattern
pub fn ast_value_ee0ba302040a4bb7(
    val: &TagValue,
    ctx: Option<&ExifContext>,
) -> Result<TagValue, codegen_runtime::types::ExifError> {
    tracing::warn!("Missing implementation for expression in {}", file!());
    Ok(codegen_runtime::missing::missing_value_conv(
                    0, // tag_id will be filled at runtime
                    "UnknownTag", // tag_name will be filled at runtime
                    "UnknownGroup", // group will be filled at runtime
                    "my @v = split(\' \',$val);\n            $v[0] &= 0x0f;\n            $v[1] = $v[3] * 256 + $v[4]; # (always high byte first)\n            return \"$v[0] $v[1]\";", // original expression
                    val
                ))
}
