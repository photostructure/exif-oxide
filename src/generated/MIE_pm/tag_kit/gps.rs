//! Tag kits for gps category from MIE.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_0: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "No Correction");
    map.insert("1".to_string(), "Differential Corrected");
    map
});

static PRINT_CONV_1: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("2".to_string(), "2-D");
    map.insert("3".to_string(), "3-D");
    map
});

/// Get tag definitions for gps category
pub fn get_gps_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (0, TagKitDef {
            id: 0,
            name: "GPSAltitude",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("'m' above sea level unless 'ft' specified"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GPSDestBearing",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("'deg' CW from true north unless 'deg{mag}' specified"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GPSDateTime",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$self->ConvertDateTime($val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GPSMapDatum",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("WGS-84 assumed if not specified"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GPSDifferential",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_0),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GPSDestDistance",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("'km' unless 'mi' or 'nmi' specified"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GPSTrack",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("'deg' CW from true north unless 'deg{mag}' specified"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GPSLatitude",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("1 to 3 numbers: degrees, minutes then seconds.  South latitudes are stored\n            as all negative numbers, but may be entered as positive numbers with a\n            trailing 'S' for convenience.  For example, these are all equivalent: \"-40\n            -30\", \"-40.5\", \"40 30 0.00 S\""),
            print_conv: PrintConvType::Expression("Image::ExifTool::GPS::ToDMS($self, $val, 1, \"N\")"),
            value_conv: Some("Image::ExifTool::GPS::ToDegrees($val, 1)"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GPSLongitude",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("1 to 3 numbers: degrees, minutes then seconds.  West longitudes are\n            negative, but may be entered as positive numbers with a trailing 'W'"),
            print_conv: PrintConvType::Expression("Image::ExifTool::GPS::ToDMS($self, $val, 1, \"E\")"),
            value_conv: Some("Image::ExifTool::GPS::ToDegrees($val, 1)"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GPSMeasureMode",
            format: "int8u",
            groups: HashMap::new(),
            writable: true,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_1),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "GPSSpeed",
            format: "rational64s",
            groups: HashMap::new(),
            writable: true,
            notes: Some("'km/h' unless 'mi/h', 'm/s' or 'kn' specified"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
    ]
}
