//! Tag kits for other category from RIFF.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_3: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "none");
    map.insert("1".to_string(), "Level Reduction");
    map
});

static PRINT_CONV_4: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "none");
    map.insert("1".to_string(), "Horizontal");
    map.insert("2".to_string(), "Vertical");
    map.insert("3".to_string(), "Gradient");
    map
});

static PRINT_CONV_5: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "none");
    map.insert("1".to_string(), "Lossless");
    map
});

static PRINT_CONV_6: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("1".to_string(), "Microsoft PCM");
    map.insert("10".to_string(), "WMA 9 Speech");
    map.insert("100".to_string(), "APICOM G.726 ADPCM");
    map.insert("101".to_string(), "APICOM G.722 ADPCM");
    map.insert("102".to_string(), "Microsoft DSAT");
    map.insert("1024".to_string(), "Brooktree Digital");
    map.insert("1025".to_string(), "Intel Music Coder (IMC)");
    map.insert("1026".to_string(), "Ligos Indeo Audio");
    map.insert("103".to_string(), "Microsoft DSAT DISPLAY");
    map.insert("105".to_string(), "Voxware Byte Aligned");
    map.insert("11".to_string(), "Microsoft Windows Media RT Voice");
    map.insert("1104".to_string(), "QDesign Music");
    map.insert("112".to_string(), "Voxware AC8");
    map.insert("113".to_string(), "Voxware AC10");
    map.insert("114".to_string(), "Voxware AC16");
    map.insert("115".to_string(), "Voxware AC20");
    map.insert("116".to_string(), "Voxware MetaVoice");
    map.insert("117".to_string(), "Voxware MetaSound");
    map.insert("118".to_string(), "Voxware RT29HW");
    map.insert("119".to_string(), "Voxware VR12");
    map.insert("120".to_string(), "Voxware VR18");
    map.insert("121".to_string(), "Voxware TQ40");
    map.insert("122".to_string(), "Voxware SC3");
    map.insert("123".to_string(), "Voxware SC3");
    map.insert("128".to_string(), "Soundsoft");
    map.insert("1280".to_string(), "On2 VP7 On2 Technologies");
    map.insert("1281".to_string(), "On2 VP6 On2 Technologies");
    map.insert("129".to_string(), "Voxware TQ60");
    map.insert("130".to_string(), "Microsoft MSRT24");
    map.insert(
        "13075".to_string(),
        "makeAVIS (ffvfw fake AVI sound from AviSynth scripts)",
    );
    map.insert("131".to_string(), "AT&T G.729A");
    map.insert("132".to_string(), "Motion Pixels MVI MV12");
    map.insert("133".to_string(), "DataFusion G.726");
    map.insert("134".to_string(), "DataFusion GSM610");
    map.insert("136".to_string(), "Iterated Systems Audio");
    map.insert("137".to_string(), "Onlive");
    map.insert("138".to_string(), "Multitude, Inc. FT SX20");
    map.insert("139".to_string(), "Infocom ITS A/S G.721 ADPCM");
    map.insert("140".to_string(), "Convedia G729");
    map.insert("141".to_string(), "Not specified congruency, Inc.");
    map.insert("145".to_string(), "Siemens SBC24");
    map.insert("146".to_string(), "Sonic Foundry Dolby AC3 APDIF");
    map.insert("147".to_string(), "MediaSonic G.723");
    map.insert("148".to_string(), "Aculab Prosody 8kbps");
    map.insert("151".to_string(), "ZyXEL ADPCM");
    map.insert("152".to_string(), "Philips LPCBB");
    map.insert("153".to_string(), "Studer Professional Audio Packed");
    map.insert("16".to_string(), "OKI-ADPCM");
    map.insert("160".to_string(), "Malden PhonyTalk");
    map.insert("161".to_string(), "Racal Recorder GSM");
    map.insert("162".to_string(), "Racal Recorder G720.a");
    map.insert("163".to_string(), "Racal G723.1");
    map.insert("164".to_string(), "Racal Tetra ACELP");
    map.insert("1664".to_string(), "AT&T VME VMPCM");
    map.insert("1665".to_string(), "AT&T TCP");
    map.insert("16707".to_string(), "Divio MPEG-4 AAC audio");
    map.insert("16897".to_string(), "Nokia adaptive multirate");
    map.insert("16963".to_string(), "Divio G726 Divio, Inc.");
    map.insert("17".to_string(), "Intel IMA/DVI-ADPCM");
    map.insert("17228".to_string(), "LEAD Speech");
    map.insert("176".to_string(), "NEC AAC NEC Corporation");
    map.insert(
        "1792".to_string(),
        "YMPEG Alpha (dummy for MPEG-2 compressor)",
    );
    map.insert("18".to_string(), "Videologic Mediaspace ADPCM");
    map.insert("19".to_string(), "Sierra ADPCM");
    map.insert("2".to_string(), "Microsoft ADPCM");
    map.insert("20".to_string(), "Antex G.723 ADPCM");
    map.insert("21".to_string(), "DSP Solutions DIGISTD");
    map.insert("22".to_string(), "DSP Solutions DIGIFIX");
    map.insert("22092".to_string(), "LEAD Vorbis");
    map.insert("2222".to_string(), "ClearJump LiteWave (lossless)");
    map.insert("22358".to_string(), "WavPack Audio");
    map.insert("23".to_string(), "Dialoic OKI ADPCM");
    map.insert("24".to_string(), "Media Vision ADPCM");
    map.insert("25".to_string(), "HP CU");
    map.insert("255".to_string(), "AAC");
    map.insert("256".to_string(), "Rhetorex ADPCM");
    map.insert("257".to_string(), "IBM u-Law");
    map.insert("258".to_string(), "IBM a-Law");
    map.insert("259".to_string(), "IBM ADPCM");
    map.insert("26".to_string(), "HP Dynamic Voice");
    map.insert("26447".to_string(), "Ogg Vorbis (mode 1)");
    map.insert("26448".to_string(), "Ogg Vorbis (mode 2)");
    map.insert("26449".to_string(), "Ogg Vorbis (mode 3)");
    map.insert("26479".to_string(), "Ogg Vorbis (mode 1+)");
    map.insert("26480".to_string(), "Ogg Vorbis (mode 2+)");
    map.insert("26481".to_string(), "Ogg Vorbis (mode 3+)");
    map.insert("273".to_string(), "Vivo G.723");
    map.insert("274".to_string(), "Vivo Siren");
    map.insert("28672".to_string(), "3COM NBX 3Com Corporation");
    map.insert("28781".to_string(), "FAAD AAC");
    map.insert("288".to_string(), "Philips Speech Processing CELP");
    map.insert("289".to_string(), "Philips Speech Processing GRUNDIG");
    map.insert("291".to_string(), "Digital G.723");
    map.insert("293".to_string(), "Sanyo LD ADPCM");
    map.insert("3".to_string(), "Microsoft IEEE float");
    map.insert("304".to_string(), "Sipro Lab ACEPLNET");
    map.insert("305".to_string(), "Sipro Lab ACELP4800");
    map.insert("306".to_string(), "Sipro Lab ACELP8V3");
    map.insert("307".to_string(), "Sipro Lab G.729");
    map.insert("308".to_string(), "Sipro Lab G.729A");
    map.insert("309".to_string(), "Sipro Lab Kelvin");
    map.insert("310".to_string(), "VoiceAge AMR");
    map.insert("31265".to_string(), "GSM-AMR (CBR, no SID)");
    map.insert("31266".to_string(), "GSM-AMR (VBR, including SID)");
    map.insert("32".to_string(), "Yamaha ADPCM");
    map.insert("320".to_string(), "Dictaphone G.726 ADPCM");
    map.insert("33".to_string(), "SONARC Speech Compression");
    map.insert("336".to_string(), "Qualcomm PureVoice");
    map.insert("337".to_string(), "Qualcomm HalfRate");
    map.insert("34".to_string(), "DSP Group True Speech");
    map.insert("341".to_string(), "Ring Zero Systems TUBGSM");
    map.insert("35".to_string(), "Echo Speech Corp.");
    map.insert("352".to_string(), "Microsoft Audio1");
    map.insert(
        "353".to_string(),
        "Windows Media Audio V2 V7 V8 V9 / DivX audio (WMA) / Alex AC3 Audio",
    );
    map.insert("354".to_string(), "Windows Media Audio Professional V9");
    map.insert("355".to_string(), "Windows Media Audio Lossless V9");
    map.insert("356".to_string(), "WMA Pro over S/PDIF");
    map.insert("36".to_string(), "Virtual Music Audiofile AF36");
    map.insert("368".to_string(), "UNISYS NAP ADPCM");
    map.insert("369".to_string(), "UNISYS NAP ULAW");
    map.insert("37".to_string(), "Audio Processing Tech.");
    map.insert("370".to_string(), "UNISYS NAP ALAW");
    map.insert("371".to_string(), "UNISYS NAP 16K");
    map.insert("372".to_string(), "MM SYCOM ACM SYC008 SyCom Technologies");
    map.insert(
        "373".to_string(),
        "MM SYCOM ACM SYC701 G726L SyCom Technologies",
    );
    map.insert(
        "374".to_string(),
        "MM SYCOM ACM SYC701 CELP54 SyCom Technologies",
    );
    map.insert(
        "375".to_string(),
        "MM SYCOM ACM SYC701 CELP68 SyCom Technologies",
    );
    map.insert("376".to_string(), "Knowledge Adventure ADPCM");
    map.insert("38".to_string(), "Virtual Music Audiofile AF10");
    map.insert("384".to_string(), "Fraunhofer IIS MPEG2AAC");
    map.insert("39".to_string(), "Aculab Prosody 1612");
    map.insert("4".to_string(), "Compaq VSELP");
    map.insert("40".to_string(), "Merging Tech. LRC");
    map.insert("400".to_string(), "Digital Theater Systems DTS DS");
    map.insert("4096".to_string(), "Olivetti GSM");
    map.insert("4097".to_string(), "Olivetti ADPCM");
    map.insert("4098".to_string(), "Olivetti CELP");
    map.insert("4099".to_string(), "Olivetti SBC");
    map.insert("4100".to_string(), "Olivetti OPR");
    map.insert("41216".to_string(), "Comverse Infosys Ltd. G723 1");
    map.insert("41217".to_string(), "Comverse Infosys Ltd. AVQSBC");
    map.insert("41218".to_string(), "Comverse Infosys Ltd. OLDSBC");
    map.insert("41219".to_string(), "Symbol Technologies G729A");
    map.insert("41220".to_string(), "VoiceAge AMR WB VoiceAge Corporation");
    map.insert("41221".to_string(), "Ingenient Technologies Inc. G726");
    map.insert("41222".to_string(), "ISO/MPEG-4 advanced audio Coding");
    map.insert("41223".to_string(), "Encore Software Ltd G726");
    map.insert("41225".to_string(), "Speex ACM Codec xiph.org");
    map.insert("4352".to_string(), "Lernout & Hauspie");
    map.insert("4353".to_string(), "Lernout & Hauspie CELP codec");
    map.insert("4354".to_string(), "Lernout & Hauspie SBC codec");
    map.insert("4355".to_string(), "Lernout & Hauspie SBC codec");
    map.insert("4356".to_string(), "Lernout & Hauspie SBC codec");
    map.insert("48".to_string(), "Dolby AC2");
    map.insert("49".to_string(), "Microsoft GSM610");
    map.insert("5".to_string(), "IBM CVSD");
    map.insert("50".to_string(), "MSN Audio");
    map.insert("51".to_string(), "Antex ADPCME");
    map.insert("512".to_string(), "Creative Labs ADPCM");
    map.insert("5120".to_string(), "Norris Comm. Inc.");
    map.insert("5121".to_string(), "ISIAudio");
    map.insert("514".to_string(), "Creative Labs FASTSPEECH8");
    map.insert("515".to_string(), "Creative Labs FASTSPEECH10");
    map.insert("52".to_string(), "Control Resources VQLPC");
    map.insert("528".to_string(), "UHER ADPCM");
    map.insert("53".to_string(), "DSP Solutions DIGIREAL");
    map.insert("533".to_string(), "Ulead DV ACM");
    map.insert("534".to_string(), "Ulead DV ACM");
    map.insert("5376".to_string(), "AT&T Soundspace Music Compression");
    map.insert("54".to_string(), "DSP Solutions DIGIADPCM");
    map.insert("544".to_string(), "Quarterdeck Corp.");
    map.insert("55".to_string(), "Control Resources CR10");
    map.insert("56".to_string(), "Natural MicroSystems VBX ADPCM");
    map.insert("560".to_string(), "I-Link VC");
    map.insert("57".to_string(), "Crystal Semiconductor IMA ADPCM");
    map.insert(
        "57260".to_string(),
        "DebugMode SonicFoundry Vegas FrameServer ACM Codec",
    );
    map.insert("576".to_string(), "Aureal Semiconductor Raw Sport");
    map.insert("577".to_string(), "ESST AC3");
    map.insert("58".to_string(), "Echo Speech ECHOSC3");
    map.insert("59".to_string(), "Rockwell ADPCM");
    map.insert("59144".to_string(), "Unknown -");
    map.insert("592".to_string(), "Interactive Products HSX");
    map.insert("593".to_string(), "Interactive Products RPELP");
    map.insert("6".to_string(), "Microsoft a-Law");
    map.insert("60".to_string(), "Rockwell DIGITALK");
    map.insert("608".to_string(), "Consistent CS2");
    map.insert("61".to_string(), "Xebec Multimedia");
    map.insert("6172".to_string(), "VoxWare RT24 speech codec");
    map.insert("6174".to_string(), "Lucent elemedia AX24000P Music codec");
    map.insert("61868".to_string(), "Free Lossless Audio Codec FLAC");
    map.insert("624".to_string(), "Sony SCX");
    map.insert("625".to_string(), "Sony SCY");
    map.insert("626".to_string(), "Sony ATRAC3");
    map.insert("627".to_string(), "Sony SPC");
    map.insert("64".to_string(), "Antex G.721 ADPCM");
    map.insert("640".to_string(), "TELUM Telum Inc.");
    map.insert("641".to_string(), "TELUMIA Telum Inc.");
    map.insert("645".to_string(), "Norcom Voice Systems ADPCM");
    map.insert("65".to_string(), "Antex G.728 CELP");
    map.insert("6513".to_string(), "Sonic Foundry LOSSLESS");
    map.insert("6521".to_string(), "Innings Telecom Inc. ADPCM");
    map.insert("65534".to_string(), "Extensible");
    map.insert("65535".to_string(), "Development");
    map.insert("66".to_string(), "Microsoft MSG723");
    map.insert("67".to_string(), "IBM AVC ADPCM");
    map.insert("69".to_string(), "ITU-T G.726");
    map.insert("7".to_string(), "Microsoft u-Law");
    map.insert("7175".to_string(), "Lucent SX8300P speech codec");
    map.insert("7180".to_string(), "Lucent SX5363S G.723 compliant codec");
    map.insert("768".to_string(), "Fujitsu FM TOWNS SND");
    map.insert("769".to_string(), "Fujitsu (not specified)");
    map.insert("770".to_string(), "Fujitsu (not specified)");
    map.insert("771".to_string(), "Fujitsu (not specified)");
    map.insert("772".to_string(), "Fujitsu (not specified)");
    map.insert("773".to_string(), "Fujitsu (not specified)");
    map.insert("774".to_string(), "Fujitsu (not specified)");
    map.insert("775".to_string(), "Fujitsu (not specified)");
    map.insert("776".to_string(), "Fujitsu (not specified)");
    map.insert("7939".to_string(), "CUseeMe DigiTalk (ex-Rocwell)");
    map.insert("8".to_string(), "Microsoft DTS");
    map.insert("80".to_string(), "Microsoft MPEG");
    map.insert("81".to_string(), "RT23 or PAC");
    map.insert("8132".to_string(), "NCT Soft ALF2CD ACM");
    map.insert("8192".to_string(), "FAST Multimedia DVM");
    map.insert("8193".to_string(), "Dolby DTS (Digital Theater System)");
    map.insert("8194".to_string(), "RealAudio 1 / 2 14.4");
    map.insert("8195".to_string(), "RealAudio 1 / 2 28.8");
    map.insert("8196".to_string(), "RealAudio G2 / 8 Cook (low bitrate)");
    map.insert("8197".to_string(), "RealAudio 3 / 4 / 5 Music (DNET)");
    map.insert("8198".to_string(), "RealAudio 10 AAC (RAAC)");
    map.insert("8199".to_string(), "RealAudio 10 AAC+ (RACP)");
    map.insert("82".to_string(), "InSoft RT24");
    map.insert("83".to_string(), "InSoft PAC");
    map.insert(
        "848".to_string(),
        "Micronas Semiconductors, Inc. Development",
    );
    map.insert("849".to_string(), "Micronas Semiconductors, Inc. CELP833");
    map.insert("85".to_string(), "MP3");
    map.insert("89".to_string(), "Cirrus");
    map.insert("9".to_string(), "DRM");
    map.insert("9472".to_string(), "Reserved range to 0x2600 Microsoft");
    map.insert("96".to_string(), "Cirrus Logic");
    map.insert("97".to_string(), "ESS Tech. PCM");
    map.insert("98".to_string(), "Voxware Inc.");
    map.insert("99".to_string(), "Canopus ATRAC");
    map
});

static PRINT_CONV_7: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("auds".to_string(), "Audio");
    map.insert("iavs".to_string(), "Interleaved Audio+Video");
    map.insert("mids".to_string(), "MIDI");
    map.insert("txts".to_string(), "Text");
    map.insert("vids".to_string(), "Video");
    map
});

static PRINT_CONV_8: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "0 (bicubic reconstruction, normal loop)");
    map.insert("1".to_string(), "1 (bilinear reconstruction, simple loop)");
    map.insert("2".to_string(), "2 (bilinear reconstruction, no loop)");
    map.insert("3".to_string(), "3 (no reconstruction, no loop)");
    map
});

/// Get tag definitions for other category
pub fn get_other_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (0, TagKitDef {
            id: 0,
            name: "AlphaPreprocessing",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_3),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AlphaFiltering",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_4),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AlphaCompression",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_5),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "BackgroundColor",
            format: "int8u[4]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "Duration",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("extracted as the sum of durations of all animation frames"),
            print_conv: PrintConvType::Expression("ConvertDuration($val)"),
            value_conv: Some("$val / 1000"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "FrameRate",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("int($val * 1000 + 0.5) / 1000"),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AcidizerFlags",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("BITMASK"),
            value_conv: None,
            subdirectory: None,
        }),
        (12, TagKitDef {
            id: 12,
            name: "Beats",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (16, TagKitDef {
            id: 16,
            name: "Meter",
            format: "int16u[2]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression(r"$val =~ s/(\d+) (\d+)/$2\/$1/; $val"),
            value_conv: None,
            subdirectory: None,
        }),
        (20, TagKitDef {
            id: 20,
            name: "Tempo",
            format: "float",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Encoding",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_6),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Description",
            format: "string[256]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (346, TagKitDef {
            id: 346,
            name: "BWFVersion",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (348, TagKitDef {
            id: 348,
            name: "BWF_UMID",
            format: "undef[64]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("$_=unpack(\"H*\",$val); s/0{64}$//; uc $_"),
            subdirectory: None,
        }),
        (602, TagKitDef {
            id: 602,
            name: "CodingHistory",
            format: "string[$size-602]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CodePage",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Duration",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ConvertDuration($val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Duration",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("ConvertDuration($val)"),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "RIFFSize64",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Manual("code_ref_printconv"),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Make",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Model",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "MakerNotes",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "UserComment",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("Image::ExifTool::Exif::ConvertExifText($self,$val,\"RIFF:UserComment\")"),
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "OpenDML",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Stream",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "AVIHeader",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "JUMBF",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ID3-2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Info",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tdat",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "AssociatedDataList",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Exif",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Hdrl",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "PentaxData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "NikonData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "PentaxData2",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "VP8Bitstream",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "VP8L",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "VP8X",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "XMP",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("incorrectly written WebP files"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "XMP",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("WebP files"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "TagaXML",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Acidizer",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Tagafsp",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "BroadcastExtension",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "CuePoints",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("config_files/cutepointlist.config from full distribution will decode this\n            and generate a list of cue points with labels"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "DataSize64",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "NumberOfSamples",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "AudioFormat",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "GSensor",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "TagiXML",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "ID3",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Instrument",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "CuePointLabel",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("my $str=substr($val,4); $str=~s/\\0+$//; unpack(\"V\",$val) . \" \" . $str"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "LabeledText",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("CuePointID Length Purpose Country Language Dialect Codepage Text"),
            print_conv: PrintConvType::None,
            value_conv: Some("\n            our @a = unpack('VVa4vvvv', $val);\n            $a[2] = \"'$a[2]'\";\n            my $txt = substr($val, 18);\n            $txt =~ s/\\0+$//;   # remove null terminator\n            return join(' ', @a, $txt);\n        "),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "CuePointNote",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("my $str=substr($val,4); $str=~s/\\0+$//; unpack(\"V\",$val) . \" \" . $str"),
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Olym",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Playlist",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "Sampler",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "UserText",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "Text",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("streamed text, extracted when the ExtractEmbedded option is used"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "ExtendedAVIHeader",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "StreamData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "AudioFormat",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "VideoFormat",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "TextFormat",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "StreamHeader",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x0_subdirectory }),
        }),
        (0, TagKitDef {
            id: 0,
            name: "UnknownData",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "StreamType",
            format: "string[4]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_7),
            value_conv: None,
            subdirectory: None,
        }),
        (11, TagKitDef {
            id: 11,
            name: "SampleSize",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("$val ? \"$val byte\" . ($val==1 ? \"\" : \"s\") : \"Variable\""),
            value_conv: None,
            subdirectory: None,
        }),
        (40, TagKitDef {
            id: 40,
            name: "Accelerometer",
            format: "float[3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "VP8Version",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_8),
            value_conv: None,
            subdirectory: None,
        }),
        (6, TagKitDef {
            id: 6,
            name: "HorizontalScale",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "VerticalScale",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (0, TagKitDef {
            id: 0,
            name: "WebP_Flags",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: Some("flags used in Extended WebP images"),
            print_conv: PrintConvType::Expression("BITMASK"),
            value_conv: None,
            subdirectory: None,
        }),
    ]
}
