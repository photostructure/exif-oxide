//! Generated tag table definitions from JPEG::NITF
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_8e::ast_value_8ef6bad16279ca65;
use crate::generated::functions::hash_b8::ast_value_b8adb9d29578d7d8;
use crate::generated::functions::hash_e4::ast_print_e4e23da0cd5e8937;

/// Tag definitions for JPEG::NITF table
pub static JPEG_NITF_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "NITFVersion",
                format: "int8u[2]",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_8ef6bad16279ca65)),
            },
        ),
        (
            2,
            TagInfo {
                name: "ImageFormat",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: Some(ValueConv::Function(ast_value_b8adb9d29578d7d8)),
            },
        ),
        (
            3,
            TagInfo {
                name: "BlocksPerRow",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            5,
            TagInfo {
                name: "BlocksPerColumn",
                format: "int16u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            7,
            TagInfo {
                name: "ImageColor",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            9,
            TagInfo {
                name: "ImageClass",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            10,
            TagInfo {
                name: "JPEGProcess",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            12,
            TagInfo {
                name: "StreamColor",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            14,
            TagInfo {
                name: "Flags",
                format: "int32u",
                print_conv: Some(PrintConv::Function(ast_print_e4e23da0cd5e8937)),
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = JPEG_NITF_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = JPEG_NITF_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
