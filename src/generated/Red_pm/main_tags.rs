//! Generated tag table definitions from Red::Main
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_28::ast_value_28edfda19b0d16dd;
use crate::generated::functions::hash_5b::ast_value_5b2c41e400f339d0;
use crate::generated::functions::hash_70::ast_value_7004e7ca2c0f515b;
use crate::generated::functions::hash_80::ast_value_804ed219632737fc;
use crate::generated::functions::hash_a1::ast_value_a1bbe7c476ada4eb;
use crate::generated::functions::hash_b2::ast_print_b25c14c47d1cbc24;
use crate::generated::functions::hash_b3::ast_value_b39416bae8717543;
use crate::generated::functions::hash_c0::ast_print_c0a8bf21acb9deb1;
use crate::generated::functions::hash_e1::ast_print_e1b9c18c6fb887af;

/// Tag definitions for Red::Main table
pub static RED_MAIN_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            4097,
            TagInfo {
                name: "StartTimecode",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4098,
            TagInfo {
                name: "OtherDate1",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_b39416bae8717543)),
            },
        ),
        (
            4099,
            TagInfo {
                name: "OtherDate2",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_b39416bae8717543)),
            },
        ),
        (
            4100,
            TagInfo {
                name: "OtherDate3",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_b39416bae8717543)),
            },
        ),
        (
            4101,
            TagInfo {
                name: "DateTimeOriginal",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_b25c14c47d1cbc24)),
                value_conv: Some(ValueConv::Function(ast_value_804ed219632737fc)),
            },
        ),
        (
            4122,
            TagInfo {
                name: "ReelNumber",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4123,
            TagInfo {
                name: "Take",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4131,
            TagInfo {
                name: "DateCreated",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_a1bbe7c476ada4eb)),
            },
        ),
        (
            4132,
            TagInfo {
                name: "TimeCreated",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_7004e7ca2c0f515b)),
            },
        ),
        (
            4137,
            TagInfo {
                name: "ReelTimecode",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4144,
            TagInfo {
                name: "StorageFormatDate",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_a1bbe7c476ada4eb)),
            },
        ),
        (
            4145,
            TagInfo {
                name: "StorageFormatTime",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_7004e7ca2c0f515b)),
            },
        ),
        (
            4209,
            TagInfo {
                name: "Model",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4220,
            TagInfo {
                name: "CameraOperator",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4230,
            TagInfo {
                name: "VideoFormat",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            8294,
            TagInfo {
                name: "OriginalFrameRate",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_c0a8bf21acb9deb1)),
                value_conv: None,
            },
        ),
        (
            16439,
            TagInfo {
                name: "CropArea",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            16490,
            TagInfo {
                name: "FNumber",
                format: "unknown",
                print_conv: None,
                value_conv: Some(ValueConv::Function(ast_value_28edfda19b0d16dd)),
            },
        ),
        (
            24684,
            TagInfo {
                name: "FocusDistance",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_e1b9c18c6fb887af)),
                value_conv: Some(ValueConv::Function(ast_value_5b2c41e400f339d0)),
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = RED_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value, None),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = RED_MAIN_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value, None),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
