//! Generated tag table definitions from Olympus::RawInfo
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

/// Tag definitions for Olympus::RawInfo table
pub static OLYMPUS_RAWINFO_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "RawInfoVersion",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            256,
            TagInfo {
                name: "WB_RBLevelsUsed",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            272,
            TagInfo {
                name: "WB_RBLevelsAuto",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            288,
            TagInfo {
                name: "WB_RBLevelsShade",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            289,
            TagInfo {
                name: "WB_RBLevelsCloudy",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            290,
            TagInfo {
                name: "WB_RBLevelsFineWeather",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            291,
            TagInfo {
                name: "WB_RBLevelsTungsten",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            292,
            TagInfo {
                name: "WB_RBLevelsEveningSunlight",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            304,
            TagInfo {
                name: "WB_RBLevelsDaylightFluor",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            305,
            TagInfo {
                name: "WB_RBLevelsDayWhiteFluor",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            306,
            TagInfo {
                name: "WB_RBLevelsCoolWhiteFluor",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            307,
            TagInfo {
                name: "WB_RBLevelsWhiteFluorescent",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            512,
            TagInfo {
                name: "ColorMatrix2",
                format: "int16s",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            784,
            TagInfo {
                name: "CoringFilter",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            785,
            TagInfo {
                name: "CoringValues",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            1536,
            TagInfo {
                name: "BlackLevel2",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            1537,
            TagInfo {
                name: "YCbCrCoefficients",
                format: "rational32u",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            1553,
            TagInfo {
                name: "ValidPixelDepth",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            1554,
            TagInfo {
                name: "CropLeft",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            1555,
            TagInfo {
                name: "CropTop",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            1556,
            TagInfo {
                name: "CropWidth",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            1557,
            TagInfo {
                name: "CropHeight",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4096,
            TagInfo {
                name: "LightSource",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4097,
            TagInfo {
                name: "WhiteBalanceComp",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4112,
            TagInfo {
                name: "SaturationSetting",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4113,
            TagInfo {
                name: "HueSetting",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4114,
            TagInfo {
                name: "ContrastSetting",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4115,
            TagInfo {
                name: "SharpnessSetting",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            8192,
            TagInfo {
                name: "CMExposureCompensation",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            8193,
            TagInfo {
                name: "CMWhiteBalance",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            8194,
            TagInfo {
                name: "CMWhiteBalanceComp",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            8208,
            TagInfo {
                name: "CMWhiteBalanceGrayPoint",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            8224,
            TagInfo {
                name: "CMSaturation",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            8225,
            TagInfo {
                name: "CMHue",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            8226,
            TagInfo {
                name: "CMContrast",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            8227,
            TagInfo {
                name: "CMSharpness",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = OLYMPUS_RAWINFO_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = OLYMPUS_RAWINFO_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
