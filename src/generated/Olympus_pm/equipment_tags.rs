//! Generated tag table definitions from Olympus::Equipment
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_13::ast_print_13c6fe5be8efefda;
use crate::generated::functions::hash_3d::ast_value_3de01bdc81ae6b2c;
use crate::generated::functions::hash_84::ast_print_8470e30e1e5b4729;
use crate::generated::functions::hash_a7::ast_value_a702026eef5d42be;
use crate::generated::functions::hash_ba::ast_print_ba030bb348470426;
use crate::generated::functions::hash_e4::ast_print_e4e23da0cd5e8937;
use crate::generated::functions::hash_e8::ast_value_e81a402a310d8ce1;
use crate::generated::functions::hash_ff::ast_value_ff5d284655150fa7;

/// Tag definitions for Olympus::Equipment table
pub static OLYMPUS_EQUIPMENT_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "EquipmentVersion",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            256,
            TagInfo {
                name: "CameraType2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            257,
            TagInfo {
                name: "SerialNumber",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_value_e81a402a310d8ce1)),
                value_conv: None,
            },
        ),
        (
            258,
            TagInfo {
                name: "InternalSerialNumber",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            259,
            TagInfo {
                name: "FocalPlaneDiagonal",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_ba030bb348470426)),
                value_conv: None,
            },
        ),
        (
            260,
            TagInfo {
                name: "BodyFirmwareVersion",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_13c6fe5be8efefda)),
                value_conv: None,
            },
        ),
        (
            513,
            TagInfo {
                name: "LensType",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: Some(ValueConv::Function(ast_value_ff5d284655150fa7)),
            },
        ),
        (
            514,
            TagInfo {
                name: "LensSerialNumber",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_value_e81a402a310d8ce1)),
                value_conv: None,
            },
        ),
        (
            515,
            TagInfo {
                name: "LensModel",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            516,
            TagInfo {
                name: "LensFirmwareVersion",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_13c6fe5be8efefda)),
                value_conv: None,
            },
        ),
        (
            517,
            TagInfo {
                name: "MaxApertureAtMinFocal",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_8470e30e1e5b4729)),
                value_conv: Some(ValueConv::Function(ast_value_a702026eef5d42be)),
            },
        ),
        (
            518,
            TagInfo {
                name: "MaxApertureAtMaxFocal",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_8470e30e1e5b4729)),
                value_conv: Some(ValueConv::Function(ast_value_a702026eef5d42be)),
            },
        ),
        (
            519,
            TagInfo {
                name: "MinFocalLength",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            520,
            TagInfo {
                name: "MaxFocalLength",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            522,
            TagInfo {
                name: "MaxAperture",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_8470e30e1e5b4729)),
                value_conv: Some(ValueConv::Function(ast_value_a702026eef5d42be)),
            },
        ),
        (
            523,
            TagInfo {
                name: "LensProperties",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_e4e23da0cd5e8937)),
                value_conv: None,
            },
        ),
        (
            769,
            TagInfo {
                name: "Extender",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: Some(ValueConv::Function(ast_value_3de01bdc81ae6b2c)),
            },
        ),
        (
            770,
            TagInfo {
                name: "ExtenderSerialNumber",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            771,
            TagInfo {
                name: "ExtenderModel",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            772,
            TagInfo {
                name: "ExtenderFirmwareVersion",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_13c6fe5be8efefda)),
                value_conv: None,
            },
        ),
        (
            1027,
            TagInfo {
                name: "ConversionLens",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4096,
            TagInfo {
                name: "FlashType",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4097,
            TagInfo {
                name: "FlashModel",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4098,
            TagInfo {
                name: "FlashFirmwareVersion",
                format: "unknown",
                print_conv: Some(PrintConv::Function(ast_print_13c6fe5be8efefda)),
                value_conv: None,
            },
        ),
        (
            4099,
            TagInfo {
                name: "FlashSerialNumber",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = OLYMPUS_EQUIPMENT_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = OLYMPUS_EQUIPMENT_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
