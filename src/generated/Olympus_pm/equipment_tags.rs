//! Generated tag table definitions from Olympus::Equipment
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::implementations::print_conv::{
    exposuretime_print_conv, fnumber_print_conv, gpsaltitude_print_conv, lensinfo_print_conv,
    print_fraction,
};
use crate::implementations::value_conv::{
    exif_date_value_conv, gps_coordinate_value_conv, gpstimestamp_value_conv,
    reciprocal_10_value_conv, reference_long_string_value_conv,
    reference_very_long_string_value_conv,
};

/// Tag definitions for Olympus::Equipment table
pub static OLYMPUS_EQUIPMENT_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (
            0,
            TagInfo {
                name: "EquipmentVersion",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            256,
            TagInfo {
                name: "CameraType2",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            257,
            TagInfo {
                name: "SerialNumber",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("$val=~s/\\s+$//;$val".to_string())),
                value_conv: None,
            },
        ),
        (
            258,
            TagInfo {
                name: "InternalSerialNumber",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            259,
            TagInfo {
                name: "FocalPlaneDiagonal",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("\"$val mm\"".to_string())),
                value_conv: None,
            },
        ),
        (
            260,
            TagInfo {
                name: "BodyFirmwareVersion",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val=sprintf(\"%x\",$val);$val=~s/(.{3})$/\\.$1/;$val".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            513,
            TagInfo {
                name: "LensType",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: Some(ValueConv::Expression(
                    "my @a=split(\" \",$val); sprintf(\"%x %.2x %.2x\",@a[0,2,3])".to_string(),
                )),
            },
        ),
        (
            514,
            TagInfo {
                name: "LensSerialNumber",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("$val=~s/\\s+$//;$val".to_string())),
                value_conv: None,
            },
        ),
        (
            515,
            TagInfo {
                name: "LensModel",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            516,
            TagInfo {
                name: "LensFirmwareVersion",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val=sprintf(\"%x\",$val);$val=~s/(.{3})$/\\.$1/;$val".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            517,
            TagInfo {
                name: "MaxApertureAtMinFocal",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression(
                    "$val ? sqrt(2)**($val/256) : 0".to_string(),
                )),
            },
        ),
        (
            518,
            TagInfo {
                name: "MaxApertureAtMaxFocal",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression(
                    "$val ? sqrt(2)**($val/256) : 0".to_string(),
                )),
            },
        ),
        (
            519,
            TagInfo {
                name: "MinFocalLength",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            520,
            TagInfo {
                name: "MaxFocalLength",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            522,
            TagInfo {
                name: "MaxAperture",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("sprintf(\"%.1f\",$val)".to_string())),
                value_conv: Some(ValueConv::Expression(
                    "$val ? sqrt(2)**($val/256) : 0".to_string(),
                )),
            },
        ),
        (
            523,
            TagInfo {
                name: "LensProperties",
                format: "unknown",
                print_conv: Some(PrintConv::Expression("sprintf(\"0x%x\",$val)".to_string())),
                value_conv: None,
            },
        ),
        (
            769,
            TagInfo {
                name: "Extender",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: Some(ValueConv::Expression(
                    "my @a=split(\" \",$val); sprintf(\"%x %.2x\",@a[0,2])".to_string(),
                )),
            },
        ),
        (
            770,
            TagInfo {
                name: "ExtenderSerialNumber",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            771,
            TagInfo {
                name: "ExtenderModel",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            772,
            TagInfo {
                name: "ExtenderFirmwareVersion",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val=sprintf(\"%x\",$val);$val=~s/(.{3})$/\\.$1/;$val".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            1027,
            TagInfo {
                name: "ConversionLens",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
        (
            4096,
            TagInfo {
                name: "FlashType",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4097,
            TagInfo {
                name: "FlashModel",
                format: "unknown",
                print_conv: Some(PrintConv::Complex),
                value_conv: None,
            },
        ),
        (
            4098,
            TagInfo {
                name: "FlashFirmwareVersion",
                format: "unknown",
                print_conv: Some(PrintConv::Expression(
                    "$val=sprintf(\"%x\",$val);$val=~s/(.{3})$/\\.$1/;$val".to_string(),
                )),
                value_conv: None,
            },
        ),
        (
            4099,
            TagInfo {
                name: "FlashSerialNumber",
                format: "unknown",
                print_conv: None,
                value_conv: None,
            },
        ),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, String> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = OLYMPUS_EQUIPMENT_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value).map_err(|e| e.to_string()),
                ValueConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    let mut evaluator = crate::expressions::ExpressionEvaluator::new();
                    evaluator
                        .evaluate_expression(expr, value)
                        .map_err(|e| e.to_string())
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(format!("Tag 0x{:04x} not found in table", tag_id))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _evaluator: &mut crate::expressions::ExpressionEvaluator,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = OLYMPUS_EQUIPMENT_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(expr) => {
                    // Use runtime expression evaluator for dynamic evaluation
                    _evaluator
                        .evaluate_expression(expr, value)
                        .unwrap_or_else(|_| value.clone())
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
