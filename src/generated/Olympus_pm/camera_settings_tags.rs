//! Generated tag table definitions from Olympus::CameraSettings
//!
//! This file is auto-generated by codegen/src/strategies/tag_kit.rs. Do not edit manually.

use crate::types::{PrintConv, TagInfo, ValueConv};
use std::collections::HashMap;
use std::sync::LazyLock;

// Generated imports for conversion functions
use crate::generated::functions::hash_10::ast_print_103361d26a5af32d;
use crate::generated::functions::hash_25::ast_print_252e55dbb07a94df;
use crate::generated::functions::hash_28::ast_value_28edfda19b0d16dd;
use crate::generated::functions::hash_33::ast_value_33118cafe9fb1cc3;
use crate::generated::functions::hash_5d::ast_value_5d1e153d8debf27a;
use crate::generated::functions::hash_70::ast_print_70620f00a1c89dd5;
use crate::generated::functions::hash_71::ast_print_71d89be5ccb75efd;
use crate::generated::functions::hash_79::ast_print_79289c26a24e6f78;
use crate::generated::functions::hash_b0::ast_print_b0ad9908708bcb9f;
use crate::generated::functions::hash_b2::ast_print_b25c14c47d1cbc24;
use crate::generated::functions::hash_d3::ast_print_d3695e9544e1c996;
use crate::generated::functions::hash_ed::ast_print_ed1555c62079876e;
use crate::generated::functions::hash_f1::{
    ast_value_f10df04f24c6ec2c, ast_value_f1277e290c2a7107,
};

/// Tag definitions for Olympus::CameraSettings table
pub static OLYMPUS_CAMERASETTINGS_TAGS: LazyLock<HashMap<u16, TagInfo>> = LazyLock::new(|| {
    HashMap::from([
        (0, TagInfo {
            name: "CameraSettingsVersion",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (256, TagInfo {
            name: "PreviewImageValid",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (257, TagInfo {
            name: "PreviewImageStart",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (258, TagInfo {
            name: "PreviewImageLength",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (512, TagInfo {
            name: "ExposureMode",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (513, TagInfo {
            name: "AELock",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (514, TagInfo {
            name: "MeteringMode",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (515, TagInfo {
            name: "ExposureShift",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (516, TagInfo {
            name: "NDFilter",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (768, TagInfo {
            name: "MacroMode",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (769, TagInfo {
            name: "FocusMode",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (770, TagInfo {
            name: "FocusProcess",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (771, TagInfo {
            name: "AFSearch",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (772, TagInfo {
            name: "AFAreas",
            format: "unknown",
            print_conv: Some(PrintConv::Function(ast_print_252e55dbb07a94df)),
            value_conv: None,
        }),
        (773, TagInfo {
            name: "AFPointSelected",
            format: "unknown",
            print_conv: Some(PrintConv::Function(ast_print_71d89be5ccb75efd)),
            value_conv: Some(ValueConv::Function(ast_value_f10df04f24c6ec2c)),
        }),
        (774, TagInfo {
            name: "AFFineTune",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (775, TagInfo {
            name: "AFFineTuneAdj",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (776, TagInfo {
            name: "FocusBracketStepSize",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (777, TagInfo {
            name: "AISubjectTrackingMode",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (778, TagInfo {
            name: "AFTargetInfo",
            format: "undef",
            print_conv: None,
            value_conv: None,
        }),
        (779, TagInfo {
            name: "SubjectDetectInfo",
            format: "undef",
            print_conv: None,
            value_conv: None,
        }),
        (1024, TagInfo {
            name: "FlashMode",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1025, TagInfo {
            name: "FlashExposureComp",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (1027, TagInfo {
            name: "FlashRemoteControl",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1028, TagInfo {
            name: "FlashControlMode",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (1029, TagInfo {
            name: "FlashIntensity",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1030, TagInfo {
            name: "ManualFlashStrength",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1280, TagInfo {
            name: "WhiteBalance2",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1281, TagInfo {
            name: "WhiteBalanceTemperature",
            format: "unknown",
            print_conv: Some(PrintConv::Function(ast_print_d3695e9544e1c996)),
            value_conv: None,
        }),
        (1282, TagInfo {
            name: "WhiteBalanceBracket",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (1283, TagInfo {
            name: "CustomSaturation",
            format: "unknown",
            print_conv: Some(PrintConv::Function(ast_print_103361d26a5af32d)),
            value_conv: None,
        }),
        (1284, TagInfo {
            name: "ModifiedSaturation",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1285, TagInfo {
            name: "ContrastSetting",
            format: "unknown",
            print_conv: Some(PrintConv::Function(ast_print_79289c26a24e6f78)),
            value_conv: None,
        }),
        (1286, TagInfo {
            name: "SharpnessSetting",
            format: "unknown",
            print_conv: Some(PrintConv::Function(ast_print_79289c26a24e6f78)),
            value_conv: None,
        }),
        (1287, TagInfo {
            name: "ColorSpace",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1289, TagInfo {
            name: "SceneMode",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1290, TagInfo {
            name: "NoiseReduction",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1291, TagInfo {
            name: "DistortionCorrection",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1292, TagInfo {
            name: "ShadingCompensation",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1293, TagInfo {
            name: "CompressionFactor",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (1295, TagInfo {
            name: "Gradation",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (1312, TagInfo {
            name: "PictureMode",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (1313, TagInfo {
            name: "PictureModeSaturation",
            format: "unknown",
            print_conv: Some(PrintConv::Function(ast_print_79289c26a24e6f78)),
            value_conv: None,
        }),
        (1314, TagInfo {
            name: "PictureModeHue",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (1315, TagInfo {
            name: "PictureModeContrast",
            format: "unknown",
            print_conv: Some(PrintConv::Function(ast_print_79289c26a24e6f78)),
            value_conv: None,
        }),
        (1316, TagInfo {
            name: "PictureModeSharpness",
            format: "unknown",
            print_conv: Some(PrintConv::Function(ast_print_79289c26a24e6f78)),
            value_conv: None,
        }),
        (1317, TagInfo {
            name: "PictureModeBWFilter",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1318, TagInfo {
            name: "PictureModeTone",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1319, TagInfo {
            name: "NoiseFilter",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1321, TagInfo {
            name: "ArtFilter",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (1324, TagInfo {
            name: "MagicFilter",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (1325, TagInfo {
            name: "PictureModeEffect",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1326, TagInfo {
            name: "ToneLevel",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (1327, TagInfo {
            name: "ArtFilterEffect",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (1330, TagInfo {
            name: "ColorCreatorEffect",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (1335, TagInfo {
            name: "MonochromeProfileSettings",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (1336, TagInfo {
            name: "FilmGrainEffect",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1337, TagInfo {
            name: "ColorProfileSettings",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (1338, TagInfo {
            name: "MonochromeVignetting",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (1339, TagInfo {
            name: "MonochromeColor",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1536, TagInfo {
            name: "DriveMode",
            format: "unknown",
            print_conv: Some(PrintConv::Expression("\n            my ($a,$b,$c,$d,$e,$f) = split ' ',$val;\n            if ($b) {\n                $b = ', Shot ' . $b;\n            } else {\n                $b = '';\n            }\n            if (not defined $e or $e == 4) {   #KG: personally, I'd like to skip 'Electronic shutter' since this is the defacto default setting\n                $e = '';\n            } else {\n                $e = '; ' . ({ 0 => 'Mechanical shutter' , 2 => 'Anti-shock' }->{$e} || \"Unknown ($e)\");\n            }\n            if ($a == 5 and defined $c) {\n                $a = DecodeBits($c, { #6\n                    0 => 'AE',\n                    1 => 'WB',\n                    2 => 'FL',\n                    3 => 'MF',\n                    4 => 'ISO', #forum8906\n                    5 => 'AE Auto', #forum8906\n                    6 => 'Focus', #PH\n                }) . ' Bracketing';\n                $a =~ s/, /+/g;\n            } elsif ($f) { #25\n                  # for newer models (E-M1 and later) look at byte 6 for other shooting modes\n                  my %f = (\n                      # Mechanical shutter modes\n                      0x01 => 'Single Shot',\n                      0x02 => 'Sequential L',\n                      0x03 => 'Sequential H',\n                      0x07 => 'Sequential',\n                      # Anti-shock modes\n                      0x11 => 'Single Shot',\n                      0x12 => 'Sequential L',\n                      0x13 => 'Sequential H',\n                      0x14 => 'Self-Timer 12 sec',\n                      0x15 => 'Self-Timer 2 sec',\n                      0x16 => 'Custom Self-Timer',\n                      0x17 => 'Sequential',\n                      # Electronical shutter modes\n                      0x21 => 'Single Shot',\n                      0x22 => 'Sequential L',\n                      0x23 => 'Sequential H',\n                      0x24 => 'Self-Timer 2 sec',\n                      0x25 => 'Self-Timer 12 sec',\n                      0x26 => 'Custom Self-Timer',\n                      0x27 => 'Sequential',\n                      0x28 => 'Sequential SH1',\n                      0x29 => 'Sequential SH2',\n                      0x30 => 'HighRes Shot',  # only E-M models\n                      0x41 => 'ProCap H',\n                      0x42 => 'ProCap L',\n                      0x43 => 'ProCap',\n                      0x48 => 'ProCap SH1',\n                      0x49 => 'ProCap SH2',\n                  );\n                  $a = $f{$f} || \"Unknown ($f)\";\n            } else {\n                  my %a = (\n                      0 => 'Single Shot',\n                      1 => 'Continuous Shooting',\n                      2 => 'Exposure Bracketing',\n                      3 => 'White Balance Bracketing',\n                      4 => 'Exposure+WB Bracketing', #6\n                  );\n                  $a = $a{$a} || \"Unknown ($a)\";\n            }\n            return \"$a$b$e\";\n        ".to_string())),
            value_conv: None,
        }),
        (1537, TagInfo {
            name: "PanoramaMode",
            format: "unknown",
            print_conv: Some(PrintConv::Function(ast_print_70620f00a1c89dd5)),
            value_conv: None,
        }),
        (1539, TagInfo {
            name: "ImageQuality2",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (1540, TagInfo {
            name: "ImageStabilization",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (2052, TagInfo {
            name: "StackedImage",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (2081, TagInfo {
            name: "ISOAutoSettings",
            format: "unknown",
            print_conv: None,
            value_conv: None,
        }),
        (2304, TagInfo {
            name: "ManometerPressure",
            format: "unknown",
            print_conv: Some(PrintConv::Function(ast_print_b0ad9908708bcb9f)),
            value_conv: Some(ValueConv::Function(ast_value_28edfda19b0d16dd)),
        }),
        (2305, TagInfo {
            name: "ManometerReading",
            format: "unknown",
            print_conv: Some(PrintConv::Function(ast_print_ed1555c62079876e)),
            value_conv: Some(ValueConv::Function(ast_value_f1277e290c2a7107)),
        }),
        (2306, TagInfo {
            name: "ExtendedWBDetect",
            format: "unknown",
            print_conv: Some(PrintConv::Complex),
            value_conv: None,
        }),
        (2307, TagInfo {
            name: "RollAngle",
            format: "unknown",
            print_conv: None,
            value_conv: Some(ValueConv::Function(ast_value_5d1e153d8debf27a)),
        }),
        (2308, TagInfo {
            name: "PitchAngle",
            format: "unknown",
            print_conv: None,
            value_conv: Some(ValueConv::Function(ast_value_33118cafe9fb1cc3)),
        }),
        (2312, TagInfo {
            name: "DateTimeUTC",
            format: "unknown",
            print_conv: Some(PrintConv::Function(ast_print_b25c14c47d1cbc24)),
            value_conv: None,
        }),
    ])
});

/// Apply ValueConv transformation for tags in this table
pub fn apply_value_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
) -> Result<crate::types::TagValue, crate::types::ExifError> {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = OLYMPUS_CAMERASETTINGS_TAGS.get(&tag_id_u16) {
        if let Some(ref value_conv) = tag_def.value_conv {
            match value_conv {
                ValueConv::None => Ok(value.clone()),
                ValueConv::Function(func) => func(value),
                ValueConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    Err(crate::types::ExifError::NotImplemented("Runtime expression evaluation not supported - should be handled by PPI at build time".to_string()))
                }
                _ => Ok(value.clone()),
            }
        } else {
            Ok(value.clone())
        }
    } else {
        Err(crate::types::ExifError::ParseError(format!(
            "Tag 0x{:04x} not found in table",
            tag_id
        )))
    }
}

/// Apply PrintConv transformation for tags in this table
pub fn apply_print_conv(
    tag_id: u32,
    value: &crate::types::TagValue,
    _errors: &mut Vec<String>,
    _warnings: &mut Vec<String>,
) -> crate::types::TagValue {
    let tag_id_u16 = tag_id as u16;
    if let Some(tag_def) = OLYMPUS_CAMERASETTINGS_TAGS.get(&tag_id_u16) {
        if let Some(ref print_conv) = tag_def.print_conv {
            match print_conv {
                PrintConv::None => value.clone(),
                PrintConv::Function(func) => func(value),
                PrintConv::Expression(_expr) => {
                    // Runtime expression evaluation removed - all Perl interpretation happens via PPI at build time
                    value.clone() // Fallback to original value when expression not handled by PPI
                }
                _ => value.clone(),
            }
        } else {
            value.clone()
        }
    } else {
        value.clone()
    }
}
