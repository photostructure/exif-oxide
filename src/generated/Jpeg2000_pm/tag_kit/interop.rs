//! Tag kits for interop category from Jpeg2000.pm
//!
//! This file is automatically generated by codegen.
//! DO NOT EDIT MANUALLY - changes will be overwritten.

#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_variables)]

use super::*;
use super::{PrintConvType, SubDirectoryType, TagKitDef};
use crate::types::TagValue;
use std::collections::HashMap;
use std::sync::LazyLock;

static PRINT_CONV_0: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "10 m");
    map.insert("-2".to_string(), "100 m");
    map.insert("-3".to_string(), "km");
    map.insert("0".to_string(), "m");
    map.insert("1".to_string(), "10 cm");
    map.insert("2".to_string(), "cm");
    map.insert("3".to_string(), "mm");
    map.insert("4".to_string(), "0.1 mm");
    map.insert("5".to_string(), "0.01 mm");
    map.insert("6".to_string(), "um");
    map
});

static PRINT_CONV_1: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "10 m");
    map.insert("-2".to_string(), "100 m");
    map.insert("-3".to_string(), "km");
    map.insert("0".to_string(), "m");
    map.insert("1".to_string(), "10 cm");
    map.insert("2".to_string(), "cm");
    map.insert("3".to_string(), "mm");
    map.insert("4".to_string(), "0.1 mm");
    map.insert("5".to_string(), "0.01 mm");
    map.insert("6".to_string(), "um");
    map
});

static PRINT_CONV_2: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Not Specified");
    map.insert("1".to_string(), "Accurate");
    map.insert("2".to_string(), "Exceptional Quality");
    map.insert("3".to_string(), "Reasonable Quality");
    map.insert("4".to_string(), "Poor Quality");
    map
});

static PRINT_CONV_3: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("0".to_string(), "Bi-level");
    map.insert("1".to_string(), "YCbCr(1)");
    map.insert("11".to_string(), "CMY");
    map.insert("12".to_string(), "CMYK");
    map.insert("13".to_string(), "YCCK");
    map.insert("14".to_string(), "CIELab");
    map.insert("15".to_string(), "Bi-level(2)");
    map.insert("16".to_string(), "sRGB");
    map.insert("17".to_string(), "Grayscale");
    map.insert("18".to_string(), "sYCC");
    map.insert("19".to_string(), "CIEJab");
    map.insert("20".to_string(), "e-sRGB");
    map.insert("21".to_string(), "ROMM-RGB");
    map.insert("22".to_string(), "YPbPr(1125/60)");
    map.insert("23".to_string(), "YPbPr(1250/50)");
    map.insert("24".to_string(), "e-sYCC");
    map.insert("3".to_string(), "YCbCr(2)");
    map.insert("4".to_string(), "YCbCr(3)");
    map.insert("9".to_string(), "PhotoYCC");
    map
});

static PRINT_CONV_4: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "10 m");
    map.insert("-2".to_string(), "100 m");
    map.insert("-3".to_string(), "km");
    map.insert("0".to_string(), "m");
    map.insert("1".to_string(), "10 cm");
    map.insert("2".to_string(), "cm");
    map.insert("3".to_string(), "mm");
    map.insert("4".to_string(), "0.1 mm");
    map.insert("5".to_string(), "0.01 mm");
    map.insert("6".to_string(), "um");
    map
});

static PRINT_CONV_5: LazyLock<HashMap<String, &'static str>> = LazyLock::new(|| {
    let mut map = HashMap::new();
    map.insert("-1".to_string(), "10 m");
    map.insert("-2".to_string(), "100 m");
    map.insert("-3".to_string(), "km");
    map.insert("0".to_string(), "m");
    map.insert("1".to_string(), "10 cm");
    map.insert("2".to_string(), "cm");
    map.insert("3".to_string(), "mm");
    map.insert("4".to_string(), "0.1 mm");
    map.insert("5".to_string(), "0.01 mm");
    map.insert("6".to_string(), "um");
    map
});

/// Get tag definitions for interop category
pub fn get_interop_tags() -> Vec<(u32, TagKitDef)> {
    vec![
        (4, TagKitDef {
            id: 4,
            name: "CaptureXResolution",
            format: "rational32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "CaptureYResolutionUnit",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_0),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "CaptureXResolutionUnit",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_1),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "ColorSpecPrecedence",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("default for writing is 0"),
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "ColorSpecApproximation",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: Some("default for writing is 0"),
            print_conv: PrintConvType::Simple(&PRINT_CONV_2),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "ICC_Profile",
            format: "undef[$size-3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: Some(SubDirectoryType::Binary { processor: process_tag_0x3_subdirectory }),
        }),
        (3, TagKitDef {
            id: 3,
            name: "ColorSpace",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_3),
            value_conv: None,
            subdirectory: None,
        }),
        (3, TagKitDef {
            id: 3,
            name: "ColorSpecData",
            format: "undef[$size-3]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "DisplayXResolution",
            format: "rational32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "DisplayYResolutionUnit",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_4),
            value_conv: None,
            subdirectory: None,
        }),
        (9, TagKitDef {
            id: 9,
            name: "DisplayXResolutionUnit",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Simple(&PRINT_CONV_5),
            value_conv: None,
            subdirectory: None,
        }),
        (1, TagKitDef {
            id: 1,
            name: "MinorVersion",
            format: "undef[4]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("sprintf(\"%x.%x.%x\", unpack(\"nCC\", $val))"),
            subdirectory: None,
        }),
        (2, TagKitDef {
            id: 2,
            name: "CompatibleBrands",
            format: "undef[$size-8]",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: Some("my @a=($val=~/.{4}/sg); @a=grep(!/\\0/,@a); \\@a"),
            subdirectory: None,
        }),
        (10, TagKitDef {
            id: 10,
            name: "BitsPerComponent",
            format: "unknown",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::Expression("\n            $val == 0xff and return 'Variable';\n            my $sign = ($val & 0x80) ? 'Signed' : 'Unsigned';\n            return (($val & 0x7f) + 1) . \" Bits, $sign\";\n        "),
            value_conv: None,
            subdirectory: None,
        }),
        (4, TagKitDef {
            id: 4,
            name: "ImageWidth",
            format: "int32u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
        (8, TagKitDef {
            id: 8,
            name: "NumberOfComponents",
            format: "int16u",
            groups: HashMap::new(),
            writable: false,
            notes: None,
            print_conv: PrintConvType::None,
            value_conv: None,
            subdirectory: None,
        }),
    ]
}
