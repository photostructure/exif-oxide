// AUTO-GENERATED from ExifTool JPEG.pm
// Generated by exiftool_sync extract app-segment-tables
// DO NOT EDIT - Regenerate with `cargo run --bin exiftool_sync extract app-segment-tables`

#![doc = "EXIFTOOL-SOURCE: lib/Image/ExifTool/JPEG.pm"]

/// Condition types for APP segment detection
#[derive(Debug, Clone, PartialEq)]
pub enum ConditionType {
    StartsWith,
    Contains,
    Regex(&'static str),
    Custom(&'static str),
}

/// Format handlers for different APP segment types
#[derive(Debug, Clone, PartialEq)]
pub enum FormatHandler {
    JFIF,
    JFXX,
    XMP,
    ExtendedXMP,
    EXIF,
    Photoshop,
    Adobe,
    AdobeCM,
    IccProfile,
    MPF,
    GoPro,
    CIFF,
    AVI1,
    Ocad,
    QVCI,
    FLIR,
    Parrot,
    InfiRay,
    FPXR,
    RMETA,
    Samsung,
    EPPIM,
    NITF,
    HpTdhd,
    Pentax,
    Huawei,
    Qualcomm,
    DJI,
    SPIFF,
    SEAL,
    MediaJukebox,
    Comment,
    HDRGainCurve,
    JpegHdr,
    JUMBF,
    PictureInfo,
    Ducky,
    GraphicConverter,
    PreviewImage,
    Unknown,
}

/// APP segment identification rule
#[derive(Debug, Clone)]
pub struct AppSegmentRule {
    pub name: &'static str,
    pub signature: &'static [u8],
    pub condition_type: ConditionType,
    pub format_handler: FormatHandler,
    pub notes: Option<&'static str>,
}

/// APP0 segment definitions
pub static APP0_SEGMENTS: &[AppSegmentRule] = &[
    AppSegmentRule {
        name: "JFIF",
        signature: &[0x4a, 0x46, 0x49, 0x46, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::JFIF,
        notes: None,
    },
    AppSegmentRule {
        name: "JFXX",
        signature: &[0x4a, 0x46, 0x58, 0x58, 0x00, 0x10],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::JFXX,
        notes: None,
    },
    AppSegmentRule {
        name: "CIFF",
        signature: &[
            0x28, 0x49, 0x49, 0x7c, 0x4d, 0x4d, 0x29, 0x2e, 0x7b, 0x34, 0x7d, 0x48, 0x45, 0x41,
            0x50, 0x4a, 0x50, 0x47, 0x4d,
        ],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::CIFF,
        notes: None,
    },
    AppSegmentRule {
        name: "AVI1",
        signature: &[0x41, 0x56, 0x49, 0x31],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::AVI1,
        notes: None,
    },
    AppSegmentRule {
        name: "Ocad",
        signature: &[0x4f, 0x63, 0x61, 0x64],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::Ocad,
        notes: None,
    },
];

/// APP1 segment definitions
pub static APP1_SEGMENTS: &[AppSegmentRule] = &[
    AppSegmentRule {
        name: "EXIF",
        signature: &[0x45, 0x78, 0x69, 0x66, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::EXIF,
        notes: None,
    },
    AppSegmentRule {
        name: "ExtendedXMP",
        signature: &[],
        condition_type: ConditionType::Custom(
            "$$valPt =~ m{^http://ns.adobe.com/xmp/extension/\0}",
        ),
        format_handler: FormatHandler::ExtendedXMP,
        notes: None,
    },
    AppSegmentRule {
        name: "XMP",
        signature: &[0x68, 0x74, 0x74, 0x70],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::XMP,
        notes: None,
    },
    AppSegmentRule {
        name: "QVCI",
        signature: &[0x51, 0x56, 0x43, 0x49, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::QVCI,
        notes: None,
    },
    AppSegmentRule {
        name: "FLIR",
        signature: &[0x46, 0x4c, 0x49, 0x52, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::FLIR,
        notes: None,
    },
    AppSegmentRule {
        name: "RawThermalImage",
        signature: &[
            0x50, 0x41, 0x52, 0x52, 0x4f, 0x54, 0x00, 0x28, 0x49, 0x49, 0x2a, 0x00, 0x7c, 0x4d,
            0x4d, 0x00, 0x2a, 0x29,
        ],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::Parrot,
        notes: Some("thermal image from Parrot Bebop-Pro Thermal drone"),
    },
];

/// APP2 segment definitions
pub static APP2_SEGMENTS: &[AppSegmentRule] = &[
    AppSegmentRule {
        name: "ICC_Profile",
        signature: &[
            0x49, 0x43, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x00,
        ],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::IccProfile,
        notes: None,
    },
    AppSegmentRule {
        name: "FPXR",
        signature: &[0x46, 0x50, 0x58, 0x52, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::FPXR,
        notes: None,
    },
    AppSegmentRule {
        name: "MPF",
        signature: &[0x4d, 0x50, 0x46, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::MPF,
        notes: None,
    },
    AppSegmentRule {
        name: "InfiRayVersion",
        signature: &[0x2e, 0x2e, 0x2e, 0x2e, 0x49, 0x4a, 0x50, 0x45, 0x47, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::InfiRay,
        notes: None,
    },
    AppSegmentRule {
        name: "UniformResourceName",
        signature: &[0x75, 0x72, 0x6e, 0x3a],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::Unknown,
        notes: Some("used in Apple HDR images"),
    },
    AppSegmentRule {
        name: "PreviewImage",
        signature: &[
            0x28, 0x7c, 0x51, 0x56, 0x47, 0x41, 0x00, 0x7c, 0x42, 0x47, 0x54, 0x48, 0x29, 0xff,
            0xd8, 0xff, 0xdb,
        ],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::PreviewImage,
        notes: Some("Samsung APP2 preview image"),
    },
];

/// APP3 segment definitions
pub static APP3_SEGMENTS: &[AppSegmentRule] = &[
    AppSegmentRule {
        name: "Meta",
        signature: &[
            0x28, 0x4d, 0x65, 0x74, 0x61, 0x7c, 0x4d, 0x45, 0x54, 0x41, 0x7c, 0x45, 0x78, 0x69,
            0x66, 0x29, 0x00, 0x00,
        ],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::Unknown,
        notes: None,
    },
    AppSegmentRule {
        name: "Stim",
        signature: &[0x53, 0x74, 0x69, 0x6d, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::Unknown,
        notes: None,
    },
    AppSegmentRule {
        name: "JPS",
        signature: &[0x5f, 0x4a, 0x50, 0x53, 0x4a, 0x50, 0x53, 0x5f],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::Unknown,
        notes: None,
    },
    AppSegmentRule {
        name: "ThermalData",
        signature: &[],
        condition_type: ConditionType::Custom("$$self{Make} eq "),
        format_handler: FormatHandler::DJI,
        notes: Some("DJI raw thermal data"),
    },
    AppSegmentRule {
        name: "ImagingData",
        signature: &[],
        condition_type: ConditionType::Custom("$$self{HasIJPEG}"),
        format_handler: FormatHandler::Unknown,
        notes: Some("InfiRay IR+thermal+visible data"),
    },
    AppSegmentRule {
        name: "PreviewImage",
        signature: &[0xff, 0xd8, 0xff, 0xdb],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::PreviewImage,
        notes: Some("Samsung/HP preview image"),
    },
];

/// APP4 segment definitions
pub static APP4_SEGMENTS: &[AppSegmentRule] = &[
    AppSegmentRule {
        name: "Scalado",
        signature: &[0x53, 0x43, 0x41, 0x4c, 0x41, 0x44, 0x4f, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::Unknown,
        notes: None,
    },
    AppSegmentRule {
        name: "FPXR",
        signature: &[0x46, 0x50, 0x58, 0x52, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::FPXR,
        notes: None,
    },
    AppSegmentRule {
        name: "QualcommDualCamera",
        signature: &[
            0x51, 0x75, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x20, 0x44, 0x75, 0x61, 0x6c, 0x20,
            0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x20, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
            0x74, 0x65, 0x73,
        ],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::Qualcomm,
        notes: None,
    },
    AppSegmentRule {
        name: "InfiRayFactory",
        signature: &[],
        condition_type: ConditionType::Custom("$$self{HasIJPEG}"),
        format_handler: FormatHandler::InfiRay,
        notes: None,
    },
    AppSegmentRule {
        name: "ThermalParams",
        signature: &[],
        condition_type: ConditionType::Custom("$$self{Make} eq "),
        format_handler: FormatHandler::DJI,
        notes: None,
    },
    AppSegmentRule {
        name: "ThermalParams2",
        signature: &[],
        condition_type: ConditionType::Custom("$$self{Make} eq "),
        format_handler: FormatHandler::DJI,
        notes: None,
    },
    AppSegmentRule {
        name: "ThermalParams3",
        signature: &[],
        condition_type: ConditionType::Custom("$$self{Make} eq "),
        format_handler: FormatHandler::DJI,
        notes: None,
    },
    AppSegmentRule {
        name: "PreviewImage",
        signature: &[],
        condition_type: ConditionType::Custom("always"),
        format_handler: FormatHandler::PreviewImage,
        notes: Some("continued from APP3"),
    },
];

/// APP5 segment definitions
pub static APP5_SEGMENTS: &[AppSegmentRule] = &[
    AppSegmentRule {
        name: "RMETA",
        signature: &[0x52, 0x4d, 0x45, 0x54, 0x41, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::RMETA,
        notes: None,
    },
    AppSegmentRule {
        name: "SamsungUniqueID",
        signature: &[
            0x73, 0x73, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x69, 0x64, 0x00,
        ],
        condition_type: ConditionType::Regex("ssuniqueid\0"),
        format_handler: FormatHandler::Samsung,
        notes: None,
    },
    AppSegmentRule {
        name: "InfiRayPicture",
        signature: &[],
        condition_type: ConditionType::Custom("$$self{HasIJPEG}"),
        format_handler: FormatHandler::InfiRay,
        notes: None,
    },
    AppSegmentRule {
        name: "ThermalCalibration",
        signature: &[],
        condition_type: ConditionType::Custom("$$self{Make} eq "),
        format_handler: FormatHandler::DJI,
        notes: Some("DJI thermal calibration data"),
    },
    AppSegmentRule {
        name: "PreviewImage",
        signature: &[],
        condition_type: ConditionType::Custom("always"),
        format_handler: FormatHandler::PreviewImage,
        notes: Some("continued from APP4"),
    },
];

/// APP6 segment definitions
pub static APP6_SEGMENTS: &[AppSegmentRule] = &[
    AppSegmentRule {
        name: "EPPIM",
        signature: &[0x45, 0x50, 0x50, 0x49, 0x4d, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::EPPIM,
        notes: None,
    },
    AppSegmentRule {
        name: "NITF",
        signature: &[0x4e, 0x54, 0x49, 0x46, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::NITF,
        notes: None,
    },
    AppSegmentRule {
        name: "HP_TDHD",
        signature: &[0x54, 0x44, 0x48, 0x44, 0x01, 0x00, 0x00, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::HpTdhd,
        notes: None,
    },
    AppSegmentRule {
        name: "GoPro",
        signature: &[0x47, 0x6f, 0x50, 0x72, 0x6f, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::GoPro,
        notes: None,
    },
    AppSegmentRule {
        name: "InfiRayMixMode",
        signature: &[],
        condition_type: ConditionType::Custom("$$self{HasIJPEG}"),
        format_handler: FormatHandler::InfiRay,
        notes: None,
    },
];

/// APP7 segment definitions
pub static APP7_SEGMENTS: &[AppSegmentRule] = &[
    AppSegmentRule {
        name: "Pentax",
        signature: &[0x50, 0x45, 0x4e, 0x54, 0x41, 0x58, 0x20, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::Pentax,
        notes: None,
    },
    AppSegmentRule {
        name: "Huawei",
        signature: &[0x48, 0x55, 0x41, 0x57, 0x45, 0x49, 0x00, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::Huawei,
        notes: None,
    },
    AppSegmentRule {
        name: "Qualcomm",
        signature: &[
            0x1a, 0x51, 0x75, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x20, 0x43, 0x61, 0x6d, 0x65,
            0x72, 0x61, 0x20, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
        ],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::Qualcomm,
        notes: None,
    },
    AppSegmentRule {
        name: "InfiRayOpMode",
        signature: &[],
        condition_type: ConditionType::Custom("$$self{HasIJPEG}"),
        format_handler: FormatHandler::InfiRay,
        notes: None,
    },
    AppSegmentRule {
        name: "DJI-DBG",
        signature: &[0x44, 0x4a, 0x49, 0x2d, 0x44, 0x42, 0x47, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::DJI,
        notes: None,
    },
];

/// APP8 segment definitions
pub static APP8_SEGMENTS: &[AppSegmentRule] = &[
    AppSegmentRule {
        name: "SPIFF",
        signature: &[0x53, 0x50, 0x49, 0x46, 0x46, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::SPIFF,
        notes: None,
    },
    AppSegmentRule {
        name: "InfiRayIsothermal",
        signature: &[],
        condition_type: ConditionType::Custom("$$self{HasIJPEG}"),
        format_handler: FormatHandler::InfiRay,
        notes: None,
    },
    AppSegmentRule {
        name: "SEAL",
        signature: &[0x53, 0x45, 0x41, 0x4c, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::SEAL,
        notes: None,
    },
];

/// APP9 segment definitions
pub static APP9_SEGMENTS: &[AppSegmentRule] = &[
    AppSegmentRule {
        name: "MediaJukebox",
        signature: &[
            0x4d, 0x65, 0x64, 0x69, 0x61, 0x20, 0x4a, 0x75, 0x6b, 0x65, 0x62, 0x6f, 0x78, 0x00,
        ],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::MediaJukebox,
        notes: None,
    },
    AppSegmentRule {
        name: "InfiRaySensor",
        signature: &[],
        condition_type: ConditionType::Custom("$$self{HasIJPEG}"),
        format_handler: FormatHandler::InfiRay,
        notes: None,
    },
    AppSegmentRule {
        name: "SEAL",
        signature: &[0x53, 0x45, 0x41, 0x4c, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::SEAL,
        notes: None,
    },
];

/// APP10 segment definitions
pub static APP10_SEGMENTS: &[AppSegmentRule] = &[
    AppSegmentRule {
        name: "Comment",
        signature: &[0x55, 0x4e, 0x49, 0x43, 0x4f, 0x44, 0x45, 0x00],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::Comment,
        notes: Some("PhotoStudio Unicode comment"),
    },
    AppSegmentRule {
        name: "HDRGainCurve",
        signature: &[0x41, 0x52, 0x4f, 0x54, 0x00, 0x00, 0x2e, 0x7b, 0x34, 0x7d],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::HDRGainCurve,
        notes: None,
    },
];

/// APP11 segment definitions
pub static APP11_SEGMENTS: &[AppSegmentRule] = &[
    AppSegmentRule {
        name: "JPEG-HDR",
        signature: &[0x48, 0x44, 0x52, 0x5f, 0x52, 0x49, 0x20],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::JpegHdr,
        notes: None,
    },
    AppSegmentRule {
        name: "JUMBF",
        signature: &[0x4a, 0x50],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::JUMBF,
        notes: None,
    },
];

/// APP12 segment definitions
pub static APP12_SEGMENTS: &[AppSegmentRule] = &[
    AppSegmentRule {
        name: "PictureInfo",
        signature: &[
            0x28, 0x5b, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f,
            0x5d, 0x7c, 0x54, 0x79, 0x70, 0x65, 0x3d, 0x29,
        ],
        condition_type: ConditionType::Regex(r"(\[picture info\]|Type=)"),
        format_handler: FormatHandler::PictureInfo,
        notes: None,
    },
    AppSegmentRule {
        name: "Ducky",
        signature: &[0x44, 0x75, 0x63, 0x6b, 0x79],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::Ducky,
        notes: None,
    },
];

/// APP13 segment definitions
pub static APP13_SEGMENTS: &[AppSegmentRule] = &[
    AppSegmentRule {
        name: "Photoshop",
        signature: &[
            0x28, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x68, 0x6f, 0x70, 0x20, 0x33, 0x2e, 0x30,
            0x00, 0x7c, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x5f, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73,
            0x68, 0x6f, 0x70, 0x32, 0x2e, 0x35, 0x29,
        ],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::Photoshop,
        notes: None,
    },
    AppSegmentRule {
        name: "Adobe_CM",
        signature: &[0x41, 0x64, 0x6f, 0x62, 0x65, 0x5f, 0x43, 0x4d],
        condition_type: ConditionType::StartsWith,
        format_handler: FormatHandler::AdobeCM,
        notes: None,
    },
];

/// APP14 segment definitions (empty)
pub static APP14_SEGMENTS: &[AppSegmentRule] = &[];

/// APP15 segment definitions (empty)
pub static APP15_SEGMENTS: &[AppSegmentRule] = &[];

/// JPEG trailer segment definitions (empty)
pub static TRAILER_SEGMENTS: &[AppSegmentRule] = &[];

/// Lookup table for all APP segments
pub static APP_SEGMENT_LOOKUP: &[&[AppSegmentRule]] = &[
    APP0_SEGMENTS,  // APP0
    APP1_SEGMENTS,  // APP1
    APP2_SEGMENTS,  // APP2
    APP3_SEGMENTS,  // APP3
    APP4_SEGMENTS,  // APP4
    APP5_SEGMENTS,  // APP5
    APP6_SEGMENTS,  // APP6
    APP7_SEGMENTS,  // APP7
    APP8_SEGMENTS,  // APP8
    APP9_SEGMENTS,  // APP9
    APP10_SEGMENTS, // APP10
    APP11_SEGMENTS, // APP11
    APP12_SEGMENTS, // APP12
    APP13_SEGMENTS, // APP13
    APP14_SEGMENTS, // APP14
    APP15_SEGMENTS, // APP15
];

/// Get APP segment rules for a specific segment type
pub fn get_app_segment_rules(segment: u8) -> Option<&'static [AppSegmentRule]> {
    if segment <= 15 {
        Some(APP_SEGMENT_LOOKUP[segment as usize])
    } else {
        None
    }
}

/// Identify APP segment format from data
pub fn identify_app_segment(segment: u8, data: &[u8]) -> Option<&'static AppSegmentRule> {
    let rules = get_app_segment_rules(segment)?;

    for rule in rules {
        match &rule.condition_type {
            ConditionType::StartsWith => {
                // Special handling for APP13 Photoshop
                if segment == 13 && rule.name == "Photoshop" {
                    // Check for either "Photoshop 3.0\0" or "Adobe_Photoshop2.5"
                    if data.starts_with(b"Photoshop 3.0\0")
                        || data.starts_with(b"Adobe_Photoshop2.5")
                    {
                        return Some(rule);
                    }
                } else if data.starts_with(rule.signature) {
                    return Some(rule);
                }
            }
            ConditionType::Contains => {
                if data
                    .windows(rule.signature.len())
                    .any(|w| w == rule.signature)
                {
                    return Some(rule);
                }
            }
            ConditionType::Regex(pattern) => {
                // Handle specific known regex patterns
                if pattern.contains(r"(\[picture info\]|Type=)") {
                    // APP12 PictureInfo pattern
                    if data
                        .windows(b"[picture info]".len())
                        .any(|w| w == b"[picture info]")
                        || data.windows(b"Type=".len()).any(|w| w == b"Type=")
                    {
                        return Some(rule);
                    }
                }
                // For other regex patterns, fall back to signature matching
                if !rule.signature.is_empty() && data.starts_with(rule.signature) {
                    return Some(rule);
                }
            }
            ConditionType::Custom(_) => {
                // TODO: Implement custom condition logic
                if !rule.signature.is_empty() && data.starts_with(rule.signature) {
                    return Some(rule);
                }
            }
        }
    }

    None
}

/// Get trailer segment rules
pub fn get_trailer_rules() -> &'static [AppSegmentRule] {
    TRAILER_SEGMENTS
}
