//! Auto-generated GPMF format definitions
//!
//! EXIFTOOL-SOURCE: lib/Image/ExifTool/GoPro.pm
//! EXIFTOOL-VERSION: 12.65
//!
//! This file is auto-generated by exiftool_sync extract gpmf-format.
//! Do not edit manually.

#![doc = "EXIFTOOL-SOURCE: lib/Image/ExifTool/GoPro.pm"]

use lazy_static::lazy_static;
use std::collections::HashMap;

/// GPMF data format types
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum GpmfFormat {
    /// int8s - 'b' - i8
    Int8s,
    /// int8u - 'B' - u8
    Int8u,
    /// string - 'c' - String
    String,
    /// int16s - 's' - i16
    Int16s,
    /// int16u - 'S' - u16
    Int16u,
    /// int32s - 'l' - i32
    Int32s,
    /// int32u - 'L' - u32
    Int32u,
    /// float - 'f' - f32
    Float,
    /// double - 'd' - f64
    Double,
    /// undef - 'F' - Vec<u8>
    Undef,
    /// undef - 'G' - Vec<u8>
    UndefG,
    /// int64s - 'j' - i64
    Int64s,
    /// int64u - 'J' - u64
    Int64u,
    /// fixed32s - 'q' - i32
    Fixed32s,
    /// fixed64s - 'Q' - i64
    Fixed64s,
    /// undef - 'U' - Vec<u8>
    UndefU,
    /// undef - '?' - Vec<u8>
    UndefQ,
}

lazy_static! {
    /// Map format codes to GpmfFormat variants
    pub static ref GPMF_FORMAT_MAP: HashMap<u8, GpmfFormat> = {
        let mut map = HashMap::new();
        map.insert(0x62, GpmfFormat::Int8s); // 'b'
        map.insert(0x42, GpmfFormat::Int8u); // 'B'
        map.insert(0x63, GpmfFormat::String); // 'c'
        map.insert(0x73, GpmfFormat::Int16s); // 's'
        map.insert(0x53, GpmfFormat::Int16u); // 'S'
        map.insert(0x6c, GpmfFormat::Int32s); // 'l'
        map.insert(0x4c, GpmfFormat::Int32u); // 'L'
        map.insert(0x66, GpmfFormat::Float); // 'f'
        map.insert(0x64, GpmfFormat::Double); // 'd'
        map.insert(0x46, GpmfFormat::Undef); // 'F'
        map.insert(0x47, GpmfFormat::UndefG); // 'G'
        map.insert(0x6a, GpmfFormat::Int64s); // 'j'
        map.insert(0x4a, GpmfFormat::Int64u); // 'J'
        map.insert(0x71, GpmfFormat::Fixed32s); // 'q'
        map.insert(0x51, GpmfFormat::Fixed64s); // 'Q'
        map.insert(0x55, GpmfFormat::UndefU); // 'U'
        map.insert(0x3f, GpmfFormat::UndefQ); // '?'
        map
    };

    /// Map format codes to custom sizes (when different from default)
    pub static ref GPMF_SIZE_MAP: HashMap<u8, usize> = {
        let mut map = HashMap::new();
        map.insert(0x46, 4); // 'F'
        map.insert(0x47, 16); // 'G'
        map.insert(0x55, 16); // 'U'
        map
    };
}

/// Get GPMF format from format code
pub fn get_gpmf_format(code: u8) -> Option<GpmfFormat> {
    GPMF_FORMAT_MAP.get(&code).copied()
}

/// Get custom size for format code (if different from default)
pub fn get_gpmf_size(code: u8) -> Option<usize> {
    GPMF_SIZE_MAP.get(&code).copied()
}

/// Get default size for a format type
pub fn get_default_format_size(format: GpmfFormat) -> usize {
    match format {
        GpmfFormat::Int8s => 1,
        GpmfFormat::Int8u => 1,
        GpmfFormat::String => 1,
        GpmfFormat::Int16s => 2,
        GpmfFormat::Int16u => 2,
        GpmfFormat::Int32s => 4,
        GpmfFormat::Int32u => 4,
        GpmfFormat::Float => 4,
        GpmfFormat::Double => 8,
        GpmfFormat::Undef => 1,
        GpmfFormat::UndefG => 1,
        GpmfFormat::Int64s => 8,
        GpmfFormat::Int64u => 8,
        GpmfFormat::Fixed32s => 4,
        GpmfFormat::Fixed64s => 8,
        GpmfFormat::UndefU => 1,
        GpmfFormat::UndefQ => 1,
    }
}

/// Total GPMF format codes: 17
pub const GPMF_FORMAT_COUNT: usize = 17;
