// AUTO-GENERATED by exiftool_sync extract maker-detection
// Source: third-party/exiftool/lib/Image/ExifTool/NIKON.pm
// Generated: 2025-06-24
// DO NOT EDIT - Regenerate with `cargo run --bin exiftool_sync extract maker-detection`

#![doc = "EXIFTOOL-SOURCE: lib/Image/ExifTool/NIKON.pm"]

/// Detection patterns for nikon maker notes
#[derive(Debug, Clone, PartialEq)]
pub struct NIKONDetectionResult {
    pub version: Option<u8>,
    pub ifd_offset: usize,
    pub description: String,
}

/// Detect nikon maker note format and extract version information
/// 
/// Returns Some(DetectionResult) if this appears to be a nikon maker note,
/// None otherwise.
pub fn detect_nikon_maker_note(data: &[u8]) -> Option<NIKONDetectionResult> {
    // Pattern from source line 0: Nikon Type 1 maker note
    if data.len() >= 7 && data.starts_with(&[0x4e, 0x69, 0x6b, 0x6f, 0x6e, 0x00, 0x01]) {
        return Some(NIKONDetectionResult {
            version: Some(1),
            ifd_offset: 8,
            description: "Nikon Type 1 maker note".to_string(),
        });
    }

    // Pattern from source line 0: Nikon Type 2 maker note
    if data.len() >= 7 && data.starts_with(&[0x4e, 0x69, 0x6b, 0x6f, 0x6e, 0x00, 0x02]) {
        return Some(NIKONDetectionResult {
            version: Some(2),
            ifd_offset: 10,
            description: "Nikon Type 2 maker note".to_string(),
        });
    }

    // Pattern from source line 0: Generic Nikon maker note
    if data.len() >= 5 && data.starts_with(&[0x4e, 0x69, 0x6b, 0x6f, 0x6e]) {
        return Some(NIKONDetectionResult {
            version: None,
            ifd_offset: 0,
            description: "Generic Nikon maker note".to_string(),
        });
    }

    None
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_nikon_detection_pattern_0() {
        let test_data = &[0x4e, 0x69, 0x6b, 0x6f, 0x6e, 0x00, 0x01];
        let result = detect_nikon_maker_note(test_data);
        assert!(result.is_some());
        let detection = result.unwrap();
        assert_eq!(detection.version, Some(1));
        assert_eq!(detection.ifd_offset, 8);
    }

    #[test]
    fn test_nikon_detection_pattern_1() {
        let test_data = &[0x4e, 0x69, 0x6b, 0x6f, 0x6e, 0x00, 0x02];
        let result = detect_nikon_maker_note(test_data);
        assert!(result.is_some());
        let detection = result.unwrap();
        assert_eq!(detection.version, Some(2));
        assert_eq!(detection.ifd_offset, 10);
    }

    #[test]
    fn test_nikon_detection_pattern_2() {
        let test_data = &[0x4e, 0x69, 0x6b, 0x6f, 0x6e];
        let result = detect_nikon_maker_note(test_data);
        assert!(result.is_some());
        let detection = result.unwrap();
        assert_eq!(detection.version, None);
        assert_eq!(detection.ifd_offset, 0);
    }

}
