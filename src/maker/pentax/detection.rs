// AUTO-GENERATED by exiftool_sync extract maker-detection
// Source: third-party/exiftool/lib/Image/ExifTool/PENTAX.pm
// Generated: 2025-06-24
// DO NOT EDIT - Regenerate with `cargo run --bin exiftool_sync extract maker-detection`

#![doc = "EXIFTOOL-SOURCE: lib/Image/ExifTool/PENTAX.pm"]

/// Detection patterns for pentax maker notes
#[derive(Debug, Clone, PartialEq)]
pub struct PENTAXDetectionResult {
    pub version: Option<u8>,
    pub ifd_offset: usize,
    pub description: String,
}

/// Detect pentax maker note format and extract version information
///
/// Returns Some(DetectionResult) if this appears to be a pentax maker note,
/// None otherwise.
pub fn detect_pentax_maker_note(data: &[u8]) -> Option<PENTAXDetectionResult> {
    // Pattern from source line 0: Pentax AOC maker note
    if data.len() >= 4 && data.starts_with(&[0x41, 0x4f, 0x43, 0x00]) {
        return Some(PENTAXDetectionResult {
            version: None,
            ifd_offset: 4,
            description: "Pentax AOC maker note".to_string(),
        });
    }

    // Pattern from source line 0: Pentax Type 1 maker note
    if data.len() >= 9 && data.starts_with(&[0x50, 0x45, 0x4e, 0x54, 0x41, 0x58, 0x20, 0x00, 0x01])
    {
        return Some(PENTAXDetectionResult {
            version: Some(1),
            ifd_offset: 10,
            description: "Pentax Type 1 maker note".to_string(),
        });
    }

    // Pattern from source line 0: Generic Pentax maker note
    if data.len() >= 6 && data.starts_with(&[0x50, 0x45, 0x4e, 0x54, 0x41, 0x58]) {
        return Some(PENTAXDetectionResult {
            version: None,
            ifd_offset: 0,
            description: "Generic Pentax maker note".to_string(),
        });
    }

    None
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_pentax_detection_pattern_0() {
        let test_data = &[0x41, 0x4f, 0x43, 0x00];
        let result = detect_pentax_maker_note(test_data);
        assert!(result.is_some());
        let detection = result.unwrap();
        assert_eq!(detection.version, None);
        assert_eq!(detection.ifd_offset, 4);
    }

    #[test]
    fn test_pentax_detection_pattern_1() {
        let test_data = &[0x50, 0x45, 0x4e, 0x54, 0x41, 0x58, 0x20, 0x00, 0x01];
        let result = detect_pentax_maker_note(test_data);
        assert!(result.is_some());
        let detection = result.unwrap();
        assert_eq!(detection.version, Some(1));
        assert_eq!(detection.ifd_offset, 10);
    }

    #[test]
    fn test_pentax_detection_pattern_2() {
        let test_data = &[0x50, 0x45, 0x4e, 0x54, 0x41, 0x58];
        let result = detect_pentax_maker_note(test_data);
        assert!(result.is_some());
        let detection = result.unwrap();
        assert_eq!(detection.version, None);
        assert_eq!(detection.ifd_offset, 0);
    }
}
