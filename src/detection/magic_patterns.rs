// AUTO-GENERATED by exiftool_sync extract magic-numbers
// Source: third-party/exiftool/lib/Image/ExifTool.pm
// Generated by exiftool_sync extract magic-numbers
// DO NOT EDIT - Regenerate with `cargo run --bin exiftool_sync extract magic-numbers`

#![doc = "EXIFTOOL-SOURCE: lib/Image/ExifTool.pm:912-1027"]

use regex::bytes::Regex;
use lazy_static::lazy_static;

/// Magic number pattern for file type detection
#[derive(Debug, Clone)]
pub struct MagicPattern {
    pub file_type: &'static str,
    pub pattern: &'static str,
    pub regex: &'static Regex,
    pub is_weak: bool,
}

lazy_static! {
    static ref REGEX_AA: Regex = Regex::new(r#"^.{4}\x{57}\x{90}\x{75}\x{36}"#).unwrap();
    static ref REGEX_AAC: Regex = Regex::new(r#"^\x{ff}[\x{f0}\x{f1}]"#).unwrap();
    static ref REGEX_AIFF: Regex = Regex::new(r#"^(FORM....AIF[FC]|AT&TFORM)"#).unwrap();
    static ref REGEX_APE: Regex = Regex::new(r#"^(MAC |APETAGEX|ID3)"#).unwrap();
    static ref REGEX_ASF: Regex = Regex::new(r#"^\x{30}\x{26}\x{b2}\x{75}\x{8e}\x{66}\x{cf}\x{11}\x{a6}\x{d9}\x{00}\x{aa}\x{00}\x{62}\x{ce}\x{6c}"#).unwrap();
    static ref REGEX_AVC: Regex = Regex::new(r#"^\+A\+V\+C\+"#).unwrap();
    static ref REGEX_TORRENT: Regex = Regex::new(r#"^d\d+:\w+"#).unwrap();
    static ref REGEX_BMP: Regex = Regex::new(r#"^BM"#).unwrap();
    static ref REGEX_BTF: Regex = Regex::new(r#"^(II\x{2b}\0|MM\0\x{2b})"#).unwrap();
    static ref REGEX_BZ2: Regex = Regex::new(r#"^BZh[1-9]\x{31}\x{41}\x{59}\x{26}\x{53}\x{59}"#).unwrap();
    static ref REGEX_CHM: Regex = Regex::new(r#"^ITSF.{20}\x{10}\x{fd}\x{01}\x{7c}\x{aa}\x{7b}\x{d0}\x{11}\x{9e}\x{0c}\0\x{a0}\x{c9}\x{22}\x{e6}\x{ec}"#).unwrap();
    static ref REGEX_CRW: Regex = Regex::new(r#"^(II|MM).{4}HEAP(CCDR|JPGM)"#).unwrap();
    static ref REGEX_CZI: Regex = Regex::new(r#"^ZISRAWFILE\0{6}"#).unwrap();
    static ref REGEX_DCX: Regex = Regex::new(r#"^\x{b1}\x{68}\x{de}\x{3a}"#).unwrap();
    static ref REGEX_DICOM: Regex = Regex::new(r#"^(.{128}DICM|\0[\x{02}\x{04}\x{06}\x{08}]\0[\0-\x{20}]|[\x{02}\x{04}\x{06}\x{08}]\0[\0-\x{20}]\0)"#).unwrap();
    static ref REGEX_DOCX: Regex = Regex::new(r#"^PK\x{03}\x{04}"#).unwrap();
    static ref REGEX_DPX: Regex = Regex::new(r#"^(SDPX|XPDS)"#).unwrap();
    static ref REGEX_DR4: Regex = Regex::new(r#"^IIII[\x{04}|\x{05}]\0\x{04}\0"#).unwrap();
    static ref REGEX_DSS: Regex = Regex::new(r#"^(\x{02}dss|\x{03}ds2)"#).unwrap();
    static ref REGEX_DV: Regex = Regex::new(r#"^\x{1f}\x{07}\0[\x{3f}\x{bf}]"#).unwrap();
    static ref REGEX_DWF: Regex = Regex::new(r#"^\(DWF V\d"#).unwrap();
    static ref REGEX_DWG: Regex = Regex::new(r#"^AC10\d{2}\0"#).unwrap();
    static ref REGEX_DXF: Regex = Regex::new(r#"^\s*0\s+\0?\s*SECTION\s+2\s+HEADER"#).unwrap();
    static ref REGEX_EPS: Regex = Regex::new(r#"^(%!PS|%!Ad|\x{c5}\x{d0}\x{d3}\x{c6})"#).unwrap();
    static ref REGEX_EXE: Regex = Regex::new(r#"^(MZ|\x{ca}\x{fe}\x{ba}\x{be}|\x{fe}\x{ed}\x{fa}[\x{ce}\x{cf}]|[\x{ce}\x{cf}]\x{fa}\x{ed}\x{fe}|Joy!peff|\x{7f}ELF|#!\s*/\S*bin/|!<arch>\x{0a})"#).unwrap();
    static ref REGEX_EXIF: Regex = Regex::new(r#"^(II\x{2a}\0|MM\0\x{2a})"#).unwrap();
    static ref REGEX_EXR: Regex = Regex::new(r#"^\x{76}\x{2f}\x{31}\x{01}"#).unwrap();
    static ref REGEX_EXV: Regex = Regex::new(r#"^\x{ff}\x{01}Exiv2"#).unwrap();
    static ref REGEX_FITS: Regex = Regex::new(r#"^SIMPLE  = {20}T"#).unwrap();
    static ref REGEX_FLAC: Regex = Regex::new(r#"^(fLaC|ID3)"#).unwrap();
    static ref REGEX_FLIF: Regex = Regex::new(r#"^FLIF[0-\x{6f}][0-2]"#).unwrap();
    static ref REGEX_FLIR: Regex = Regex::new(r#"^[AF]FF\0"#).unwrap();
    static ref REGEX_FLV: Regex = Regex::new(r#"^FLV\x{01}"#).unwrap();
    static ref REGEX_FONT: Regex = Regex::new(r#"^((\0\x{01}\0\0|OTTO|true|typ1)[\0\x{01}]|ttcf\0[\x{01}\x{02}]\0\0|\0[\x{01}\x{02}]|"#).unwrap();
    static ref REGEX_FPF: Regex = Regex::new(r#"^FPF Public Image Format\0"#).unwrap();
    static ref REGEX_FPX: Regex = Regex::new(r#"^\x{d0}\x{cf}\x{11}\x{e0}\x{a1}\x{b1}\x{1a}\x{e1}"#).unwrap();
    static ref REGEX_GIF: Regex = Regex::new(r#"^GIF8[79]a"#).unwrap();
    static ref REGEX_GZIP: Regex = Regex::new(r#"^\x{1f}\x{8b}\x{08}"#).unwrap();
    static ref REGEX_HDR: Regex = Regex::new(r#"^#\?(RADIANCE|RGBE)\x{0a}"#).unwrap();
    static ref REGEX_HTML: Regex = Regex::new(r#"^(\x{ef}\x{bb}\x{bf})?\s*(?i)<(!DOCTYPE\s+HTML|HTML|\?xml)"#).unwrap();
    static ref REGEX_ICC: Regex = Regex::new(r#"^.{12}(scnr|mntr|prtr|link|spac|abst|nmcl|nkpf|cenc|mid |mlnk|mvis)(XYZ |Lab |Luv |YCbr|Yxy |RGB |GRAY|HSV |HLS |CMYK|CMY |[2-9A-F]CLR|nc..|\0{4}){2}"#).unwrap();
    static ref REGEX_ICO: Regex = Regex::new(r#"^\0\0[\x{01}\x{02}]\0[^0]\0"#).unwrap();
    static ref REGEX_IND: Regex = Regex::new(r#"^\x{06}\x{06}\x{ed}\x{f5}\x{d8}\x{1d}\x{46}\x{e5}\x{bd}\x{31}\x{ef}\x{e7}\x{fe}\x{74}\x{b7}\x{1d}"#).unwrap();
    static ref REGEX_ITC: Regex = Regex::new(r#"^.{4}itch"#).unwrap();
    static ref REGEX_JP2: Regex = Regex::new(r#"^(\0\0\0\x{0c}jP(  |\x{1a}\x{1a})\x{0d}\x{0a}\x{87}\x{0a}|\x{ff}\x{4f}\x{ff}\x{51}\0)"#).unwrap();
    static ref REGEX_JPEG: Regex = Regex::new(r#"^\x{ff}\x{d8}\x{ff}"#).unwrap();
    static ref REGEX_JSON: Regex = Regex::new(r#"^(\x{ef}\x{bb}\x{bf})?\s*(\[\s*)?\{\s*"[^"]*"\s*:"#).unwrap();
    static ref REGEX_JUMBF: Regex = Regex::new(r#"^.{4}jumb\0.{3}jumd"#).unwrap();
    static ref REGEX_JXL: Regex = Regex::new(r#"^(\x{ff}\x{0a}|\0\0\0\x{0c}JXL \x{0d}\x{0a}......ftypjxl )"#).unwrap();
    static ref REGEX_LFP: Regex = Regex::new(r#"^\x{89}LFP\x{0d}\x{0a}\x{1a}\x{0a}"#).unwrap();
    static ref REGEX_LIF: Regex = Regex::new(r#"^\x{70}\0{3}.{4}\x{2a}.{4}<\0"#).unwrap();
    static ref REGEX_LNK: Regex = Regex::new(r#"^.{4}\x{01}\x{14}\x{02}\0{5}\x{c0}\0{6}\x{46}"#).unwrap();
    static ref REGEX_LRI: Regex = Regex::new(r#"^LELR \0"#).unwrap();
    static ref REGEX_M2TS: Regex = Regex::new(r#"^(....)?\x{47}"#).unwrap();
    static ref REGEX_MACOS: Regex = Regex::new(r#"^\0\x{05}\x{16}\x{07}\0.\0\0Mac OS X        "#).unwrap();
    static ref REGEX_MIE: Regex = Regex::new(r#"^~[\x{10}\x{18}]\x{04}.0MIE"#).unwrap();
    static ref REGEX_MIFF: Regex = Regex::new(r#"^id=ImageMagick"#).unwrap();
    static ref REGEX_MKV: Regex = Regex::new(r#"^\x{1a}\x{45}\x{df}\x{a3}"#).unwrap();
    static ref REGEX_MOV: Regex = Regex::new(r#"^.{4}(free|skip|wide|ftyp|pnot|PICT|pict|moov|mdat|junk|uuid)"#).unwrap();
    static ref REGEX_MPC: Regex = Regex::new(r#"^(MP\+|ID3)"#).unwrap();
    static ref REGEX_MOI: Regex = Regex::new(r#"^V6"#).unwrap();
    static ref REGEX_MPEG: Regex = Regex::new(r#"^\0\0\x{01}[\x{b0}-\x{bf}]"#).unwrap();
    static ref REGEX_MRC: Regex = Regex::new(r#"^.{64}[\x{01}\x{02}\x{03}]\0\0\0[\x{01}\x{02}\x{03}]\0\0\0[\x{01}\x{02}\x{03}]\0\0\0.{132}MAP[\0 ](\x{44}\x{44}|\x{44}\x{41}|\x{11}\x{11})\0\0"#).unwrap();
    static ref REGEX_MRW: Regex = Regex::new(r#"^\0MR[MI]"#).unwrap();
    static ref REGEX_MXF: Regex = Regex::new(r#"^\x{06}\x{0e}\x{2b}\x{34}\x{02}\x{05}\x{01}\x{01}\x{0d}\x{01}\x{02}"#).unwrap();
    static ref REGEX_NKA: Regex = Regex::new(r#"^NIKONADJ"#).unwrap();
    static ref REGEX_OGG: Regex = Regex::new(r#"^(OggS|ID3)"#).unwrap();
    static ref REGEX_ORF: Regex = Regex::new(r#"^(II|MM)"#).unwrap();
    static ref REGEX_PCAP: Regex = Regex::new(r#"^\x{a1}\x{b2}(\x{c3}\x{d4}|\x{3c}\x{4d})\0.\0.|(\x{d4}\x{c3}|\x{4d}\x{3c})\x{b2}\x{a1}.\0.\0|\x{0a}\x{0d}\x{0d}\x{0a}.{4}(\x{1a}\x{2b}\x{3c}\x{4d}|\x{4d}\x{3c}\x{2b}\x{1a})|GMBU\0\x{02}"#).unwrap();
    static ref REGEX_PCX: Regex = Regex::new(r#"^\x{0a}[\0-\x{05}]\x{01}[\x{01}\x{02}\x{04}\x{08}].{64}[\0-\x{02}]"#).unwrap();
    static ref REGEX_PDB: Regex = Regex::new(r#"^.{60}(\.pdfADBE|TEXtREAd|BVokBDIC|DB99DBOS|PNRdPPrs|DataPPrs|vIMGView|PmDBPmDB|InfoINDB|ToGoToGo|SDocSilX|JbDbJBas|JfDbJFil|DATALSdb|Mdb1Mdb1|BOOKMOBI|DataPlkr|DataSprd|SM01SMem|TEXtTlDc|InfoTlIf|DataTlMl|DataTlPt|dataTDBP|TdatTide|ToRaTRPW|zTXTGPlm|BDOCWrdS)"#).unwrap();
    static ref REGEX_PDF: Regex = Regex::new(r#"^\s*%PDF-\d+\.\d+"#).unwrap();
    static ref REGEX_PFM: Regex = Regex::new(r#"^P[Ff]\x{0a}\d+ \d+\x{0a}[-+0-9.]+\x{0a}"#).unwrap();
    static ref REGEX_PGF: Regex = Regex::new(r#"^PGF"#).unwrap();
    static ref REGEX_PHP: Regex = Regex::new(r#"^<\?php\s"#).unwrap();
    static ref REGEX_PICT: Regex = Regex::new(r#"^(.{10}|.{522})(\x{11}\x{01}|\x{00}\x{11})"#).unwrap();
    static ref REGEX_PLIST: Regex = Regex::new(r#"^(bplist0|\s*<|\x{fe}\x{ff}\x{00})"#).unwrap();
    static ref REGEX_PMP: Regex = Regex::new(r#"^.{8}\0{3}\x{7c}.{112}\x{ff}\x{d8}\x{ff}\x{db}"#).unwrap();
    static ref REGEX_PNG: Regex = Regex::new(r#"^(\x{89}P|\x{8a}M|\x{8b}J)NG\r\n\x{1a}\n"#).unwrap();
    static ref REGEX_PPM: Regex = Regex::new(r#"^P[1-6]\s+"#).unwrap();
    static ref REGEX_PS: Regex = Regex::new(r#"^(%!PS|%!Ad|\x{c5}\x{d0}\x{d3}\x{c6})"#).unwrap();
    static ref REGEX_PSD: Regex = Regex::new(r#"^8BPS\0[\x{01}\x{02}]"#).unwrap();
    static ref REGEX_PSP: Regex = Regex::new(r#"^Paint Shop Pro Image File\x{0a}\x{1a}\0{5}"#).unwrap();
    static ref REGEX_QTIF: Regex = Regex::new(r#"^.{4}(idsc|idat|iicc)"#).unwrap();
    static ref REGEX_R3D: Regex = Regex::new(r#"^\0\0..RED(1|2)"#).unwrap();
    static ref REGEX_RAF: Regex = Regex::new(r#"^FUJIFILM"#).unwrap();
    static ref REGEX_RAR: Regex = Regex::new(r#"^Rar!\x{1a}\x{07}\x{01}?\0"#).unwrap();
    static ref REGEX_RAW: Regex = Regex::new(r#"^(.{25}ARECOYK|II|MM)"#).unwrap();
    static ref REGEX_REAL: Regex = Regex::new(r#"^(\.RMF|\.ra\x{fd}|pnm://|rtsp://|http://)"#).unwrap();
    static ref REGEX_RIFF: Regex = Regex::new(r#"^(RIFF|LA0[234]|OFR |LPAC|wvpk|RF64)"#).unwrap();
    static ref REGEX_RSRC: Regex = Regex::new(r#"^(....)?\0\0\x{01}\0"#).unwrap();
    static ref REGEX_RTF: Regex = Regex::new(r#"^[\n\r]*\\{[\n\r]*\\\\rtf"#).unwrap();
    static ref REGEX_RWZ: Regex = Regex::new(r#"^rawzor"#).unwrap();
    static ref REGEX_SWF: Regex = Regex::new(r#"^[FC]WS[^\0]"#).unwrap();
    static ref REGEX_TAR: Regex = Regex::new(r#"^.{257}ustar(  )?\0"#).unwrap();
    static ref REGEX_TXT: Regex = Regex::new(r#"^(\x{ff}\x{fe}|(\0\0)?\x{fe}\x{ff}|(\x{ef}\x{bb}\x{bf})?[\x{07}-\x{0d}\x{20}-\x{7e}\x{80}-\x{fe}]*$)"#).unwrap();
    static ref REGEX_TIFF: Regex = Regex::new(r#"^(II|MM)"#).unwrap();
    static ref REGEX_VCARD: Regex = Regex::new(r#"^(?i)BEGIN:(VCARD|VCALENDAR|VNOTE)\r\n"#).unwrap();
    static ref REGEX_VRD: Regex = Regex::new(r#"^CANON OPTIONAL DATA\0"#).unwrap();
    static ref REGEX_WMF: Regex = Regex::new(r#"^(\x{d7}\x{cd}\x{c6}\x{9a}\0\0|\x{01}\0\x{09}\0\0\x{03})"#).unwrap();
    static ref REGEX_WPG: Regex = Regex::new(r#"^\x{ff}\x{57}\x{50}\x{43}"#).unwrap();
    static ref REGEX_WTV: Regex = Regex::new(r#"^\x{b7}\x{d8}\x{00}\x{20}\x{37}\x{49}\x{da}\x{11}\x{a6}\x{4e}\x{00}\x{07}\x{e9}\x{5e}\x{ad}\x{8d}"#).unwrap();
    static ref REGEX_X3F: Regex = Regex::new(r#"^FOVb"#).unwrap();
    static ref REGEX_XCF: Regex = Regex::new(r#"^gimp xcf "#).unwrap();
    static ref REGEX_XISF: Regex = Regex::new(r#"^XISF0100"#).unwrap();
    static ref REGEX_XMP: Regex = Regex::new(r#"^\0{0,3}(\x{fe}\x{ff}|\x{ff}\x{fe}|\x{ef}\x{bb}\x{bf})?\0{0,3}\s*<"#).unwrap();
    static ref REGEX_ZIP: Regex = Regex::new(r#"^PK\x{03}\x{04}"#).unwrap();
}

/// All magic number patterns
pub static MAGIC_PATTERNS: &[MagicPattern] = &[
    MagicPattern {
        file_type: "AA",
        pattern: r#".{4}\x57\x90\x75\x36"#,
        regex: &REGEX_AA,
        is_weak: false,
    },
    MagicPattern {
        file_type: "AAC",
        pattern: r#"\xff[\xf0\xf1]"#,
        regex: &REGEX_AAC,
        is_weak: false,
    },
    MagicPattern {
        file_type: "AIFF",
        pattern: r#"(FORM....AIF[FC]|AT&TFORM)"#,
        regex: &REGEX_AIFF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "APE",
        pattern: r#"(MAC |APETAGEX|ID3)"#,
        regex: &REGEX_APE,
        is_weak: false,
    },
    MagicPattern {
        file_type: "ASF",
        pattern: r#"\x30\x26\xb2\x75\x8e\x66\xcf\x11\xa6\xd9\x00\xaa\x00\x62\xce\x6c"#,
        regex: &REGEX_ASF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "AVC",
        pattern: r#"\+A\+V\+C\+"#,
        regex: &REGEX_AVC,
        is_weak: false,
    },
    MagicPattern {
        file_type: "Torrent",
        pattern: r#"d\d+:\w+"#,
        regex: &REGEX_TORRENT,
        is_weak: false,
    },
    MagicPattern {
        file_type: "BMP",
        pattern: r#"BM"#,
        regex: &REGEX_BMP,
        is_weak: false,
    },
    MagicPattern {
        file_type: "BTF",
        pattern: r#"(II\x2b\0|MM\0\x2b)"#,
        regex: &REGEX_BTF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "BZ2",
        pattern: r#"BZh[1-9]\x31\x41\x59\x26\x53\x59"#,
        regex: &REGEX_BZ2,
        is_weak: false,
    },
    MagicPattern {
        file_type: "CHM",
        pattern: r#"ITSF.{20}\x10\xfd\x01\x7c\xaa\x7b\xd0\x11\x9e\x0c\0\xa0\xc9\x22\xe6\xec"#,
        regex: &REGEX_CHM,
        is_weak: false,
    },
    MagicPattern {
        file_type: "CRW",
        pattern: r#"(II|MM).{4}HEAP(CCDR|JPGM)"#,
        regex: &REGEX_CRW,
        is_weak: false,
    },
    MagicPattern {
        file_type: "CZI",
        pattern: r#"ZISRAWFILE\0{6}"#,
        regex: &REGEX_CZI,
        is_weak: false,
    },
    MagicPattern {
        file_type: "DCX",
        pattern: r#"\xb1\x68\xde\x3a"#,
        regex: &REGEX_DCX,
        is_weak: false,
    },
    MagicPattern {
        file_type: "DICOM",
        pattern: r#"(.{128}DICM|\0[\x02\x04\x06\x08]\0[\0-\x20]|[\x02\x04\x06\x08]\0[\0-\x20]\0)"#,
        regex: &REGEX_DICOM,
        is_weak: false,
    },
    MagicPattern {
        file_type: "DOCX",
        pattern: r#"PK\x03\x04"#,
        regex: &REGEX_DOCX,
        is_weak: false,
    },
    MagicPattern {
        file_type: "DPX",
        pattern: r#"(SDPX|XPDS)"#,
        regex: &REGEX_DPX,
        is_weak: false,
    },
    MagicPattern {
        file_type: "DR4",
        pattern: r#"IIII[\x04|\x05]\0\x04\0"#,
        regex: &REGEX_DR4,
        is_weak: false,
    },
    MagicPattern {
        file_type: "DSS",
        pattern: r#"(\x02dss|\x03ds2)"#,
        regex: &REGEX_DSS,
        is_weak: false,
    },
    // (not tested if extension recognized)
    MagicPattern {
        file_type: "DV",
        pattern: r#"\x1f\x07\0[\x3f\xbf]"#,
        regex: &REGEX_DV,
        is_weak: false,
    },
    MagicPattern {
        file_type: "DWF",
        pattern: r#"\(DWF V\d"#,
        regex: &REGEX_DWF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "DWG",
        pattern: r#"AC10\d{2}\0"#,
        regex: &REGEX_DWG,
        is_weak: false,
    },
    MagicPattern {
        file_type: "DXF",
        pattern: r#"\s*0\s+\0?\s*SECTION\s+2\s+HEADER"#,
        regex: &REGEX_DXF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "EPS",
        pattern: r#"(%!PS|%!Ad|\xc5\xd0\xd3\xc6)"#,
        regex: &REGEX_EPS,
        is_weak: false,
    },
    // !\s*/\S*bin/|!<arch>\x0a)',
    MagicPattern {
        file_type: "EXE",
        pattern: r#"(MZ|\xca\xfe\xba\xbe|\xfe\xed\xfa[\xce\xcf]|[\xce\xcf]\xfa\xed\xfe|Joy!peff|\x7fELF|#!\s*/\S*bin/|!<arch>\x0a)"#,
        regex: &REGEX_EXE,
        is_weak: false,
    },
    MagicPattern {
        file_type: "EXIF",
        pattern: r#"(II\x2a\0|MM\0\x2a)"#,
        regex: &REGEX_EXIF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "EXR",
        pattern: r#"\x76\x2f\x31\x01"#,
        regex: &REGEX_EXR,
        is_weak: false,
    },
    MagicPattern {
        file_type: "EXV",
        pattern: r#"\xff\x01Exiv2"#,
        regex: &REGEX_EXV,
        is_weak: false,
    },
    MagicPattern {
        file_type: "FITS",
        pattern: r#"SIMPLE  = {20}T"#,
        regex: &REGEX_FITS,
        is_weak: false,
    },
    MagicPattern {
        file_type: "FLAC",
        pattern: r#"(fLaC|ID3)"#,
        regex: &REGEX_FLAC,
        is_weak: false,
    },
    MagicPattern {
        file_type: "FLIF",
        pattern: r#"FLIF[0-\x6f][0-2]"#,
        regex: &REGEX_FLIF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "FLIR",
        pattern: r#"[AF]FF\0"#,
        regex: &REGEX_FLIR,
        is_weak: false,
    },
    MagicPattern {
        file_type: "FLV",
        pattern: r#"FLV\x01"#,
        regex: &REGEX_FLV,
        is_weak: false,
    },
    MagicPattern {
        file_type: "Font",
        pattern: r#"((\0\x01\0\0|OTTO|true|typ1)[\0\x01]|ttcf\0[\x01\x02]\0\0|\0[\x01\x02]|"#,
        regex: &REGEX_FONT,
        is_weak: false,
    },
    MagicPattern {
        file_type: "FPF",
        pattern: r#"FPF Public Image Format\0"#,
        regex: &REGEX_FPF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "FPX",
        pattern: r#"\xd0\xcf\x11\xe0\xa1\xb1\x1a\xe1"#,
        regex: &REGEX_FPX,
        is_weak: false,
    },
    MagicPattern {
        file_type: "GIF",
        pattern: r#"GIF8[79]a"#,
        regex: &REGEX_GIF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "GZIP",
        pattern: r#"\x1f\x8b\x08"#,
        regex: &REGEX_GZIP,
        is_weak: false,
    },
    // \?(RADIANCE|RGBE)\x0a',
    MagicPattern {
        file_type: "HDR",
        pattern: r#"#\?(RADIANCE|RGBE)\x0a"#,
        regex: &REGEX_HDR,
        is_weak: false,
    },
    // (case insensitive)
    MagicPattern {
        file_type: "HTML",
        pattern: r#"(\xef\xbb\xbf)?\s*(?i)<(!DOCTYPE\s+HTML|HTML|\?xml)"#,
        regex: &REGEX_HTML,
        is_weak: false,
    },
    MagicPattern {
        file_type: "ICC",
        pattern: r#".{12}(scnr|mntr|prtr|link|spac|abst|nmcl|nkpf|cenc|mid |mlnk|mvis)(XYZ |Lab |Luv |YCbr|Yxy |RGB |GRAY|HSV |HLS |CMYK|CMY |[2-9A-F]CLR|nc..|\0{4}){2}"#,
        regex: &REGEX_ICC,
        is_weak: false,
    },
    // (reasonably assume that the file contains less than 256 images)
    MagicPattern {
        file_type: "ICO",
        pattern: r#"\0\0[\x01\x02]\0[^0]\0"#,
        regex: &REGEX_ICO,
        is_weak: false,
    },
    MagicPattern {
        file_type: "IND",
        pattern: r#"\x06\x06\xed\xf5\xd8\x1d\x46\xe5\xbd\x31\xef\xe7\xfe\x74\xb7\x1d"#,
        regex: &REGEX_IND,
        is_weak: false,
    },
    MagicPattern {
        file_type: "ITC",
        pattern: r#".{4}itch"#,
        regex: &REGEX_ITC,
        is_weak: false,
    },
    MagicPattern {
        file_type: "JP2",
        pattern: r#"(\0\0\0\x0cjP(  |\x1a\x1a)\x0d\x0a\x87\x0a|\xff\x4f\xff\x51\0)"#,
        regex: &REGEX_JP2,
        is_weak: false,
    },
    MagicPattern {
        file_type: "JPEG",
        pattern: r#"\xff\xd8\xff"#,
        regex: &REGEX_JPEG,
        is_weak: false,
    },
    MagicPattern {
        file_type: "JSON",
        pattern: r#"(\xef\xbb\xbf)?\s*(\[\s*)?\{\s*"[^"]*"\s*:"#,
        regex: &REGEX_JSON,
        is_weak: false,
    },
    MagicPattern {
        file_type: "JUMBF",
        pattern: r#".{4}jumb\0.{3}jumd"#,
        regex: &REGEX_JUMBF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "JXL",
        pattern: r#"(\xff\x0a|\0\0\0\x0cJXL \x0d\x0a......ftypjxl )"#,
        regex: &REGEX_JXL,
        is_weak: false,
    },
    MagicPattern {
        file_type: "LFP",
        pattern: r#"\x89LFP\x0d\x0a\x1a\x0a"#,
        regex: &REGEX_LFP,
        is_weak: false,
    },
    MagicPattern {
        file_type: "LIF",
        pattern: r#"\x70\0{3}.{4}\x2a.{4}<\0"#,
        regex: &REGEX_LIF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "LNK",
        pattern: r#".{4}\x01\x14\x02\0{5}\xc0\0{6}\x46"#,
        regex: &REGEX_LNK,
        is_weak: false,
    },
    MagicPattern {
        file_type: "LRI",
        pattern: r#"LELR \0"#,
        regex: &REGEX_LRI,
        is_weak: false,
    },
    MagicPattern {
        file_type: "M2TS",
        pattern: r#"(....)?\x47"#,
        regex: &REGEX_M2TS,
        is_weak: false,
    },
    MagicPattern {
        file_type: "MacOS",
        pattern: r#"\0\x05\x16\x07\0.\0\0Mac OS X        "#,
        regex: &REGEX_MACOS,
        is_weak: false,
    },
    MagicPattern {
        file_type: "MIE",
        pattern: r#"~[\x10\x18]\x04.0MIE"#,
        regex: &REGEX_MIE,
        is_weak: false,
    },
    MagicPattern {
        file_type: "MIFF",
        pattern: r#"id=ImageMagick"#,
        regex: &REGEX_MIFF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "MKV",
        pattern: r#"\x1a\x45\xdf\xa3"#,
        regex: &REGEX_MKV,
        is_weak: false,
    },
    // (duplicated in WriteQuickTime.pl !!)
    MagicPattern {
        file_type: "MOV",
        pattern: r#".{4}(free|skip|wide|ftyp|pnot|PICT|pict|moov|mdat|junk|uuid)"#,
        regex: &REGEX_MOV,
        is_weak: false,
    },
    MagicPattern {
        file_type: "MPC",
        pattern: r#"(MP\+|ID3)"#,
        regex: &REGEX_MPC,
        is_weak: false,
    },
    MagicPattern {
        file_type: "MOI",
        pattern: r#"V6"#,
        regex: &REGEX_MOI,
        is_weak: false,
    },
    MagicPattern {
        file_type: "MPEG",
        pattern: r#"\0\0\x01[\xb0-\xbf]"#,
        regex: &REGEX_MPEG,
        is_weak: false,
    },
    MagicPattern {
        file_type: "MRC",
        pattern: r#".{64}[\x01\x02\x03]\0\0\0[\x01\x02\x03]\0\0\0[\x01\x02\x03]\0\0\0.{132}MAP[\0 ](\x44\x44|\x44\x41|\x11\x11)\0\0"#,
        regex: &REGEX_MRC,
        is_weak: false,
    },
    MagicPattern {
        file_type: "MRW",
        pattern: r#"\0MR[MI]"#,
        regex: &REGEX_MRW,
        is_weak: false,
    },
    // (not tested if extension recognized)
    MagicPattern {
        file_type: "MXF",
        pattern: r#"\x06\x0e\x2b\x34\x02\x05\x01\x01\x0d\x01\x02"#,
        regex: &REGEX_MXF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "NKA",
        pattern: r#"NIKONADJ"#,
        regex: &REGEX_NKA,
        is_weak: false,
    },
    MagicPattern {
        file_type: "OGG",
        pattern: r#"(OggS|ID3)"#,
        regex: &REGEX_OGG,
        is_weak: false,
    },
    MagicPattern {
        file_type: "ORF",
        pattern: r#"(II|MM)"#,
        regex: &REGEX_ORF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "PCAP",
        pattern: r#"\xa1\xb2(\xc3\xd4|\x3c\x4d)\0.\0.|(\xd4\xc3|\x4d\x3c)\xb2\xa1.\0.\0|\x0a\x0d\x0d\x0a.{4}(\x1a\x2b\x3c\x4d|\x4d\x3c\x2b\x1a)|GMBU\0\x02"#,
        regex: &REGEX_PCAP,
        is_weak: false,
    },
    MagicPattern {
        file_type: "PCX",
        pattern: r#"\x0a[\0-\x05]\x01[\x01\x02\x04\x08].{64}[\0-\x02]"#,
        regex: &REGEX_PCX,
        is_weak: false,
    },
    MagicPattern {
        file_type: "PDB",
        pattern: r#".{60}(\.pdfADBE|TEXtREAd|BVokBDIC|DB99DBOS|PNRdPPrs|DataPPrs|vIMGView|PmDBPmDB|InfoINDB|ToGoToGo|SDocSilX|JbDbJBas|JfDbJFil|DATALSdb|Mdb1Mdb1|BOOKMOBI|DataPlkr|DataSprd|SM01SMem|TEXtTlDc|InfoTlIf|DataTlMl|DataTlPt|dataTDBP|TdatTide|ToRaTRPW|zTXTGPlm|BDOCWrdS)"#,
        regex: &REGEX_PDB,
        is_weak: false,
    },
    MagicPattern {
        file_type: "PDF",
        pattern: r#"\s*%PDF-\d+\.\d+"#,
        regex: &REGEX_PDF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "PFM",
        pattern: r#"P[Ff]\x0a\d+ \d+\x0a[-+0-9.]+\x0a"#,
        regex: &REGEX_PFM,
        is_weak: false,
    },
    MagicPattern {
        file_type: "PGF",
        pattern: r#"PGF"#,
        regex: &REGEX_PGF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "PHP",
        pattern: r#"<\?php\s"#,
        regex: &REGEX_PHP,
        is_weak: false,
    },
    MagicPattern {
        file_type: "PICT",
        pattern: r#"(.{10}|.{522})(\x11\x01|\x00\x11)"#,
        regex: &REGEX_PICT,
        is_weak: false,
    },
    MagicPattern {
        file_type: "PLIST",
        pattern: r#"(bplist0|\s*<|\xfe\xff\x00)"#,
        regex: &REGEX_PLIST,
        is_weak: false,
    },
    MagicPattern {
        file_type: "PMP",
        pattern: r#".{8}\0{3}\x7c.{112}\xff\xd8\xff\xdb"#,
        regex: &REGEX_PMP,
        is_weak: false,
    },
    MagicPattern {
        file_type: "PNG",
        pattern: r#"(\x89P|\x8aM|\x8bJ)NG\r\n\x1a\n"#,
        regex: &REGEX_PNG,
        is_weak: false,
    },
    MagicPattern {
        file_type: "PPM",
        pattern: r#"P[1-6]\s+"#,
        regex: &REGEX_PPM,
        is_weak: false,
    },
    MagicPattern {
        file_type: "PS",
        pattern: r#"(%!PS|%!Ad|\xc5\xd0\xd3\xc6)"#,
        regex: &REGEX_PS,
        is_weak: false,
    },
    MagicPattern {
        file_type: "PSD",
        pattern: r#"8BPS\0[\x01\x02]"#,
        regex: &REGEX_PSD,
        is_weak: false,
    },
    MagicPattern {
        file_type: "PSP",
        pattern: r#"Paint Shop Pro Image File\x0a\x1a\0{5}"#,
        regex: &REGEX_PSP,
        is_weak: false,
    },
    MagicPattern {
        file_type: "QTIF",
        pattern: r#".{4}(idsc|idat|iicc)"#,
        regex: &REGEX_QTIF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "R3D",
        pattern: r#"\0\0..RED(1|2)"#,
        regex: &REGEX_R3D,
        is_weak: false,
    },
    MagicPattern {
        file_type: "RAF",
        pattern: r#"FUJIFILM"#,
        regex: &REGEX_RAF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "RAR",
        pattern: r#"Rar!\x1a\x07\x01?\0"#,
        regex: &REGEX_RAR,
        is_weak: false,
    },
    MagicPattern {
        file_type: "RAW",
        pattern: r#"(.{25}ARECOYK|II|MM)"#,
        regex: &REGEX_RAW,
        is_weak: false,
    },
    MagicPattern {
        file_type: "Real",
        pattern: r#"(\.RMF|\.ra\xfd|pnm://|rtsp://|http://)"#,
        regex: &REGEX_REAL,
        is_weak: false,
    },
    // RIFF plus other variants
    MagicPattern {
        file_type: "RIFF",
        pattern: r#"(RIFF|LA0[234]|OFR |LPAC|wvpk|RF64)"#,
        regex: &REGEX_RIFF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "RSRC",
        pattern: r#"(....)?\0\0\x01\0"#,
        regex: &REGEX_RSRC,
        is_weak: false,
    },
    MagicPattern {
        file_type: "RTF",
        pattern: r#"[\n\r]*\\{[\n\r]*\\\\rtf"#,
        regex: &REGEX_RTF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "RWZ",
        pattern: r#"rawzor"#,
        regex: &REGEX_RWZ,
        is_weak: false,
    },
    MagicPattern {
        file_type: "SWF",
        pattern: r#"[FC]WS[^\0]"#,
        regex: &REGEX_SWF,
        is_weak: false,
    },
    // (this doesn't catch old-style tar files)
    MagicPattern {
        file_type: "TAR",
        pattern: r#".{257}ustar(  )?\0"#,
        regex: &REGEX_TAR,
        is_weak: false,
    },
    MagicPattern {
        file_type: "TXT",
        pattern: r#"(\xff\xfe|(\0\0)?\xfe\xff|(\xef\xbb\xbf)?[\x07-\x0d\x20-\x7e\x80-\xfe]*$)"#,
        regex: &REGEX_TXT,
        is_weak: false,
    },
    // don't test magic number (some raw formats are different)
    MagicPattern {
        file_type: "TIFF",
        pattern: r#"(II|MM)"#,
        regex: &REGEX_TIFF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "VCard",
        pattern: r#"(?i)BEGIN:(VCARD|VCALENDAR|VNOTE)\r\n"#,
        regex: &REGEX_VCARD,
        is_weak: false,
    },
    MagicPattern {
        file_type: "VRD",
        pattern: r#"CANON OPTIONAL DATA\0"#,
        regex: &REGEX_VRD,
        is_weak: false,
    },
    MagicPattern {
        file_type: "WMF",
        pattern: r#"(\xd7\xcd\xc6\x9a\0\0|\x01\0\x09\0\0\x03)"#,
        regex: &REGEX_WMF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "WPG",
        pattern: r#"\xff\x57\x50\x43"#,
        regex: &REGEX_WPG,
        is_weak: false,
    },
    MagicPattern {
        file_type: "WTV",
        pattern: r#"\xb7\xd8\x00\x20\x37\x49\xda\x11\xa6\x4e\x00\x07\xe9\x5e\xad\x8d"#,
        regex: &REGEX_WTV,
        is_weak: false,
    },
    MagicPattern {
        file_type: "X3F",
        pattern: r#"FOVb"#,
        regex: &REGEX_X3F,
        is_weak: false,
    },
    MagicPattern {
        file_type: "XCF",
        pattern: r#"gimp xcf "#,
        regex: &REGEX_XCF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "XISF",
        pattern: r#"XISF0100"#,
        regex: &REGEX_XISF,
        is_weak: false,
    },
    MagicPattern {
        file_type: "XMP",
        pattern: r#"\0{0,3}(\xfe\xff|\xff\xfe|\xef\xbb\xbf)?\0{0,3}\s*<"#,
        regex: &REGEX_XMP,
        is_weak: false,
    },
    MagicPattern {
        file_type: "ZIP",
        pattern: r#"PK\x03\x04"#,
        regex: &REGEX_ZIP,
        is_weak: false,
    },
];

/// Test length for magic number detection (from ExifTool.pm line 906)
pub const MAGIC_TEST_LENGTH: usize = 1024;

/// Detect file type from magic number
pub fn detect_file_type(data: &[u8]) -> Option<&'static str> {
    for pattern in MAGIC_PATTERNS {
        if pattern.regex.is_match(data) {
            return Some(pattern.file_type);
        }
    }
    None
}
