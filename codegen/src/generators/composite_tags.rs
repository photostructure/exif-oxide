//! Generator for composite tag definitions
use tracing::debug;

use anyhow::Result;
use std::fs;
use crate::schemas::GeneratedCompositeTag;
use crate::common::escape_string;

/// Generate composite tag table code
pub fn generate_composite_tag_table(tags: &[GeneratedCompositeTag], output_dir: &str) -> Result<()> {
    let mut code = String::new();

    // File header
    code.push_str("//! Generated composite tag definitions\n");
    code.push_str("//!\n");
    code.push_str("//! This file is automatically generated by codegen.\n");
    code.push_str("//! DO NOT EDIT MANUALLY - changes will be overwritten.\n\n");

    code.push_str("use std::collections::HashMap;\n");
    code.push_str("use std::sync::LazyLock;\n\n");

    // Composite tag structure
    code.push_str("#[derive(Debug, Clone)]\n");
    code.push_str("pub struct CompositeTagDef {\n");
    code.push_str("    pub name: &'static str,\n");
    code.push_str("    pub table: &'static str,\n");
    code.push_str("    pub require: &'static [&'static str],\n");
    code.push_str("    pub desire: &'static [&'static str],\n");
    code.push_str("    pub print_conv_ref: Option<&'static str>,\n");
    code.push_str("    pub value_conv_ref: Option<&'static str>,\n");
    code.push_str("    pub description: Option<&'static str>,\n");
    code.push_str("    pub writable: bool,\n");
    code.push_str("}\n\n");

    // Generate static array
    code.push_str("/// All supported composite tags\n");
    code.push_str("pub static COMPOSITE_TAGS: &[CompositeTagDef] = &[\n");

    for tag in tags {
        code.push_str("    CompositeTagDef {\n");
        code.push_str(&format!("        name: \"{}\",\n", escape_string(&tag.name)));
        code.push_str(&format!("        table: \"{}\",\n", escape_string(&tag.table)));
        
        // Require array
        code.push_str("        require: &[");
        for (i, req) in tag.require.iter().enumerate() {
            if i > 0 { code.push_str(", "); }
            code.push_str(&format!("\"{}\"", escape_string(req)));
        }
        code.push_str("],\n");
        
        // Desire array
        code.push_str("        desire: &[");
        for (i, des) in tag.desire.iter().enumerate() {
            if i > 0 { code.push_str(", "); }
            code.push_str(&format!("\"{}\"", escape_string(des)));
        }
        code.push_str("],\n");
        
        // Optional fields
        if let Some(ref print_conv) = tag.print_conv_ref {
            code.push_str(&format!("        print_conv_ref: Some(\"{}\"),\n", escape_string(print_conv)));
        } else {
            code.push_str("        print_conv_ref: None,\n");
        }
        
        if let Some(ref value_conv) = tag.value_conv_ref {
            code.push_str(&format!("        value_conv_ref: Some(\"{}\"),\n", escape_string(value_conv)));
        } else {
            code.push_str("        value_conv_ref: None,\n");
        }
        
        if let Some(ref desc) = tag.description {
            code.push_str(&format!("        description: Some(\"{}\"),\n", escape_string(desc)));
        } else {
            code.push_str("        description: None,\n");
        }
        
        code.push_str(&format!("        writable: {},\n", tag.writable));
        code.push_str("    },\n");
    }

    code.push_str("];\n\n");

    // Generate lookup hashmap
    code.push_str("/// Fast lookup of composite tags by name\n");
    code.push_str("pub static COMPOSITE_TAG_LOOKUP: LazyLock<HashMap<&'static str, &'static CompositeTagDef>> = LazyLock::new(|| {\n");
    code.push_str("    let mut map = HashMap::new();\n");
    code.push_str("    for tag in COMPOSITE_TAGS {\n");
    code.push_str("        map.insert(tag.name, tag);\n");
    code.push_str("    }\n");
    code.push_str("    map\n");
    code.push_str("});\n\n");

    // Lookup function
    code.push_str("/// Look up a composite tag by name\n");
    code.push_str("pub fn lookup_composite_tag(name: &str) -> Option<&'static CompositeTagDef> {\n");
    code.push_str("    COMPOSITE_TAG_LOOKUP.get(name).copied()\n");
    code.push_str("}\n");

    // Write file
    let output_path = format!("{}/composite_tags.rs", output_dir);
    fs::write(&output_path, code)?;
    debug!("  âœ“ Generated {}", output_path);

    Ok(())
}