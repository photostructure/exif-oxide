//! Generator for conversion reference lists

use anyhow::Result;
use std::fs;
use crate::schemas::ConversionRefs;
use crate::common::escape_string;

/// Generate conversion reference lists
pub fn generate_conversion_refs(refs: &ConversionRefs, output_dir: &str) -> Result<()> {
    let mut code = String::new();

    // File header
    code.push_str("//! Generated conversion reference lists\n");
    code.push_str("//!\n");
    code.push_str("//! This file is automatically generated by codegen.\n");
    code.push_str("//! DO NOT EDIT MANUALLY - changes will be overwritten.\n\n");

    code.push_str("use std::collections::HashSet;\n");
    code.push_str("use std::sync::LazyLock;\n\n");

    // Generate PrintConv references
    code.push_str("/// All unique PrintConv references found in tag definitions\n");
    code.push_str("pub static PRINT_CONV_REFS: LazyLock<HashSet<&'static str>> = LazyLock::new(|| {\n");
    code.push_str("    let mut set = HashSet::new();\n");
    
    for ref_name in &refs.print_conv {
        code.push_str(&format!("    set.insert(\"{}\");\n", escape_string(ref_name)));
    }
    
    code.push_str("    set\n");
    code.push_str("});\n\n");

    // Generate ValueConv references
    code.push_str("/// All unique ValueConv references found in tag definitions\n");
    code.push_str("pub static VALUE_CONV_REFS: LazyLock<HashSet<&'static str>> = LazyLock::new(|| {\n");
    code.push_str("    let mut set = HashSet::new();\n");
    
    for ref_name in &refs.value_conv {
        code.push_str(&format!("    set.insert(\"{}\");\n", escape_string(ref_name)));
    }
    
    code.push_str("    set\n");
    code.push_str("});\n\n");

    // Helper functions
    code.push_str("/// Check if a PrintConv reference exists\n");
    code.push_str("pub fn has_print_conv_ref(name: &str) -> bool {\n");
    code.push_str("    PRINT_CONV_REFS.contains(name)\n");
    code.push_str("}\n\n");

    code.push_str("/// Check if a ValueConv reference exists\n");
    code.push_str("pub fn has_value_conv_ref(name: &str) -> bool {\n");
    code.push_str("    VALUE_CONV_REFS.contains(name)\n");
    code.push_str("}\n\n");

    // Statistics
    code.push_str("/// Get statistics about conversion references\n");
    code.push_str("pub fn conversion_ref_stats() -> (usize, usize) {\n");
    code.push_str("    (PRINT_CONV_REFS.len(), VALUE_CONV_REFS.len())\n");
    code.push_str("}\n");

    // Write file
    let output_path = format!("{}/conversion_refs.rs", output_dir);
    fs::write(&output_path, code)?;
    println!("  âœ“ Generated {}", output_path);

    Ok(())
}