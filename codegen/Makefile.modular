# Modular Codegen Makefile
# Simplified build system - Rust now handles extraction orchestration internally

.PHONY: all clean generate-rust codegen codegen-flocked check-schemas check-extractors test clean-extract

# Output directories
GENERATED_DIR := generated
EXTRACT_DIR := $(GENERATED_DIR)/extract

# Default target
all: codegen

# Main codegen pipeline (Rust now handles everything including patch cleanup)

codegen: check-extractors
	@flock --exclusive --timeout=30 .make.flock $(MAKE) --no-print-directory -f Makefile.modular codegen-flocked

# We can't have codegen-flocked depend on `clean`, as that breaks concurrent builds. 
codegen-flocked: generate-rust

generate-rust:
	@RUST_LOG=warn cargo run --release --quiet ; ret=$$? ; \
	git -C ../third-party/exiftool checkout -- lib/Image/*.pm lib/Image/ExifTool/*.pm 2>/dev/null ; \
	sync ; \
	if [ $$ret -eq 0 ]; then \
		cd .. && cargo fmt -- src/generated/**/*.rs 2>/dev/null ; \
	fi ; \
	exit $$ret

# Clean generated files
clean:
	cargo clean
	@rm -f $(EXTRACT_DIR)/*.json
	@rm -rf ../src/generated/*

# Clean extract directory
clean-extract:
	@rm -f $(EXTRACT_DIR)/*.json

check-extractors:
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/boolean_set.pl >/dev/null 2>&1
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/composite_tags.pl >/dev/null 2>&1
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/file_type_lookup.pl >/dev/null 2>&1
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/regex_patterns.pl >/dev/null 2>&1
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/simple_array.pl >/dev/null 2>&1
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/simple_table.pl >/dev/null 2>&1
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/tag_tables.pl >/dev/null 2>&1

# Run codegen tests
test:
	cargo test --all
