# Modular Codegen Makefile
# This demonstrates the updated build system for parallel execution

.PHONY: all clean extract-perl generate-rust codegen parallel-extract check-schemas

# Output directories
GENERATED_DIR := generated
EXTRACT_DIR := $(GENERATED_DIR)/extract

# Perl extractor outputs
TAG_TABLES_JSON := $(GENERATED_DIR)/tag_tables.json
COMPOSITE_TAGS_JSON := $(GENERATED_DIR)/composite_tags.json
REGEX_PATTERNS_JSON := $(GENERATED_DIR)/regex_patterns.json
FILE_TYPE_LOOKUP_JSON := $(GENERATED_DIR)/file_type_lookup.json

# Individual extractors can run in parallel
EXTRACTOR_OUTPUTS := \
	$(TAG_TABLES_JSON) \
	$(COMPOSITE_TAGS_JSON) \
	$(REGEX_PATTERNS_JSON) \
	$(FILE_TYPE_LOOKUP_JSON)

# Extract data to individual files (now handled by Rust orchestration)

# Default target
all: codegen

# Main codegen pipeline (Rust now handles everything including patch cleanup)
codegen: check-schemas generate-rust
	@echo "✅ Code generation complete!"

# Create directories
$(GENERATED_DIR) $(EXTRACT_DIR):
	@mkdir -p $@

# Legacy targets (now handled by Rust orchestration)
# patch-exiftool and revert-exiftool-patches moved to Rust

# Legacy extraction targets (now handled by Rust orchestration)
extract-perl: $(GENERATED_DIR) $(EXTRACT_DIR) parallel-extract
	@echo "✅ All extraction complete"

# Run extractors in parallel (make -j4 will use 4 cores)
parallel-extract: $(EXTRACTOR_OUTPUTS)

# Individual extractor rules (simplified - only use extractors that don't depend on extract.json)
$(TAG_TABLES_JSON): extractors/tag_tables.pl
	@echo "📋 Extracting EXIF/GPS tags..."
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl $< > $@

$(COMPOSITE_TAGS_JSON): extractors/composite_tags.pl
	@echo "🔗 Extracting composite tags..."
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl $< > $@

# Note: regex_patterns.pl and file_type_lookup.pl disabled because they depend on extract.json
# Our simplified simple_table.pl handles these tables as simple lookups instead
$(REGEX_PATTERNS_JSON):
	@echo "🔍 Creating empty regex patterns file (handled by simplified extraction)..."
	@echo '{"extracted_at":"'$(shell date)'","patterns":{"file_extensions":[],"magic_numbers":[]},"compatibility_notes":"Handled by simplified simple_table.pl"}' > $@

$(FILE_TYPE_LOOKUP_JSON):
	@echo "📁 Creating empty file type lookup file (handled by simplified extraction)..."
	@echo '{"extracted_at":"'$(shell date)'","file_type_lookups":{"extensions":[],"mime_types":[],"descriptions":[],"magic_lookups":[]},"stats":{"total_lookups":0,"by_type":{}}}' > $@

# Legacy extraction targets - now handled by Rust orchestration
# These targets are kept for backwards compatibility but no longer used by the main pipeline

# Rust code generation (now includes extraction orchestration)
generate-rust: extract-perl
	@echo "🦀 Generating Rust code..."
	@cd . && cargo run --release

# Clean generated files
clean:
	@echo "🧹 Cleaning generated files..."
	@rm -f $(EXTRACTOR_OUTPUTS)
	@rm -f $(EXTRACT_DIR)/*.json
	@rm -rf ../src/generated/*

# Individual cleaning targets
clean-tags:
	@rm -f $(TAG_TABLES_JSON)

clean-extract:
	@rm -f $(EXTRACT_DIR)/*.json

# Incremental regeneration targets
regen-tags: clean-tags $(TAG_TABLES_JSON) generate-rust

regen-extract: clean-extract generate-rust

# Development helpers
check-schemas:
	@echo "🔍 Validating configuration schemas..."
	@cargo run --release 2>/dev/null | grep -q "Schema validation" || echo "Note: Schema validation via Rust code generation"

check-extractors:
	@echo "Checking Perl extractor syntax..."
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/tag_tables.pl
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/composite_tags.pl
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/regex_patterns.pl
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/file_type_lookup.pl
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/simple_table.pl

# Show what would be built
dry-run:
	@$(MAKE) -n codegen

# Parallel execution example
parallel-demo:
	@echo "Running parallel extraction with 4 jobs..."
	@$(MAKE) -j4 parallel-extract

# Help target
help:
	@echo "Modular Codegen Makefile"
	@echo "======================="
	@echo ""
	@echo "Targets:"
	@echo "  make              - Run full codegen pipeline"
	@echo "  make -j4          - Run with 4 parallel jobs"
	@echo "  make clean        - Clean all generated files"
	@echo "  make regen-tags   - Regenerate only tag tables"
	@echo "  make parallel-demo - Demo parallel extraction"
	@echo ""
	@echo "Individual extractors:"
	@echo "  make $(TAG_TABLES_JSON)"
	@echo "  make $(COMPOSITE_TAGS_JSON)"
	@echo ""
	@echo "The modular design allows:"
	@echo "  - Parallel execution of extractors"
	@echo "  - Incremental regeneration"
	@echo "  - Individual extractor testing"