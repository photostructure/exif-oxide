# Modular Codegen Makefile
# Simplified build system - Rust now handles extraction orchestration internally

.PHONY: all clean generate-rust codegen codegen-flocked check-schemas check-extractors test clean-extract

# Output directories
GENERATED_DIR := generated
EXTRACT_DIR := $(GENERATED_DIR)/extract

# Default target
all: codegen

# Main codegen pipeline (Rust now handles everything including patch cleanup)

codegen: check-schemas check-extractors
	flock --verbose --exclusive --timeout=30 .make.flock $(MAKE) -f Makefile.modular codegen-flocked

codegen-flocked: clean generate-rust

generate-rust:
	cargo run --release ; ret=$$? ; \
	echo "🔄 Reverting ExifTool module patches..." ; \
	git -C ../third-party/exiftool checkout -- lib/Image/*.pm lib/Image/ExifTool/*.pm ; \
	sync ; \
	echo "  ✓ ExifTool modules reverted to original state" ; \
	if [ $$ret -eq 0 ]; then \
		echo "🎨 Formatting generated code..." ; \
		cd .. && cargo fmt -- src/generated/**/*.rs ; \
		echo "  ✓ Generated code formatted" ; \
	fi ; \
	exit $$ret

# Clean generated files
clean:
	@echo "🧹 Cleaning generated files..."
	@rm -f $(EXTRACT_DIR)/*.json
	@rm -rf ../src/generated/*

# Clean extract directory
clean-extract:
	@rm -f $(EXTRACT_DIR)/*.json

# Development helpers
check-schemas:
	@echo "🔍 Validating configuration schemas..."
	@cargo run --release 2>/dev/null | grep -q "Schema validation" || echo "Note: Schema validation via Rust code generation"

check-extractors:
	@echo "Checking Perl extractor syntax..."
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/boolean_set.pl
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/composite_tags.pl
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/file_type_lookup.pl
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/regex_patterns.pl
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/simple_table.pl
	@eval $$(perl -I ~/perl5/lib/perl5/ -Mlocal::lib) && perl -c extractors/tag_tables.pl

# Run codegen tests
test:
	@echo "🧪 Running codegen tests..."
	@cargo test --all
